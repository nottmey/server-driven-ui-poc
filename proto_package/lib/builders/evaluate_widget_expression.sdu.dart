//
//  Generated. Do not modify.
//

import 'dart:core' as core;
import 'package:flutter/widgets.dart' as widgets;
import 'package:proto_package/proto/widgets.pb.dart' as proto;

import 'package:proto_package/builders/evaluate_type_expressions.sdu.dart' as types;

import 'package:flutter/src/cupertino/activity_indicator.dart' as $c0;
import 'package:flutter/src/cupertino/activity_indicator.dart' as $c1;
import 'package:flutter/src/cupertino/app.dart' as $c2;
import 'package:flutter/src/cupertino/app.dart' as $c3;
import 'package:flutter/src/cupertino/button.dart' as $c4;
import 'package:flutter/src/cupertino/button.dart' as $c5;
import 'package:flutter/src/cupertino/checkbox.dart' as $c6;
import 'package:flutter/src/cupertino/context_menu.dart' as $c7;
import 'package:flutter/src/cupertino/context_menu_action.dart' as $c8;
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar_button.dart' as $c9;
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar_button.dart' as $c10;
import 'package:flutter/src/cupertino/dialog.dart' as $c11;
import 'package:flutter/src/cupertino/dialog.dart' as $c12;
import 'package:flutter/src/cupertino/dialog.dart' as $c13;
import 'package:flutter/src/cupertino/dialog.dart' as $c14;
import 'package:flutter/src/cupertino/form_row.dart' as $c15;
import 'package:flutter/src/cupertino/form_section.dart' as $c16;
import 'package:flutter/src/cupertino/form_section.dart' as $c17;
import 'package:flutter/src/cupertino/list_section.dart' as $c18;
import 'package:flutter/src/cupertino/list_section.dart' as $c19;
import 'package:flutter/src/cupertino/list_tile.dart' as $c20;
import 'package:flutter/src/cupertino/list_tile.dart' as $c21;
import 'package:flutter/src/cupertino/list_tile.dart' as $c22;
import 'package:flutter/src/cupertino/magnifier.dart' as $c23;
import 'package:flutter/src/cupertino/nav_bar.dart' as $c24;
import 'package:flutter/src/cupertino/nav_bar.dart' as $c25;
import 'package:flutter/src/cupertino/nav_bar.dart' as $c26;
import 'package:flutter/src/cupertino/page_scaffold.dart' as $c27;
import 'package:flutter/src/cupertino/picker.dart' as $c28;
import 'package:flutter/src/cupertino/picker.dart' as $c29;
import 'package:flutter/src/cupertino/refresh.dart' as $c30;
import 'package:flutter/src/cupertino/scrollbar.dart' as $c31;
import 'package:flutter/src/cupertino/search_field.dart' as $c32;
import 'package:flutter/src/cupertino/slider.dart' as $c33;
import 'package:flutter/src/cupertino/switch.dart' as $c34;
import 'package:flutter/src/cupertino/tab_view.dart' as $c35;
import 'package:flutter/src/cupertino/text_field.dart' as $c36;
import 'package:flutter/src/cupertino/text_field.dart' as $c37;
import 'package:flutter/src/cupertino/text_form_field_row.dart' as $c38;
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart' as $c39;
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart' as $c40;
import 'package:flutter/src/material/about.dart' as $c41;
import 'package:flutter/src/material/about.dart' as $c42;
import 'package:flutter/src/material/about.dart' as $c43;
import 'package:flutter/src/material/action_buttons.dart' as $c44;
import 'package:flutter/src/material/action_buttons.dart' as $c45;
import 'package:flutter/src/material/action_buttons.dart' as $c46;
import 'package:flutter/src/material/action_buttons.dart' as $c47;
import 'package:flutter/src/material/action_buttons.dart' as $c48;
import 'package:flutter/src/material/action_buttons.dart' as $c49;
import 'package:flutter/src/material/action_buttons.dart' as $c50;
import 'package:flutter/src/material/action_buttons.dart' as $c51;
import 'package:flutter/src/material/action_chip.dart' as $c52;
import 'package:flutter/src/material/action_chip.dart' as $c53;
import 'package:flutter/src/material/app.dart' as $c54;
import 'package:flutter/src/material/app.dart' as $c55;
import 'package:flutter/src/material/app_bar.dart' as $c56;
import 'package:flutter/src/material/app_bar.dart' as $c57;
import 'package:flutter/src/material/app_bar.dart' as $c58;
import 'package:flutter/src/material/app_bar.dart' as $c59;
import 'package:flutter/src/material/badge.dart' as $c60;
import 'package:flutter/src/material/badge.dart' as $c61;
import 'package:flutter/src/material/banner.dart' as $c62;
import 'package:flutter/src/material/banner_theme.dart' as $c63;
import 'package:flutter/src/material/bottom_app_bar.dart' as $c64;
import 'package:flutter/src/material/button.dart' as $c65;
import 'package:flutter/src/material/button_bar.dart' as $c66;
import 'package:flutter/src/material/button_theme.dart' as $c67;
import 'package:flutter/src/material/card.dart' as $c68;
import 'package:flutter/src/material/checkbox.dart' as $c69;
import 'package:flutter/src/material/checkbox.dart' as $c70;
import 'package:flutter/src/material/checkbox_list_tile.dart' as $c71;
import 'package:flutter/src/material/checkbox_list_tile.dart' as $c72;
import 'package:flutter/src/material/chip.dart' as $c73;
import 'package:flutter/src/material/chip.dart' as $c74;
import 'package:flutter/src/material/choice_chip.dart' as $c75;
import 'package:flutter/src/material/choice_chip.dart' as $c76;
import 'package:flutter/src/material/circle_avatar.dart' as $c77;
import 'package:flutter/src/material/data_table.dart' as $c78;
import 'package:flutter/src/material/desktop_text_selection_toolbar_button.dart' as $c79;
import 'package:flutter/src/material/dialog.dart' as $c80;
import 'package:flutter/src/material/dialog.dart' as $c81;
import 'package:flutter/src/material/dialog.dart' as $c82;
import 'package:flutter/src/material/dialog.dart' as $c83;
import 'package:flutter/src/material/dialog.dart' as $c84;
import 'package:flutter/src/material/dialog.dart' as $c85;
import 'package:flutter/src/material/divider.dart' as $c86;
import 'package:flutter/src/material/divider.dart' as $c87;
import 'package:flutter/src/material/drawer.dart' as $c88;
import 'package:flutter/src/material/drawer_header.dart' as $c89;
import 'package:flutter/src/material/dropdown.dart' as $c90;
import 'package:flutter/src/material/dropdown.dart' as $c91;
import 'package:flutter/src/material/dropdown.dart' as $c92;
import 'package:flutter/src/material/dropdown.dart' as $c93;
import 'package:flutter/src/material/elevated_button.dart' as $c94;
import 'package:flutter/src/material/elevated_button.dart' as $c95;
import 'package:flutter/src/material/expand_icon.dart' as $c96;
import 'package:flutter/src/material/expansion_panel.dart' as $c97;
import 'package:flutter/src/material/expansion_panel.dart' as $c98;
import 'package:flutter/src/material/expansion_tile.dart' as $c99;
import 'package:flutter/src/material/filled_button.dart' as $c100;
import 'package:flutter/src/material/filled_button.dart' as $c101;
import 'package:flutter/src/material/filled_button.dart' as $c102;
import 'package:flutter/src/material/filled_button.dart' as $c103;
import 'package:flutter/src/material/filter_chip.dart' as $c104;
import 'package:flutter/src/material/filter_chip.dart' as $c105;
import 'package:flutter/src/material/flexible_space_bar.dart' as $c106;
import 'package:flutter/src/material/flexible_space_bar.dart' as $c107;
import 'package:flutter/src/material/floating_action_button.dart' as $c108;
import 'package:flutter/src/material/floating_action_button.dart' as $c109;
import 'package:flutter/src/material/floating_action_button.dart' as $c110;
import 'package:flutter/src/material/floating_action_button.dart' as $c111;
import 'package:flutter/src/material/flutter_logo.dart' as $c112;
import 'package:flutter/src/material/grid_tile.dart' as $c113;
import 'package:flutter/src/material/grid_tile_bar.dart' as $c114;
import 'package:flutter/src/material/icon_button.dart' as $c115;
import 'package:flutter/src/material/icon_button.dart' as $c116;
import 'package:flutter/src/material/icon_button.dart' as $c117;
import 'package:flutter/src/material/icon_button.dart' as $c118;
import 'package:flutter/src/material/ink_decoration.dart' as $c119;
import 'package:flutter/src/material/ink_well.dart' as $c120;
import 'package:flutter/src/material/ink_well.dart' as $c121;
import 'package:flutter/src/material/input_chip.dart' as $c122;
import 'package:flutter/src/material/list_tile.dart' as $c123;
import 'package:flutter/src/material/list_tile_theme.dart' as $c124;
import 'package:flutter/src/material/magnifier.dart' as $c125;
import 'package:flutter/src/material/material.dart' as $c126;
import 'package:flutter/src/material/material_button.dart' as $c127;
import 'package:flutter/src/material/menu_anchor.dart' as $c128;
import 'package:flutter/src/material/menu_anchor.dart' as $c129;
import 'package:flutter/src/material/menu_anchor.dart' as $c130;
import 'package:flutter/src/material/menu_anchor.dart' as $c131;
import 'package:flutter/src/material/menu_anchor.dart' as $c132;
import 'package:flutter/src/material/menu_anchor.dart' as $c133;
import 'package:flutter/src/material/menu_anchor.dart' as $c134;
import 'package:flutter/src/material/mergeable_material.dart' as $c135;
import 'package:flutter/src/material/navigation_bar.dart' as $c136;
import 'package:flutter/src/material/navigation_bar.dart' as $c137;
import 'package:flutter/src/material/navigation_drawer.dart' as $c138;
import 'package:flutter/src/material/navigation_drawer.dart' as $c139;
import 'package:flutter/src/material/outlined_button.dart' as $c140;
import 'package:flutter/src/material/outlined_button.dart' as $c141;
import 'package:flutter/src/material/popup_menu.dart' as $c142;
import 'package:flutter/src/material/popup_menu.dart' as $c143;
import 'package:flutter/src/material/popup_menu.dart' as $c144;
import 'package:flutter/src/material/progress_indicator.dart' as $c145;
import 'package:flutter/src/material/progress_indicator.dart' as $c146;
import 'package:flutter/src/material/progress_indicator.dart' as $c147;
import 'package:flutter/src/material/progress_indicator.dart' as $c148;
import 'package:flutter/src/material/scaffold.dart' as $c149;
import 'package:flutter/src/material/scaffold.dart' as $c150;
import 'package:flutter/src/material/scrollbar.dart' as $c151;
import 'package:flutter/src/material/search_anchor.dart' as $c152;
import 'package:flutter/src/material/selectable_text.dart' as $c153;
import 'package:flutter/src/material/selection_area.dart' as $c154;
import 'package:flutter/src/material/slider.dart' as $c155;
import 'package:flutter/src/material/slider.dart' as $c156;
import 'package:flutter/src/material/snack_bar.dart' as $c157;
import 'package:flutter/src/material/switch.dart' as $c158;
import 'package:flutter/src/material/switch.dart' as $c159;
import 'package:flutter/src/material/switch_list_tile.dart' as $c160;
import 'package:flutter/src/material/switch_list_tile.dart' as $c161;
import 'package:flutter/src/material/tab_controller.dart' as $c162;
import 'package:flutter/src/material/tabs.dart' as $c163;
import 'package:flutter/src/material/tabs.dart' as $c164;
import 'package:flutter/src/material/tabs.dart' as $c165;
import 'package:flutter/src/material/tabs.dart' as $c166;
import 'package:flutter/src/material/tabs.dart' as $c167;
import 'package:flutter/src/material/text_button.dart' as $c168;
import 'package:flutter/src/material/text_button.dart' as $c169;
import 'package:flutter/src/material/text_field.dart' as $c170;
import 'package:flutter/src/material/text_form_field.dart' as $c171;
import 'package:flutter/src/material/toggle_buttons.dart' as $c172;
import 'package:flutter/src/material/tooltip.dart' as $c173;
import 'package:flutter/src/material/tooltip_visibility.dart' as $c174;
import 'package:flutter/src/material/user_accounts_drawer_header.dart' as $c175;
import 'package:flutter/src/widgets/_platform_selectable_region_context_menu_io.dart' as $c176;
import 'package:flutter/src/widgets/actions.dart' as $c177;
import 'package:flutter/src/widgets/animated_size.dart' as $c178;
import 'package:flutter/src/widgets/animated_switcher.dart' as $c179;
import 'package:flutter/src/widgets/autofill.dart' as $c180;
import 'package:flutter/src/widgets/automatic_keep_alive.dart' as $c181;
import 'package:flutter/src/widgets/banner.dart' as $c182;
import 'package:flutter/src/widgets/basic.dart' as $c183;
import 'package:flutter/src/widgets/basic.dart' as $c184;
import 'package:flutter/src/widgets/basic.dart' as $c185;
import 'package:flutter/src/widgets/basic.dart' as $c186;
import 'package:flutter/src/widgets/basic.dart' as $c187;
import 'package:flutter/src/widgets/basic.dart' as $c188;
import 'package:flutter/src/widgets/basic.dart' as $c189;
import 'package:flutter/src/widgets/basic.dart' as $c190;
import 'package:flutter/src/widgets/basic.dart' as $c191;
import 'package:flutter/src/widgets/basic.dart' as $c192;
import 'package:flutter/src/widgets/basic.dart' as $c193;
import 'package:flutter/src/widgets/basic.dart' as $c194;
import 'package:flutter/src/widgets/basic.dart' as $c195;
import 'package:flutter/src/widgets/basic.dart' as $c196;
import 'package:flutter/src/widgets/basic.dart' as $c197;
import 'package:flutter/src/widgets/basic.dart' as $c198;
import 'package:flutter/src/widgets/basic.dart' as $c199;
import 'package:flutter/src/widgets/basic.dart' as $c200;
import 'package:flutter/src/widgets/basic.dart' as $c201;
import 'package:flutter/src/widgets/basic.dart' as $c202;
import 'package:flutter/src/widgets/basic.dart' as $c203;
import 'package:flutter/src/widgets/basic.dart' as $c204;
import 'package:flutter/src/widgets/basic.dart' as $c205;
import 'package:flutter/src/widgets/basic.dart' as $c206;
import 'package:flutter/src/widgets/basic.dart' as $c207;
import 'package:flutter/src/widgets/basic.dart' as $c208;
import 'package:flutter/src/widgets/basic.dart' as $c209;
import 'package:flutter/src/widgets/basic.dart' as $c210;
import 'package:flutter/src/widgets/basic.dart' as $c211;
import 'package:flutter/src/widgets/basic.dart' as $c212;
import 'package:flutter/src/widgets/basic.dart' as $c213;
import 'package:flutter/src/widgets/basic.dart' as $c214;
import 'package:flutter/src/widgets/basic.dart' as $c215;
import 'package:flutter/src/widgets/basic.dart' as $c216;
import 'package:flutter/src/widgets/basic.dart' as $c217;
import 'package:flutter/src/widgets/basic.dart' as $c218;
import 'package:flutter/src/widgets/basic.dart' as $c219;
import 'package:flutter/src/widgets/basic.dart' as $c220;
import 'package:flutter/src/widgets/basic.dart' as $c221;
import 'package:flutter/src/widgets/basic.dart' as $c222;
import 'package:flutter/src/widgets/basic.dart' as $c223;
import 'package:flutter/src/widgets/basic.dart' as $c224;
import 'package:flutter/src/widgets/basic.dart' as $c225;
import 'package:flutter/src/widgets/basic.dart' as $c226;
import 'package:flutter/src/widgets/basic.dart' as $c227;
import 'package:flutter/src/widgets/basic.dart' as $c228;
import 'package:flutter/src/widgets/basic.dart' as $c229;
import 'package:flutter/src/widgets/basic.dart' as $c230;
import 'package:flutter/src/widgets/basic.dart' as $c231;
import 'package:flutter/src/widgets/basic.dart' as $c232;
import 'package:flutter/src/widgets/basic.dart' as $c233;
import 'package:flutter/src/widgets/basic.dart' as $c234;
import 'package:flutter/src/widgets/basic.dart' as $c235;
import 'package:flutter/src/widgets/container.dart' as $c236;
import 'package:flutter/src/widgets/default_selection_style.dart' as $c237;
import 'package:flutter/src/widgets/default_selection_style.dart' as $c238;
import 'package:flutter/src/widgets/default_text_editing_shortcuts.dart' as $c239;
import 'package:flutter/src/widgets/dismissible.dart' as $c240;
import 'package:flutter/src/widgets/display_feature_sub_screen.dart' as $c241;
import 'package:flutter/src/widgets/drag_target.dart' as $c242;
import 'package:flutter/src/widgets/drag_target.dart' as $c243;
import 'package:flutter/src/widgets/draggable_scrollable_sheet.dart' as $c244;
import 'package:flutter/src/widgets/fade_in_image.dart' as $c245;
import 'package:flutter/src/widgets/focus_scope.dart' as $c246;
import 'package:flutter/src/widgets/focus_scope.dart' as $c247;
import 'package:flutter/src/widgets/focus_scope.dart' as $c248;
import 'package:flutter/src/widgets/focus_traversal.dart' as $c249;
import 'package:flutter/src/widgets/focus_traversal.dart' as $c250;
import 'package:flutter/src/widgets/form.dart' as $c251;
import 'package:flutter/src/widgets/framework.dart' as $c252;
import 'package:flutter/src/widgets/gesture_detector.dart' as $c253;
import 'package:flutter/src/widgets/gesture_detector.dart' as $c254;
import 'package:flutter/src/widgets/grid_paper.dart' as $c255;
import 'package:flutter/src/widgets/heroes.dart' as $c256;
import 'package:flutter/src/widgets/icon.dart' as $c257;
import 'package:flutter/src/widgets/image.dart' as $c258;
import 'package:flutter/src/widgets/image.dart' as $c259;
import 'package:flutter/src/widgets/image_icon.dart' as $c260;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c261;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c262;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c263;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c264;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c265;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c266;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c267;
import 'package:flutter/src/widgets/implicit_animations.dart' as $c268;
import 'package:flutter/src/widgets/interactive_viewer.dart' as $c269;
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart' as $c270;
import 'package:flutter/src/widgets/lookup_boundary.dart' as $c271;
import 'package:flutter/src/widgets/modal_barrier.dart' as $c272;
import 'package:flutter/src/widgets/navigation_toolbar.dart' as $c273;
import 'package:flutter/src/widgets/navigator.dart' as $c274;
import 'package:flutter/src/widgets/navigator.dart' as $c275;
import 'package:flutter/src/widgets/notification_listener.dart' as $c276;
import 'package:flutter/src/widgets/overflow_bar.dart' as $c277;
import 'package:flutter/src/widgets/overlay.dart' as $c278;
import 'package:flutter/src/widgets/page_view.dart' as $c279;
import 'package:flutter/src/widgets/performance_overlay.dart' as $c280;
import 'package:flutter/src/widgets/performance_overlay.dart' as $c281;
import 'package:flutter/src/widgets/placeholder.dart' as $c282;
import 'package:flutter/src/widgets/platform_view.dart' as $c283;
import 'package:flutter/src/widgets/platform_view.dart' as $c284;
import 'package:flutter/src/widgets/platform_view.dart' as $c285;
import 'package:flutter/src/widgets/primary_scroll_controller.dart' as $c286;
import 'package:flutter/src/widgets/reorderable_list.dart' as $c287;
import 'package:flutter/src/widgets/reorderable_list.dart' as $c288;
import 'package:flutter/src/widgets/restoration.dart' as $c289;
import 'package:flutter/src/widgets/restoration.dart' as $c290;
import 'package:flutter/src/widgets/restoration.dart' as $c291;
import 'package:flutter/src/widgets/safe_area.dart' as $c292;
import 'package:flutter/src/widgets/safe_area.dart' as $c293;
import 'package:flutter/src/widgets/scroll_notification_observer.dart' as $c294;
import 'package:flutter/src/widgets/scroll_view.dart' as $c295;
import 'package:flutter/src/widgets/scroll_view.dart' as $c296;
import 'package:flutter/src/widgets/scroll_view.dart' as $c297;
import 'package:flutter/src/widgets/scroll_view.dart' as $c298;
import 'package:flutter/src/widgets/scrollbar.dart' as $c299;
import 'package:flutter/src/widgets/selection_container.dart' as $c300;
import 'package:flutter/src/widgets/semantics_debugger.dart' as $c301;
import 'package:flutter/src/widgets/shared_app_data.dart' as $c302;
import 'package:flutter/src/widgets/shortcuts.dart' as $c303;
import 'package:flutter/src/widgets/single_child_scroll_view.dart' as $c304;
import 'package:flutter/src/widgets/size_changed_layout_notifier.dart' as $c305;
import 'package:flutter/src/widgets/sliver.dart' as $c306;
import 'package:flutter/src/widgets/sliver.dart' as $c307;
import 'package:flutter/src/widgets/sliver.dart' as $c308;
import 'package:flutter/src/widgets/sliver.dart' as $c309;
import 'package:flutter/src/widgets/sliver.dart' as $c310;
import 'package:flutter/src/widgets/sliver.dart' as $c311;
import 'package:flutter/src/widgets/sliver.dart' as $c312;
import 'package:flutter/src/widgets/sliver.dart' as $c313;
import 'package:flutter/src/widgets/sliver.dart' as $c314;
import 'package:flutter/src/widgets/sliver.dart' as $c315;
import 'package:flutter/src/widgets/sliver.dart' as $c316;
import 'package:flutter/src/widgets/sliver.dart' as $c317;
import 'package:flutter/src/widgets/sliver_fill.dart' as $c318;
import 'package:flutter/src/widgets/sliver_prototype_extent_list.dart' as $c319;
import 'package:flutter/src/widgets/spacer.dart' as $c320;
import 'package:flutter/src/widgets/table.dart' as $c321;
import 'package:flutter/src/widgets/table.dart' as $c322;
import 'package:flutter/src/widgets/tap_region.dart' as $c323;
import 'package:flutter/src/widgets/tap_region.dart' as $c324;
import 'package:flutter/src/widgets/tap_region.dart' as $c325;
import 'package:flutter/src/widgets/text.dart' as $c326;
import 'package:flutter/src/widgets/text.dart' as $c327;
import 'package:flutter/src/widgets/text_selection.dart' as $c328;
import 'package:flutter/src/widgets/texture.dart' as $c329;
import 'package:flutter/src/widgets/ticker_provider.dart' as $c330;
import 'package:flutter/src/widgets/visibility.dart' as $c331;
import 'package:flutter/src/widgets/visibility.dart' as $c332;
import 'package:flutter/src/widgets/visibility.dart' as $c333;
import 'package:flutter/src/widgets/visibility.dart' as $c334;
import 'package:flutter/src/widgets/widget_inspector.dart' as $c335;
import 'package:flutter/src/widgets/will_pop_scope.dart' as $c336;
import 'package:flutter_project/main.dart' as $c337;
import 'package:flutter_project/main.dart' as $c338;

T missing<T>(core.String field) {
  throw core.AssertionError('required field $field is missing');
}

widgets.Widget evaluateRequiredWidgetExpression(proto.WidgetExpression tree) {
  final result = evaluateWidgetExpression(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

widgets.Widget? evaluateWidgetExpression(proto.WidgetExpression? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichResult()) {
    case proto.WidgetExpression_Result.cupertinoActivityIndicator:
      return $c0.CupertinoActivityIndicator(key: (tree.cupertinoActivityIndicator.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoActivityIndicator.key) : null), color: null, animating: (tree.cupertinoActivityIndicator.hasAnimating() ? tree.cupertinoActivityIndicator.animating : true), radius: (tree.cupertinoActivityIndicator.hasRadius() ? tree.cupertinoActivityIndicator.radius : missing('radius')));
    case proto.WidgetExpression_Result.cupertinoActivityIndicatorNamedPartiallyRevealed:
      return $c1.CupertinoActivityIndicator.partiallyRevealed(key: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.key) : null), color: null, radius: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasRadius() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.radius : missing('radius')), progress: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasProgress() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.progress : 1.0));
    case proto.WidgetExpression_Result.cupertinoApp:
      return $c2.CupertinoApp(key: (tree.cupertinoApp.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoApp.key) : null), navigatorKey: null, home: (tree.cupertinoApp.hasHome() ? evaluateWidgetExpression(tree.cupertinoApp.home) : null), theme: null, initialRoute: (tree.cupertinoApp.hasInitialRoute() ? tree.cupertinoApp.initialRoute : null), onGenerateRoute: null, onGenerateInitialRoutes: null, onUnknownRoute: null, builder: null, title: (tree.cupertinoApp.hasTitle() ? tree.cupertinoApp.title : ''), onGenerateTitle: null, color: null, locale: null, localizationsDelegates: null, localeListResolutionCallback: null, localeResolutionCallback: null, showPerformanceOverlay: (tree.cupertinoApp.hasShowPerformanceOverlay() ? tree.cupertinoApp.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.cupertinoApp.hasCheckerboardRasterCacheImages() ? tree.cupertinoApp.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.cupertinoApp.hasCheckerboardOffscreenLayers() ? tree.cupertinoApp.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.cupertinoApp.hasShowSemanticsDebugger() ? tree.cupertinoApp.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.cupertinoApp.hasDebugShowCheckedModeBanner() ? tree.cupertinoApp.debugShowCheckedModeBanner : true), shortcuts: null, actions: null, restorationScopeId: (tree.cupertinoApp.hasRestorationScopeId() ? tree.cupertinoApp.restorationScopeId : null), scrollBehavior: null);
    case proto.WidgetExpression_Result.cupertinoAppNamedRouter:
      return $c3.CupertinoApp.router(key: (tree.cupertinoAppNamedRouter.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoAppNamedRouter.key) : null), routeInformationProvider: null, routeInformationParser: null, routerDelegate: null, backButtonDispatcher: null, routerConfig: null, theme: null, builder: null, title: (tree.cupertinoAppNamedRouter.hasTitle() ? tree.cupertinoAppNamedRouter.title : ''), onGenerateTitle: null, color: null, locale: null, localizationsDelegates: null, localeListResolutionCallback: null, localeResolutionCallback: null, showPerformanceOverlay: (tree.cupertinoAppNamedRouter.hasShowPerformanceOverlay() ? tree.cupertinoAppNamedRouter.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.cupertinoAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.cupertinoAppNamedRouter.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.cupertinoAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.cupertinoAppNamedRouter.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.cupertinoAppNamedRouter.hasShowSemanticsDebugger() ? tree.cupertinoAppNamedRouter.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.cupertinoAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.cupertinoAppNamedRouter.debugShowCheckedModeBanner : true), shortcuts: null, actions: null, restorationScopeId: (tree.cupertinoAppNamedRouter.hasRestorationScopeId() ? tree.cupertinoAppNamedRouter.restorationScopeId : null), scrollBehavior: null);
    case proto.WidgetExpression_Result.cupertinoButton:
      return $c4.CupertinoButton(key: (tree.cupertinoButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoButton.key) : null), child: (tree.cupertinoButton.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoButton.child) : missing('child')), padding: null, color: null, minSize: (tree.cupertinoButton.hasMinSize() ? tree.cupertinoButton.minSize : null), pressedOpacity: (tree.cupertinoButton.hasPressedOpacity() ? tree.cupertinoButton.pressedOpacity : 0.4), borderRadius: null, onPressed: null);
    case proto.WidgetExpression_Result.cupertinoButtonNamedFilled:
      return $c5.CupertinoButton.filled(key: (tree.cupertinoButtonNamedFilled.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoButtonNamedFilled.key) : null), child: (tree.cupertinoButtonNamedFilled.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoButtonNamedFilled.child) : missing('child')), padding: null, minSize: (tree.cupertinoButtonNamedFilled.hasMinSize() ? tree.cupertinoButtonNamedFilled.minSize : null), pressedOpacity: (tree.cupertinoButtonNamedFilled.hasPressedOpacity() ? tree.cupertinoButtonNamedFilled.pressedOpacity : 0.4), borderRadius: null, onPressed: null);
    case proto.WidgetExpression_Result.cupertinoCheckbox:
      return $c6.CupertinoCheckbox(key: (tree.cupertinoCheckbox.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoCheckbox.key) : null), value: (tree.cupertinoCheckbox.hasValue() ? tree.cupertinoCheckbox.value : null), tristate: (tree.cupertinoCheckbox.hasTristate() ? tree.cupertinoCheckbox.tristate : false), onChanged: null, activeColor: null, inactiveColor: null, checkColor: null, focusColor: null, focusNode: null, autofocus: (tree.cupertinoCheckbox.hasAutofocus() ? tree.cupertinoCheckbox.autofocus : false), side: null, shape: null);
    case proto.WidgetExpression_Result.cupertinoContextMenu:
      return $c7.CupertinoContextMenu(key: (tree.cupertinoContextMenu.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoContextMenu.key) : null), actions: tree.cupertinoContextMenu.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), child: (tree.cupertinoContextMenu.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoContextMenu.child) : missing('child')), enableHapticFeedback: (tree.cupertinoContextMenu.hasEnableHapticFeedback() ? tree.cupertinoContextMenu.enableHapticFeedback : false));
    case proto.WidgetExpression_Result.cupertinoContextMenuAction:
      return $c8.CupertinoContextMenuAction(key: (tree.cupertinoContextMenuAction.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoContextMenuAction.key) : null), child: (tree.cupertinoContextMenuAction.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoContextMenuAction.child) : missing('child')), isDefaultAction: (tree.cupertinoContextMenuAction.hasIsDefaultAction() ? tree.cupertinoContextMenuAction.isDefaultAction : false), isDestructiveAction: (tree.cupertinoContextMenuAction.hasIsDestructiveAction() ? tree.cupertinoContextMenuAction.isDestructiveAction : false), onPressed: null, trailingIcon: null);
    case proto.WidgetExpression_Result.cupertinoDesktopTextSelectionToolbarButton:
      return $c9.CupertinoDesktopTextSelectionToolbarButton(key: (tree.cupertinoDesktopTextSelectionToolbarButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoDesktopTextSelectionToolbarButton.key) : null), onPressed: null, child: (tree.cupertinoDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoDesktopTextSelectionToolbarButton.child) : missing('child')));
    case proto.WidgetExpression_Result.cupertinoDesktopTextSelectionToolbarButtonNamedText:
      return $c10.CupertinoDesktopTextSelectionToolbarButton.text(key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.key) : null), onPressed: null, text: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.text : null));
    case proto.WidgetExpression_Result.cupertinoActionSheet:
      return $c11.CupertinoActionSheet(key: (tree.cupertinoActionSheet.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoActionSheet.key) : null), title: (tree.cupertinoActionSheet.hasTitle() ? evaluateWidgetExpression(tree.cupertinoActionSheet.title) : null), message: (tree.cupertinoActionSheet.hasMessage() ? evaluateWidgetExpression(tree.cupertinoActionSheet.message) : null), actions: tree.cupertinoActionSheet.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), messageScrollController: null, actionScrollController: null, cancelButton: (tree.cupertinoActionSheet.hasCancelButton() ? evaluateWidgetExpression(tree.cupertinoActionSheet.cancelButton) : null));
    case proto.WidgetExpression_Result.cupertinoAlertDialog:
      return $c12.CupertinoAlertDialog(key: (tree.cupertinoAlertDialog.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoAlertDialog.key) : null), title: (tree.cupertinoAlertDialog.hasTitle() ? evaluateWidgetExpression(tree.cupertinoAlertDialog.title) : null), content: (tree.cupertinoAlertDialog.hasContent() ? evaluateWidgetExpression(tree.cupertinoAlertDialog.content) : null), actions: tree.cupertinoAlertDialog.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), scrollController: null, actionScrollController: null, insetAnimationDuration: (tree.cupertinoAlertDialog.hasInsetAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.cupertinoAlertDialog.insetAnimationDuration) : missing('insetAnimationDuration')));
    case proto.WidgetExpression_Result.cupertinoDialogAction:
      return $c13.CupertinoDialogAction(key: (tree.cupertinoDialogAction.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoDialogAction.key) : null), onPressed: null, isDefaultAction: (tree.cupertinoDialogAction.hasIsDefaultAction() ? tree.cupertinoDialogAction.isDefaultAction : false), isDestructiveAction: (tree.cupertinoDialogAction.hasIsDestructiveAction() ? tree.cupertinoDialogAction.isDestructiveAction : false), textStyle: null, child: (tree.cupertinoDialogAction.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoDialogAction.child) : missing('child')));
    case proto.WidgetExpression_Result.cupertinoPopupSurface:
      return $c14.CupertinoPopupSurface(key: (tree.cupertinoPopupSurface.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoPopupSurface.key) : null), isSurfacePainted: (tree.cupertinoPopupSurface.hasIsSurfacePainted() ? tree.cupertinoPopupSurface.isSurfacePainted : true), child: (tree.cupertinoPopupSurface.hasChild() ? evaluateWidgetExpression(tree.cupertinoPopupSurface.child) : null));
    case proto.WidgetExpression_Result.cupertinoFormRow:
      return $c15.CupertinoFormRow(key: (tree.cupertinoFormRow.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoFormRow.key) : null), child: (tree.cupertinoFormRow.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoFormRow.child) : missing('child')), prefix: (tree.cupertinoFormRow.hasPrefix() ? evaluateWidgetExpression(tree.cupertinoFormRow.prefix) : null), padding: null, helper: (tree.cupertinoFormRow.hasHelper() ? evaluateWidgetExpression(tree.cupertinoFormRow.helper) : null), error: (tree.cupertinoFormRow.hasError() ? evaluateWidgetExpression(tree.cupertinoFormRow.error) : null));
    case proto.WidgetExpression_Result.cupertinoFormSection:
      return $c16.CupertinoFormSection(key: (tree.cupertinoFormSection.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoFormSection.key) : null), children: tree.cupertinoFormSection.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: (tree.cupertinoFormSection.hasHeader() ? evaluateWidgetExpression(tree.cupertinoFormSection.header) : null), footer: (tree.cupertinoFormSection.hasFooter() ? evaluateWidgetExpression(tree.cupertinoFormSection.footer) : null), decoration: null);
    case proto.WidgetExpression_Result.cupertinoFormSectionNamedInsetGrouped:
      return $c17.CupertinoFormSection.insetGrouped(key: (tree.cupertinoFormSectionNamedInsetGrouped.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoFormSectionNamedInsetGrouped.key) : null), children: tree.cupertinoFormSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: (tree.cupertinoFormSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetExpression(tree.cupertinoFormSectionNamedInsetGrouped.header) : null), footer: (tree.cupertinoFormSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetExpression(tree.cupertinoFormSectionNamedInsetGrouped.footer) : null), decoration: null);
    case proto.WidgetExpression_Result.cupertinoListSection:
      return $c18.CupertinoListSection(key: (tree.cupertinoListSection.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoListSection.key) : null), children: tree.cupertinoListSection.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: (tree.cupertinoListSection.hasHeader() ? evaluateWidgetExpression(tree.cupertinoListSection.header) : null), footer: (tree.cupertinoListSection.hasFooter() ? evaluateWidgetExpression(tree.cupertinoListSection.footer) : null), decoration: null, dividerMargin: (tree.cupertinoListSection.hasDividerMargin() ? tree.cupertinoListSection.dividerMargin : missing('dividerMargin')), additionalDividerMargin: (tree.cupertinoListSection.hasAdditionalDividerMargin() ? tree.cupertinoListSection.additionalDividerMargin : null), topMargin: (tree.cupertinoListSection.hasTopMargin() ? tree.cupertinoListSection.topMargin : null), hasLeading: (tree.cupertinoListSection.hasHasLeading() ? tree.cupertinoListSection.hasLeading : true), separatorColor: null);
    case proto.WidgetExpression_Result.cupertinoListSectionNamedInsetGrouped:
      return $c19.CupertinoListSection.insetGrouped(key: (tree.cupertinoListSectionNamedInsetGrouped.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoListSectionNamedInsetGrouped.key) : null), children: tree.cupertinoListSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: (tree.cupertinoListSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetExpression(tree.cupertinoListSectionNamedInsetGrouped.header) : null), footer: (tree.cupertinoListSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetExpression(tree.cupertinoListSectionNamedInsetGrouped.footer) : null), margin: null, decoration: null, dividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.dividerMargin : missing('dividerMargin')), additionalDividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasAdditionalDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.additionalDividerMargin : null), topMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasTopMargin() ? tree.cupertinoListSectionNamedInsetGrouped.topMargin : null), hasLeading: (tree.cupertinoListSectionNamedInsetGrouped.hasHasLeading() ? tree.cupertinoListSectionNamedInsetGrouped.hasLeading : true), separatorColor: null);
    case proto.WidgetExpression_Result.cupertinoListTile:
      return $c20.CupertinoListTile(key: (tree.cupertinoListTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoListTile.key) : null), title: (tree.cupertinoListTile.hasTitle() ? evaluateRequiredWidgetExpression(tree.cupertinoListTile.title) : missing('title')), subtitle: (tree.cupertinoListTile.hasSubtitle() ? evaluateWidgetExpression(tree.cupertinoListTile.subtitle) : null), additionalInfo: (tree.cupertinoListTile.hasAdditionalInfo() ? evaluateWidgetExpression(tree.cupertinoListTile.additionalInfo) : null), leading: (tree.cupertinoListTile.hasLeading() ? evaluateWidgetExpression(tree.cupertinoListTile.leading) : null), trailing: (tree.cupertinoListTile.hasTrailing() ? evaluateWidgetExpression(tree.cupertinoListTile.trailing) : null), onTap: null, backgroundColor: null, backgroundColorActivated: null, padding: null, leadingSize: (tree.cupertinoListTile.hasLeadingSize() ? tree.cupertinoListTile.leadingSize : missing('leadingSize')), leadingToTitle: (tree.cupertinoListTile.hasLeadingToTitle() ? tree.cupertinoListTile.leadingToTitle : missing('leadingToTitle')));
    case proto.WidgetExpression_Result.cupertinoListTileNamedNotched:
      return $c21.CupertinoListTile.notched(key: (tree.cupertinoListTileNamedNotched.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoListTileNamedNotched.key) : null), title: (tree.cupertinoListTileNamedNotched.hasTitle() ? evaluateRequiredWidgetExpression(tree.cupertinoListTileNamedNotched.title) : missing('title')), subtitle: (tree.cupertinoListTileNamedNotched.hasSubtitle() ? evaluateWidgetExpression(tree.cupertinoListTileNamedNotched.subtitle) : null), additionalInfo: (tree.cupertinoListTileNamedNotched.hasAdditionalInfo() ? evaluateWidgetExpression(tree.cupertinoListTileNamedNotched.additionalInfo) : null), leading: (tree.cupertinoListTileNamedNotched.hasLeading() ? evaluateWidgetExpression(tree.cupertinoListTileNamedNotched.leading) : null), trailing: (tree.cupertinoListTileNamedNotched.hasTrailing() ? evaluateWidgetExpression(tree.cupertinoListTileNamedNotched.trailing) : null), onTap: null, backgroundColor: null, backgroundColorActivated: null, padding: null, leadingSize: (tree.cupertinoListTileNamedNotched.hasLeadingSize() ? tree.cupertinoListTileNamedNotched.leadingSize : missing('leadingSize')), leadingToTitle: (tree.cupertinoListTileNamedNotched.hasLeadingToTitle() ? tree.cupertinoListTileNamedNotched.leadingToTitle : missing('leadingToTitle')));
    case proto.WidgetExpression_Result.cupertinoListTileChevron:
      return $c22.CupertinoListTileChevron(key: (tree.cupertinoListTileChevron.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoListTileChevron.key) : null));
    case proto.WidgetExpression_Result.cupertinoMagnifier:
      return $c23.CupertinoMagnifier(key: (tree.cupertinoMagnifier.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoMagnifier.key) : null), inOutAnimation: null);
    case proto.WidgetExpression_Result.cupertinoNavigationBar:
      return $c24.CupertinoNavigationBar(key: (tree.cupertinoNavigationBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoNavigationBar.key) : null), leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetExpression(tree.cupertinoNavigationBar.leading) : null), automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true), automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true), previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null), middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetExpression(tree.cupertinoNavigationBar.middle) : null), trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetExpression(tree.cupertinoNavigationBar.trailing) : null), border: null, backgroundColor: null, brightness: null, padding: null, transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    case proto.WidgetExpression_Result.cupertinoNavigationBarBackButton:
      return $c25.CupertinoNavigationBarBackButton(key: (tree.cupertinoNavigationBarBackButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoNavigationBarBackButton.key) : null), color: null, previousPageTitle: (tree.cupertinoNavigationBarBackButton.hasPreviousPageTitle() ? tree.cupertinoNavigationBarBackButton.previousPageTitle : null), onPressed: null);
    case proto.WidgetExpression_Result.cupertinoSliverNavigationBar:
      return $c26.CupertinoSliverNavigationBar(key: (tree.cupertinoSliverNavigationBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoSliverNavigationBar.key) : null), largeTitle: (tree.cupertinoSliverNavigationBar.hasLargeTitle() ? evaluateWidgetExpression(tree.cupertinoSliverNavigationBar.largeTitle) : null), leading: (tree.cupertinoSliverNavigationBar.hasLeading() ? evaluateWidgetExpression(tree.cupertinoSliverNavigationBar.leading) : null), automaticallyImplyLeading: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoSliverNavigationBar.automaticallyImplyLeading : true), automaticallyImplyTitle: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyTitle() ? tree.cupertinoSliverNavigationBar.automaticallyImplyTitle : true), alwaysShowMiddle: (tree.cupertinoSliverNavigationBar.hasAlwaysShowMiddle() ? tree.cupertinoSliverNavigationBar.alwaysShowMiddle : true), previousPageTitle: (tree.cupertinoSliverNavigationBar.hasPreviousPageTitle() ? tree.cupertinoSliverNavigationBar.previousPageTitle : null), middle: (tree.cupertinoSliverNavigationBar.hasMiddle() ? evaluateWidgetExpression(tree.cupertinoSliverNavigationBar.middle) : null), trailing: (tree.cupertinoSliverNavigationBar.hasTrailing() ? evaluateWidgetExpression(tree.cupertinoSliverNavigationBar.trailing) : null), border: null, backgroundColor: null, brightness: null, padding: null, transitionBetweenRoutes: (tree.cupertinoSliverNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoSliverNavigationBar.transitionBetweenRoutes : true), stretch: (tree.cupertinoSliverNavigationBar.hasStretch() ? tree.cupertinoSliverNavigationBar.stretch : false));
    case proto.WidgetExpression_Result.cupertinoPageScaffold:
      return $c27.CupertinoPageScaffold(key: (tree.cupertinoPageScaffold.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoPageScaffold.key) : null), navigationBar: null, backgroundColor: null, resizeToAvoidBottomInset: (tree.cupertinoPageScaffold.hasResizeToAvoidBottomInset() ? tree.cupertinoPageScaffold.resizeToAvoidBottomInset : true), child: (tree.cupertinoPageScaffold.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoPageScaffold.child) : missing('child')));
    case proto.WidgetExpression_Result.cupertinoPicker:
      return $c28.CupertinoPicker(key: (tree.cupertinoPicker.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoPicker.key) : null), diameterRatio: (tree.cupertinoPicker.hasDiameterRatio() ? tree.cupertinoPicker.diameterRatio : missing('diameterRatio')), backgroundColor: null, offAxisFraction: (tree.cupertinoPicker.hasOffAxisFraction() ? tree.cupertinoPicker.offAxisFraction : 0.0), useMagnifier: (tree.cupertinoPicker.hasUseMagnifier() ? tree.cupertinoPicker.useMagnifier : false), magnification: (tree.cupertinoPicker.hasMagnification() ? tree.cupertinoPicker.magnification : 1.0), scrollController: null, squeeze: (tree.cupertinoPicker.hasSqueeze() ? tree.cupertinoPicker.squeeze : missing('squeeze')), itemExtent: (tree.cupertinoPicker.hasItemExtent() ? tree.cupertinoPicker.itemExtent : missing('itemExtent')), onSelectedItemChanged: null, children: tree.cupertinoPicker.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), selectionOverlay: (tree.cupertinoPicker.hasSelectionOverlay() ? evaluateWidgetExpression(tree.cupertinoPicker.selectionOverlay) : null), looping: (tree.cupertinoPicker.hasLooping() ? tree.cupertinoPicker.looping : false));
    case proto.WidgetExpression_Result.cupertinoPickerDefaultSelectionOverlay:
      return $c29.CupertinoPickerDefaultSelectionOverlay(key: (tree.cupertinoPickerDefaultSelectionOverlay.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoPickerDefaultSelectionOverlay.key) : null), capStartEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapStartEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capStartEdge : true), capEndEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapEndEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capEndEdge : true));
    case proto.WidgetExpression_Result.cupertinoSliverRefreshControl:
      return $c30.CupertinoSliverRefreshControl(key: (tree.cupertinoSliverRefreshControl.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoSliverRefreshControl.key) : null), refreshTriggerPullDistance: (tree.cupertinoSliverRefreshControl.hasRefreshTriggerPullDistance() ? tree.cupertinoSliverRefreshControl.refreshTriggerPullDistance : missing('refreshTriggerPullDistance')), refreshIndicatorExtent: (tree.cupertinoSliverRefreshControl.hasRefreshIndicatorExtent() ? tree.cupertinoSliverRefreshControl.refreshIndicatorExtent : missing('refreshIndicatorExtent')), builder: null, onRefresh: null);
    case proto.WidgetExpression_Result.cupertinoScrollbar:
      return $c31.CupertinoScrollbar(key: (tree.cupertinoScrollbar.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoScrollbar.key) : null), child: (tree.cupertinoScrollbar.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoScrollbar.child) : missing('child')), controller: null, thumbVisibility: (tree.cupertinoScrollbar.hasThumbVisibility() ? tree.cupertinoScrollbar.thumbVisibility : null), thickness: (tree.cupertinoScrollbar.hasThickness() ? tree.cupertinoScrollbar.thickness : missing('thickness')), thicknessWhileDragging: (tree.cupertinoScrollbar.hasThicknessWhileDragging() ? tree.cupertinoScrollbar.thicknessWhileDragging : missing('thicknessWhileDragging')), notificationPredicate: null, scrollbarOrientation: null);
    case proto.WidgetExpression_Result.cupertinoSearchTextField:
      return $c32.CupertinoSearchTextField(key: (tree.cupertinoSearchTextField.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoSearchTextField.key) : null), controller: null, onChanged: null, onSubmitted: null, style: null, placeholder: (tree.cupertinoSearchTextField.hasPlaceholder() ? tree.cupertinoSearchTextField.placeholder : null), placeholderStyle: null, decoration: null, backgroundColor: null, borderRadius: null, keyboardType: null, itemSize: (tree.cupertinoSearchTextField.hasItemSize() ? tree.cupertinoSearchTextField.itemSize : 20.0), prefixIcon: (tree.cupertinoSearchTextField.hasPrefixIcon() ? evaluateRequiredWidgetExpression(tree.cupertinoSearchTextField.prefixIcon) : missing('prefixIcon')), onSuffixTap: null, restorationId: (tree.cupertinoSearchTextField.hasRestorationId() ? tree.cupertinoSearchTextField.restorationId : null), focusNode: null, smartQuotesType: null, smartDashesType: null, enableIMEPersonalizedLearning: (tree.cupertinoSearchTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoSearchTextField.enableIMEPersonalizedLearning : true), autofocus: (tree.cupertinoSearchTextField.hasAutofocus() ? tree.cupertinoSearchTextField.autofocus : false), onTap: null, autocorrect: (tree.cupertinoSearchTextField.hasAutocorrect() ? tree.cupertinoSearchTextField.autocorrect : true), enabled: (tree.cupertinoSearchTextField.hasEnabled() ? tree.cupertinoSearchTextField.enabled : null));
    case proto.WidgetExpression_Result.cupertinoSlider:
      return $c33.CupertinoSlider(key: (tree.cupertinoSlider.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoSlider.key) : null), value: (tree.cupertinoSlider.hasValue() ? tree.cupertinoSlider.value : missing('value')), onChanged: null, onChangeStart: null, onChangeEnd: null, min: (tree.cupertinoSlider.hasMin() ? tree.cupertinoSlider.min : 0.0), max: (tree.cupertinoSlider.hasMax() ? tree.cupertinoSlider.max : 1.0), divisions: (tree.cupertinoSlider.hasDivisions() ? tree.cupertinoSlider.divisions : null), activeColor: null);
    case proto.WidgetExpression_Result.cupertinoSwitch:
      return $c34.CupertinoSwitch(key: (tree.cupertinoSwitch.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoSwitch.key) : null), value: (tree.cupertinoSwitch.hasValue() ? tree.cupertinoSwitch.value : missing('value')), onChanged: null, activeColor: null, trackColor: null, thumbColor: null, applyTheme: (tree.cupertinoSwitch.hasApplyTheme() ? tree.cupertinoSwitch.applyTheme : null), focusColor: null, focusNode: null, onFocusChange: null, autofocus: (tree.cupertinoSwitch.hasAutofocus() ? tree.cupertinoSwitch.autofocus : false));
    case proto.WidgetExpression_Result.cupertinoTabView:
      return $c35.CupertinoTabView(key: (tree.cupertinoTabView.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTabView.key) : null), builder: null, navigatorKey: null, defaultTitle: (tree.cupertinoTabView.hasDefaultTitle() ? tree.cupertinoTabView.defaultTitle : null), routes: null, onGenerateRoute: null, onUnknownRoute: null, restorationScopeId: (tree.cupertinoTabView.hasRestorationScopeId() ? tree.cupertinoTabView.restorationScopeId : null));
    case proto.WidgetExpression_Result.cupertinoTextField:
      return $c36.CupertinoTextField(key: (tree.cupertinoTextField.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTextField.key) : null), controller: null, focusNode: null, undoController: null, decoration: null, placeholder: (tree.cupertinoTextField.hasPlaceholder() ? tree.cupertinoTextField.placeholder : null), placeholderStyle: null, prefix: (tree.cupertinoTextField.hasPrefix() ? evaluateWidgetExpression(tree.cupertinoTextField.prefix) : null), suffix: (tree.cupertinoTextField.hasSuffix() ? evaluateWidgetExpression(tree.cupertinoTextField.suffix) : null), keyboardType: null, textInputAction: null, style: null, strutStyle: null, textAlignVertical: null, textDirection: null, readOnly: (tree.cupertinoTextField.hasReadOnly() ? tree.cupertinoTextField.readOnly : false), showCursor: (tree.cupertinoTextField.hasShowCursor() ? tree.cupertinoTextField.showCursor : null), autofocus: (tree.cupertinoTextField.hasAutofocus() ? tree.cupertinoTextField.autofocus : false), obscuringCharacter: (tree.cupertinoTextField.hasObscuringCharacter() ? tree.cupertinoTextField.obscuringCharacter : '•'), obscureText: (tree.cupertinoTextField.hasObscureText() ? tree.cupertinoTextField.obscureText : false), autocorrect: (tree.cupertinoTextField.hasAutocorrect() ? tree.cupertinoTextField.autocorrect : true), smartDashesType: null, smartQuotesType: null, enableSuggestions: (tree.cupertinoTextField.hasEnableSuggestions() ? tree.cupertinoTextField.enableSuggestions : true), maxLines: (tree.cupertinoTextField.hasMaxLines() ? tree.cupertinoTextField.maxLines : 1), minLines: (tree.cupertinoTextField.hasMinLines() ? tree.cupertinoTextField.minLines : null), expands: (tree.cupertinoTextField.hasExpands() ? tree.cupertinoTextField.expands : false), maxLength: (tree.cupertinoTextField.hasMaxLength() ? tree.cupertinoTextField.maxLength : null), maxLengthEnforcement: null, onChanged: null, onEditingComplete: null, onSubmitted: null, onTapOutside: null, inputFormatters: null, enabled: (tree.cupertinoTextField.hasEnabled() ? tree.cupertinoTextField.enabled : null), cursorWidth: (tree.cupertinoTextField.hasCursorWidth() ? tree.cupertinoTextField.cursorWidth : 2.0), cursorHeight: (tree.cupertinoTextField.hasCursorHeight() ? tree.cupertinoTextField.cursorHeight : null), cursorOpacityAnimates: (tree.cupertinoTextField.hasCursorOpacityAnimates() ? tree.cupertinoTextField.cursorOpacityAnimates : true), cursorColor: null, keyboardAppearance: null, enableInteractiveSelection: (tree.cupertinoTextField.hasEnableInteractiveSelection() ? tree.cupertinoTextField.enableInteractiveSelection : null), selectionControls: null, onTap: null, scrollController: null, scrollPhysics: null, autofillHints: tree.cupertinoTextField.autofillHints, contentInsertionConfiguration: null, restorationId: (tree.cupertinoTextField.hasRestorationId() ? tree.cupertinoTextField.restorationId : null), scribbleEnabled: (tree.cupertinoTextField.hasScribbleEnabled() ? tree.cupertinoTextField.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.cupertinoTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextField.enableIMEPersonalizedLearning : true), contextMenuBuilder: null, spellCheckConfiguration: null, magnifierConfiguration: null);
    case proto.WidgetExpression_Result.cupertinoTextFieldNamedBorderless:
      return $c37.CupertinoTextField.borderless(key: (tree.cupertinoTextFieldNamedBorderless.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTextFieldNamedBorderless.key) : null), controller: null, focusNode: null, undoController: null, decoration: null, placeholder: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholder() ? tree.cupertinoTextFieldNamedBorderless.placeholder : null), placeholderStyle: null, prefix: (tree.cupertinoTextFieldNamedBorderless.hasPrefix() ? evaluateWidgetExpression(tree.cupertinoTextFieldNamedBorderless.prefix) : null), suffix: (tree.cupertinoTextFieldNamedBorderless.hasSuffix() ? evaluateWidgetExpression(tree.cupertinoTextFieldNamedBorderless.suffix) : null), keyboardType: null, textInputAction: null, style: null, strutStyle: null, textAlignVertical: null, textDirection: null, readOnly: (tree.cupertinoTextFieldNamedBorderless.hasReadOnly() ? tree.cupertinoTextFieldNamedBorderless.readOnly : false), showCursor: (tree.cupertinoTextFieldNamedBorderless.hasShowCursor() ? tree.cupertinoTextFieldNamedBorderless.showCursor : null), autofocus: (tree.cupertinoTextFieldNamedBorderless.hasAutofocus() ? tree.cupertinoTextFieldNamedBorderless.autofocus : false), obscuringCharacter: (tree.cupertinoTextFieldNamedBorderless.hasObscuringCharacter() ? tree.cupertinoTextFieldNamedBorderless.obscuringCharacter : '•'), obscureText: (tree.cupertinoTextFieldNamedBorderless.hasObscureText() ? tree.cupertinoTextFieldNamedBorderless.obscureText : false), autocorrect: (tree.cupertinoTextFieldNamedBorderless.hasAutocorrect() ? tree.cupertinoTextFieldNamedBorderless.autocorrect : true), smartDashesType: null, smartQuotesType: null, enableSuggestions: (tree.cupertinoTextFieldNamedBorderless.hasEnableSuggestions() ? tree.cupertinoTextFieldNamedBorderless.enableSuggestions : true), maxLines: (tree.cupertinoTextFieldNamedBorderless.hasMaxLines() ? tree.cupertinoTextFieldNamedBorderless.maxLines : 1), minLines: (tree.cupertinoTextFieldNamedBorderless.hasMinLines() ? tree.cupertinoTextFieldNamedBorderless.minLines : null), expands: (tree.cupertinoTextFieldNamedBorderless.hasExpands() ? tree.cupertinoTextFieldNamedBorderless.expands : false), maxLength: (tree.cupertinoTextFieldNamedBorderless.hasMaxLength() ? tree.cupertinoTextFieldNamedBorderless.maxLength : null), maxLengthEnforcement: null, onChanged: null, onEditingComplete: null, onSubmitted: null, onTapOutside: null, inputFormatters: null, enabled: (tree.cupertinoTextFieldNamedBorderless.hasEnabled() ? tree.cupertinoTextFieldNamedBorderless.enabled : null), cursorWidth: (tree.cupertinoTextFieldNamedBorderless.hasCursorWidth() ? tree.cupertinoTextFieldNamedBorderless.cursorWidth : 2.0), cursorHeight: (tree.cupertinoTextFieldNamedBorderless.hasCursorHeight() ? tree.cupertinoTextFieldNamedBorderless.cursorHeight : null), cursorOpacityAnimates: (tree.cupertinoTextFieldNamedBorderless.hasCursorOpacityAnimates() ? tree.cupertinoTextFieldNamedBorderless.cursorOpacityAnimates : true), cursorColor: null, keyboardAppearance: null, enableInteractiveSelection: (tree.cupertinoTextFieldNamedBorderless.hasEnableInteractiveSelection() ? tree.cupertinoTextFieldNamedBorderless.enableInteractiveSelection : null), selectionControls: null, onTap: null, scrollController: null, scrollPhysics: null, autofillHints: tree.cupertinoTextFieldNamedBorderless.autofillHints, contentInsertionConfiguration: null, restorationId: (tree.cupertinoTextFieldNamedBorderless.hasRestorationId() ? tree.cupertinoTextFieldNamedBorderless.restorationId : null), scribbleEnabled: (tree.cupertinoTextFieldNamedBorderless.hasScribbleEnabled() ? tree.cupertinoTextFieldNamedBorderless.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.cupertinoTextFieldNamedBorderless.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextFieldNamedBorderless.enableIMEPersonalizedLearning : true), contextMenuBuilder: null, spellCheckConfiguration: null, magnifierConfiguration: null);
    case proto.WidgetExpression_Result.cupertinoTextFormFieldRow:
      return $c38.CupertinoTextFormFieldRow(key: (tree.cupertinoTextFormFieldRow.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTextFormFieldRow.key) : null), prefix: (tree.cupertinoTextFormFieldRow.hasPrefix() ? evaluateWidgetExpression(tree.cupertinoTextFormFieldRow.prefix) : null), padding: null, controller: null, initialValue: (tree.cupertinoTextFormFieldRow.hasInitialValue() ? tree.cupertinoTextFormFieldRow.initialValue : null), focusNode: null, decoration: null, keyboardType: null, textInputAction: null, style: null, strutStyle: null, textDirection: null, textAlignVertical: null, autofocus: (tree.cupertinoTextFormFieldRow.hasAutofocus() ? tree.cupertinoTextFormFieldRow.autofocus : false), readOnly: (tree.cupertinoTextFormFieldRow.hasReadOnly() ? tree.cupertinoTextFormFieldRow.readOnly : false), showCursor: (tree.cupertinoTextFormFieldRow.hasShowCursor() ? tree.cupertinoTextFormFieldRow.showCursor : null), obscuringCharacter: (tree.cupertinoTextFormFieldRow.hasObscuringCharacter() ? tree.cupertinoTextFormFieldRow.obscuringCharacter : '•'), obscureText: (tree.cupertinoTextFormFieldRow.hasObscureText() ? tree.cupertinoTextFormFieldRow.obscureText : false), autocorrect: (tree.cupertinoTextFormFieldRow.hasAutocorrect() ? tree.cupertinoTextFormFieldRow.autocorrect : true), smartDashesType: null, smartQuotesType: null, enableSuggestions: (tree.cupertinoTextFormFieldRow.hasEnableSuggestions() ? tree.cupertinoTextFormFieldRow.enableSuggestions : true), maxLines: (tree.cupertinoTextFormFieldRow.hasMaxLines() ? tree.cupertinoTextFormFieldRow.maxLines : 1), minLines: (tree.cupertinoTextFormFieldRow.hasMinLines() ? tree.cupertinoTextFormFieldRow.minLines : null), expands: (tree.cupertinoTextFormFieldRow.hasExpands() ? tree.cupertinoTextFormFieldRow.expands : false), maxLength: (tree.cupertinoTextFormFieldRow.hasMaxLength() ? tree.cupertinoTextFormFieldRow.maxLength : null), onChanged: null, onTap: null, onEditingComplete: null, onFieldSubmitted: null, onSaved: null, validator: null, inputFormatters: null, enabled: (tree.cupertinoTextFormFieldRow.hasEnabled() ? tree.cupertinoTextFormFieldRow.enabled : null), cursorWidth: (tree.cupertinoTextFormFieldRow.hasCursorWidth() ? tree.cupertinoTextFormFieldRow.cursorWidth : 2.0), cursorHeight: (tree.cupertinoTextFormFieldRow.hasCursorHeight() ? tree.cupertinoTextFormFieldRow.cursorHeight : null), cursorColor: null, keyboardAppearance: null, enableInteractiveSelection: (tree.cupertinoTextFormFieldRow.hasEnableInteractiveSelection() ? tree.cupertinoTextFormFieldRow.enableInteractiveSelection : true), selectionControls: null, scrollPhysics: null, autofillHints: tree.cupertinoTextFormFieldRow.autofillHints, placeholder: (tree.cupertinoTextFormFieldRow.hasPlaceholder() ? tree.cupertinoTextFormFieldRow.placeholder : null), placeholderStyle: null, contextMenuBuilder: null);
    case proto.WidgetExpression_Result.cupertinoTextSelectionToolbarButton:
      return $c39.CupertinoTextSelectionToolbarButton(key: (tree.cupertinoTextSelectionToolbarButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTextSelectionToolbarButton.key) : null), onPressed: null, child: (tree.cupertinoTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetExpression(tree.cupertinoTextSelectionToolbarButton.child) : missing('child')));
    case proto.WidgetExpression_Result.cupertinoTextSelectionToolbarButtonNamedText:
      return $c40.CupertinoTextSelectionToolbarButton.text(key: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasKey() ? types.evaluateFlutterKeyExpression(tree.cupertinoTextSelectionToolbarButtonNamedText.key) : null), onPressed: null, text: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoTextSelectionToolbarButtonNamedText.text : null));
    case proto.WidgetExpression_Result.materialAboutDialog:
      return $c41.AboutDialog(key: (tree.materialAboutDialog.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialAboutDialog.key) : null), applicationName: (tree.materialAboutDialog.hasApplicationName() ? tree.materialAboutDialog.applicationName : null), applicationVersion: (tree.materialAboutDialog.hasApplicationVersion() ? tree.materialAboutDialog.applicationVersion : null), applicationIcon: (tree.materialAboutDialog.hasApplicationIcon() ? evaluateWidgetExpression(tree.materialAboutDialog.applicationIcon) : null), applicationLegalese: (tree.materialAboutDialog.hasApplicationLegalese() ? tree.materialAboutDialog.applicationLegalese : null), children: tree.materialAboutDialog.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.materialAboutListTile:
      return $c42.AboutListTile(key: (tree.materialAboutListTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialAboutListTile.key) : null), icon: (tree.materialAboutListTile.hasIcon() ? evaluateWidgetExpression(tree.materialAboutListTile.icon) : null), child: (tree.materialAboutListTile.hasChild() ? evaluateWidgetExpression(tree.materialAboutListTile.child) : null), applicationName: (tree.materialAboutListTile.hasApplicationName() ? tree.materialAboutListTile.applicationName : null), applicationVersion: (tree.materialAboutListTile.hasApplicationVersion() ? tree.materialAboutListTile.applicationVersion : null), applicationIcon: (tree.materialAboutListTile.hasApplicationIcon() ? evaluateWidgetExpression(tree.materialAboutListTile.applicationIcon) : null), applicationLegalese: (tree.materialAboutListTile.hasApplicationLegalese() ? tree.materialAboutListTile.applicationLegalese : null), aboutBoxChildren: tree.materialAboutListTile.aboutBoxChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), dense: (tree.materialAboutListTile.hasDense() ? tree.materialAboutListTile.dense : null));
    case proto.WidgetExpression_Result.materialLicensePage:
      return $c43.LicensePage(key: (tree.materialLicensePage.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialLicensePage.key) : null), applicationName: (tree.materialLicensePage.hasApplicationName() ? tree.materialLicensePage.applicationName : null), applicationVersion: (tree.materialLicensePage.hasApplicationVersion() ? tree.materialLicensePage.applicationVersion : null), applicationIcon: (tree.materialLicensePage.hasApplicationIcon() ? evaluateWidgetExpression(tree.materialLicensePage.applicationIcon) : null), applicationLegalese: (tree.materialLicensePage.hasApplicationLegalese() ? tree.materialLicensePage.applicationLegalese : null));
    case proto.WidgetExpression_Result.materialBackButton:
      return $c44.BackButton(key: (tree.materialBackButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialBackButton.key) : null), color: null, style: null, onPressed: null);
    case proto.WidgetExpression_Result.materialBackButtonIcon:
      return $c45.BackButtonIcon(key: (tree.materialBackButtonIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialBackButtonIcon.key) : null));
    case proto.WidgetExpression_Result.materialCloseButton:
      return $c46.CloseButton(key: (tree.materialCloseButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCloseButton.key) : null), color: null, onPressed: null, style: null);
    case proto.WidgetExpression_Result.materialCloseButtonIcon:
      return $c47.CloseButtonIcon(key: (tree.materialCloseButtonIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCloseButtonIcon.key) : null));
    case proto.WidgetExpression_Result.materialDrawerButton:
      return $c48.DrawerButton(key: (tree.materialDrawerButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDrawerButton.key) : null), style: null, onPressed: null);
    case proto.WidgetExpression_Result.materialDrawerButtonIcon:
      return $c49.DrawerButtonIcon(key: (tree.materialDrawerButtonIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDrawerButtonIcon.key) : null));
    case proto.WidgetExpression_Result.materialEndDrawerButton:
      return $c50.EndDrawerButton(key: (tree.materialEndDrawerButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialEndDrawerButton.key) : null), style: null, onPressed: null);
    case proto.WidgetExpression_Result.materialEndDrawerButtonIcon:
      return $c51.EndDrawerButtonIcon(key: (tree.materialEndDrawerButtonIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialEndDrawerButtonIcon.key) : null));
    case proto.WidgetExpression_Result.materialActionChip:
      return $c52.ActionChip(key: (tree.materialActionChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialActionChip.key) : null), avatar: (tree.materialActionChip.hasAvatar() ? evaluateWidgetExpression(tree.materialActionChip.avatar) : null), label: (tree.materialActionChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialActionChip.label) : missing('label')), labelStyle: null, labelPadding: null, onPressed: null, pressElevation: (tree.materialActionChip.hasPressElevation() ? tree.materialActionChip.pressElevation : null), tooltip: (tree.materialActionChip.hasTooltip() ? tree.materialActionChip.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialActionChip.hasAutofocus() ? tree.materialActionChip.autofocus : false), color: null, backgroundColor: null, disabledColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialActionChip.hasElevation() ? tree.materialActionChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null);
    case proto.WidgetExpression_Result.materialActionChipNamedElevated:
      return $c53.ActionChip.elevated(key: (tree.materialActionChipNamedElevated.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialActionChipNamedElevated.key) : null), avatar: (tree.materialActionChipNamedElevated.hasAvatar() ? evaluateWidgetExpression(tree.materialActionChipNamedElevated.avatar) : null), label: (tree.materialActionChipNamedElevated.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialActionChipNamedElevated.label) : missing('label')), labelStyle: null, labelPadding: null, onPressed: null, pressElevation: (tree.materialActionChipNamedElevated.hasPressElevation() ? tree.materialActionChipNamedElevated.pressElevation : null), tooltip: (tree.materialActionChipNamedElevated.hasTooltip() ? tree.materialActionChipNamedElevated.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialActionChipNamedElevated.hasAutofocus() ? tree.materialActionChipNamedElevated.autofocus : false), color: null, backgroundColor: null, disabledColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialActionChipNamedElevated.hasElevation() ? tree.materialActionChipNamedElevated.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null);
    case proto.WidgetExpression_Result.materialMaterialApp:
      return $c54.MaterialApp(key: (tree.materialMaterialApp.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterialApp.key) : null), navigatorKey: null, scaffoldMessengerKey: null, home: (tree.materialMaterialApp.hasHome() ? evaluateWidgetExpression(tree.materialMaterialApp.home) : null), initialRoute: (tree.materialMaterialApp.hasInitialRoute() ? tree.materialMaterialApp.initialRoute : null), onGenerateRoute: null, onGenerateInitialRoutes: null, onUnknownRoute: null, builder: null, title: (tree.materialMaterialApp.hasTitle() ? tree.materialMaterialApp.title : ''), onGenerateTitle: null, color: null, theme: null, darkTheme: null, highContrastTheme: null, highContrastDarkTheme: null, themeMode: null, themeAnimationDuration: (tree.materialMaterialApp.hasThemeAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialMaterialApp.themeAnimationDuration) : missing('themeAnimationDuration')), locale: null, localizationsDelegates: null, localeListResolutionCallback: null, localeResolutionCallback: null, debugShowMaterialGrid: (tree.materialMaterialApp.hasDebugShowMaterialGrid() ? tree.materialMaterialApp.debugShowMaterialGrid : false), showPerformanceOverlay: (tree.materialMaterialApp.hasShowPerformanceOverlay() ? tree.materialMaterialApp.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.materialMaterialApp.hasCheckerboardRasterCacheImages() ? tree.materialMaterialApp.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.materialMaterialApp.hasCheckerboardOffscreenLayers() ? tree.materialMaterialApp.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.materialMaterialApp.hasShowSemanticsDebugger() ? tree.materialMaterialApp.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.materialMaterialApp.hasDebugShowCheckedModeBanner() ? tree.materialMaterialApp.debugShowCheckedModeBanner : true), shortcuts: null, actions: null, restorationScopeId: (tree.materialMaterialApp.hasRestorationScopeId() ? tree.materialMaterialApp.restorationScopeId : null), scrollBehavior: null);
    case proto.WidgetExpression_Result.materialMaterialAppNamedRouter:
      return $c55.MaterialApp.router(key: (tree.materialMaterialAppNamedRouter.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterialAppNamedRouter.key) : null), scaffoldMessengerKey: null, routeInformationProvider: null, routeInformationParser: null, routerDelegate: null, routerConfig: null, backButtonDispatcher: null, builder: null, title: (tree.materialMaterialAppNamedRouter.hasTitle() ? tree.materialMaterialAppNamedRouter.title : ''), onGenerateTitle: null, color: null, theme: null, darkTheme: null, highContrastTheme: null, highContrastDarkTheme: null, themeMode: null, themeAnimationDuration: (tree.materialMaterialAppNamedRouter.hasThemeAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialMaterialAppNamedRouter.themeAnimationDuration) : missing('themeAnimationDuration')), locale: null, localizationsDelegates: null, localeListResolutionCallback: null, localeResolutionCallback: null, debugShowMaterialGrid: (tree.materialMaterialAppNamedRouter.hasDebugShowMaterialGrid() ? tree.materialMaterialAppNamedRouter.debugShowMaterialGrid : false), showPerformanceOverlay: (tree.materialMaterialAppNamedRouter.hasShowPerformanceOverlay() ? tree.materialMaterialAppNamedRouter.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.materialMaterialAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.materialMaterialAppNamedRouter.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.materialMaterialAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.materialMaterialAppNamedRouter.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.materialMaterialAppNamedRouter.hasShowSemanticsDebugger() ? tree.materialMaterialAppNamedRouter.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.materialMaterialAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.materialMaterialAppNamedRouter.debugShowCheckedModeBanner : true), shortcuts: null, actions: null, restorationScopeId: (tree.materialMaterialAppNamedRouter.hasRestorationScopeId() ? tree.materialMaterialAppNamedRouter.restorationScopeId : null), scrollBehavior: null);
    case proto.WidgetExpression_Result.materialAppBar:
      return $c56.AppBar(key: (tree.materialAppBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialAppBar.key) : null), leading: (tree.materialAppBar.hasLeading() ? evaluateWidgetExpression(tree.materialAppBar.leading) : null), automaticallyImplyLeading: (tree.materialAppBar.hasAutomaticallyImplyLeading() ? tree.materialAppBar.automaticallyImplyLeading : true), title: (tree.materialAppBar.hasTitle() ? evaluateWidgetExpression(tree.materialAppBar.title) : null), actions: tree.materialAppBar.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: (tree.materialAppBar.hasFlexibleSpace() ? evaluateWidgetExpression(tree.materialAppBar.flexibleSpace) : null), bottom: null, elevation: (tree.materialAppBar.hasElevation() ? tree.materialAppBar.elevation : null), scrolledUnderElevation: (tree.materialAppBar.hasScrolledUnderElevation() ? tree.materialAppBar.scrolledUnderElevation : null), shadowColor: null, surfaceTintColor: null, shape: null, backgroundColor: null, foregroundColor: null, iconTheme: null, actionsIconTheme: null, primary: (tree.materialAppBar.hasPrimary() ? tree.materialAppBar.primary : true), centerTitle: (tree.materialAppBar.hasCenterTitle() ? tree.materialAppBar.centerTitle : null), excludeHeaderSemantics: (tree.materialAppBar.hasExcludeHeaderSemantics() ? tree.materialAppBar.excludeHeaderSemantics : false), titleSpacing: (tree.materialAppBar.hasTitleSpacing() ? tree.materialAppBar.titleSpacing : null), toolbarOpacity: (tree.materialAppBar.hasToolbarOpacity() ? tree.materialAppBar.toolbarOpacity : 1.0), bottomOpacity: (tree.materialAppBar.hasBottomOpacity() ? tree.materialAppBar.bottomOpacity : 1.0), toolbarHeight: (tree.materialAppBar.hasToolbarHeight() ? tree.materialAppBar.toolbarHeight : null), leadingWidth: (tree.materialAppBar.hasLeadingWidth() ? tree.materialAppBar.leadingWidth : null), toolbarTextStyle: null, titleTextStyle: null, systemOverlayStyle: null, forceMaterialTransparency: (tree.materialAppBar.hasForceMaterialTransparency() ? tree.materialAppBar.forceMaterialTransparency : false), clipBehavior: null);
    case proto.WidgetExpression_Result.materialSliverAppBar:
      return $c57.SliverAppBar(key: (tree.materialSliverAppBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSliverAppBar.key) : null), leading: (tree.materialSliverAppBar.hasLeading() ? evaluateWidgetExpression(tree.materialSliverAppBar.leading) : null), automaticallyImplyLeading: (tree.materialSliverAppBar.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBar.automaticallyImplyLeading : true), title: (tree.materialSliverAppBar.hasTitle() ? evaluateWidgetExpression(tree.materialSliverAppBar.title) : null), actions: tree.materialSliverAppBar.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: (tree.materialSliverAppBar.hasFlexibleSpace() ? evaluateWidgetExpression(tree.materialSliverAppBar.flexibleSpace) : null), bottom: null, elevation: (tree.materialSliverAppBar.hasElevation() ? tree.materialSliverAppBar.elevation : null), scrolledUnderElevation: (tree.materialSliverAppBar.hasScrolledUnderElevation() ? tree.materialSliverAppBar.scrolledUnderElevation : null), shadowColor: null, surfaceTintColor: null, forceElevated: (tree.materialSliverAppBar.hasForceElevated() ? tree.materialSliverAppBar.forceElevated : false), backgroundColor: null, foregroundColor: null, iconTheme: null, actionsIconTheme: null, primary: (tree.materialSliverAppBar.hasPrimary() ? tree.materialSliverAppBar.primary : true), centerTitle: (tree.materialSliverAppBar.hasCenterTitle() ? tree.materialSliverAppBar.centerTitle : null), excludeHeaderSemantics: (tree.materialSliverAppBar.hasExcludeHeaderSemantics() ? tree.materialSliverAppBar.excludeHeaderSemantics : false), titleSpacing: (tree.materialSliverAppBar.hasTitleSpacing() ? tree.materialSliverAppBar.titleSpacing : null), collapsedHeight: (tree.materialSliverAppBar.hasCollapsedHeight() ? tree.materialSliverAppBar.collapsedHeight : null), expandedHeight: (tree.materialSliverAppBar.hasExpandedHeight() ? tree.materialSliverAppBar.expandedHeight : null), floating: (tree.materialSliverAppBar.hasFloating() ? tree.materialSliverAppBar.floating : false), pinned: (tree.materialSliverAppBar.hasPinned() ? tree.materialSliverAppBar.pinned : false), snap: (tree.materialSliverAppBar.hasSnap() ? tree.materialSliverAppBar.snap : false), stretch: (tree.materialSliverAppBar.hasStretch() ? tree.materialSliverAppBar.stretch : false), stretchTriggerOffset: (tree.materialSliverAppBar.hasStretchTriggerOffset() ? tree.materialSliverAppBar.stretchTriggerOffset : 100.0), onStretchTrigger: null, shape: null, toolbarHeight: (tree.materialSliverAppBar.hasToolbarHeight() ? tree.materialSliverAppBar.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.materialSliverAppBar.hasLeadingWidth() ? tree.materialSliverAppBar.leadingWidth : null), toolbarTextStyle: null, titleTextStyle: null, systemOverlayStyle: null, forceMaterialTransparency: (tree.materialSliverAppBar.hasForceMaterialTransparency() ? tree.materialSliverAppBar.forceMaterialTransparency : false), clipBehavior: null);
    case proto.WidgetExpression_Result.materialSliverAppBarNamedMedium:
      return $c58.SliverAppBar.medium(key: (tree.materialSliverAppBarNamedMedium.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSliverAppBarNamedMedium.key) : null), leading: (tree.materialSliverAppBarNamedMedium.hasLeading() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedMedium.leading) : null), automaticallyImplyLeading: (tree.materialSliverAppBarNamedMedium.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedMedium.automaticallyImplyLeading : true), title: (tree.materialSliverAppBarNamedMedium.hasTitle() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedMedium.title) : null), actions: tree.materialSliverAppBarNamedMedium.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: (tree.materialSliverAppBarNamedMedium.hasFlexibleSpace() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedMedium.flexibleSpace) : null), bottom: null, elevation: (tree.materialSliverAppBarNamedMedium.hasElevation() ? tree.materialSliverAppBarNamedMedium.elevation : null), scrolledUnderElevation: (tree.materialSliverAppBarNamedMedium.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedMedium.scrolledUnderElevation : null), shadowColor: null, surfaceTintColor: null, forceElevated: (tree.materialSliverAppBarNamedMedium.hasForceElevated() ? tree.materialSliverAppBarNamedMedium.forceElevated : false), backgroundColor: null, foregroundColor: null, iconTheme: null, actionsIconTheme: null, primary: (tree.materialSliverAppBarNamedMedium.hasPrimary() ? tree.materialSliverAppBarNamedMedium.primary : true), centerTitle: (tree.materialSliverAppBarNamedMedium.hasCenterTitle() ? tree.materialSliverAppBarNamedMedium.centerTitle : null), excludeHeaderSemantics: (tree.materialSliverAppBarNamedMedium.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedMedium.excludeHeaderSemantics : false), titleSpacing: (tree.materialSliverAppBarNamedMedium.hasTitleSpacing() ? tree.materialSliverAppBarNamedMedium.titleSpacing : null), collapsedHeight: (tree.materialSliverAppBarNamedMedium.hasCollapsedHeight() ? tree.materialSliverAppBarNamedMedium.collapsedHeight : null), expandedHeight: (tree.materialSliverAppBarNamedMedium.hasExpandedHeight() ? tree.materialSliverAppBarNamedMedium.expandedHeight : null), floating: (tree.materialSliverAppBarNamedMedium.hasFloating() ? tree.materialSliverAppBarNamedMedium.floating : false), pinned: (tree.materialSliverAppBarNamedMedium.hasPinned() ? tree.materialSliverAppBarNamedMedium.pinned : true), snap: (tree.materialSliverAppBarNamedMedium.hasSnap() ? tree.materialSliverAppBarNamedMedium.snap : false), stretch: (tree.materialSliverAppBarNamedMedium.hasStretch() ? tree.materialSliverAppBarNamedMedium.stretch : false), stretchTriggerOffset: (tree.materialSliverAppBarNamedMedium.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedMedium.stretchTriggerOffset : 100.0), onStretchTrigger: null, shape: null, toolbarHeight: (tree.materialSliverAppBarNamedMedium.hasToolbarHeight() ? tree.materialSliverAppBarNamedMedium.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.materialSliverAppBarNamedMedium.hasLeadingWidth() ? tree.materialSliverAppBarNamedMedium.leadingWidth : null), toolbarTextStyle: null, titleTextStyle: null, systemOverlayStyle: null, forceMaterialTransparency: (tree.materialSliverAppBarNamedMedium.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedMedium.forceMaterialTransparency : false), clipBehavior: null);
    case proto.WidgetExpression_Result.materialSliverAppBarNamedLarge:
      return $c59.SliverAppBar.large(key: (tree.materialSliverAppBarNamedLarge.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSliverAppBarNamedLarge.key) : null), leading: (tree.materialSliverAppBarNamedLarge.hasLeading() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedLarge.leading) : null), automaticallyImplyLeading: (tree.materialSliverAppBarNamedLarge.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedLarge.automaticallyImplyLeading : true), title: (tree.materialSliverAppBarNamedLarge.hasTitle() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedLarge.title) : null), actions: tree.materialSliverAppBarNamedLarge.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: (tree.materialSliverAppBarNamedLarge.hasFlexibleSpace() ? evaluateWidgetExpression(tree.materialSliverAppBarNamedLarge.flexibleSpace) : null), bottom: null, elevation: (tree.materialSliverAppBarNamedLarge.hasElevation() ? tree.materialSliverAppBarNamedLarge.elevation : null), scrolledUnderElevation: (tree.materialSliverAppBarNamedLarge.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedLarge.scrolledUnderElevation : null), shadowColor: null, surfaceTintColor: null, forceElevated: (tree.materialSliverAppBarNamedLarge.hasForceElevated() ? tree.materialSliverAppBarNamedLarge.forceElevated : false), backgroundColor: null, foregroundColor: null, iconTheme: null, actionsIconTheme: null, primary: (tree.materialSliverAppBarNamedLarge.hasPrimary() ? tree.materialSliverAppBarNamedLarge.primary : true), centerTitle: (tree.materialSliverAppBarNamedLarge.hasCenterTitle() ? tree.materialSliverAppBarNamedLarge.centerTitle : null), excludeHeaderSemantics: (tree.materialSliverAppBarNamedLarge.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedLarge.excludeHeaderSemantics : false), titleSpacing: (tree.materialSliverAppBarNamedLarge.hasTitleSpacing() ? tree.materialSliverAppBarNamedLarge.titleSpacing : null), collapsedHeight: (tree.materialSliverAppBarNamedLarge.hasCollapsedHeight() ? tree.materialSliverAppBarNamedLarge.collapsedHeight : null), expandedHeight: (tree.materialSliverAppBarNamedLarge.hasExpandedHeight() ? tree.materialSliverAppBarNamedLarge.expandedHeight : null), floating: (tree.materialSliverAppBarNamedLarge.hasFloating() ? tree.materialSliverAppBarNamedLarge.floating : false), pinned: (tree.materialSliverAppBarNamedLarge.hasPinned() ? tree.materialSliverAppBarNamedLarge.pinned : true), snap: (tree.materialSliverAppBarNamedLarge.hasSnap() ? tree.materialSliverAppBarNamedLarge.snap : false), stretch: (tree.materialSliverAppBarNamedLarge.hasStretch() ? tree.materialSliverAppBarNamedLarge.stretch : false), stretchTriggerOffset: (tree.materialSliverAppBarNamedLarge.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedLarge.stretchTriggerOffset : 100.0), onStretchTrigger: null, shape: null, toolbarHeight: (tree.materialSliverAppBarNamedLarge.hasToolbarHeight() ? tree.materialSliverAppBarNamedLarge.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.materialSliverAppBarNamedLarge.hasLeadingWidth() ? tree.materialSliverAppBarNamedLarge.leadingWidth : null), toolbarTextStyle: null, titleTextStyle: null, systemOverlayStyle: null, forceMaterialTransparency: (tree.materialSliverAppBarNamedLarge.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedLarge.forceMaterialTransparency : false), clipBehavior: null);
    case proto.WidgetExpression_Result.materialBadge:
      return $c60.Badge(key: (tree.materialBadge.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialBadge.key) : null), backgroundColor: null, textColor: null, smallSize: (tree.materialBadge.hasSmallSize() ? tree.materialBadge.smallSize : null), largeSize: (tree.materialBadge.hasLargeSize() ? tree.materialBadge.largeSize : null), textStyle: null, padding: null, alignment: null, offset: null, label: (tree.materialBadge.hasLabel() ? evaluateWidgetExpression(tree.materialBadge.label) : null), isLabelVisible: (tree.materialBadge.hasIsLabelVisible() ? tree.materialBadge.isLabelVisible : true), child: (tree.materialBadge.hasChild() ? evaluateWidgetExpression(tree.materialBadge.child) : null));
    case proto.WidgetExpression_Result.materialBadgeNamedCount:
      return $c61.Badge.count(key: (tree.materialBadgeNamedCount.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialBadgeNamedCount.key) : null), backgroundColor: null, textColor: null, smallSize: (tree.materialBadgeNamedCount.hasSmallSize() ? tree.materialBadgeNamedCount.smallSize : null), largeSize: (tree.materialBadgeNamedCount.hasLargeSize() ? tree.materialBadgeNamedCount.largeSize : null), textStyle: null, padding: null, alignment: null, offset: null, count: (tree.materialBadgeNamedCount.hasCount() ? tree.materialBadgeNamedCount.count : missing('count')), isLabelVisible: (tree.materialBadgeNamedCount.hasIsLabelVisible() ? tree.materialBadgeNamedCount.isLabelVisible : true), child: (tree.materialBadgeNamedCount.hasChild() ? evaluateWidgetExpression(tree.materialBadgeNamedCount.child) : null));
    case proto.WidgetExpression_Result.materialMaterialBanner:
      return $c62.MaterialBanner(key: (tree.materialMaterialBanner.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterialBanner.key) : null), content: (tree.materialMaterialBanner.hasContent() ? evaluateRequiredWidgetExpression(tree.materialMaterialBanner.content) : missing('content')), contentTextStyle: null, actions: tree.materialMaterialBanner.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), elevation: (tree.materialMaterialBanner.hasElevation() ? tree.materialMaterialBanner.elevation : null), leading: (tree.materialMaterialBanner.hasLeading() ? evaluateWidgetExpression(tree.materialMaterialBanner.leading) : null), backgroundColor: null, surfaceTintColor: null, shadowColor: null, dividerColor: null, padding: null, margin: null, leadingPadding: null, forceActionsBelow: (tree.materialMaterialBanner.hasForceActionsBelow() ? tree.materialMaterialBanner.forceActionsBelow : false), animation: null, onVisible: null);
    case proto.WidgetExpression_Result.materialMaterialBannerTheme:
      return $c63.MaterialBannerTheme(key: (tree.materialMaterialBannerTheme.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterialBannerTheme.key) : null), data: null, child: (tree.materialMaterialBannerTheme.hasChild() ? evaluateRequiredWidgetExpression(tree.materialMaterialBannerTheme.child) : missing('child')));
    case proto.WidgetExpression_Result.materialBottomAppBar:
      return $c64.BottomAppBar(key: (tree.materialBottomAppBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialBottomAppBar.key) : null), color: null, elevation: (tree.materialBottomAppBar.hasElevation() ? tree.materialBottomAppBar.elevation : null), shape: null, notchMargin: (tree.materialBottomAppBar.hasNotchMargin() ? tree.materialBottomAppBar.notchMargin : 4.0), child: (tree.materialBottomAppBar.hasChild() ? evaluateWidgetExpression(tree.materialBottomAppBar.child) : null), padding: null, surfaceTintColor: null, shadowColor: null, height: (tree.materialBottomAppBar.hasHeight() ? tree.materialBottomAppBar.height : null));
    case proto.WidgetExpression_Result.materialRawMaterialButton:
      return $c65.RawMaterialButton(key: (tree.materialRawMaterialButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialRawMaterialButton.key) : null), onPressed: null, onLongPress: null, onHighlightChanged: null, mouseCursor: null, textStyle: null, fillColor: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, elevation: (tree.materialRawMaterialButton.hasElevation() ? tree.materialRawMaterialButton.elevation : 2.0), focusElevation: (tree.materialRawMaterialButton.hasFocusElevation() ? tree.materialRawMaterialButton.focusElevation : 4.0), hoverElevation: (tree.materialRawMaterialButton.hasHoverElevation() ? tree.materialRawMaterialButton.hoverElevation : 4.0), highlightElevation: (tree.materialRawMaterialButton.hasHighlightElevation() ? tree.materialRawMaterialButton.highlightElevation : 8.0), disabledElevation: (tree.materialRawMaterialButton.hasDisabledElevation() ? tree.materialRawMaterialButton.disabledElevation : 0.0), animationDuration: (tree.materialRawMaterialButton.hasAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialRawMaterialButton.animationDuration) : missing('animationDuration')), focusNode: null, autofocus: (tree.materialRawMaterialButton.hasAutofocus() ? tree.materialRawMaterialButton.autofocus : false), materialTapTargetSize: null, child: (tree.materialRawMaterialButton.hasChild() ? evaluateWidgetExpression(tree.materialRawMaterialButton.child) : null), enableFeedback: (tree.materialRawMaterialButton.hasEnableFeedback() ? tree.materialRawMaterialButton.enableFeedback : true));
    case proto.WidgetExpression_Result.materialButtonBar:
      return $c66.ButtonBar(key: (tree.materialButtonBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialButtonBar.key) : null), alignment: null, mainAxisSize: null, buttonTextTheme: null, buttonMinWidth: (tree.materialButtonBar.hasButtonMinWidth() ? tree.materialButtonBar.buttonMinWidth : null), buttonHeight: (tree.materialButtonBar.hasButtonHeight() ? tree.materialButtonBar.buttonHeight : null), buttonPadding: null, buttonAlignedDropdown: (tree.materialButtonBar.hasButtonAlignedDropdown() ? tree.materialButtonBar.buttonAlignedDropdown : null), layoutBehavior: null, overflowDirection: null, overflowButtonSpacing: (tree.materialButtonBar.hasOverflowButtonSpacing() ? tree.materialButtonBar.overflowButtonSpacing : null), children: tree.materialButtonBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.materialButtonTheme:
      return $c67.ButtonTheme(key: (tree.materialButtonTheme.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialButtonTheme.key) : null), minWidth: (tree.materialButtonTheme.hasMinWidth() ? tree.materialButtonTheme.minWidth : 88.0), height: (tree.materialButtonTheme.hasHeight() ? tree.materialButtonTheme.height : 36.0), padding: null, shape: null, alignedDropdown: (tree.materialButtonTheme.hasAlignedDropdown() ? tree.materialButtonTheme.alignedDropdown : false), buttonColor: null, disabledColor: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, colorScheme: null, materialTapTargetSize: null, child: (tree.materialButtonTheme.hasChild() ? evaluateRequiredWidgetExpression(tree.materialButtonTheme.child) : missing('child')));
    case proto.WidgetExpression_Result.materialCard:
      return $c68.Card(key: (tree.materialCard.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCard.key) : null), color: null, shadowColor: null, surfaceTintColor: null, elevation: (tree.materialCard.hasElevation() ? tree.materialCard.elevation : null), shape: null, borderOnForeground: (tree.materialCard.hasBorderOnForeground() ? tree.materialCard.borderOnForeground : true), margin: null, clipBehavior: null, child: (tree.materialCard.hasChild() ? evaluateWidgetExpression(tree.materialCard.child) : null), semanticContainer: (tree.materialCard.hasSemanticContainer() ? tree.materialCard.semanticContainer : true));
    case proto.WidgetExpression_Result.materialCheckbox:
      return $c69.Checkbox(key: (tree.materialCheckbox.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckbox.key) : null), value: (tree.materialCheckbox.hasValue() ? tree.materialCheckbox.value : null), tristate: (tree.materialCheckbox.hasTristate() ? tree.materialCheckbox.tristate : false), onChanged: null, mouseCursor: null, activeColor: null, fillColor: null, checkColor: null, focusColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialCheckbox.hasSplashRadius() ? tree.materialCheckbox.splashRadius : null), materialTapTargetSize: null, visualDensity: null, focusNode: null, autofocus: (tree.materialCheckbox.hasAutofocus() ? tree.materialCheckbox.autofocus : false), shape: null, side: null, isError: (tree.materialCheckbox.hasIsError() ? tree.materialCheckbox.isError : false), semanticLabel: (tree.materialCheckbox.hasSemanticLabel() ? tree.materialCheckbox.semanticLabel : null));
    case proto.WidgetExpression_Result.materialCheckboxNamedAdaptive:
      return $c70.Checkbox.adaptive(key: (tree.materialCheckboxNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckboxNamedAdaptive.key) : null), value: (tree.materialCheckboxNamedAdaptive.hasValue() ? tree.materialCheckboxNamedAdaptive.value : null), tristate: (tree.materialCheckboxNamedAdaptive.hasTristate() ? tree.materialCheckboxNamedAdaptive.tristate : false), onChanged: null, mouseCursor: null, activeColor: null, fillColor: null, checkColor: null, focusColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialCheckboxNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxNamedAdaptive.splashRadius : null), materialTapTargetSize: null, visualDensity: null, focusNode: null, autofocus: (tree.materialCheckboxNamedAdaptive.hasAutofocus() ? tree.materialCheckboxNamedAdaptive.autofocus : false), shape: null, side: null, isError: (tree.materialCheckboxNamedAdaptive.hasIsError() ? tree.materialCheckboxNamedAdaptive.isError : false), semanticLabel: (tree.materialCheckboxNamedAdaptive.hasSemanticLabel() ? tree.materialCheckboxNamedAdaptive.semanticLabel : null));
    case proto.WidgetExpression_Result.materialCheckboxListTile:
      return $c71.CheckboxListTile(key: (tree.materialCheckboxListTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckboxListTile.key) : null), value: (tree.materialCheckboxListTile.hasValue() ? tree.materialCheckboxListTile.value : null), onChanged: null, mouseCursor: null, activeColor: null, fillColor: null, checkColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialCheckboxListTile.hasSplashRadius() ? tree.materialCheckboxListTile.splashRadius : null), materialTapTargetSize: null, visualDensity: null, focusNode: null, autofocus: (tree.materialCheckboxListTile.hasAutofocus() ? tree.materialCheckboxListTile.autofocus : false), shape: null, side: null, isError: (tree.materialCheckboxListTile.hasIsError() ? tree.materialCheckboxListTile.isError : false), enabled: (tree.materialCheckboxListTile.hasEnabled() ? tree.materialCheckboxListTile.enabled : null), tileColor: null, title: (tree.materialCheckboxListTile.hasTitle() ? evaluateWidgetExpression(tree.materialCheckboxListTile.title) : null), subtitle: (tree.materialCheckboxListTile.hasSubtitle() ? evaluateWidgetExpression(tree.materialCheckboxListTile.subtitle) : null), isThreeLine: (tree.materialCheckboxListTile.hasIsThreeLine() ? tree.materialCheckboxListTile.isThreeLine : false), dense: (tree.materialCheckboxListTile.hasDense() ? tree.materialCheckboxListTile.dense : null), secondary: (tree.materialCheckboxListTile.hasSecondary() ? evaluateWidgetExpression(tree.materialCheckboxListTile.secondary) : null), selected: (tree.materialCheckboxListTile.hasSelected() ? tree.materialCheckboxListTile.selected : false), contentPadding: null, tristate: (tree.materialCheckboxListTile.hasTristate() ? tree.materialCheckboxListTile.tristate : false), checkboxShape: null, selectedTileColor: null, onFocusChange: null, enableFeedback: (tree.materialCheckboxListTile.hasEnableFeedback() ? tree.materialCheckboxListTile.enableFeedback : null), checkboxSemanticLabel: (tree.materialCheckboxListTile.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTile.checkboxSemanticLabel : null));
    case proto.WidgetExpression_Result.materialCheckboxListTileNamedAdaptive:
      return $c72.CheckboxListTile.adaptive(key: (tree.materialCheckboxListTileNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckboxListTileNamedAdaptive.key) : null), value: (tree.materialCheckboxListTileNamedAdaptive.hasValue() ? tree.materialCheckboxListTileNamedAdaptive.value : null), onChanged: null, mouseCursor: null, activeColor: null, fillColor: null, checkColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialCheckboxListTileNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxListTileNamedAdaptive.splashRadius : null), materialTapTargetSize: null, visualDensity: null, focusNode: null, autofocus: (tree.materialCheckboxListTileNamedAdaptive.hasAutofocus() ? tree.materialCheckboxListTileNamedAdaptive.autofocus : false), shape: null, side: null, isError: (tree.materialCheckboxListTileNamedAdaptive.hasIsError() ? tree.materialCheckboxListTileNamedAdaptive.isError : false), enabled: (tree.materialCheckboxListTileNamedAdaptive.hasEnabled() ? tree.materialCheckboxListTileNamedAdaptive.enabled : null), tileColor: null, title: (tree.materialCheckboxListTileNamedAdaptive.hasTitle() ? evaluateWidgetExpression(tree.materialCheckboxListTileNamedAdaptive.title) : null), subtitle: (tree.materialCheckboxListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetExpression(tree.materialCheckboxListTileNamedAdaptive.subtitle) : null), isThreeLine: (tree.materialCheckboxListTileNamedAdaptive.hasIsThreeLine() ? tree.materialCheckboxListTileNamedAdaptive.isThreeLine : false), dense: (tree.materialCheckboxListTileNamedAdaptive.hasDense() ? tree.materialCheckboxListTileNamedAdaptive.dense : null), secondary: (tree.materialCheckboxListTileNamedAdaptive.hasSecondary() ? evaluateWidgetExpression(tree.materialCheckboxListTileNamedAdaptive.secondary) : null), selected: (tree.materialCheckboxListTileNamedAdaptive.hasSelected() ? tree.materialCheckboxListTileNamedAdaptive.selected : false), contentPadding: null, tristate: (tree.materialCheckboxListTileNamedAdaptive.hasTristate() ? tree.materialCheckboxListTileNamedAdaptive.tristate : false), checkboxShape: null, selectedTileColor: null, onFocusChange: null, enableFeedback: (tree.materialCheckboxListTileNamedAdaptive.hasEnableFeedback() ? tree.materialCheckboxListTileNamedAdaptive.enableFeedback : null), checkboxSemanticLabel: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTileNamedAdaptive.checkboxSemanticLabel : null));
    case proto.WidgetExpression_Result.materialChip:
      return $c73.Chip(key: (tree.materialChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialChip.key) : null), avatar: (tree.materialChip.hasAvatar() ? evaluateWidgetExpression(tree.materialChip.avatar) : null), label: (tree.materialChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialChip.label) : missing('label')), labelStyle: null, labelPadding: null, deleteIcon: (tree.materialChip.hasDeleteIcon() ? evaluateWidgetExpression(tree.materialChip.deleteIcon) : null), onDeleted: null, deleteIconColor: null, deleteButtonTooltipMessage: (tree.materialChip.hasDeleteButtonTooltipMessage() ? tree.materialChip.deleteButtonTooltipMessage : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialChip.hasAutofocus() ? tree.materialChip.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialChip.hasElevation() ? tree.materialChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null);
    case proto.WidgetExpression_Result.materialRawChip:
      return $c74.RawChip(key: (tree.materialRawChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialRawChip.key) : null), defaultProperties: null, avatar: (tree.materialRawChip.hasAvatar() ? evaluateWidgetExpression(tree.materialRawChip.avatar) : null), label: (tree.materialRawChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialRawChip.label) : missing('label')), labelStyle: null, padding: null, visualDensity: null, labelPadding: null, deleteIcon: (tree.materialRawChip.hasDeleteIcon() ? evaluateWidgetExpression(tree.materialRawChip.deleteIcon) : null), onDeleted: null, deleteIconColor: null, deleteButtonTooltipMessage: (tree.materialRawChip.hasDeleteButtonTooltipMessage() ? tree.materialRawChip.deleteButtonTooltipMessage : null), onPressed: null, onSelected: null, pressElevation: (tree.materialRawChip.hasPressElevation() ? tree.materialRawChip.pressElevation : null), tapEnabled: (tree.materialRawChip.hasTapEnabled() ? tree.materialRawChip.tapEnabled : true), selected: (tree.materialRawChip.hasSelected() ? tree.materialRawChip.selected : false), isEnabled: (tree.materialRawChip.hasIsEnabled() ? tree.materialRawChip.isEnabled : true), disabledColor: null, selectedColor: null, tooltip: (tree.materialRawChip.hasTooltip() ? tree.materialRawChip.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialRawChip.hasAutofocus() ? tree.materialRawChip.autofocus : false), color: null, backgroundColor: null, materialTapTargetSize: null, elevation: (tree.materialRawChip.hasElevation() ? tree.materialRawChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialRawChip.hasShowCheckmark() ? tree.materialRawChip.showCheckmark : true), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialChoiceChip:
      return $c75.ChoiceChip(key: (tree.materialChoiceChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialChoiceChip.key) : null), avatar: (tree.materialChoiceChip.hasAvatar() ? evaluateWidgetExpression(tree.materialChoiceChip.avatar) : null), label: (tree.materialChoiceChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialChoiceChip.label) : missing('label')), labelStyle: null, labelPadding: null, onSelected: null, pressElevation: (tree.materialChoiceChip.hasPressElevation() ? tree.materialChoiceChip.pressElevation : null), selected: (tree.materialChoiceChip.hasSelected() ? tree.materialChoiceChip.selected : missing('selected')), selectedColor: null, disabledColor: null, tooltip: (tree.materialChoiceChip.hasTooltip() ? tree.materialChoiceChip.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialChoiceChip.hasAutofocus() ? tree.materialChoiceChip.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialChoiceChip.hasElevation() ? tree.materialChoiceChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialChoiceChip.hasShowCheckmark() ? tree.materialChoiceChip.showCheckmark : null), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialChoiceChipNamedElevated:
      return $c76.ChoiceChip.elevated(key: (tree.materialChoiceChipNamedElevated.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialChoiceChipNamedElevated.key) : null), avatar: (tree.materialChoiceChipNamedElevated.hasAvatar() ? evaluateWidgetExpression(tree.materialChoiceChipNamedElevated.avatar) : null), label: (tree.materialChoiceChipNamedElevated.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialChoiceChipNamedElevated.label) : missing('label')), labelStyle: null, labelPadding: null, onSelected: null, pressElevation: (tree.materialChoiceChipNamedElevated.hasPressElevation() ? tree.materialChoiceChipNamedElevated.pressElevation : null), selected: (tree.materialChoiceChipNamedElevated.hasSelected() ? tree.materialChoiceChipNamedElevated.selected : missing('selected')), selectedColor: null, disabledColor: null, tooltip: (tree.materialChoiceChipNamedElevated.hasTooltip() ? tree.materialChoiceChipNamedElevated.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialChoiceChipNamedElevated.hasAutofocus() ? tree.materialChoiceChipNamedElevated.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialChoiceChipNamedElevated.hasElevation() ? tree.materialChoiceChipNamedElevated.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialChoiceChipNamedElevated.hasShowCheckmark() ? tree.materialChoiceChipNamedElevated.showCheckmark : null), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialCircleAvatar:
      return $c77.CircleAvatar(key: (tree.materialCircleAvatar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCircleAvatar.key) : null), child: (tree.materialCircleAvatar.hasChild() ? evaluateWidgetExpression(tree.materialCircleAvatar.child) : null), backgroundColor: null, backgroundImage: null, foregroundImage: null, onBackgroundImageError: null, onForegroundImageError: null, foregroundColor: null, radius: (tree.materialCircleAvatar.hasRadius() ? tree.materialCircleAvatar.radius : null), minRadius: (tree.materialCircleAvatar.hasMinRadius() ? tree.materialCircleAvatar.minRadius : null), maxRadius: (tree.materialCircleAvatar.hasMaxRadius() ? tree.materialCircleAvatar.maxRadius : null));
    case proto.WidgetExpression_Result.materialTableRowInkWell:
      return $c78.TableRowInkWell(key: (tree.materialTableRowInkWell.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTableRowInkWell.key) : null), child: (tree.materialTableRowInkWell.hasChild() ? evaluateWidgetExpression(tree.materialTableRowInkWell.child) : null), onTap: null, onDoubleTap: null, onLongPress: null, onHighlightChanged: null, onSecondaryTap: null, onSecondaryTapDown: null, overlayColor: null, mouseCursor: null);
    case proto.WidgetExpression_Result.materialDesktopTextSelectionToolbarButton:
      return $c79.DesktopTextSelectionToolbarButton(key: (tree.materialDesktopTextSelectionToolbarButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDesktopTextSelectionToolbarButton.key) : null), onPressed: null, child: (tree.materialDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetExpression(tree.materialDesktopTextSelectionToolbarButton.child) : missing('child')));
    case proto.WidgetExpression_Result.materialAlertDialog:
      return $c80.AlertDialog(key: (tree.materialAlertDialog.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialAlertDialog.key) : null), icon: (tree.materialAlertDialog.hasIcon() ? evaluateWidgetExpression(tree.materialAlertDialog.icon) : null), iconPadding: null, iconColor: null, title: (tree.materialAlertDialog.hasTitle() ? evaluateWidgetExpression(tree.materialAlertDialog.title) : null), titlePadding: null, titleTextStyle: null, content: (tree.materialAlertDialog.hasContent() ? evaluateWidgetExpression(tree.materialAlertDialog.content) : null), contentPadding: null, contentTextStyle: null, actions: tree.materialAlertDialog.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), actionsPadding: null, actionsAlignment: null, actionsOverflowAlignment: null, actionsOverflowDirection: null, actionsOverflowButtonSpacing: (tree.materialAlertDialog.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialog.actionsOverflowButtonSpacing : null), buttonPadding: null, backgroundColor: null, elevation: (tree.materialAlertDialog.hasElevation() ? tree.materialAlertDialog.elevation : null), shadowColor: null, surfaceTintColor: null, semanticLabel: (tree.materialAlertDialog.hasSemanticLabel() ? tree.materialAlertDialog.semanticLabel : null), shape: null, alignment: null, scrollable: (tree.materialAlertDialog.hasScrollable() ? tree.materialAlertDialog.scrollable : false));
    case proto.WidgetExpression_Result.materialAlertDialogNamedAdaptive:
      return $c81.AlertDialog.adaptive(key: (tree.materialAlertDialogNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialAlertDialogNamedAdaptive.key) : null), icon: (tree.materialAlertDialogNamedAdaptive.hasIcon() ? evaluateWidgetExpression(tree.materialAlertDialogNamedAdaptive.icon) : null), iconPadding: null, iconColor: null, title: (tree.materialAlertDialogNamedAdaptive.hasTitle() ? evaluateWidgetExpression(tree.materialAlertDialogNamedAdaptive.title) : null), titlePadding: null, titleTextStyle: null, content: (tree.materialAlertDialogNamedAdaptive.hasContent() ? evaluateWidgetExpression(tree.materialAlertDialogNamedAdaptive.content) : null), contentPadding: null, contentTextStyle: null, actions: tree.materialAlertDialogNamedAdaptive.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), actionsPadding: null, actionsAlignment: null, actionsOverflowAlignment: null, actionsOverflowDirection: null, actionsOverflowButtonSpacing: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialogNamedAdaptive.actionsOverflowButtonSpacing : null), buttonPadding: null, backgroundColor: null, elevation: (tree.materialAlertDialogNamedAdaptive.hasElevation() ? tree.materialAlertDialogNamedAdaptive.elevation : null), shadowColor: null, surfaceTintColor: null, semanticLabel: (tree.materialAlertDialogNamedAdaptive.hasSemanticLabel() ? tree.materialAlertDialogNamedAdaptive.semanticLabel : null), shape: null, alignment: null, scrollable: (tree.materialAlertDialogNamedAdaptive.hasScrollable() ? tree.materialAlertDialogNamedAdaptive.scrollable : missing('scrollable')), scrollController: null, actionScrollController: null, insetAnimationDuration: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialAlertDialogNamedAdaptive.insetAnimationDuration) : missing('insetAnimationDuration')));
    case proto.WidgetExpression_Result.materialDialog:
      return $c82.Dialog(key: (tree.materialDialog.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDialog.key) : null), backgroundColor: null, elevation: (tree.materialDialog.hasElevation() ? tree.materialDialog.elevation : null), shadowColor: null, surfaceTintColor: null, insetAnimationDuration: (tree.materialDialog.hasInsetAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialDialog.insetAnimationDuration) : missing('insetAnimationDuration')), insetPadding: null, shape: null, alignment: null, child: (tree.materialDialog.hasChild() ? evaluateWidgetExpression(tree.materialDialog.child) : null));
    case proto.WidgetExpression_Result.materialDialogNamedFullscreen:
      return $c83.Dialog.fullscreen(key: (tree.materialDialogNamedFullscreen.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDialogNamedFullscreen.key) : null), backgroundColor: null, insetAnimationDuration: (tree.materialDialogNamedFullscreen.hasInsetAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialDialogNamedFullscreen.insetAnimationDuration) : missing('insetAnimationDuration')), child: (tree.materialDialogNamedFullscreen.hasChild() ? evaluateWidgetExpression(tree.materialDialogNamedFullscreen.child) : null));
    case proto.WidgetExpression_Result.materialSimpleDialog:
      return $c84.SimpleDialog(key: (tree.materialSimpleDialog.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSimpleDialog.key) : null), title: (tree.materialSimpleDialog.hasTitle() ? evaluateWidgetExpression(tree.materialSimpleDialog.title) : null), titleTextStyle: null, children: tree.materialSimpleDialog.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), backgroundColor: null, elevation: (tree.materialSimpleDialog.hasElevation() ? tree.materialSimpleDialog.elevation : null), shadowColor: null, surfaceTintColor: null, semanticLabel: (tree.materialSimpleDialog.hasSemanticLabel() ? tree.materialSimpleDialog.semanticLabel : null), shape: null, alignment: null);
    case proto.WidgetExpression_Result.materialSimpleDialogOption:
      return $c85.SimpleDialogOption(key: (tree.materialSimpleDialogOption.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSimpleDialogOption.key) : null), onPressed: null, padding: null, child: (tree.materialSimpleDialogOption.hasChild() ? evaluateWidgetExpression(tree.materialSimpleDialogOption.child) : null));
    case proto.WidgetExpression_Result.materialDivider:
      return $c86.Divider(key: (tree.materialDivider.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDivider.key) : null), height: (tree.materialDivider.hasHeight() ? tree.materialDivider.height : null), thickness: (tree.materialDivider.hasThickness() ? tree.materialDivider.thickness : null), indent: (tree.materialDivider.hasIndent() ? tree.materialDivider.indent : null), endIndent: (tree.materialDivider.hasEndIndent() ? tree.materialDivider.endIndent : null), color: null);
    case proto.WidgetExpression_Result.materialVerticalDivider:
      return $c87.VerticalDivider(key: (tree.materialVerticalDivider.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialVerticalDivider.key) : null), width: (tree.materialVerticalDivider.hasWidth() ? tree.materialVerticalDivider.width : null), thickness: (tree.materialVerticalDivider.hasThickness() ? tree.materialVerticalDivider.thickness : null), indent: (tree.materialVerticalDivider.hasIndent() ? tree.materialVerticalDivider.indent : null), endIndent: (tree.materialVerticalDivider.hasEndIndent() ? tree.materialVerticalDivider.endIndent : null), color: null);
    case proto.WidgetExpression_Result.materialDrawer:
      return $c88.Drawer(key: (tree.materialDrawer.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDrawer.key) : null), backgroundColor: null, elevation: (tree.materialDrawer.hasElevation() ? tree.materialDrawer.elevation : null), shadowColor: null, surfaceTintColor: null, shape: null, width: (tree.materialDrawer.hasWidth() ? tree.materialDrawer.width : null), child: (tree.materialDrawer.hasChild() ? evaluateWidgetExpression(tree.materialDrawer.child) : null), semanticLabel: (tree.materialDrawer.hasSemanticLabel() ? tree.materialDrawer.semanticLabel : null), clipBehavior: null);
    case proto.WidgetExpression_Result.materialDrawerHeader:
      return $c89.DrawerHeader(key: (tree.materialDrawerHeader.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDrawerHeader.key) : null), decoration: null, margin: null, duration: (tree.materialDrawerHeader.hasDuration() ? types.evaluateRequiredDurationExpression(tree.materialDrawerHeader.duration) : missing('duration')), child: (tree.materialDrawerHeader.hasChild() ? evaluateWidgetExpression(tree.materialDrawerHeader.child) : null));
    case proto.WidgetExpression_Result.materialDropdownButton:
      return $c90.DropdownButton(key: (tree.materialDropdownButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDropdownButton.key) : null), items: null, selectedItemBuilder: null, hint: (tree.materialDropdownButton.hasHint() ? evaluateWidgetExpression(tree.materialDropdownButton.hint) : null), disabledHint: (tree.materialDropdownButton.hasDisabledHint() ? evaluateWidgetExpression(tree.materialDropdownButton.disabledHint) : null), onChanged: null, onTap: null, elevation: (tree.materialDropdownButton.hasElevation() ? tree.materialDropdownButton.elevation : 8), style: null, underline: (tree.materialDropdownButton.hasUnderline() ? evaluateWidgetExpression(tree.materialDropdownButton.underline) : null), icon: (tree.materialDropdownButton.hasIcon() ? evaluateWidgetExpression(tree.materialDropdownButton.icon) : null), iconDisabledColor: null, iconEnabledColor: null, iconSize: (tree.materialDropdownButton.hasIconSize() ? tree.materialDropdownButton.iconSize : 24.0), isDense: (tree.materialDropdownButton.hasIsDense() ? tree.materialDropdownButton.isDense : false), isExpanded: (tree.materialDropdownButton.hasIsExpanded() ? tree.materialDropdownButton.isExpanded : false), itemHeight: (tree.materialDropdownButton.hasItemHeight() ? tree.materialDropdownButton.itemHeight : null), focusColor: null, focusNode: null, autofocus: (tree.materialDropdownButton.hasAutofocus() ? tree.materialDropdownButton.autofocus : false), dropdownColor: null, menuMaxHeight: (tree.materialDropdownButton.hasMenuMaxHeight() ? tree.materialDropdownButton.menuMaxHeight : null), enableFeedback: (tree.materialDropdownButton.hasEnableFeedback() ? tree.materialDropdownButton.enableFeedback : null), borderRadius: null, padding: null);
    case proto.WidgetExpression_Result.materialDropdownButtonFormField:
      return $c91.DropdownButtonFormField(key: (tree.materialDropdownButtonFormField.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDropdownButtonFormField.key) : null), items: null, selectedItemBuilder: null, hint: (tree.materialDropdownButtonFormField.hasHint() ? evaluateWidgetExpression(tree.materialDropdownButtonFormField.hint) : null), disabledHint: (tree.materialDropdownButtonFormField.hasDisabledHint() ? evaluateWidgetExpression(tree.materialDropdownButtonFormField.disabledHint) : null), onChanged: null, onTap: null, elevation: (tree.materialDropdownButtonFormField.hasElevation() ? tree.materialDropdownButtonFormField.elevation : 8), style: null, icon: (tree.materialDropdownButtonFormField.hasIcon() ? evaluateWidgetExpression(tree.materialDropdownButtonFormField.icon) : null), iconDisabledColor: null, iconEnabledColor: null, iconSize: (tree.materialDropdownButtonFormField.hasIconSize() ? tree.materialDropdownButtonFormField.iconSize : 24.0), isDense: (tree.materialDropdownButtonFormField.hasIsDense() ? tree.materialDropdownButtonFormField.isDense : true), isExpanded: (tree.materialDropdownButtonFormField.hasIsExpanded() ? tree.materialDropdownButtonFormField.isExpanded : false), itemHeight: (tree.materialDropdownButtonFormField.hasItemHeight() ? tree.materialDropdownButtonFormField.itemHeight : null), focusColor: null, focusNode: null, autofocus: (tree.materialDropdownButtonFormField.hasAutofocus() ? tree.materialDropdownButtonFormField.autofocus : false), dropdownColor: null, decoration: null, onSaved: null, validator: null, autovalidateMode: null, menuMaxHeight: (tree.materialDropdownButtonFormField.hasMenuMaxHeight() ? tree.materialDropdownButtonFormField.menuMaxHeight : null), enableFeedback: (tree.materialDropdownButtonFormField.hasEnableFeedback() ? tree.materialDropdownButtonFormField.enableFeedback : null), borderRadius: null, padding: null);
    case proto.WidgetExpression_Result.materialDropdownButtonHideUnderline:
      return $c92.DropdownButtonHideUnderline(key: (tree.materialDropdownButtonHideUnderline.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDropdownButtonHideUnderline.key) : null), child: (tree.materialDropdownButtonHideUnderline.hasChild() ? evaluateRequiredWidgetExpression(tree.materialDropdownButtonHideUnderline.child) : missing('child')));
    case proto.WidgetExpression_Result.materialDropdownMenuItem:
      return $c93.DropdownMenuItem(key: (tree.materialDropdownMenuItem.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDropdownMenuItem.key) : null), onTap: null, enabled: (tree.materialDropdownMenuItem.hasEnabled() ? tree.materialDropdownMenuItem.enabled : true), child: (tree.materialDropdownMenuItem.hasChild() ? evaluateRequiredWidgetExpression(tree.materialDropdownMenuItem.child) : missing('child')));
    case proto.WidgetExpression_Result.materialElevatedButton:
      return $c94.ElevatedButton(key: (tree.materialElevatedButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialElevatedButton.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialElevatedButton.hasAutofocus() ? tree.materialElevatedButton.autofocus : missing('autofocus')), statesController: null, child: (tree.materialElevatedButton.hasChild() ? evaluateWidgetExpression(tree.materialElevatedButton.child) : null));
    case proto.WidgetExpression_Result.materialElevatedButtonNamedIcon:
      return $c95.ElevatedButton.icon(key: (tree.materialElevatedButtonNamedIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialElevatedButtonNamedIcon.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialElevatedButtonNamedIcon.hasAutofocus() ? tree.materialElevatedButtonNamedIcon.autofocus : null), clipBehavior: null, statesController: null, icon: (tree.materialElevatedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialElevatedButtonNamedIcon.icon) : missing('icon')), label: (tree.materialElevatedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialElevatedButtonNamedIcon.label) : missing('label')));
    case proto.WidgetExpression_Result.materialExpandIcon:
      return $c96.ExpandIcon(key: (tree.materialExpandIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialExpandIcon.key) : null), isExpanded: (tree.materialExpandIcon.hasIsExpanded() ? tree.materialExpandIcon.isExpanded : false), size: (tree.materialExpandIcon.hasSize() ? tree.materialExpandIcon.size : 24.0), onPressed: null, color: null, disabledColor: null, expandedColor: null);
    case proto.WidgetExpression_Result.materialExpansionPanelList:
      return $c97.ExpansionPanelList(key: (tree.materialExpansionPanelList.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialExpansionPanelList.key) : null), expansionCallback: null, animationDuration: (tree.materialExpansionPanelList.hasAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialExpansionPanelList.animationDuration) : missing('animationDuration')), dividerColor: null, elevation: (tree.materialExpansionPanelList.hasElevation() ? tree.materialExpansionPanelList.elevation : 2), expandIconColor: null, materialGapSize: (tree.materialExpansionPanelList.hasMaterialGapSize() ? tree.materialExpansionPanelList.materialGapSize : 16.0));
    case proto.WidgetExpression_Result.materialExpansionPanelListNamedRadio:
      return $c98.ExpansionPanelList.radio(key: (tree.materialExpansionPanelListNamedRadio.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialExpansionPanelListNamedRadio.key) : null), expansionCallback: null, animationDuration: (tree.materialExpansionPanelListNamedRadio.hasAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialExpansionPanelListNamedRadio.animationDuration) : missing('animationDuration')), initialOpenPanelValue: null, dividerColor: null, elevation: (tree.materialExpansionPanelListNamedRadio.hasElevation() ? tree.materialExpansionPanelListNamedRadio.elevation : 2), expandIconColor: null, materialGapSize: (tree.materialExpansionPanelListNamedRadio.hasMaterialGapSize() ? tree.materialExpansionPanelListNamedRadio.materialGapSize : 16.0));
    case proto.WidgetExpression_Result.materialExpansionTile:
      return $c99.ExpansionTile(key: (tree.materialExpansionTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialExpansionTile.key) : null), leading: (tree.materialExpansionTile.hasLeading() ? evaluateWidgetExpression(tree.materialExpansionTile.leading) : null), title: (tree.materialExpansionTile.hasTitle() ? evaluateRequiredWidgetExpression(tree.materialExpansionTile.title) : missing('title')), subtitle: (tree.materialExpansionTile.hasSubtitle() ? evaluateWidgetExpression(tree.materialExpansionTile.subtitle) : null), onExpansionChanged: null, children: tree.materialExpansionTile.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), trailing: (tree.materialExpansionTile.hasTrailing() ? evaluateWidgetExpression(tree.materialExpansionTile.trailing) : null), initiallyExpanded: (tree.materialExpansionTile.hasInitiallyExpanded() ? tree.materialExpansionTile.initiallyExpanded : false), maintainState: (tree.materialExpansionTile.hasMaintainState() ? tree.materialExpansionTile.maintainState : false), tilePadding: null, expandedCrossAxisAlignment: null, expandedAlignment: null, childrenPadding: null, backgroundColor: null, collapsedBackgroundColor: null, textColor: null, collapsedTextColor: null, iconColor: null, collapsedIconColor: null, shape: null, collapsedShape: null, clipBehavior: null, controlAffinity: null, controller: null);
    case proto.WidgetExpression_Result.materialFilledButton:
      return $c100.FilledButton(key: (tree.materialFilledButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilledButton.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialFilledButton.hasAutofocus() ? tree.materialFilledButton.autofocus : missing('autofocus')), statesController: null, child: (tree.materialFilledButton.hasChild() ? evaluateWidgetExpression(tree.materialFilledButton.child) : null));
    case proto.WidgetExpression_Result.materialFilledButtonNamedIcon:
      return $c101.FilledButton.icon(key: (tree.materialFilledButtonNamedIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilledButtonNamedIcon.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialFilledButtonNamedIcon.hasAutofocus() ? tree.materialFilledButtonNamedIcon.autofocus : null), clipBehavior: null, statesController: null, icon: (tree.materialFilledButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialFilledButtonNamedIcon.icon) : missing('icon')), label: (tree.materialFilledButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialFilledButtonNamedIcon.label) : missing('label')));
    case proto.WidgetExpression_Result.materialFilledButtonNamedTonal:
      return $c102.FilledButton.tonal(key: (tree.materialFilledButtonNamedTonal.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilledButtonNamedTonal.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialFilledButtonNamedTonal.hasAutofocus() ? tree.materialFilledButtonNamedTonal.autofocus : missing('autofocus')), statesController: null, child: (tree.materialFilledButtonNamedTonal.hasChild() ? evaluateWidgetExpression(tree.materialFilledButtonNamedTonal.child) : null));
    case proto.WidgetExpression_Result.materialFilledButtonNamedTonalIcon:
      return $c103.FilledButton.tonalIcon(key: (tree.materialFilledButtonNamedTonalIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilledButtonNamedTonalIcon.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialFilledButtonNamedTonalIcon.hasAutofocus() ? tree.materialFilledButtonNamedTonalIcon.autofocus : null), clipBehavior: null, statesController: null, icon: (tree.materialFilledButtonNamedTonalIcon.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialFilledButtonNamedTonalIcon.icon) : missing('icon')), label: (tree.materialFilledButtonNamedTonalIcon.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialFilledButtonNamedTonalIcon.label) : missing('label')));
    case proto.WidgetExpression_Result.materialFilterChip:
      return $c104.FilterChip(key: (tree.materialFilterChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilterChip.key) : null), avatar: (tree.materialFilterChip.hasAvatar() ? evaluateWidgetExpression(tree.materialFilterChip.avatar) : null), label: (tree.materialFilterChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialFilterChip.label) : missing('label')), labelStyle: null, labelPadding: null, selected: (tree.materialFilterChip.hasSelected() ? tree.materialFilterChip.selected : false), onSelected: null, pressElevation: (tree.materialFilterChip.hasPressElevation() ? tree.materialFilterChip.pressElevation : null), disabledColor: null, selectedColor: null, tooltip: (tree.materialFilterChip.hasTooltip() ? tree.materialFilterChip.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialFilterChip.hasAutofocus() ? tree.materialFilterChip.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialFilterChip.hasElevation() ? tree.materialFilterChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialFilterChip.hasShowCheckmark() ? tree.materialFilterChip.showCheckmark : null), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialFilterChipNamedElevated:
      return $c105.FilterChip.elevated(key: (tree.materialFilterChipNamedElevated.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFilterChipNamedElevated.key) : null), avatar: (tree.materialFilterChipNamedElevated.hasAvatar() ? evaluateWidgetExpression(tree.materialFilterChipNamedElevated.avatar) : null), label: (tree.materialFilterChipNamedElevated.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialFilterChipNamedElevated.label) : missing('label')), labelStyle: null, labelPadding: null, selected: (tree.materialFilterChipNamedElevated.hasSelected() ? tree.materialFilterChipNamedElevated.selected : false), onSelected: null, pressElevation: (tree.materialFilterChipNamedElevated.hasPressElevation() ? tree.materialFilterChipNamedElevated.pressElevation : null), disabledColor: null, selectedColor: null, tooltip: (tree.materialFilterChipNamedElevated.hasTooltip() ? tree.materialFilterChipNamedElevated.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialFilterChipNamedElevated.hasAutofocus() ? tree.materialFilterChipNamedElevated.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialFilterChipNamedElevated.hasElevation() ? tree.materialFilterChipNamedElevated.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialFilterChipNamedElevated.hasShowCheckmark() ? tree.materialFilterChipNamedElevated.showCheckmark : null), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialFlexibleSpaceBar:
      return $c106.FlexibleSpaceBar(key: (tree.materialFlexibleSpaceBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFlexibleSpaceBar.key) : null), title: (tree.materialFlexibleSpaceBar.hasTitle() ? evaluateWidgetExpression(tree.materialFlexibleSpaceBar.title) : null), background: (tree.materialFlexibleSpaceBar.hasBackground() ? evaluateWidgetExpression(tree.materialFlexibleSpaceBar.background) : null), centerTitle: (tree.materialFlexibleSpaceBar.hasCenterTitle() ? tree.materialFlexibleSpaceBar.centerTitle : null), titlePadding: null, expandedTitleScale: (tree.materialFlexibleSpaceBar.hasExpandedTitleScale() ? tree.materialFlexibleSpaceBar.expandedTitleScale : 1.5));
    case proto.WidgetExpression_Result.materialFlexibleSpaceBarSettings:
      return $c107.FlexibleSpaceBarSettings(key: (tree.materialFlexibleSpaceBarSettings.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFlexibleSpaceBarSettings.key) : null), toolbarOpacity: (tree.materialFlexibleSpaceBarSettings.hasToolbarOpacity() ? tree.materialFlexibleSpaceBarSettings.toolbarOpacity : missing('toolbarOpacity')), minExtent: (tree.materialFlexibleSpaceBarSettings.hasMinExtent() ? tree.materialFlexibleSpaceBarSettings.minExtent : missing('minExtent')), maxExtent: (tree.materialFlexibleSpaceBarSettings.hasMaxExtent() ? tree.materialFlexibleSpaceBarSettings.maxExtent : missing('maxExtent')), currentExtent: (tree.materialFlexibleSpaceBarSettings.hasCurrentExtent() ? tree.materialFlexibleSpaceBarSettings.currentExtent : missing('currentExtent')), child: (tree.materialFlexibleSpaceBarSettings.hasChild() ? evaluateRequiredWidgetExpression(tree.materialFlexibleSpaceBarSettings.child) : missing('child')), isScrolledUnder: (tree.materialFlexibleSpaceBarSettings.hasIsScrolledUnder() ? tree.materialFlexibleSpaceBarSettings.isScrolledUnder : null));
    case proto.WidgetExpression_Result.materialFloatingActionButton:
      return $c108.FloatingActionButton(key: (tree.materialFloatingActionButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFloatingActionButton.key) : null), child: (tree.materialFloatingActionButton.hasChild() ? evaluateWidgetExpression(tree.materialFloatingActionButton.child) : null), tooltip: (tree.materialFloatingActionButton.hasTooltip() ? tree.materialFloatingActionButton.tooltip : null), foregroundColor: null, backgroundColor: null, focusColor: null, hoverColor: null, splashColor: null, heroTag: null, elevation: (tree.materialFloatingActionButton.hasElevation() ? tree.materialFloatingActionButton.elevation : null), focusElevation: (tree.materialFloatingActionButton.hasFocusElevation() ? tree.materialFloatingActionButton.focusElevation : null), hoverElevation: (tree.materialFloatingActionButton.hasHoverElevation() ? tree.materialFloatingActionButton.hoverElevation : null), highlightElevation: (tree.materialFloatingActionButton.hasHighlightElevation() ? tree.materialFloatingActionButton.highlightElevation : null), disabledElevation: (tree.materialFloatingActionButton.hasDisabledElevation() ? tree.materialFloatingActionButton.disabledElevation : null), onPressed: null, mouseCursor: null, mini: (tree.materialFloatingActionButton.hasMini() ? tree.materialFloatingActionButton.mini : false), shape: null, focusNode: null, autofocus: (tree.materialFloatingActionButton.hasAutofocus() ? tree.materialFloatingActionButton.autofocus : false), materialTapTargetSize: null, isExtended: (tree.materialFloatingActionButton.hasIsExtended() ? tree.materialFloatingActionButton.isExtended : false), enableFeedback: (tree.materialFloatingActionButton.hasEnableFeedback() ? tree.materialFloatingActionButton.enableFeedback : null));
    case proto.WidgetExpression_Result.materialFloatingActionButtonNamedSmall:
      return $c109.FloatingActionButton.small(key: (tree.materialFloatingActionButtonNamedSmall.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFloatingActionButtonNamedSmall.key) : null), child: (tree.materialFloatingActionButtonNamedSmall.hasChild() ? evaluateWidgetExpression(tree.materialFloatingActionButtonNamedSmall.child) : null), tooltip: (tree.materialFloatingActionButtonNamedSmall.hasTooltip() ? tree.materialFloatingActionButtonNamedSmall.tooltip : null), foregroundColor: null, backgroundColor: null, focusColor: null, hoverColor: null, splashColor: null, heroTag: null, elevation: (tree.materialFloatingActionButtonNamedSmall.hasElevation() ? tree.materialFloatingActionButtonNamedSmall.elevation : null), focusElevation: (tree.materialFloatingActionButtonNamedSmall.hasFocusElevation() ? tree.materialFloatingActionButtonNamedSmall.focusElevation : null), hoverElevation: (tree.materialFloatingActionButtonNamedSmall.hasHoverElevation() ? tree.materialFloatingActionButtonNamedSmall.hoverElevation : null), highlightElevation: (tree.materialFloatingActionButtonNamedSmall.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedSmall.highlightElevation : null), disabledElevation: (tree.materialFloatingActionButtonNamedSmall.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedSmall.disabledElevation : null), onPressed: null, mouseCursor: null, shape: null, focusNode: null, autofocus: (tree.materialFloatingActionButtonNamedSmall.hasAutofocus() ? tree.materialFloatingActionButtonNamedSmall.autofocus : false), materialTapTargetSize: null, enableFeedback: (tree.materialFloatingActionButtonNamedSmall.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedSmall.enableFeedback : null));
    case proto.WidgetExpression_Result.materialFloatingActionButtonNamedLarge:
      return $c110.FloatingActionButton.large(key: (tree.materialFloatingActionButtonNamedLarge.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFloatingActionButtonNamedLarge.key) : null), child: (tree.materialFloatingActionButtonNamedLarge.hasChild() ? evaluateWidgetExpression(tree.materialFloatingActionButtonNamedLarge.child) : null), tooltip: (tree.materialFloatingActionButtonNamedLarge.hasTooltip() ? tree.materialFloatingActionButtonNamedLarge.tooltip : null), foregroundColor: null, backgroundColor: null, focusColor: null, hoverColor: null, splashColor: null, heroTag: null, elevation: (tree.materialFloatingActionButtonNamedLarge.hasElevation() ? tree.materialFloatingActionButtonNamedLarge.elevation : null), focusElevation: (tree.materialFloatingActionButtonNamedLarge.hasFocusElevation() ? tree.materialFloatingActionButtonNamedLarge.focusElevation : null), hoverElevation: (tree.materialFloatingActionButtonNamedLarge.hasHoverElevation() ? tree.materialFloatingActionButtonNamedLarge.hoverElevation : null), highlightElevation: (tree.materialFloatingActionButtonNamedLarge.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedLarge.highlightElevation : null), disabledElevation: (tree.materialFloatingActionButtonNamedLarge.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedLarge.disabledElevation : null), onPressed: null, mouseCursor: null, shape: null, focusNode: null, autofocus: (tree.materialFloatingActionButtonNamedLarge.hasAutofocus() ? tree.materialFloatingActionButtonNamedLarge.autofocus : false), materialTapTargetSize: null, enableFeedback: (tree.materialFloatingActionButtonNamedLarge.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedLarge.enableFeedback : null));
    case proto.WidgetExpression_Result.materialFloatingActionButtonNamedExtended:
      return $c111.FloatingActionButton.extended(key: (tree.materialFloatingActionButtonNamedExtended.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFloatingActionButtonNamedExtended.key) : null), tooltip: (tree.materialFloatingActionButtonNamedExtended.hasTooltip() ? tree.materialFloatingActionButtonNamedExtended.tooltip : null), foregroundColor: null, backgroundColor: null, focusColor: null, hoverColor: null, heroTag: null, elevation: (tree.materialFloatingActionButtonNamedExtended.hasElevation() ? tree.materialFloatingActionButtonNamedExtended.elevation : null), focusElevation: (tree.materialFloatingActionButtonNamedExtended.hasFocusElevation() ? tree.materialFloatingActionButtonNamedExtended.focusElevation : null), hoverElevation: (tree.materialFloatingActionButtonNamedExtended.hasHoverElevation() ? tree.materialFloatingActionButtonNamedExtended.hoverElevation : null), splashColor: null, highlightElevation: (tree.materialFloatingActionButtonNamedExtended.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedExtended.highlightElevation : null), disabledElevation: (tree.materialFloatingActionButtonNamedExtended.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedExtended.disabledElevation : null), onPressed: null, mouseCursor: null, shape: null, isExtended: (tree.materialFloatingActionButtonNamedExtended.hasIsExtended() ? tree.materialFloatingActionButtonNamedExtended.isExtended : true), materialTapTargetSize: null, focusNode: null, autofocus: (tree.materialFloatingActionButtonNamedExtended.hasAutofocus() ? tree.materialFloatingActionButtonNamedExtended.autofocus : false), extendedIconLabelSpacing: (tree.materialFloatingActionButtonNamedExtended.hasExtendedIconLabelSpacing() ? tree.materialFloatingActionButtonNamedExtended.extendedIconLabelSpacing : null), extendedPadding: null, extendedTextStyle: null, icon: (tree.materialFloatingActionButtonNamedExtended.hasIcon() ? evaluateWidgetExpression(tree.materialFloatingActionButtonNamedExtended.icon) : null), label: (tree.materialFloatingActionButtonNamedExtended.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialFloatingActionButtonNamedExtended.label) : missing('label')), enableFeedback: (tree.materialFloatingActionButtonNamedExtended.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedExtended.enableFeedback : null));
    case proto.WidgetExpression_Result.materialFlutterLogo:
      return $c112.FlutterLogo(key: (tree.materialFlutterLogo.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialFlutterLogo.key) : null), size: (tree.materialFlutterLogo.hasSize() ? tree.materialFlutterLogo.size : null), duration: (tree.materialFlutterLogo.hasDuration() ? types.evaluateRequiredDurationExpression(tree.materialFlutterLogo.duration) : missing('duration')));
    case proto.WidgetExpression_Result.materialGridTile:
      return $c113.GridTile(key: (tree.materialGridTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialGridTile.key) : null), header: (tree.materialGridTile.hasHeader() ? evaluateWidgetExpression(tree.materialGridTile.header) : null), footer: (tree.materialGridTile.hasFooter() ? evaluateWidgetExpression(tree.materialGridTile.footer) : null), child: (tree.materialGridTile.hasChild() ? evaluateRequiredWidgetExpression(tree.materialGridTile.child) : missing('child')));
    case proto.WidgetExpression_Result.materialGridTileBar:
      return $c114.GridTileBar(key: (tree.materialGridTileBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialGridTileBar.key) : null), backgroundColor: null, leading: (tree.materialGridTileBar.hasLeading() ? evaluateWidgetExpression(tree.materialGridTileBar.leading) : null), title: (tree.materialGridTileBar.hasTitle() ? evaluateWidgetExpression(tree.materialGridTileBar.title) : null), subtitle: (tree.materialGridTileBar.hasSubtitle() ? evaluateWidgetExpression(tree.materialGridTileBar.subtitle) : null), trailing: (tree.materialGridTileBar.hasTrailing() ? evaluateWidgetExpression(tree.materialGridTileBar.trailing) : null));
    case proto.WidgetExpression_Result.materialIconButton:
      return $c115.IconButton(key: (tree.materialIconButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialIconButton.key) : null), iconSize: (tree.materialIconButton.hasIconSize() ? tree.materialIconButton.iconSize : null), visualDensity: null, padding: null, alignment: null, splashRadius: (tree.materialIconButton.hasSplashRadius() ? tree.materialIconButton.splashRadius : null), color: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, disabledColor: null, onPressed: null, mouseCursor: null, focusNode: null, autofocus: (tree.materialIconButton.hasAutofocus() ? tree.materialIconButton.autofocus : false), tooltip: (tree.materialIconButton.hasTooltip() ? tree.materialIconButton.tooltip : null), enableFeedback: (tree.materialIconButton.hasEnableFeedback() ? tree.materialIconButton.enableFeedback : null), constraints: null, style: null, isSelected: (tree.materialIconButton.hasIsSelected() ? tree.materialIconButton.isSelected : null), selectedIcon: (tree.materialIconButton.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialIconButton.selectedIcon) : null), icon: (tree.materialIconButton.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialIconButton.icon) : missing('icon')));
    case proto.WidgetExpression_Result.materialIconButtonNamedFilled:
      return $c116.IconButton.filled(key: (tree.materialIconButtonNamedFilled.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialIconButtonNamedFilled.key) : null), iconSize: (tree.materialIconButtonNamedFilled.hasIconSize() ? tree.materialIconButtonNamedFilled.iconSize : null), visualDensity: null, padding: null, alignment: null, splashRadius: (tree.materialIconButtonNamedFilled.hasSplashRadius() ? tree.materialIconButtonNamedFilled.splashRadius : null), color: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, disabledColor: null, onPressed: null, mouseCursor: null, focusNode: null, autofocus: (tree.materialIconButtonNamedFilled.hasAutofocus() ? tree.materialIconButtonNamedFilled.autofocus : false), tooltip: (tree.materialIconButtonNamedFilled.hasTooltip() ? tree.materialIconButtonNamedFilled.tooltip : null), enableFeedback: (tree.materialIconButtonNamedFilled.hasEnableFeedback() ? tree.materialIconButtonNamedFilled.enableFeedback : null), constraints: null, style: null, isSelected: (tree.materialIconButtonNamedFilled.hasIsSelected() ? tree.materialIconButtonNamedFilled.isSelected : null), selectedIcon: (tree.materialIconButtonNamedFilled.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialIconButtonNamedFilled.selectedIcon) : null), icon: (tree.materialIconButtonNamedFilled.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialIconButtonNamedFilled.icon) : missing('icon')));
    case proto.WidgetExpression_Result.materialIconButtonNamedFilledTonal:
      return $c117.IconButton.filledTonal(key: (tree.materialIconButtonNamedFilledTonal.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialIconButtonNamedFilledTonal.key) : null), iconSize: (tree.materialIconButtonNamedFilledTonal.hasIconSize() ? tree.materialIconButtonNamedFilledTonal.iconSize : null), visualDensity: null, padding: null, alignment: null, splashRadius: (tree.materialIconButtonNamedFilledTonal.hasSplashRadius() ? tree.materialIconButtonNamedFilledTonal.splashRadius : null), color: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, disabledColor: null, onPressed: null, mouseCursor: null, focusNode: null, autofocus: (tree.materialIconButtonNamedFilledTonal.hasAutofocus() ? tree.materialIconButtonNamedFilledTonal.autofocus : false), tooltip: (tree.materialIconButtonNamedFilledTonal.hasTooltip() ? tree.materialIconButtonNamedFilledTonal.tooltip : null), enableFeedback: (tree.materialIconButtonNamedFilledTonal.hasEnableFeedback() ? tree.materialIconButtonNamedFilledTonal.enableFeedback : null), constraints: null, style: null, isSelected: (tree.materialIconButtonNamedFilledTonal.hasIsSelected() ? tree.materialIconButtonNamedFilledTonal.isSelected : null), selectedIcon: (tree.materialIconButtonNamedFilledTonal.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialIconButtonNamedFilledTonal.selectedIcon) : null), icon: (tree.materialIconButtonNamedFilledTonal.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialIconButtonNamedFilledTonal.icon) : missing('icon')));
    case proto.WidgetExpression_Result.materialIconButtonNamedOutlined:
      return $c118.IconButton.outlined(key: (tree.materialIconButtonNamedOutlined.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialIconButtonNamedOutlined.key) : null), iconSize: (tree.materialIconButtonNamedOutlined.hasIconSize() ? tree.materialIconButtonNamedOutlined.iconSize : null), visualDensity: null, padding: null, alignment: null, splashRadius: (tree.materialIconButtonNamedOutlined.hasSplashRadius() ? tree.materialIconButtonNamedOutlined.splashRadius : null), color: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, disabledColor: null, onPressed: null, mouseCursor: null, focusNode: null, autofocus: (tree.materialIconButtonNamedOutlined.hasAutofocus() ? tree.materialIconButtonNamedOutlined.autofocus : false), tooltip: (tree.materialIconButtonNamedOutlined.hasTooltip() ? tree.materialIconButtonNamedOutlined.tooltip : null), enableFeedback: (tree.materialIconButtonNamedOutlined.hasEnableFeedback() ? tree.materialIconButtonNamedOutlined.enableFeedback : null), constraints: null, style: null, isSelected: (tree.materialIconButtonNamedOutlined.hasIsSelected() ? tree.materialIconButtonNamedOutlined.isSelected : null), selectedIcon: (tree.materialIconButtonNamedOutlined.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialIconButtonNamedOutlined.selectedIcon) : null), icon: (tree.materialIconButtonNamedOutlined.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialIconButtonNamedOutlined.icon) : missing('icon')));
    case proto.WidgetExpression_Result.materialInk:
      return $c119.Ink(key: (tree.materialInk.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialInk.key) : null), padding: null, color: null, decoration: null, width: (tree.materialInk.hasWidth() ? tree.materialInk.width : null), height: (tree.materialInk.hasHeight() ? tree.materialInk.height : null), child: (tree.materialInk.hasChild() ? evaluateWidgetExpression(tree.materialInk.child) : null));
    case proto.WidgetExpression_Result.materialInkResponse:
      return $c120.InkResponse(key: (tree.materialInkResponse.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialInkResponse.key) : null), child: (tree.materialInkResponse.hasChild() ? evaluateWidgetExpression(tree.materialInkResponse.child) : null), onTap: null, onTapDown: null, onTapUp: null, onTapCancel: null, onDoubleTap: null, onLongPress: null, onSecondaryTap: null, onSecondaryTapUp: null, onSecondaryTapDown: null, onSecondaryTapCancel: null, onHighlightChanged: null, onHover: null, mouseCursor: null, containedInkWell: (tree.materialInkResponse.hasContainedInkWell() ? tree.materialInkResponse.containedInkWell : false), radius: (tree.materialInkResponse.hasRadius() ? tree.materialInkResponse.radius : null), borderRadius: null, customBorder: null, focusColor: null, hoverColor: null, highlightColor: null, overlayColor: null, splashColor: null, splashFactory: null, enableFeedback: (tree.materialInkResponse.hasEnableFeedback() ? tree.materialInkResponse.enableFeedback : true), excludeFromSemantics: (tree.materialInkResponse.hasExcludeFromSemantics() ? tree.materialInkResponse.excludeFromSemantics : false), focusNode: null, canRequestFocus: (tree.materialInkResponse.hasCanRequestFocus() ? tree.materialInkResponse.canRequestFocus : true), onFocusChange: null, autofocus: (tree.materialInkResponse.hasAutofocus() ? tree.materialInkResponse.autofocus : false), statesController: null);
    case proto.WidgetExpression_Result.materialInkWell:
      return $c121.InkWell(key: (tree.materialInkWell.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialInkWell.key) : null), child: (tree.materialInkWell.hasChild() ? evaluateWidgetExpression(tree.materialInkWell.child) : null), onTap: null, onDoubleTap: null, onLongPress: null, onTapDown: null, onTapUp: null, onTapCancel: null, onSecondaryTap: null, onSecondaryTapUp: null, onSecondaryTapDown: null, onSecondaryTapCancel: null, onHighlightChanged: null, onHover: null, mouseCursor: null, focusColor: null, hoverColor: null, highlightColor: null, overlayColor: null, splashColor: null, splashFactory: null, radius: (tree.materialInkWell.hasRadius() ? tree.materialInkWell.radius : null), borderRadius: null, customBorder: null, enableFeedback: (tree.materialInkWell.hasEnableFeedback() ? tree.materialInkWell.enableFeedback : true), excludeFromSemantics: (tree.materialInkWell.hasExcludeFromSemantics() ? tree.materialInkWell.excludeFromSemantics : false), focusNode: null, canRequestFocus: (tree.materialInkWell.hasCanRequestFocus() ? tree.materialInkWell.canRequestFocus : true), onFocusChange: null, autofocus: (tree.materialInkWell.hasAutofocus() ? tree.materialInkWell.autofocus : false), statesController: null);
    case proto.WidgetExpression_Result.materialInputChip:
      return $c122.InputChip(key: (tree.materialInputChip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialInputChip.key) : null), avatar: (tree.materialInputChip.hasAvatar() ? evaluateWidgetExpression(tree.materialInputChip.avatar) : null), label: (tree.materialInputChip.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialInputChip.label) : missing('label')), labelStyle: null, labelPadding: null, selected: (tree.materialInputChip.hasSelected() ? tree.materialInputChip.selected : false), isEnabled: (tree.materialInputChip.hasIsEnabled() ? tree.materialInputChip.isEnabled : true), onSelected: null, deleteIcon: (tree.materialInputChip.hasDeleteIcon() ? evaluateWidgetExpression(tree.materialInputChip.deleteIcon) : null), onDeleted: null, deleteIconColor: null, deleteButtonTooltipMessage: (tree.materialInputChip.hasDeleteButtonTooltipMessage() ? tree.materialInputChip.deleteButtonTooltipMessage : null), onPressed: null, pressElevation: (tree.materialInputChip.hasPressElevation() ? tree.materialInputChip.pressElevation : null), disabledColor: null, selectedColor: null, tooltip: (tree.materialInputChip.hasTooltip() ? tree.materialInputChip.tooltip : null), side: null, shape: null, focusNode: null, autofocus: (tree.materialInputChip.hasAutofocus() ? tree.materialInputChip.autofocus : false), color: null, backgroundColor: null, padding: null, visualDensity: null, materialTapTargetSize: null, elevation: (tree.materialInputChip.hasElevation() ? tree.materialInputChip.elevation : null), shadowColor: null, surfaceTintColor: null, iconTheme: null, selectedShadowColor: null, showCheckmark: (tree.materialInputChip.hasShowCheckmark() ? tree.materialInputChip.showCheckmark : null), checkmarkColor: null);
    case proto.WidgetExpression_Result.materialListTile:
      return $c123.ListTile(key: (tree.materialListTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialListTile.key) : null), leading: (tree.materialListTile.hasLeading() ? evaluateWidgetExpression(tree.materialListTile.leading) : null), title: (tree.materialListTile.hasTitle() ? evaluateWidgetExpression(tree.materialListTile.title) : null), subtitle: (tree.materialListTile.hasSubtitle() ? evaluateWidgetExpression(tree.materialListTile.subtitle) : null), trailing: (tree.materialListTile.hasTrailing() ? evaluateWidgetExpression(tree.materialListTile.trailing) : null), isThreeLine: (tree.materialListTile.hasIsThreeLine() ? tree.materialListTile.isThreeLine : false), dense: (tree.materialListTile.hasDense() ? tree.materialListTile.dense : null), visualDensity: null, shape: null, style: null, selectedColor: null, iconColor: null, textColor: null, titleTextStyle: null, subtitleTextStyle: null, leadingAndTrailingTextStyle: null, contentPadding: null, enabled: (tree.materialListTile.hasEnabled() ? tree.materialListTile.enabled : true), onTap: null, onLongPress: null, onFocusChange: null, mouseCursor: null, selected: (tree.materialListTile.hasSelected() ? tree.materialListTile.selected : false), focusColor: null, hoverColor: null, splashColor: null, focusNode: null, autofocus: (tree.materialListTile.hasAutofocus() ? tree.materialListTile.autofocus : false), tileColor: null, selectedTileColor: null, enableFeedback: (tree.materialListTile.hasEnableFeedback() ? tree.materialListTile.enableFeedback : null), horizontalTitleGap: (tree.materialListTile.hasHorizontalTitleGap() ? tree.materialListTile.horizontalTitleGap : null), minVerticalPadding: (tree.materialListTile.hasMinVerticalPadding() ? tree.materialListTile.minVerticalPadding : null), minLeadingWidth: (tree.materialListTile.hasMinLeadingWidth() ? tree.materialListTile.minLeadingWidth : null), titleAlignment: null);
    case proto.WidgetExpression_Result.materialListTileTheme:
      return $c124.ListTileTheme(key: (tree.materialListTileTheme.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialListTileTheme.key) : null), data: null, dense: (tree.materialListTileTheme.hasDense() ? tree.materialListTileTheme.dense : null), shape: null, style: null, selectedColor: null, iconColor: null, textColor: null, contentPadding: null, tileColor: null, selectedTileColor: null, enableFeedback: (tree.materialListTileTheme.hasEnableFeedback() ? tree.materialListTileTheme.enableFeedback : null), mouseCursor: null, horizontalTitleGap: (tree.materialListTileTheme.hasHorizontalTitleGap() ? tree.materialListTileTheme.horizontalTitleGap : null), minVerticalPadding: (tree.materialListTileTheme.hasMinVerticalPadding() ? tree.materialListTileTheme.minVerticalPadding : null), minLeadingWidth: (tree.materialListTileTheme.hasMinLeadingWidth() ? tree.materialListTileTheme.minLeadingWidth : null), child: (tree.materialListTileTheme.hasChild() ? evaluateRequiredWidgetExpression(tree.materialListTileTheme.child) : missing('child')));
    case proto.WidgetExpression_Result.materialMagnifier:
      return $c125.Magnifier(key: (tree.materialMagnifier.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMagnifier.key) : null));
    case proto.WidgetExpression_Result.materialMaterial:
      return $c126.Material(key: (tree.materialMaterial.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterial.key) : null), elevation: (tree.materialMaterial.hasElevation() ? tree.materialMaterial.elevation : 0.0), color: null, shadowColor: null, surfaceTintColor: null, textStyle: null, borderRadius: null, shape: null, borderOnForeground: (tree.materialMaterial.hasBorderOnForeground() ? tree.materialMaterial.borderOnForeground : true), animationDuration: (tree.materialMaterial.hasAnimationDuration() ? types.evaluateRequiredDurationExpression(tree.materialMaterial.animationDuration) : missing('animationDuration')), child: (tree.materialMaterial.hasChild() ? evaluateWidgetExpression(tree.materialMaterial.child) : null));
    case proto.WidgetExpression_Result.materialMaterialButton:
      return $c127.MaterialButton(key: (tree.materialMaterialButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMaterialButton.key) : null), onPressed: null, onLongPress: null, onHighlightChanged: null, mouseCursor: null, textTheme: null, textColor: null, disabledTextColor: null, color: null, disabledColor: null, focusColor: null, hoverColor: null, highlightColor: null, splashColor: null, colorBrightness: null, elevation: (tree.materialMaterialButton.hasElevation() ? tree.materialMaterialButton.elevation : null), focusElevation: (tree.materialMaterialButton.hasFocusElevation() ? tree.materialMaterialButton.focusElevation : null), hoverElevation: (tree.materialMaterialButton.hasHoverElevation() ? tree.materialMaterialButton.hoverElevation : null), highlightElevation: (tree.materialMaterialButton.hasHighlightElevation() ? tree.materialMaterialButton.highlightElevation : null), disabledElevation: (tree.materialMaterialButton.hasDisabledElevation() ? tree.materialMaterialButton.disabledElevation : null), padding: null, visualDensity: null, shape: null, focusNode: null, autofocus: (tree.materialMaterialButton.hasAutofocus() ? tree.materialMaterialButton.autofocus : false), materialTapTargetSize: null, animationDuration: (tree.materialMaterialButton.hasAnimationDuration() ? types.evaluateDurationExpression(tree.materialMaterialButton.animationDuration) : null), minWidth: (tree.materialMaterialButton.hasMinWidth() ? tree.materialMaterialButton.minWidth : null), height: (tree.materialMaterialButton.hasHeight() ? tree.materialMaterialButton.height : null), enableFeedback: (tree.materialMaterialButton.hasEnableFeedback() ? tree.materialMaterialButton.enableFeedback : true), child: (tree.materialMaterialButton.hasChild() ? evaluateWidgetExpression(tree.materialMaterialButton.child) : null));
    case proto.WidgetExpression_Result.materialCheckboxMenuButton:
      return $c128.CheckboxMenuButton(key: (tree.materialCheckboxMenuButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckboxMenuButton.key) : null), value: (tree.materialCheckboxMenuButton.hasValue() ? tree.materialCheckboxMenuButton.value : null), tristate: (tree.materialCheckboxMenuButton.hasTristate() ? tree.materialCheckboxMenuButton.tristate : false), isError: (tree.materialCheckboxMenuButton.hasIsError() ? tree.materialCheckboxMenuButton.isError : false), onChanged: null, onHover: null, onFocusChange: null, focusNode: null, shortcut: null, style: null, statesController: null, trailingIcon: (tree.materialCheckboxMenuButton.hasTrailingIcon() ? evaluateWidgetExpression(tree.materialCheckboxMenuButton.trailingIcon) : null), closeOnActivate: (tree.materialCheckboxMenuButton.hasCloseOnActivate() ? tree.materialCheckboxMenuButton.closeOnActivate : true), child: (tree.materialCheckboxMenuButton.hasChild() ? evaluateWidgetExpression(tree.materialCheckboxMenuButton.child) : null));
    case proto.WidgetExpression_Result.materialMenuAcceleratorCallbackBinding:
      return $c129.MenuAcceleratorCallbackBinding(key: (tree.materialMenuAcceleratorCallbackBinding.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMenuAcceleratorCallbackBinding.key) : null), onInvoke: null, hasSubmenu: (tree.materialMenuAcceleratorCallbackBinding.hasHasSubmenu() ? tree.materialMenuAcceleratorCallbackBinding.hasSubmenu : false), child: (tree.materialMenuAcceleratorCallbackBinding.hasChild() ? evaluateRequiredWidgetExpression(tree.materialMenuAcceleratorCallbackBinding.child) : missing('child')));
    case proto.WidgetExpression_Result.materialMenuAcceleratorLabel:
      return $c130.MenuAcceleratorLabel((tree.materialMenuAcceleratorLabel.hasLabel() ? tree.materialMenuAcceleratorLabel.label : missing('label')), key: (tree.materialMenuAcceleratorLabel.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMenuAcceleratorLabel.key) : null));
    case proto.WidgetExpression_Result.materialMenuAnchor:
      return $c131.MenuAnchor(key: (tree.materialMenuAnchor.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMenuAnchor.key) : null), controller: null, childFocusNode: null, style: null, alignmentOffset: null, anchorTapClosesMenu: (tree.materialMenuAnchor.hasAnchorTapClosesMenu() ? tree.materialMenuAnchor.anchorTapClosesMenu : false), onOpen: null, onClose: null, crossAxisUnconstrained: (tree.materialMenuAnchor.hasCrossAxisUnconstrained() ? tree.materialMenuAnchor.crossAxisUnconstrained : true), menuChildren: tree.materialMenuAnchor.menuChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), builder: null, child: (tree.materialMenuAnchor.hasChild() ? evaluateWidgetExpression(tree.materialMenuAnchor.child) : null));
    case proto.WidgetExpression_Result.materialMenuBar:
      return $c132.MenuBar(key: (tree.materialMenuBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMenuBar.key) : null), style: null, controller: null, children: tree.materialMenuBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.materialMenuItemButton:
      return $c133.MenuItemButton(key: (tree.materialMenuItemButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMenuItemButton.key) : null), onPressed: null, onHover: null, requestFocusOnHover: (tree.materialMenuItemButton.hasRequestFocusOnHover() ? tree.materialMenuItemButton.requestFocusOnHover : true), onFocusChange: null, focusNode: null, shortcut: null, style: null, statesController: null, leadingIcon: (tree.materialMenuItemButton.hasLeadingIcon() ? evaluateWidgetExpression(tree.materialMenuItemButton.leadingIcon) : null), trailingIcon: (tree.materialMenuItemButton.hasTrailingIcon() ? evaluateWidgetExpression(tree.materialMenuItemButton.trailingIcon) : null), closeOnActivate: (tree.materialMenuItemButton.hasCloseOnActivate() ? tree.materialMenuItemButton.closeOnActivate : true), child: (tree.materialMenuItemButton.hasChild() ? evaluateWidgetExpression(tree.materialMenuItemButton.child) : null));
    case proto.WidgetExpression_Result.materialSubmenuButton:
      return $c134.SubmenuButton(key: (tree.materialSubmenuButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSubmenuButton.key) : null), onHover: null, onFocusChange: null, onOpen: null, onClose: null, controller: null, style: null, menuStyle: null, alignmentOffset: null, focusNode: null, statesController: null, leadingIcon: (tree.materialSubmenuButton.hasLeadingIcon() ? evaluateWidgetExpression(tree.materialSubmenuButton.leadingIcon) : null), trailingIcon: (tree.materialSubmenuButton.hasTrailingIcon() ? evaluateWidgetExpression(tree.materialSubmenuButton.trailingIcon) : null), menuChildren: tree.materialSubmenuButton.menuChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), child: (tree.materialSubmenuButton.hasChild() ? evaluateWidgetExpression(tree.materialSubmenuButton.child) : null));
    case proto.WidgetExpression_Result.materialMergeableMaterial:
      return $c135.MergeableMaterial(key: (tree.materialMergeableMaterial.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialMergeableMaterial.key) : null), elevation: (tree.materialMergeableMaterial.hasElevation() ? tree.materialMergeableMaterial.elevation : 2), hasDividers: (tree.materialMergeableMaterial.hasHasDividers() ? tree.materialMergeableMaterial.hasDividers : false), dividerColor: null);
    case proto.WidgetExpression_Result.materialNavigationBar:
      return $c136.NavigationBar(key: (tree.materialNavigationBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialNavigationBar.key) : null), animationDuration: (tree.materialNavigationBar.hasAnimationDuration() ? types.evaluateDurationExpression(tree.materialNavigationBar.animationDuration) : null), selectedIndex: (tree.materialNavigationBar.hasSelectedIndex() ? tree.materialNavigationBar.selectedIndex : 0), destinations: tree.materialNavigationBar.destinations.map((e) => evaluateRequiredWidgetExpression(e)).toList(), onDestinationSelected: null, backgroundColor: null, elevation: (tree.materialNavigationBar.hasElevation() ? tree.materialNavigationBar.elevation : null), shadowColor: null, surfaceTintColor: null, indicatorColor: null, indicatorShape: null, height: (tree.materialNavigationBar.hasHeight() ? tree.materialNavigationBar.height : null), labelBehavior: null);
    case proto.WidgetExpression_Result.materialNavigationDestination:
      return $c137.NavigationDestination(key: (tree.materialNavigationDestination.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialNavigationDestination.key) : null), icon: (tree.materialNavigationDestination.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialNavigationDestination.icon) : missing('icon')), selectedIcon: (tree.materialNavigationDestination.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialNavigationDestination.selectedIcon) : null), label: (tree.materialNavigationDestination.hasLabel() ? tree.materialNavigationDestination.label : missing('label')), tooltip: (tree.materialNavigationDestination.hasTooltip() ? tree.materialNavigationDestination.tooltip : null));
    case proto.WidgetExpression_Result.materialNavigationDrawer:
      return $c138.NavigationDrawer(key: (tree.materialNavigationDrawer.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialNavigationDrawer.key) : null), children: tree.materialNavigationDrawer.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), backgroundColor: null, shadowColor: null, surfaceTintColor: null, elevation: (tree.materialNavigationDrawer.hasElevation() ? tree.materialNavigationDrawer.elevation : null), indicatorColor: null, indicatorShape: null, onDestinationSelected: null, selectedIndex: (tree.materialNavigationDrawer.hasSelectedIndex() ? tree.materialNavigationDrawer.selectedIndex : 0));
    case proto.WidgetExpression_Result.materialNavigationDrawerDestination:
      return $c139.NavigationDrawerDestination(key: (tree.materialNavigationDrawerDestination.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialNavigationDrawerDestination.key) : null), backgroundColor: null, icon: (tree.materialNavigationDrawerDestination.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialNavigationDrawerDestination.icon) : missing('icon')), selectedIcon: (tree.materialNavigationDrawerDestination.hasSelectedIcon() ? evaluateWidgetExpression(tree.materialNavigationDrawerDestination.selectedIcon) : null), label: (tree.materialNavigationDrawerDestination.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialNavigationDrawerDestination.label) : missing('label')));
    case proto.WidgetExpression_Result.materialOutlinedButton:
      return $c140.OutlinedButton(key: (tree.materialOutlinedButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialOutlinedButton.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialOutlinedButton.hasAutofocus() ? tree.materialOutlinedButton.autofocus : missing('autofocus')), statesController: null, child: (tree.materialOutlinedButton.hasChild() ? evaluateWidgetExpression(tree.materialOutlinedButton.child) : null));
    case proto.WidgetExpression_Result.materialOutlinedButtonNamedIcon:
      return $c141.OutlinedButton.icon(key: (tree.materialOutlinedButtonNamedIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialOutlinedButtonNamedIcon.key) : null), onPressed: null, onLongPress: null, style: null, focusNode: null, autofocus: (tree.materialOutlinedButtonNamedIcon.hasAutofocus() ? tree.materialOutlinedButtonNamedIcon.autofocus : null), clipBehavior: null, statesController: null, icon: (tree.materialOutlinedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialOutlinedButtonNamedIcon.icon) : missing('icon')), label: (tree.materialOutlinedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialOutlinedButtonNamedIcon.label) : missing('label')));
    case proto.WidgetExpression_Result.materialCheckedPopupMenuItem:
      return $c142.CheckedPopupMenuItem(key: (tree.materialCheckedPopupMenuItem.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCheckedPopupMenuItem.key) : null), checked: (tree.materialCheckedPopupMenuItem.hasChecked() ? tree.materialCheckedPopupMenuItem.checked : false), enabled: (tree.materialCheckedPopupMenuItem.hasEnabled() ? tree.materialCheckedPopupMenuItem.enabled : true), padding: null, height: (tree.materialCheckedPopupMenuItem.hasHeight() ? tree.materialCheckedPopupMenuItem.height : missing('height')), mouseCursor: null, child: (tree.materialCheckedPopupMenuItem.hasChild() ? evaluateWidgetExpression(tree.materialCheckedPopupMenuItem.child) : null));
    case proto.WidgetExpression_Result.materialPopupMenuDivider:
      return $c143.PopupMenuDivider(key: (tree.materialPopupMenuDivider.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialPopupMenuDivider.key) : null), height: (tree.materialPopupMenuDivider.hasHeight() ? tree.materialPopupMenuDivider.height : missing('height')));
    case proto.WidgetExpression_Result.materialPopupMenuItem:
      return $c144.PopupMenuItem(key: (tree.materialPopupMenuItem.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialPopupMenuItem.key) : null), onTap: null, enabled: (tree.materialPopupMenuItem.hasEnabled() ? tree.materialPopupMenuItem.enabled : true), height: (tree.materialPopupMenuItem.hasHeight() ? tree.materialPopupMenuItem.height : missing('height')), padding: null, textStyle: null, labelTextStyle: null, mouseCursor: null, child: (tree.materialPopupMenuItem.hasChild() ? evaluateWidgetExpression(tree.materialPopupMenuItem.child) : null));
    case proto.WidgetExpression_Result.materialCircularProgressIndicator:
      return $c145.CircularProgressIndicator(key: (tree.materialCircularProgressIndicator.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCircularProgressIndicator.key) : null), value: (tree.materialCircularProgressIndicator.hasValue() ? tree.materialCircularProgressIndicator.value : null), backgroundColor: null, color: null, valueColor: null, strokeWidth: (tree.materialCircularProgressIndicator.hasStrokeWidth() ? tree.materialCircularProgressIndicator.strokeWidth : 4.0), strokeAlign: (tree.materialCircularProgressIndicator.hasStrokeAlign() ? tree.materialCircularProgressIndicator.strokeAlign : missing('strokeAlign')), semanticsLabel: (tree.materialCircularProgressIndicator.hasSemanticsLabel() ? tree.materialCircularProgressIndicator.semanticsLabel : null), semanticsValue: (tree.materialCircularProgressIndicator.hasSemanticsValue() ? tree.materialCircularProgressIndicator.semanticsValue : null), strokeCap: null);
    case proto.WidgetExpression_Result.materialCircularProgressIndicatorNamedAdaptive:
      return $c146.CircularProgressIndicator.adaptive(key: (tree.materialCircularProgressIndicatorNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialCircularProgressIndicatorNamedAdaptive.key) : null), value: (tree.materialCircularProgressIndicatorNamedAdaptive.hasValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.value : null), backgroundColor: null, valueColor: null, strokeWidth: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeWidth() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeWidth : 4.0), semanticsLabel: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsLabel() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsLabel : null), semanticsValue: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsValue : null), strokeCap: null, strokeAlign: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeAlign() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeAlign : missing('strokeAlign')));
    case proto.WidgetExpression_Result.materialLinearProgressIndicator:
      return $c147.LinearProgressIndicator(key: (tree.materialLinearProgressIndicator.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialLinearProgressIndicator.key) : null), value: (tree.materialLinearProgressIndicator.hasValue() ? tree.materialLinearProgressIndicator.value : null), backgroundColor: null, color: null, valueColor: null, minHeight: (tree.materialLinearProgressIndicator.hasMinHeight() ? tree.materialLinearProgressIndicator.minHeight : null), semanticsLabel: (tree.materialLinearProgressIndicator.hasSemanticsLabel() ? tree.materialLinearProgressIndicator.semanticsLabel : null), semanticsValue: (tree.materialLinearProgressIndicator.hasSemanticsValue() ? tree.materialLinearProgressIndicator.semanticsValue : null));
    case proto.WidgetExpression_Result.materialRefreshProgressIndicator:
      return $c148.RefreshProgressIndicator(key: (tree.materialRefreshProgressIndicator.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialRefreshProgressIndicator.key) : null), value: (tree.materialRefreshProgressIndicator.hasValue() ? tree.materialRefreshProgressIndicator.value : null), backgroundColor: null, color: null, valueColor: null, strokeWidth: (tree.materialRefreshProgressIndicator.hasStrokeWidth() ? tree.materialRefreshProgressIndicator.strokeWidth : 4.0), strokeAlign: (tree.materialRefreshProgressIndicator.hasStrokeAlign() ? tree.materialRefreshProgressIndicator.strokeAlign : missing('strokeAlign')), semanticsLabel: (tree.materialRefreshProgressIndicator.hasSemanticsLabel() ? tree.materialRefreshProgressIndicator.semanticsLabel : null), semanticsValue: (tree.materialRefreshProgressIndicator.hasSemanticsValue() ? tree.materialRefreshProgressIndicator.semanticsValue : null), strokeCap: null);
    case proto.WidgetExpression_Result.materialScaffold:
      return $c149.Scaffold(key: (tree.materialScaffold.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialScaffold.key) : null), appBar: null, body: (tree.materialScaffold.hasBody() ? evaluateWidgetExpression(tree.materialScaffold.body) : null), floatingActionButton: (tree.materialScaffold.hasFloatingActionButton() ? evaluateWidgetExpression(tree.materialScaffold.floatingActionButton) : null), floatingActionButtonLocation: null, floatingActionButtonAnimator: null, persistentFooterButtons: tree.materialScaffold.persistentFooterButtons.map((e) => evaluateRequiredWidgetExpression(e)).toList(), drawer: (tree.materialScaffold.hasDrawer() ? evaluateWidgetExpression(tree.materialScaffold.drawer) : null), onDrawerChanged: null, endDrawer: (tree.materialScaffold.hasEndDrawer() ? evaluateWidgetExpression(tree.materialScaffold.endDrawer) : null), onEndDrawerChanged: null, bottomNavigationBar: (tree.materialScaffold.hasBottomNavigationBar() ? evaluateWidgetExpression(tree.materialScaffold.bottomNavigationBar) : null), bottomSheet: (tree.materialScaffold.hasBottomSheet() ? evaluateWidgetExpression(tree.materialScaffold.bottomSheet) : null), backgroundColor: null, resizeToAvoidBottomInset: (tree.materialScaffold.hasResizeToAvoidBottomInset() ? tree.materialScaffold.resizeToAvoidBottomInset : null), primary: (tree.materialScaffold.hasPrimary() ? tree.materialScaffold.primary : true), extendBody: (tree.materialScaffold.hasExtendBody() ? tree.materialScaffold.extendBody : false), extendBodyBehindAppBar: (tree.materialScaffold.hasExtendBodyBehindAppBar() ? tree.materialScaffold.extendBodyBehindAppBar : false), drawerScrimColor: null, drawerEdgeDragWidth: (tree.materialScaffold.hasDrawerEdgeDragWidth() ? tree.materialScaffold.drawerEdgeDragWidth : null), drawerEnableOpenDragGesture: (tree.materialScaffold.hasDrawerEnableOpenDragGesture() ? tree.materialScaffold.drawerEnableOpenDragGesture : true), endDrawerEnableOpenDragGesture: (tree.materialScaffold.hasEndDrawerEnableOpenDragGesture() ? tree.materialScaffold.endDrawerEnableOpenDragGesture : true), restorationId: (tree.materialScaffold.hasRestorationId() ? tree.materialScaffold.restorationId : null));
    case proto.WidgetExpression_Result.materialScaffoldMessenger:
      return $c150.ScaffoldMessenger(key: (tree.materialScaffoldMessenger.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialScaffoldMessenger.key) : null), child: (tree.materialScaffoldMessenger.hasChild() ? evaluateRequiredWidgetExpression(tree.materialScaffoldMessenger.child) : missing('child')));
    case proto.WidgetExpression_Result.materialScrollbar:
      return $c151.Scrollbar(key: (tree.materialScrollbar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialScrollbar.key) : null), child: (tree.materialScrollbar.hasChild() ? evaluateRequiredWidgetExpression(tree.materialScrollbar.child) : missing('child')), controller: null, thumbVisibility: (tree.materialScrollbar.hasThumbVisibility() ? tree.materialScrollbar.thumbVisibility : null), trackVisibility: (tree.materialScrollbar.hasTrackVisibility() ? tree.materialScrollbar.trackVisibility : null), thickness: (tree.materialScrollbar.hasThickness() ? tree.materialScrollbar.thickness : null), radius: null, notificationPredicate: null, interactive: (tree.materialScrollbar.hasInteractive() ? tree.materialScrollbar.interactive : null), scrollbarOrientation: null);
    case proto.WidgetExpression_Result.materialSearchBar:
      return $c152.SearchBar(key: (tree.materialSearchBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSearchBar.key) : null), controller: null, focusNode: null, hintText: (tree.materialSearchBar.hasHintText() ? tree.materialSearchBar.hintText : null), leading: (tree.materialSearchBar.hasLeading() ? evaluateWidgetExpression(tree.materialSearchBar.leading) : null), trailing: tree.materialSearchBar.trailing.map((e) => evaluateRequiredWidgetExpression(e)).toList(), onTap: null, onChanged: null, onSubmitted: null, constraints: null, elevation: null, backgroundColor: null, shadowColor: null, surfaceTintColor: null, overlayColor: null, side: null, shape: null, padding: null, textStyle: null, hintStyle: null);
    case proto.WidgetExpression_Result.materialSelectableText:
      return $c153.SelectableText((tree.materialSelectableText.hasData() ? tree.materialSelectableText.data : missing('data')), key: (tree.materialSelectableText.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSelectableText.key) : null), focusNode: null, style: null, strutStyle: null, textAlign: null, textDirection: null, textScaleFactor: (tree.materialSelectableText.hasTextScaleFactor() ? tree.materialSelectableText.textScaleFactor : null), showCursor: (tree.materialSelectableText.hasShowCursor() ? tree.materialSelectableText.showCursor : false), autofocus: (tree.materialSelectableText.hasAutofocus() ? tree.materialSelectableText.autofocus : false), minLines: (tree.materialSelectableText.hasMinLines() ? tree.materialSelectableText.minLines : null), maxLines: (tree.materialSelectableText.hasMaxLines() ? tree.materialSelectableText.maxLines : null), cursorWidth: (tree.materialSelectableText.hasCursorWidth() ? tree.materialSelectableText.cursorWidth : 2.0), cursorHeight: (tree.materialSelectableText.hasCursorHeight() ? tree.materialSelectableText.cursorHeight : null), cursorRadius: null, cursorColor: null, enableInteractiveSelection: (tree.materialSelectableText.hasEnableInteractiveSelection() ? tree.materialSelectableText.enableInteractiveSelection : true), selectionControls: null, onTap: null, scrollPhysics: null, semanticsLabel: (tree.materialSelectableText.hasSemanticsLabel() ? tree.materialSelectableText.semanticsLabel : null), textHeightBehavior: null, textWidthBasis: null, onSelectionChanged: null, contextMenuBuilder: null, magnifierConfiguration: null);
    case proto.WidgetExpression_Result.materialSelectionArea:
      return $c154.SelectionArea(key: (tree.materialSelectionArea.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSelectionArea.key) : null), focusNode: null, selectionControls: null, contextMenuBuilder: null, magnifierConfiguration: null, onSelectionChanged: null, child: (tree.materialSelectionArea.hasChild() ? evaluateRequiredWidgetExpression(tree.materialSelectionArea.child) : missing('child')));
    case proto.WidgetExpression_Result.materialSlider:
      return $c155.Slider(key: (tree.materialSlider.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSlider.key) : null), value: (tree.materialSlider.hasValue() ? tree.materialSlider.value : missing('value')), secondaryTrackValue: (tree.materialSlider.hasSecondaryTrackValue() ? tree.materialSlider.secondaryTrackValue : null), onChanged: null, onChangeStart: null, onChangeEnd: null, min: (tree.materialSlider.hasMin() ? tree.materialSlider.min : 0.0), max: (tree.materialSlider.hasMax() ? tree.materialSlider.max : 1.0), divisions: (tree.materialSlider.hasDivisions() ? tree.materialSlider.divisions : null), label: (tree.materialSlider.hasLabel() ? tree.materialSlider.label : null), activeColor: null, inactiveColor: null, secondaryActiveColor: null, thumbColor: null, overlayColor: null, mouseCursor: null, semanticFormatterCallback: null, focusNode: null, autofocus: (tree.materialSlider.hasAutofocus() ? tree.materialSlider.autofocus : false), allowedInteraction: null);
    case proto.WidgetExpression_Result.materialSliderNamedAdaptive:
      return $c156.Slider.adaptive(key: (tree.materialSliderNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSliderNamedAdaptive.key) : null), value: (tree.materialSliderNamedAdaptive.hasValue() ? tree.materialSliderNamedAdaptive.value : missing('value')), secondaryTrackValue: (tree.materialSliderNamedAdaptive.hasSecondaryTrackValue() ? tree.materialSliderNamedAdaptive.secondaryTrackValue : null), onChanged: null, onChangeStart: null, onChangeEnd: null, min: (tree.materialSliderNamedAdaptive.hasMin() ? tree.materialSliderNamedAdaptive.min : 0.0), max: (tree.materialSliderNamedAdaptive.hasMax() ? tree.materialSliderNamedAdaptive.max : 1.0), divisions: (tree.materialSliderNamedAdaptive.hasDivisions() ? tree.materialSliderNamedAdaptive.divisions : null), label: (tree.materialSliderNamedAdaptive.hasLabel() ? tree.materialSliderNamedAdaptive.label : null), mouseCursor: null, activeColor: null, inactiveColor: null, secondaryActiveColor: null, thumbColor: null, overlayColor: null, semanticFormatterCallback: null, focusNode: null, autofocus: (tree.materialSliderNamedAdaptive.hasAutofocus() ? tree.materialSliderNamedAdaptive.autofocus : false), allowedInteraction: null);
    case proto.WidgetExpression_Result.materialSnackBar:
      return $c157.SnackBar(key: (tree.materialSnackBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSnackBar.key) : null), content: (tree.materialSnackBar.hasContent() ? evaluateRequiredWidgetExpression(tree.materialSnackBar.content) : missing('content')), backgroundColor: null, elevation: (tree.materialSnackBar.hasElevation() ? tree.materialSnackBar.elevation : null), margin: null, padding: null, width: (tree.materialSnackBar.hasWidth() ? tree.materialSnackBar.width : null), shape: null, behavior: null, action: null, actionOverflowThreshold: (tree.materialSnackBar.hasActionOverflowThreshold() ? tree.materialSnackBar.actionOverflowThreshold : null), showCloseIcon: (tree.materialSnackBar.hasShowCloseIcon() ? tree.materialSnackBar.showCloseIcon : null), closeIconColor: null, duration: (tree.materialSnackBar.hasDuration() ? types.evaluateRequiredDurationExpression(tree.materialSnackBar.duration) : missing('duration')), animation: null, onVisible: null);
    case proto.WidgetExpression_Result.materialSwitch:
      return $c158.Switch(key: (tree.materialSwitch.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSwitch.key) : null), value: (tree.materialSwitch.hasValue() ? tree.materialSwitch.value : missing('value')), onChanged: null, activeColor: null, activeTrackColor: null, inactiveThumbColor: null, inactiveTrackColor: null, activeThumbImage: null, onActiveThumbImageError: null, inactiveThumbImage: null, onInactiveThumbImageError: null, thumbColor: null, trackColor: null, trackOutlineColor: null, trackOutlineWidth: null, thumbIcon: null, materialTapTargetSize: null, mouseCursor: null, focusColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialSwitch.hasSplashRadius() ? tree.materialSwitch.splashRadius : null), focusNode: null, onFocusChange: null, autofocus: (tree.materialSwitch.hasAutofocus() ? tree.materialSwitch.autofocus : false));
    case proto.WidgetExpression_Result.materialSwitchNamedAdaptive:
      return $c159.Switch.adaptive(key: (tree.materialSwitchNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSwitchNamedAdaptive.key) : null), value: (tree.materialSwitchNamedAdaptive.hasValue() ? tree.materialSwitchNamedAdaptive.value : missing('value')), onChanged: null, activeColor: null, activeTrackColor: null, inactiveThumbColor: null, inactiveTrackColor: null, activeThumbImage: null, onActiveThumbImageError: null, inactiveThumbImage: null, onInactiveThumbImageError: null, materialTapTargetSize: null, thumbColor: null, trackColor: null, trackOutlineColor: null, trackOutlineWidth: null, thumbIcon: null, mouseCursor: null, focusColor: null, hoverColor: null, overlayColor: null, splashRadius: (tree.materialSwitchNamedAdaptive.hasSplashRadius() ? tree.materialSwitchNamedAdaptive.splashRadius : null), focusNode: null, onFocusChange: null, autofocus: (tree.materialSwitchNamedAdaptive.hasAutofocus() ? tree.materialSwitchNamedAdaptive.autofocus : false), applyCupertinoTheme: (tree.materialSwitchNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchNamedAdaptive.applyCupertinoTheme : null));
    case proto.WidgetExpression_Result.materialSwitchListTile:
      return $c160.SwitchListTile(key: (tree.materialSwitchListTile.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSwitchListTile.key) : null), value: (tree.materialSwitchListTile.hasValue() ? tree.materialSwitchListTile.value : missing('value')), onChanged: null, activeColor: null, activeTrackColor: null, inactiveThumbColor: null, inactiveTrackColor: null, activeThumbImage: null, onActiveThumbImageError: null, inactiveThumbImage: null, onInactiveThumbImageError: null, thumbColor: null, trackColor: null, trackOutlineColor: null, thumbIcon: null, materialTapTargetSize: null, mouseCursor: null, overlayColor: null, splashRadius: (tree.materialSwitchListTile.hasSplashRadius() ? tree.materialSwitchListTile.splashRadius : null), focusNode: null, onFocusChange: null, autofocus: (tree.materialSwitchListTile.hasAutofocus() ? tree.materialSwitchListTile.autofocus : false), tileColor: null, title: (tree.materialSwitchListTile.hasTitle() ? evaluateWidgetExpression(tree.materialSwitchListTile.title) : null), subtitle: (tree.materialSwitchListTile.hasSubtitle() ? evaluateWidgetExpression(tree.materialSwitchListTile.subtitle) : null), isThreeLine: (tree.materialSwitchListTile.hasIsThreeLine() ? tree.materialSwitchListTile.isThreeLine : false), dense: (tree.materialSwitchListTile.hasDense() ? tree.materialSwitchListTile.dense : null), contentPadding: null, secondary: (tree.materialSwitchListTile.hasSecondary() ? evaluateWidgetExpression(tree.materialSwitchListTile.secondary) : null), selected: (tree.materialSwitchListTile.hasSelected() ? tree.materialSwitchListTile.selected : false), shape: null, selectedTileColor: null, visualDensity: null, enableFeedback: (tree.materialSwitchListTile.hasEnableFeedback() ? tree.materialSwitchListTile.enableFeedback : null), hoverColor: null);
    case proto.WidgetExpression_Result.materialSwitchListTileNamedAdaptive:
      return $c161.SwitchListTile.adaptive(key: (tree.materialSwitchListTileNamedAdaptive.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialSwitchListTileNamedAdaptive.key) : null), value: (tree.materialSwitchListTileNamedAdaptive.hasValue() ? tree.materialSwitchListTileNamedAdaptive.value : missing('value')), onChanged: null, activeColor: null, activeTrackColor: null, inactiveThumbColor: null, inactiveTrackColor: null, activeThumbImage: null, onActiveThumbImageError: null, inactiveThumbImage: null, onInactiveThumbImageError: null, thumbColor: null, trackColor: null, trackOutlineColor: null, thumbIcon: null, materialTapTargetSize: null, mouseCursor: null, overlayColor: null, splashRadius: (tree.materialSwitchListTileNamedAdaptive.hasSplashRadius() ? tree.materialSwitchListTileNamedAdaptive.splashRadius : null), focusNode: null, onFocusChange: null, autofocus: (tree.materialSwitchListTileNamedAdaptive.hasAutofocus() ? tree.materialSwitchListTileNamedAdaptive.autofocus : false), applyCupertinoTheme: (tree.materialSwitchListTileNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchListTileNamedAdaptive.applyCupertinoTheme : null), tileColor: null, title: (tree.materialSwitchListTileNamedAdaptive.hasTitle() ? evaluateWidgetExpression(tree.materialSwitchListTileNamedAdaptive.title) : null), subtitle: (tree.materialSwitchListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetExpression(tree.materialSwitchListTileNamedAdaptive.subtitle) : null), isThreeLine: (tree.materialSwitchListTileNamedAdaptive.hasIsThreeLine() ? tree.materialSwitchListTileNamedAdaptive.isThreeLine : false), dense: (tree.materialSwitchListTileNamedAdaptive.hasDense() ? tree.materialSwitchListTileNamedAdaptive.dense : null), contentPadding: null, secondary: (tree.materialSwitchListTileNamedAdaptive.hasSecondary() ? evaluateWidgetExpression(tree.materialSwitchListTileNamedAdaptive.secondary) : null), selected: (tree.materialSwitchListTileNamedAdaptive.hasSelected() ? tree.materialSwitchListTileNamedAdaptive.selected : false), shape: null, selectedTileColor: null, visualDensity: null, enableFeedback: (tree.materialSwitchListTileNamedAdaptive.hasEnableFeedback() ? tree.materialSwitchListTileNamedAdaptive.enableFeedback : null), hoverColor: null);
    case proto.WidgetExpression_Result.materialDefaultTabController:
      return $c162.DefaultTabController(key: (tree.materialDefaultTabController.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialDefaultTabController.key) : null), length: (tree.materialDefaultTabController.hasLength() ? tree.materialDefaultTabController.length : missing('length')), initialIndex: (tree.materialDefaultTabController.hasInitialIndex() ? tree.materialDefaultTabController.initialIndex : 0), child: (tree.materialDefaultTabController.hasChild() ? evaluateRequiredWidgetExpression(tree.materialDefaultTabController.child) : missing('child')), animationDuration: (tree.materialDefaultTabController.hasAnimationDuration() ? types.evaluateDurationExpression(tree.materialDefaultTabController.animationDuration) : null));
    case proto.WidgetExpression_Result.materialTab:
      return $c163.Tab(key: (tree.materialTab.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTab.key) : null), text: (tree.materialTab.hasText() ? tree.materialTab.text : null), icon: (tree.materialTab.hasIcon() ? evaluateWidgetExpression(tree.materialTab.icon) : null), height: (tree.materialTab.hasHeight() ? tree.materialTab.height : null), child: (tree.materialTab.hasChild() ? evaluateWidgetExpression(tree.materialTab.child) : null));
    case proto.WidgetExpression_Result.materialTabBar:
      return $c164.TabBar(key: (tree.materialTabBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTabBar.key) : null), tabs: tree.materialTabBar.tabs.map((e) => evaluateRequiredWidgetExpression(e)).toList(), controller: null, isScrollable: (tree.materialTabBar.hasIsScrollable() ? tree.materialTabBar.isScrollable : false), padding: null, indicatorColor: null, automaticIndicatorColorAdjustment: (tree.materialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBar.automaticIndicatorColorAdjustment : true), indicatorWeight: (tree.materialTabBar.hasIndicatorWeight() ? tree.materialTabBar.indicatorWeight : 2.0), indicator: null, indicatorSize: null, dividerColor: null, labelColor: null, labelStyle: null, labelPadding: null, unselectedLabelColor: null, unselectedLabelStyle: null, overlayColor: null, mouseCursor: null, enableFeedback: (tree.materialTabBar.hasEnableFeedback() ? tree.materialTabBar.enableFeedback : null), onTap: null, physics: null, splashFactory: null, splashBorderRadius: null, tabAlignment: null);
    case proto.WidgetExpression_Result.materialTabBarNamedSecondary:
      return $c165.TabBar.secondary(key: (tree.materialTabBarNamedSecondary.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTabBarNamedSecondary.key) : null), tabs: tree.materialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetExpression(e)).toList(), controller: null, isScrollable: (tree.materialTabBarNamedSecondary.hasIsScrollable() ? tree.materialTabBarNamedSecondary.isScrollable : false), padding: null, indicatorColor: null, automaticIndicatorColorAdjustment: (tree.materialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true), indicatorWeight: (tree.materialTabBarNamedSecondary.hasIndicatorWeight() ? tree.materialTabBarNamedSecondary.indicatorWeight : 2.0), indicator: null, indicatorSize: null, dividerColor: null, labelColor: null, labelStyle: null, labelPadding: null, unselectedLabelColor: null, unselectedLabelStyle: null, overlayColor: null, mouseCursor: null, enableFeedback: (tree.materialTabBarNamedSecondary.hasEnableFeedback() ? tree.materialTabBarNamedSecondary.enableFeedback : null), onTap: null, physics: null, splashFactory: null, splashBorderRadius: null, tabAlignment: null);
    case proto.WidgetExpression_Result.materialTabBarView:
      return $c166.TabBarView(key: (tree.materialTabBarView.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTabBarView.key) : null), children: tree.materialTabBarView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), controller: null, physics: null, viewportFraction: (tree.materialTabBarView.hasViewportFraction() ? tree.materialTabBarView.viewportFraction : 1.0));
    case proto.WidgetExpression_Result.materialTabPageSelector:
      return $c167.TabPageSelector(key: (tree.materialTabPageSelector.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTabPageSelector.key) : null), controller: null, indicatorSize: (tree.materialTabPageSelector.hasIndicatorSize() ? tree.materialTabPageSelector.indicatorSize : 12.0), color: null, selectedColor: null, borderStyle: null);
    case proto.WidgetExpression_Result.materialTextButton:
      return $c168.TextButton(key: (tree.materialTextButton.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTextButton.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialTextButton.hasAutofocus() ? tree.materialTextButton.autofocus : missing('autofocus')), statesController: null, isSemanticButton: (tree.materialTextButton.hasIsSemanticButton() ? tree.materialTextButton.isSemanticButton : true), child: (tree.materialTextButton.hasChild() ? evaluateRequiredWidgetExpression(tree.materialTextButton.child) : missing('child')));
    case proto.WidgetExpression_Result.materialTextButtonNamedIcon:
      return $c169.TextButton.icon(key: (tree.materialTextButtonNamedIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTextButtonNamedIcon.key) : null), onPressed: null, onLongPress: null, onHover: null, onFocusChange: null, style: null, focusNode: null, autofocus: (tree.materialTextButtonNamedIcon.hasAutofocus() ? tree.materialTextButtonNamedIcon.autofocus : null), clipBehavior: null, statesController: null, icon: (tree.materialTextButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetExpression(tree.materialTextButtonNamedIcon.icon) : missing('icon')), label: (tree.materialTextButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetExpression(tree.materialTextButtonNamedIcon.label) : missing('label')));
    case proto.WidgetExpression_Result.materialTextField:
      return $c170.TextField(key: (tree.materialTextField.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTextField.key) : null), controller: null, focusNode: null, undoController: null, decoration: null, keyboardType: null, textInputAction: null, style: null, strutStyle: null, textAlignVertical: null, textDirection: null, readOnly: (tree.materialTextField.hasReadOnly() ? tree.materialTextField.readOnly : false), showCursor: (tree.materialTextField.hasShowCursor() ? tree.materialTextField.showCursor : null), autofocus: (tree.materialTextField.hasAutofocus() ? tree.materialTextField.autofocus : false), obscuringCharacter: (tree.materialTextField.hasObscuringCharacter() ? tree.materialTextField.obscuringCharacter : '•'), obscureText: (tree.materialTextField.hasObscureText() ? tree.materialTextField.obscureText : false), autocorrect: (tree.materialTextField.hasAutocorrect() ? tree.materialTextField.autocorrect : true), smartDashesType: null, smartQuotesType: null, enableSuggestions: (tree.materialTextField.hasEnableSuggestions() ? tree.materialTextField.enableSuggestions : true), maxLines: (tree.materialTextField.hasMaxLines() ? tree.materialTextField.maxLines : 1), minLines: (tree.materialTextField.hasMinLines() ? tree.materialTextField.minLines : null), expands: (tree.materialTextField.hasExpands() ? tree.materialTextField.expands : false), maxLength: (tree.materialTextField.hasMaxLength() ? tree.materialTextField.maxLength : null), maxLengthEnforcement: null, onChanged: null, onEditingComplete: null, onSubmitted: null, onAppPrivateCommand: null, inputFormatters: null, enabled: (tree.materialTextField.hasEnabled() ? tree.materialTextField.enabled : null), cursorWidth: (tree.materialTextField.hasCursorWidth() ? tree.materialTextField.cursorWidth : 2.0), cursorHeight: (tree.materialTextField.hasCursorHeight() ? tree.materialTextField.cursorHeight : null), cursorRadius: null, cursorOpacityAnimates: (tree.materialTextField.hasCursorOpacityAnimates() ? tree.materialTextField.cursorOpacityAnimates : null), cursorColor: null, keyboardAppearance: null, enableInteractiveSelection: (tree.materialTextField.hasEnableInteractiveSelection() ? tree.materialTextField.enableInteractiveSelection : null), selectionControls: null, onTap: null, onTapOutside: null, mouseCursor: null, buildCounter: null, scrollController: null, scrollPhysics: null, autofillHints: tree.materialTextField.autofillHints, contentInsertionConfiguration: null, restorationId: (tree.materialTextField.hasRestorationId() ? tree.materialTextField.restorationId : null), scribbleEnabled: (tree.materialTextField.hasScribbleEnabled() ? tree.materialTextField.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.materialTextField.hasEnableIMEPersonalizedLearning() ? tree.materialTextField.enableIMEPersonalizedLearning : true), contextMenuBuilder: null, canRequestFocus: (tree.materialTextField.hasCanRequestFocus() ? tree.materialTextField.canRequestFocus : true), spellCheckConfiguration: null, magnifierConfiguration: null);
    case proto.WidgetExpression_Result.materialTextFormField:
      return $c171.TextFormField(key: (tree.materialTextFormField.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTextFormField.key) : null), controller: null, initialValue: (tree.materialTextFormField.hasInitialValue() ? tree.materialTextFormField.initialValue : null), focusNode: null, decoration: null, keyboardType: null, textInputAction: null, style: null, strutStyle: null, textDirection: null, textAlignVertical: null, autofocus: (tree.materialTextFormField.hasAutofocus() ? tree.materialTextFormField.autofocus : false), readOnly: (tree.materialTextFormField.hasReadOnly() ? tree.materialTextFormField.readOnly : false), showCursor: (tree.materialTextFormField.hasShowCursor() ? tree.materialTextFormField.showCursor : null), obscuringCharacter: (tree.materialTextFormField.hasObscuringCharacter() ? tree.materialTextFormField.obscuringCharacter : '•'), obscureText: (tree.materialTextFormField.hasObscureText() ? tree.materialTextFormField.obscureText : false), autocorrect: (tree.materialTextFormField.hasAutocorrect() ? tree.materialTextFormField.autocorrect : true), smartDashesType: null, smartQuotesType: null, enableSuggestions: (tree.materialTextFormField.hasEnableSuggestions() ? tree.materialTextFormField.enableSuggestions : true), maxLengthEnforcement: null, maxLines: (tree.materialTextFormField.hasMaxLines() ? tree.materialTextFormField.maxLines : 1), minLines: (tree.materialTextFormField.hasMinLines() ? tree.materialTextFormField.minLines : null), expands: (tree.materialTextFormField.hasExpands() ? tree.materialTextFormField.expands : false), maxLength: (tree.materialTextFormField.hasMaxLength() ? tree.materialTextFormField.maxLength : null), onChanged: null, onTap: null, onTapOutside: null, onEditingComplete: null, onFieldSubmitted: null, onSaved: null, validator: null, inputFormatters: null, enabled: (tree.materialTextFormField.hasEnabled() ? tree.materialTextFormField.enabled : null), cursorWidth: (tree.materialTextFormField.hasCursorWidth() ? tree.materialTextFormField.cursorWidth : 2.0), cursorHeight: (tree.materialTextFormField.hasCursorHeight() ? tree.materialTextFormField.cursorHeight : null), cursorRadius: null, cursorColor: null, keyboardAppearance: null, enableInteractiveSelection: (tree.materialTextFormField.hasEnableInteractiveSelection() ? tree.materialTextFormField.enableInteractiveSelection : null), selectionControls: null, buildCounter: null, scrollPhysics: null, autofillHints: tree.materialTextFormField.autofillHints, autovalidateMode: null, scrollController: null, restorationId: (tree.materialTextFormField.hasRestorationId() ? tree.materialTextFormField.restorationId : null), enableIMEPersonalizedLearning: (tree.materialTextFormField.hasEnableIMEPersonalizedLearning() ? tree.materialTextFormField.enableIMEPersonalizedLearning : true), mouseCursor: null, contextMenuBuilder: null, spellCheckConfiguration: null, magnifierConfiguration: null, undoController: null, onAppPrivateCommand: null, cursorOpacityAnimates: (tree.materialTextFormField.hasCursorOpacityAnimates() ? tree.materialTextFormField.cursorOpacityAnimates : null), contentInsertionConfiguration: null, scribbleEnabled: (tree.materialTextFormField.hasScribbleEnabled() ? tree.materialTextFormField.scribbleEnabled : true), canRequestFocus: (tree.materialTextFormField.hasCanRequestFocus() ? tree.materialTextFormField.canRequestFocus : true));
    case proto.WidgetExpression_Result.materialToggleButtons:
      return $c172.ToggleButtons(key: (tree.materialToggleButtons.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialToggleButtons.key) : null), children: tree.materialToggleButtons.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), isSelected: tree.materialToggleButtons.isSelected, onPressed: null, mouseCursor: null, tapTargetSize: null, textStyle: null, constraints: null, color: null, selectedColor: null, disabledColor: null, fillColor: null, focusColor: null, highlightColor: null, hoverColor: null, splashColor: null, focusNodes: null, renderBorder: (tree.materialToggleButtons.hasRenderBorder() ? tree.materialToggleButtons.renderBorder : true), borderColor: null, selectedBorderColor: null, disabledBorderColor: null, borderRadius: null, borderWidth: (tree.materialToggleButtons.hasBorderWidth() ? tree.materialToggleButtons.borderWidth : null));
    case proto.WidgetExpression_Result.materialTooltip:
      return $c173.Tooltip(key: (tree.materialTooltip.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTooltip.key) : null), message: (tree.materialTooltip.hasMessage() ? tree.materialTooltip.message : null), richMessage: null, height: (tree.materialTooltip.hasHeight() ? tree.materialTooltip.height : null), padding: null, margin: null, verticalOffset: (tree.materialTooltip.hasVerticalOffset() ? tree.materialTooltip.verticalOffset : null), preferBelow: (tree.materialTooltip.hasPreferBelow() ? tree.materialTooltip.preferBelow : null), excludeFromSemantics: (tree.materialTooltip.hasExcludeFromSemantics() ? tree.materialTooltip.excludeFromSemantics : null), decoration: null, textStyle: null, textAlign: null, waitDuration: (tree.materialTooltip.hasWaitDuration() ? types.evaluateDurationExpression(tree.materialTooltip.waitDuration) : null), showDuration: (tree.materialTooltip.hasShowDuration() ? types.evaluateDurationExpression(tree.materialTooltip.showDuration) : null), triggerMode: null, enableFeedback: (tree.materialTooltip.hasEnableFeedback() ? tree.materialTooltip.enableFeedback : null), onTriggered: null, child: (tree.materialTooltip.hasChild() ? evaluateWidgetExpression(tree.materialTooltip.child) : null));
    case proto.WidgetExpression_Result.materialTooltipVisibility:
      return $c174.TooltipVisibility(key: (tree.materialTooltipVisibility.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialTooltipVisibility.key) : null), visible: (tree.materialTooltipVisibility.hasVisible() ? tree.materialTooltipVisibility.visible : missing('visible')), child: (tree.materialTooltipVisibility.hasChild() ? evaluateRequiredWidgetExpression(tree.materialTooltipVisibility.child) : missing('child')));
    case proto.WidgetExpression_Result.materialUserAccountsDrawerHeader:
      return $c175.UserAccountsDrawerHeader(key: (tree.materialUserAccountsDrawerHeader.hasKey() ? types.evaluateFlutterKeyExpression(tree.materialUserAccountsDrawerHeader.key) : null), decoration: null, margin: null, currentAccountPicture: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPicture() ? evaluateWidgetExpression(tree.materialUserAccountsDrawerHeader.currentAccountPicture) : null), otherAccountsPictures: tree.materialUserAccountsDrawerHeader.otherAccountsPictures.map((e) => evaluateRequiredWidgetExpression(e)).toList(), accountName: (tree.materialUserAccountsDrawerHeader.hasAccountName() ? evaluateWidgetExpression(tree.materialUserAccountsDrawerHeader.accountName) : null), accountEmail: (tree.materialUserAccountsDrawerHeader.hasAccountEmail() ? evaluateWidgetExpression(tree.materialUserAccountsDrawerHeader.accountEmail) : null), onDetailsPressed: null);
    case proto.WidgetExpression_Result.flutterPlatformSelectableRegionContextMenu:
      return $c176.PlatformSelectableRegionContextMenu(child: (tree.flutterPlatformSelectableRegionContextMenu.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterPlatformSelectableRegionContextMenu.child) : missing('child')), key: (tree.flutterPlatformSelectableRegionContextMenu.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPlatformSelectableRegionContextMenu.key) : null));
    case proto.WidgetExpression_Result.flutterFocusableActionDetector:
      return $c177.FocusableActionDetector(key: (tree.flutterFocusableActionDetector.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFocusableActionDetector.key) : null), enabled: (tree.flutterFocusableActionDetector.hasEnabled() ? tree.flutterFocusableActionDetector.enabled : true), focusNode: null, autofocus: (tree.flutterFocusableActionDetector.hasAutofocus() ? tree.flutterFocusableActionDetector.autofocus : false), descendantsAreFocusable: (tree.flutterFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterFocusableActionDetector.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterFocusableActionDetector.descendantsAreTraversable : true), shortcuts: null, actions: null, onShowFocusHighlight: null, onShowHoverHighlight: null, onFocusChange: null, includeFocusSemantics: (tree.flutterFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterFocusableActionDetector.includeFocusSemantics : true), child: (tree.flutterFocusableActionDetector.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterFocusableActionDetector.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterAnimatedSize:
      return $c178.AnimatedSize(key: (tree.flutterAnimatedSize.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedSize.key) : null), child: (tree.flutterAnimatedSize.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedSize.child) : null), duration: (tree.flutterAnimatedSize.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedSize.duration) : missing('duration')), reverseDuration: (tree.flutterAnimatedSize.hasReverseDuration() ? types.evaluateDurationExpression(tree.flutterAnimatedSize.reverseDuration) : null));
    case proto.WidgetExpression_Result.flutterAnimatedSwitcher:
      return $c179.AnimatedSwitcher(key: (tree.flutterAnimatedSwitcher.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedSwitcher.key) : null), child: (tree.flutterAnimatedSwitcher.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedSwitcher.child) : null), duration: (tree.flutterAnimatedSwitcher.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedSwitcher.duration) : missing('duration')), reverseDuration: (tree.flutterAnimatedSwitcher.hasReverseDuration() ? types.evaluateDurationExpression(tree.flutterAnimatedSwitcher.reverseDuration) : null));
    case proto.WidgetExpression_Result.flutterAutofillGroup:
      return $c180.AutofillGroup(key: (tree.flutterAutofillGroup.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAutofillGroup.key) : null), child: (tree.flutterAutofillGroup.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterAutofillGroup.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterAutomaticKeepAlive:
      return $c181.AutomaticKeepAlive(key: (tree.flutterAutomaticKeepAlive.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAutomaticKeepAlive.key) : null), child: (tree.flutterAutomaticKeepAlive.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterAutomaticKeepAlive.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterCheckedModeBanner:
      return $c182.CheckedModeBanner(key: (tree.flutterCheckedModeBanner.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterCheckedModeBanner.key) : null), child: (tree.flutterCheckedModeBanner.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterCheckedModeBanner.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterAbsorbPointer:
      return $c183.AbsorbPointer(key: (tree.flutterAbsorbPointer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAbsorbPointer.key) : null), absorbing: (tree.flutterAbsorbPointer.hasAbsorbing() ? tree.flutterAbsorbPointer.absorbing : true), child: (tree.flutterAbsorbPointer.hasChild() ? evaluateWidgetExpression(tree.flutterAbsorbPointer.child) : null));
    case proto.WidgetExpression_Result.flutterAlign:
      return $c184.Align(key: (tree.flutterAlign.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAlign.key) : null), widthFactor: (tree.flutterAlign.hasWidthFactor() ? tree.flutterAlign.widthFactor : null), heightFactor: (tree.flutterAlign.hasHeightFactor() ? tree.flutterAlign.heightFactor : null), child: (tree.flutterAlign.hasChild() ? evaluateWidgetExpression(tree.flutterAlign.child) : null));
    case proto.WidgetExpression_Result.flutterAspectRatio:
      return $c185.AspectRatio(key: (tree.flutterAspectRatio.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAspectRatio.key) : null), aspectRatio: (tree.flutterAspectRatio.hasAspectRatio() ? tree.flutterAspectRatio.aspectRatio : missing('aspectRatio')), child: (tree.flutterAspectRatio.hasChild() ? evaluateWidgetExpression(tree.flutterAspectRatio.child) : null));
    case proto.WidgetExpression_Result.flutterBlockSemantics:
      return $c186.BlockSemantics(key: (tree.flutterBlockSemantics.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterBlockSemantics.key) : null), blocking: (tree.flutterBlockSemantics.hasBlocking() ? tree.flutterBlockSemantics.blocking : true), child: (tree.flutterBlockSemantics.hasChild() ? evaluateWidgetExpression(tree.flutterBlockSemantics.child) : null));
    case proto.WidgetExpression_Result.flutterCenter:
      return $c187.Center(key: (tree.flutterCenter.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterCenter.key) : null), widthFactor: (tree.flutterCenter.hasWidthFactor() ? tree.flutterCenter.widthFactor : null), heightFactor: (tree.flutterCenter.hasHeightFactor() ? tree.flutterCenter.heightFactor : null), child: (tree.flutterCenter.hasChild() ? evaluateWidgetExpression(tree.flutterCenter.child) : null));
    case proto.WidgetExpression_Result.flutterClipOval:
      return $c188.ClipOval(key: (tree.flutterClipOval.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterClipOval.key) : null), clipper: null, child: (tree.flutterClipOval.hasChild() ? evaluateWidgetExpression(tree.flutterClipOval.child) : null));
    case proto.WidgetExpression_Result.flutterClipPath:
      return $c189.ClipPath(key: (tree.flutterClipPath.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterClipPath.key) : null), clipper: null, child: (tree.flutterClipPath.hasChild() ? evaluateWidgetExpression(tree.flutterClipPath.child) : null));
    case proto.WidgetExpression_Result.flutterClipRRect:
      return $c190.ClipRRect(key: (tree.flutterClipRRect.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterClipRRect.key) : null), clipper: null, child: (tree.flutterClipRRect.hasChild() ? evaluateWidgetExpression(tree.flutterClipRRect.child) : null));
    case proto.WidgetExpression_Result.flutterClipRect:
      return $c191.ClipRect(key: (tree.flutterClipRect.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterClipRect.key) : null), clipper: null, child: (tree.flutterClipRect.hasChild() ? evaluateWidgetExpression(tree.flutterClipRect.child) : null));
    case proto.WidgetExpression_Result.flutterColumn:
      return $c192.Column(key: (tree.flutterColumn.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterColumn.key) : null), textDirection: null, textBaseline: null, children: tree.flutterColumn.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCustomPaint:
      return $c193.CustomPaint(key: (tree.flutterCustomPaint.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterCustomPaint.key) : null), painter: null, foregroundPainter: null, isComplex: (tree.flutterCustomPaint.hasIsComplex() ? tree.flutterCustomPaint.isComplex : false), willChange: (tree.flutterCustomPaint.hasWillChange() ? tree.flutterCustomPaint.willChange : false), child: (tree.flutterCustomPaint.hasChild() ? evaluateWidgetExpression(tree.flutterCustomPaint.child) : null));
    case proto.WidgetExpression_Result.flutterExcludeSemantics:
      return $c194.ExcludeSemantics(key: (tree.flutterExcludeSemantics.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterExcludeSemantics.key) : null), excluding: (tree.flutterExcludeSemantics.hasExcluding() ? tree.flutterExcludeSemantics.excluding : true), child: (tree.flutterExcludeSemantics.hasChild() ? evaluateWidgetExpression(tree.flutterExcludeSemantics.child) : null));
    case proto.WidgetExpression_Result.flutterExpanded:
      return $c195.Expanded(key: (tree.flutterExpanded.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterExpanded.key) : null), flex: (tree.flutterExpanded.hasFlex() ? tree.flutterExpanded.flex : 1), child: (tree.flutterExpanded.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterExpanded.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterFittedBox:
      return $c196.FittedBox(key: (tree.flutterFittedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFittedBox.key) : null), child: (tree.flutterFittedBox.hasChild() ? evaluateWidgetExpression(tree.flutterFittedBox.child) : null));
    case proto.WidgetExpression_Result.flutterFlexible:
      return $c197.Flexible(key: (tree.flutterFlexible.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFlexible.key) : null), flex: (tree.flutterFlexible.hasFlex() ? tree.flutterFlexible.flex : 1), child: (tree.flutterFlexible.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterFlexible.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterFractionallySizedBox:
      return $c198.FractionallySizedBox(key: (tree.flutterFractionallySizedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFractionallySizedBox.key) : null), widthFactor: (tree.flutterFractionallySizedBox.hasWidthFactor() ? tree.flutterFractionallySizedBox.widthFactor : null), heightFactor: (tree.flutterFractionallySizedBox.hasHeightFactor() ? tree.flutterFractionallySizedBox.heightFactor : null), child: (tree.flutterFractionallySizedBox.hasChild() ? evaluateWidgetExpression(tree.flutterFractionallySizedBox.child) : null));
    case proto.WidgetExpression_Result.flutterIgnorePointer:
      return $c199.IgnorePointer(key: (tree.flutterIgnorePointer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIgnorePointer.key) : null), ignoring: (tree.flutterIgnorePointer.hasIgnoring() ? tree.flutterIgnorePointer.ignoring : true), child: (tree.flutterIgnorePointer.hasChild() ? evaluateWidgetExpression(tree.flutterIgnorePointer.child) : null));
    case proto.WidgetExpression_Result.flutterIndexedSemantics:
      return $c200.IndexedSemantics(key: (tree.flutterIndexedSemantics.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIndexedSemantics.key) : null), index: (tree.flutterIndexedSemantics.hasIndex() ? tree.flutterIndexedSemantics.index : missing('index')), child: (tree.flutterIndexedSemantics.hasChild() ? evaluateWidgetExpression(tree.flutterIndexedSemantics.child) : null));
    case proto.WidgetExpression_Result.flutterIndexedStack:
      return $c201.IndexedStack(key: (tree.flutterIndexedStack.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIndexedStack.key) : null), textDirection: null, index: (tree.flutterIndexedStack.hasIndex() ? tree.flutterIndexedStack.index : 0), children: tree.flutterIndexedStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterIntrinsicHeight:
      return $c202.IntrinsicHeight(key: (tree.flutterIntrinsicHeight.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIntrinsicHeight.key) : null), child: (tree.flutterIntrinsicHeight.hasChild() ? evaluateWidgetExpression(tree.flutterIntrinsicHeight.child) : null));
    case proto.WidgetExpression_Result.flutterIntrinsicWidth:
      return $c203.IntrinsicWidth(key: (tree.flutterIntrinsicWidth.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIntrinsicWidth.key) : null), stepWidth: (tree.flutterIntrinsicWidth.hasStepWidth() ? tree.flutterIntrinsicWidth.stepWidth : null), stepHeight: (tree.flutterIntrinsicWidth.hasStepHeight() ? tree.flutterIntrinsicWidth.stepHeight : null), child: (tree.flutterIntrinsicWidth.hasChild() ? evaluateWidgetExpression(tree.flutterIntrinsicWidth.child) : null));
    case proto.WidgetExpression_Result.flutterKeyedSubtree:
      return $c204.KeyedSubtree(key: (tree.flutterKeyedSubtree.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterKeyedSubtree.key) : null), child: (tree.flutterKeyedSubtree.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterKeyedSubtree.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterKeyedSubtreeNamedWrap:
      return $c205.KeyedSubtree.wrap((tree.flutterKeyedSubtreeNamedWrap.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterKeyedSubtreeNamedWrap.child) : missing('child')), (tree.flutterKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterLimitedBox:
      return $c206.LimitedBox(key: (tree.flutterLimitedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterLimitedBox.key) : null), maxWidth: (tree.flutterLimitedBox.hasMaxWidth() ? tree.flutterLimitedBox.maxWidth : missing('maxWidth')), maxHeight: (tree.flutterLimitedBox.hasMaxHeight() ? tree.flutterLimitedBox.maxHeight : missing('maxHeight')), child: (tree.flutterLimitedBox.hasChild() ? evaluateWidgetExpression(tree.flutterLimitedBox.child) : null));
    case proto.WidgetExpression_Result.flutterListBody:
      return $c207.ListBody(key: (tree.flutterListBody.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterListBody.key) : null), reverse: (tree.flutterListBody.hasReverse() ? tree.flutterListBody.reverse : false), children: tree.flutterListBody.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterListener:
      return $c208.Listener(key: (tree.flutterListener.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterListener.key) : null), onPointerDown: null, onPointerMove: null, onPointerUp: null, onPointerHover: null, onPointerCancel: null, onPointerPanZoomStart: null, onPointerPanZoomUpdate: null, onPointerPanZoomEnd: null, onPointerSignal: null, child: (tree.flutterListener.hasChild() ? evaluateWidgetExpression(tree.flutterListener.child) : null));
    case proto.WidgetExpression_Result.flutterMergeSemantics:
      return $c209.MergeSemantics(key: (tree.flutterMergeSemantics.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterMergeSemantics.key) : null), child: (tree.flutterMergeSemantics.hasChild() ? evaluateWidgetExpression(tree.flutterMergeSemantics.child) : null));
    case proto.WidgetExpression_Result.flutterMetaData:
      return $c210.MetaData(key: (tree.flutterMetaData.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterMetaData.key) : null), child: (tree.flutterMetaData.hasChild() ? evaluateWidgetExpression(tree.flutterMetaData.child) : null));
    case proto.WidgetExpression_Result.flutterMouseRegion:
      return $c211.MouseRegion(key: (tree.flutterMouseRegion.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterMouseRegion.key) : null), onEnter: null, onExit: null, onHover: null, opaque: (tree.flutterMouseRegion.hasOpaque() ? tree.flutterMouseRegion.opaque : true), hitTestBehavior: null, child: (tree.flutterMouseRegion.hasChild() ? evaluateWidgetExpression(tree.flutterMouseRegion.child) : null));
    case proto.WidgetExpression_Result.flutterOffstage:
      return $c212.Offstage(key: (tree.flutterOffstage.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterOffstage.key) : null), offstage: (tree.flutterOffstage.hasOffstage() ? tree.flutterOffstage.offstage : true), child: (tree.flutterOffstage.hasChild() ? evaluateWidgetExpression(tree.flutterOffstage.child) : null));
    case proto.WidgetExpression_Result.flutterOpacity:
      return $c213.Opacity(key: (tree.flutterOpacity.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterOpacity.key) : null), opacity: (tree.flutterOpacity.hasOpacity() ? tree.flutterOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterOpacity.hasAlwaysIncludeSemantics() ? tree.flutterOpacity.alwaysIncludeSemantics : false), child: (tree.flutterOpacity.hasChild() ? evaluateWidgetExpression(tree.flutterOpacity.child) : null));
    case proto.WidgetExpression_Result.flutterOverflowBox:
      return $c214.OverflowBox(key: (tree.flutterOverflowBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterOverflowBox.key) : null), minWidth: (tree.flutterOverflowBox.hasMinWidth() ? tree.flutterOverflowBox.minWidth : null), maxWidth: (tree.flutterOverflowBox.hasMaxWidth() ? tree.flutterOverflowBox.maxWidth : null), minHeight: (tree.flutterOverflowBox.hasMinHeight() ? tree.flutterOverflowBox.minHeight : null), maxHeight: (tree.flutterOverflowBox.hasMaxHeight() ? tree.flutterOverflowBox.maxHeight : null), child: (tree.flutterOverflowBox.hasChild() ? evaluateWidgetExpression(tree.flutterOverflowBox.child) : null));
    case proto.WidgetExpression_Result.flutterPositioned:
      return $c215.Positioned(key: (tree.flutterPositioned.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPositioned.key) : null), left: (tree.flutterPositioned.hasLeft() ? tree.flutterPositioned.left : null), top: (tree.flutterPositioned.hasTop() ? tree.flutterPositioned.top : null), right: (tree.flutterPositioned.hasRight() ? tree.flutterPositioned.right : null), bottom: (tree.flutterPositioned.hasBottom() ? tree.flutterPositioned.bottom : null), width: (tree.flutterPositioned.hasWidth() ? tree.flutterPositioned.width : null), height: (tree.flutterPositioned.hasHeight() ? tree.flutterPositioned.height : null), child: (tree.flutterPositioned.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterPositioned.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterPositionedNamedFill:
      return $c216.Positioned.fill(key: (tree.flutterPositionedNamedFill.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPositionedNamedFill.key) : null), left: (tree.flutterPositionedNamedFill.hasLeft() ? tree.flutterPositionedNamedFill.left : 0.0), top: (tree.flutterPositionedNamedFill.hasTop() ? tree.flutterPositionedNamedFill.top : 0.0), right: (tree.flutterPositionedNamedFill.hasRight() ? tree.flutterPositionedNamedFill.right : 0.0), bottom: (tree.flutterPositionedNamedFill.hasBottom() ? tree.flutterPositionedNamedFill.bottom : 0.0), child: (tree.flutterPositionedNamedFill.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterPositionedNamedFill.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterPositionedDirectional:
      return $c217.PositionedDirectional(key: (tree.flutterPositionedDirectional.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPositionedDirectional.key) : null), start: (tree.flutterPositionedDirectional.hasStart() ? tree.flutterPositionedDirectional.start : null), top: (tree.flutterPositionedDirectional.hasTop() ? tree.flutterPositionedDirectional.top : null), end: (tree.flutterPositionedDirectional.hasEnd() ? tree.flutterPositionedDirectional.end : null), bottom: (tree.flutterPositionedDirectional.hasBottom() ? tree.flutterPositionedDirectional.bottom : null), width: (tree.flutterPositionedDirectional.hasWidth() ? tree.flutterPositionedDirectional.width : null), height: (tree.flutterPositionedDirectional.hasHeight() ? tree.flutterPositionedDirectional.height : null), child: (tree.flutterPositionedDirectional.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterPositionedDirectional.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterRawImage:
      return $c218.RawImage(key: (tree.flutterRawImage.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRawImage.key) : null), image: null, debugImageLabel: (tree.flutterRawImage.hasDebugImageLabel() ? tree.flutterRawImage.debugImageLabel : null), width: (tree.flutterRawImage.hasWidth() ? tree.flutterRawImage.width : null), height: (tree.flutterRawImage.hasHeight() ? tree.flutterRawImage.height : null), scale: (tree.flutterRawImage.hasScale() ? tree.flutterRawImage.scale : 1.0), color: null, opacity: null, colorBlendMode: null, fit: null, centerSlice: null, matchTextDirection: (tree.flutterRawImage.hasMatchTextDirection() ? tree.flutterRawImage.matchTextDirection : false), invertColors: (tree.flutterRawImage.hasInvertColors() ? tree.flutterRawImage.invertColors : false), isAntiAlias: (tree.flutterRawImage.hasIsAntiAlias() ? tree.flutterRawImage.isAntiAlias : false));
    case proto.WidgetExpression_Result.flutterRepaintBoundary:
      return $c219.RepaintBoundary(key: (tree.flutterRepaintBoundary.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRepaintBoundary.key) : null), child: (tree.flutterRepaintBoundary.hasChild() ? evaluateWidgetExpression(tree.flutterRepaintBoundary.child) : null));
    case proto.WidgetExpression_Result.flutterRepaintBoundaryNamedWrap:
      return $c220.RepaintBoundary.wrap((tree.flutterRepaintBoundaryNamedWrap.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterRepaintBoundaryNamedWrap.child) : missing('child')), (tree.flutterRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterRotatedBox:
      return $c221.RotatedBox(key: (tree.flutterRotatedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRotatedBox.key) : null), quarterTurns: (tree.flutterRotatedBox.hasQuarterTurns() ? tree.flutterRotatedBox.quarterTurns : missing('quarterTurns')), child: (tree.flutterRotatedBox.hasChild() ? evaluateWidgetExpression(tree.flutterRotatedBox.child) : null));
    case proto.WidgetExpression_Result.flutterRow:
      return $c222.Row(key: (tree.flutterRow.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRow.key) : null), textDirection: null, textBaseline: null, children: tree.flutterRow.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterSemantics:
      return $c223.Semantics(key: (tree.flutterSemantics.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSemantics.key) : null), child: (tree.flutterSemantics.hasChild() ? evaluateWidgetExpression(tree.flutterSemantics.child) : null), container: (tree.flutterSemantics.hasContainer() ? tree.flutterSemantics.container : false), explicitChildNodes: (tree.flutterSemantics.hasExplicitChildNodes() ? tree.flutterSemantics.explicitChildNodes : false), excludeSemantics: (tree.flutterSemantics.hasExcludeSemantics() ? tree.flutterSemantics.excludeSemantics : false), blockUserActions: (tree.flutterSemantics.hasBlockUserActions() ? tree.flutterSemantics.blockUserActions : false), enabled: (tree.flutterSemantics.hasEnabled() ? tree.flutterSemantics.enabled : null), checked: (tree.flutterSemantics.hasChecked() ? tree.flutterSemantics.checked : null), mixed: (tree.flutterSemantics.hasMixed() ? tree.flutterSemantics.mixed : null), selected: (tree.flutterSemantics.hasSelected() ? tree.flutterSemantics.selected : null), toggled: (tree.flutterSemantics.hasToggled() ? tree.flutterSemantics.toggled : null), button: (tree.flutterSemantics.hasButton() ? tree.flutterSemantics.button : null), slider: (tree.flutterSemantics.hasSlider() ? tree.flutterSemantics.slider : null), keyboardKey: (tree.flutterSemantics.hasKeyboardKey() ? tree.flutterSemantics.keyboardKey : null), link: (tree.flutterSemantics.hasLink() ? tree.flutterSemantics.link : null), header: (tree.flutterSemantics.hasHeader() ? tree.flutterSemantics.header : null), textField: (tree.flutterSemantics.hasTextField() ? tree.flutterSemantics.textField : null), readOnly: (tree.flutterSemantics.hasReadOnly() ? tree.flutterSemantics.readOnly : null), focusable: (tree.flutterSemantics.hasFocusable() ? tree.flutterSemantics.focusable : null), focused: (tree.flutterSemantics.hasFocused() ? tree.flutterSemantics.focused : null), inMutuallyExclusiveGroup: (tree.flutterSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterSemantics.inMutuallyExclusiveGroup : null), obscured: (tree.flutterSemantics.hasObscured() ? tree.flutterSemantics.obscured : null), multiline: (tree.flutterSemantics.hasMultiline() ? tree.flutterSemantics.multiline : null), scopesRoute: (tree.flutterSemantics.hasScopesRoute() ? tree.flutterSemantics.scopesRoute : null), namesRoute: (tree.flutterSemantics.hasNamesRoute() ? tree.flutterSemantics.namesRoute : null), hidden: (tree.flutterSemantics.hasHidden() ? tree.flutterSemantics.hidden : null), image: (tree.flutterSemantics.hasImage() ? tree.flutterSemantics.image : null), liveRegion: (tree.flutterSemantics.hasLiveRegion() ? tree.flutterSemantics.liveRegion : null), maxValueLength: (tree.flutterSemantics.hasMaxValueLength() ? tree.flutterSemantics.maxValueLength : null), currentValueLength: (tree.flutterSemantics.hasCurrentValueLength() ? tree.flutterSemantics.currentValueLength : null), label: (tree.flutterSemantics.hasLabel() ? tree.flutterSemantics.label : null), attributedLabel: null, value: (tree.flutterSemantics.hasValue() ? tree.flutterSemantics.value : null), attributedValue: null, increasedValue: (tree.flutterSemantics.hasIncreasedValue() ? tree.flutterSemantics.increasedValue : null), attributedIncreasedValue: null, decreasedValue: (tree.flutterSemantics.hasDecreasedValue() ? tree.flutterSemantics.decreasedValue : null), attributedDecreasedValue: null, hint: (tree.flutterSemantics.hasHint() ? tree.flutterSemantics.hint : null), attributedHint: null, tooltip: (tree.flutterSemantics.hasTooltip() ? tree.flutterSemantics.tooltip : null), onTapHint: (tree.flutterSemantics.hasOnTapHint() ? tree.flutterSemantics.onTapHint : null), onLongPressHint: (tree.flutterSemantics.hasOnLongPressHint() ? tree.flutterSemantics.onLongPressHint : null), textDirection: null, sortKey: null, tagForChildren: null, onTap: null, onLongPress: null, onScrollLeft: null, onScrollRight: null, onScrollUp: null, onScrollDown: null, onIncrease: null, onDecrease: null, onCopy: null, onCut: null, onPaste: null, onDismiss: null, onMoveCursorForwardByCharacter: null, onMoveCursorBackwardByCharacter: null, onSetSelection: null, onSetText: null, onDidGainAccessibilityFocus: null, onDidLoseAccessibilityFocus: null, customSemanticsActions: null);
    case proto.WidgetExpression_Result.flutterSizedBox:
      return $c224.SizedBox(key: (tree.flutterSizedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizedBox.key) : null), width: (tree.flutterSizedBox.hasWidth() ? tree.flutterSizedBox.width : null), height: (tree.flutterSizedBox.hasHeight() ? tree.flutterSizedBox.height : null), child: (tree.flutterSizedBox.hasChild() ? evaluateWidgetExpression(tree.flutterSizedBox.child) : null));
    case proto.WidgetExpression_Result.flutterSizedBoxNamedExpand:
      return $c225.SizedBox.expand(key: (tree.flutterSizedBoxNamedExpand.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizedBoxNamedExpand.key) : null), child: (tree.flutterSizedBoxNamedExpand.hasChild() ? evaluateWidgetExpression(tree.flutterSizedBoxNamedExpand.child) : null));
    case proto.WidgetExpression_Result.flutterSizedBoxNamedShrink:
      return $c226.SizedBox.shrink(key: (tree.flutterSizedBoxNamedShrink.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizedBoxNamedShrink.key) : null), child: (tree.flutterSizedBoxNamedShrink.hasChild() ? evaluateWidgetExpression(tree.flutterSizedBoxNamedShrink.child) : null));
    case proto.WidgetExpression_Result.flutterSizedBoxNamedFromSize:
      return $c227.SizedBox.fromSize(key: (tree.flutterSizedBoxNamedFromSize.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizedBoxNamedFromSize.key) : null), child: (tree.flutterSizedBoxNamedFromSize.hasChild() ? evaluateWidgetExpression(tree.flutterSizedBoxNamedFromSize.child) : null), size: null);
    case proto.WidgetExpression_Result.flutterSizedBoxNamedSquare:
      return $c228.SizedBox.square(key: (tree.flutterSizedBoxNamedSquare.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizedBoxNamedSquare.key) : null), child: (tree.flutterSizedBoxNamedSquare.hasChild() ? evaluateWidgetExpression(tree.flutterSizedBoxNamedSquare.child) : null), dimension: (tree.flutterSizedBoxNamedSquare.hasDimension() ? tree.flutterSizedBoxNamedSquare.dimension : null));
    case proto.WidgetExpression_Result.flutterSliverToBoxAdapter:
      return $c229.SliverToBoxAdapter(key: (tree.flutterSliverToBoxAdapter.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverToBoxAdapter.key) : null), child: (tree.flutterSliverToBoxAdapter.hasChild() ? evaluateWidgetExpression(tree.flutterSliverToBoxAdapter.child) : null));
    case proto.WidgetExpression_Result.flutterStack:
      return $c230.Stack(key: (tree.flutterStack.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterStack.key) : null), textDirection: null, children: tree.flutterStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterTransformNamedRotate:
      return $c231.Transform.rotate(key: (tree.flutterTransformNamedRotate.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTransformNamedRotate.key) : null), angle: (tree.flutterTransformNamedRotate.hasAngle() ? tree.flutterTransformNamedRotate.angle : missing('angle')), origin: null, alignment: null, transformHitTests: (tree.flutterTransformNamedRotate.hasTransformHitTests() ? tree.flutterTransformNamedRotate.transformHitTests : true), filterQuality: null, child: (tree.flutterTransformNamedRotate.hasChild() ? evaluateWidgetExpression(tree.flutterTransformNamedRotate.child) : null));
    case proto.WidgetExpression_Result.flutterTransformNamedScale:
      return $c232.Transform.scale(key: (tree.flutterTransformNamedScale.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTransformNamedScale.key) : null), scale: (tree.flutterTransformNamedScale.hasScale() ? tree.flutterTransformNamedScale.scale : null), scaleX: (tree.flutterTransformNamedScale.hasScaleX() ? tree.flutterTransformNamedScale.scaleX : null), scaleY: (tree.flutterTransformNamedScale.hasScaleY() ? tree.flutterTransformNamedScale.scaleY : null), origin: null, alignment: null, transformHitTests: (tree.flutterTransformNamedScale.hasTransformHitTests() ? tree.flutterTransformNamedScale.transformHitTests : true), filterQuality: null, child: (tree.flutterTransformNamedScale.hasChild() ? evaluateWidgetExpression(tree.flutterTransformNamedScale.child) : null));
    case proto.WidgetExpression_Result.flutterTransformNamedFlip:
      return $c233.Transform.flip(key: (tree.flutterTransformNamedFlip.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTransformNamedFlip.key) : null), flipX: (tree.flutterTransformNamedFlip.hasFlipX() ? tree.flutterTransformNamedFlip.flipX : false), flipY: (tree.flutterTransformNamedFlip.hasFlipY() ? tree.flutterTransformNamedFlip.flipY : false), origin: null, transformHitTests: (tree.flutterTransformNamedFlip.hasTransformHitTests() ? tree.flutterTransformNamedFlip.transformHitTests : true), filterQuality: null, child: (tree.flutterTransformNamedFlip.hasChild() ? evaluateWidgetExpression(tree.flutterTransformNamedFlip.child) : null));
    case proto.WidgetExpression_Result.flutterUnconstrainedBox:
      return $c234.UnconstrainedBox(key: (tree.flutterUnconstrainedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterUnconstrainedBox.key) : null), child: (tree.flutterUnconstrainedBox.hasChild() ? evaluateWidgetExpression(tree.flutterUnconstrainedBox.child) : null), textDirection: null, constrainedAxis: null);
    case proto.WidgetExpression_Result.flutterWrap:
      return $c235.Wrap(key: (tree.flutterWrap.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterWrap.key) : null), spacing: (tree.flutterWrap.hasSpacing() ? tree.flutterWrap.spacing : 0.0), runSpacing: (tree.flutterWrap.hasRunSpacing() ? tree.flutterWrap.runSpacing : 0.0), textDirection: null, children: tree.flutterWrap.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterContainer:
      return $c236.Container(key: (tree.flutterContainer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterContainer.key) : null), alignment: null, padding: null, color: null, decoration: null, foregroundDecoration: null, width: (tree.flutterContainer.hasWidth() ? tree.flutterContainer.width : null), height: (tree.flutterContainer.hasHeight() ? tree.flutterContainer.height : null), constraints: null, margin: null, transform: null, transformAlignment: null, child: (tree.flutterContainer.hasChild() ? evaluateWidgetExpression(tree.flutterContainer.child) : null));
    case proto.WidgetExpression_Result.flutterDefaultSelectionStyle:
      return $c237.DefaultSelectionStyle(key: (tree.flutterDefaultSelectionStyle.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDefaultSelectionStyle.key) : null), cursorColor: null, selectionColor: null, mouseCursor: null, child: (tree.flutterDefaultSelectionStyle.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDefaultSelectionStyle.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterDefaultSelectionStyleNamedFallback:
      return $c238.DefaultSelectionStyle.fallback(key: (tree.flutterDefaultSelectionStyleNamedFallback.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDefaultSelectionStyleNamedFallback.key) : null));
    case proto.WidgetExpression_Result.flutterDefaultTextEditingShortcuts:
      return $c239.DefaultTextEditingShortcuts(key: (tree.flutterDefaultTextEditingShortcuts.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDefaultTextEditingShortcuts.key) : null), child: (tree.flutterDefaultTextEditingShortcuts.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDefaultTextEditingShortcuts.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterDismissible:
      return $c240.Dismissible(key: (tree.flutterDismissible.hasKey() ? types.evaluateRequiredFlutterKeyExpression(tree.flutterDismissible.key) : missing('key')), child: (tree.flutterDismissible.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDismissible.child) : missing('child')), background: (tree.flutterDismissible.hasBackground() ? evaluateWidgetExpression(tree.flutterDismissible.background) : null), secondaryBackground: (tree.flutterDismissible.hasSecondaryBackground() ? evaluateWidgetExpression(tree.flutterDismissible.secondaryBackground) : null), confirmDismiss: null, onResize: null, onUpdate: null, onDismissed: null, resizeDuration: (tree.flutterDismissible.hasResizeDuration() ? types.evaluateDurationExpression(tree.flutterDismissible.resizeDuration) : null), movementDuration: (tree.flutterDismissible.hasMovementDuration() ? types.evaluateRequiredDurationExpression(tree.flutterDismissible.movementDuration) : missing('movementDuration')), crossAxisEndOffset: (tree.flutterDismissible.hasCrossAxisEndOffset() ? tree.flutterDismissible.crossAxisEndOffset : 0.0));
    case proto.WidgetExpression_Result.flutterDisplayFeatureSubScreen:
      return $c241.DisplayFeatureSubScreen(key: (tree.flutterDisplayFeatureSubScreen.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDisplayFeatureSubScreen.key) : null), anchorPoint: null, child: (tree.flutterDisplayFeatureSubScreen.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDisplayFeatureSubScreen.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterDraggable:
      return $c242.Draggable(key: (tree.flutterDraggable.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDraggable.key) : null), child: (tree.flutterDraggable.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDraggable.child) : missing('child')), feedback: (tree.flutterDraggable.hasFeedback() ? evaluateRequiredWidgetExpression(tree.flutterDraggable.feedback) : missing('feedback')), axis: null, childWhenDragging: (tree.flutterDraggable.hasChildWhenDragging() ? evaluateWidgetExpression(tree.flutterDraggable.childWhenDragging) : null), affinity: null, maxSimultaneousDrags: (tree.flutterDraggable.hasMaxSimultaneousDrags() ? tree.flutterDraggable.maxSimultaneousDrags : null), onDragStarted: null, onDragUpdate: null, onDraggableCanceled: null, onDragEnd: null, onDragCompleted: null, ignoringFeedbackSemantics: (tree.flutterDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterDraggable.hasIgnoringFeedbackPointer() ? tree.flutterDraggable.ignoringFeedbackPointer : true), rootOverlay: (tree.flutterDraggable.hasRootOverlay() ? tree.flutterDraggable.rootOverlay : false), allowedButtonsFilter: null);
    case proto.WidgetExpression_Result.flutterLongPressDraggable:
      return $c243.LongPressDraggable(key: (tree.flutterLongPressDraggable.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterLongPressDraggable.key) : null), child: (tree.flutterLongPressDraggable.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterLongPressDraggable.child) : missing('child')), feedback: (tree.flutterLongPressDraggable.hasFeedback() ? evaluateRequiredWidgetExpression(tree.flutterLongPressDraggable.feedback) : missing('feedback')), axis: null, childWhenDragging: (tree.flutterLongPressDraggable.hasChildWhenDragging() ? evaluateWidgetExpression(tree.flutterLongPressDraggable.childWhenDragging) : null), maxSimultaneousDrags: (tree.flutterLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterLongPressDraggable.maxSimultaneousDrags : null), onDragStarted: null, onDragUpdate: null, onDraggableCanceled: null, onDragEnd: null, onDragCompleted: null, hapticFeedbackOnStart: (tree.flutterLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterLongPressDraggable.hapticFeedbackOnStart : true), ignoringFeedbackSemantics: (tree.flutterLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterLongPressDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterLongPressDraggable.ignoringFeedbackPointer : true), delay: (tree.flutterLongPressDraggable.hasDelay() ? types.evaluateRequiredDurationExpression(tree.flutterLongPressDraggable.delay) : missing('delay')), allowedButtonsFilter: null);
    case proto.WidgetExpression_Result.flutterDraggableScrollableActuator:
      return $c244.DraggableScrollableActuator(key: (tree.flutterDraggableScrollableActuator.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDraggableScrollableActuator.key) : null), child: (tree.flutterDraggableScrollableActuator.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterDraggableScrollableActuator.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterFadeInImageNamedAssetNetwork:
      return $c245.FadeInImage.assetNetwork(key: (tree.flutterFadeInImageNamedAssetNetwork.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFadeInImageNamedAssetNetwork.key) : null), placeholder: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')), placeholderErrorBuilder: null, image: (tree.flutterFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterFadeInImageNamedAssetNetwork.image : missing('image')), imageErrorBuilder: null, bundle: null, placeholderScale: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderScale : null), imageScale: (tree.flutterFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterFadeInImageNamedAssetNetwork.imageScale : 1.0), excludeFromSemantics: (tree.flutterFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedAssetNetwork.excludeFromSemantics : false), imageSemanticLabel: (tree.flutterFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedAssetNetwork.imageSemanticLabel : null), fadeOutDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutDuration() ? types.evaluateRequiredDurationExpression(tree.flutterFadeInImageNamedAssetNetwork.fadeOutDuration) : missing('fadeOutDuration')), fadeInDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInDuration() ? types.evaluateRequiredDurationExpression(tree.flutterFadeInImageNamedAssetNetwork.fadeInDuration) : missing('fadeInDuration')), width: (tree.flutterFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterFadeInImageNamedAssetNetwork.width : null), height: (tree.flutterFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterFadeInImageNamedAssetNetwork.height : null), fit: null, placeholderFit: null, placeholderFilterQuality: null, matchTextDirection: (tree.flutterFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedAssetNetwork.matchTextDirection : false), placeholderCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheWidth : null), placeholderCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheHeight : null), imageCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheWidth : null), imageCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case proto.WidgetExpression_Result.flutterExcludeFocus:
      return $c246.ExcludeFocus(key: (tree.flutterExcludeFocus.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterExcludeFocus.key) : null), excluding: (tree.flutterExcludeFocus.hasExcluding() ? tree.flutterExcludeFocus.excluding : true), child: (tree.flutterExcludeFocus.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterExcludeFocus.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterFocus:
      return $c247.Focus(key: (tree.flutterFocus.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFocus.key) : null), child: (tree.flutterFocus.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterFocus.child) : missing('child')), focusNode: null, parentNode: null, autofocus: (tree.flutterFocus.hasAutofocus() ? tree.flutterFocus.autofocus : false), onFocusChange: null, onKeyEvent: null, onKey: null, canRequestFocus: (tree.flutterFocus.hasCanRequestFocus() ? tree.flutterFocus.canRequestFocus : null), skipTraversal: (tree.flutterFocus.hasSkipTraversal() ? tree.flutterFocus.skipTraversal : null), descendantsAreFocusable: (tree.flutterFocus.hasDescendantsAreFocusable() ? tree.flutterFocus.descendantsAreFocusable : null), descendantsAreTraversable: (tree.flutterFocus.hasDescendantsAreTraversable() ? tree.flutterFocus.descendantsAreTraversable : null), includeSemantics: (tree.flutterFocus.hasIncludeSemantics() ? tree.flutterFocus.includeSemantics : true), debugLabel: (tree.flutterFocus.hasDebugLabel() ? tree.flutterFocus.debugLabel : null));
    case proto.WidgetExpression_Result.flutterFocusScope:
      return $c248.FocusScope(key: (tree.flutterFocusScope.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFocusScope.key) : null), node: null, parentNode: null, child: (tree.flutterFocusScope.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterFocusScope.child) : missing('child')), autofocus: (tree.flutterFocusScope.hasAutofocus() ? tree.flutterFocusScope.autofocus : false), onFocusChange: null, canRequestFocus: (tree.flutterFocusScope.hasCanRequestFocus() ? tree.flutterFocusScope.canRequestFocus : null), skipTraversal: (tree.flutterFocusScope.hasSkipTraversal() ? tree.flutterFocusScope.skipTraversal : null), onKeyEvent: null, onKey: null, debugLabel: (tree.flutterFocusScope.hasDebugLabel() ? tree.flutterFocusScope.debugLabel : null));
    case proto.WidgetExpression_Result.flutterExcludeFocusTraversal:
      return $c249.ExcludeFocusTraversal(key: (tree.flutterExcludeFocusTraversal.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterExcludeFocusTraversal.key) : null), excluding: (tree.flutterExcludeFocusTraversal.hasExcluding() ? tree.flutterExcludeFocusTraversal.excluding : true), child: (tree.flutterExcludeFocusTraversal.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterExcludeFocusTraversal.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterFocusTraversalGroup:
      return $c250.FocusTraversalGroup(key: (tree.flutterFocusTraversalGroup.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterFocusTraversalGroup.key) : null), policy: null, descendantsAreFocusable: (tree.flutterFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterFocusTraversalGroup.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterFocusTraversalGroup.descendantsAreTraversable : true), child: (tree.flutterFocusTraversalGroup.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterFocusTraversalGroup.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterForm:
      return $c251.Form(key: (tree.flutterForm.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterForm.key) : null), child: (tree.flutterForm.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterForm.child) : missing('child')), onWillPop: null, onChanged: null, autovalidateMode: null);
    case proto.WidgetExpression_Result.flutterErrorWidgetNamedWithDetails:
      return $c252.ErrorWidget.withDetails(message: (tree.flutterErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterErrorWidgetNamedWithDetails.message : ''), error: null);
    case proto.WidgetExpression_Result.flutterGestureDetector:
      return $c253.GestureDetector(key: (tree.flutterGestureDetector.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterGestureDetector.key) : null), child: (tree.flutterGestureDetector.hasChild() ? evaluateWidgetExpression(tree.flutterGestureDetector.child) : null), onTapDown: null, onTapUp: null, onTap: null, onTapCancel: null, onSecondaryTap: null, onSecondaryTapDown: null, onSecondaryTapUp: null, onSecondaryTapCancel: null, onTertiaryTapDown: null, onTertiaryTapUp: null, onTertiaryTapCancel: null, onDoubleTapDown: null, onDoubleTap: null, onDoubleTapCancel: null, onLongPressDown: null, onLongPressCancel: null, onLongPress: null, onLongPressStart: null, onLongPressMoveUpdate: null, onLongPressUp: null, onLongPressEnd: null, onSecondaryLongPressDown: null, onSecondaryLongPressCancel: null, onSecondaryLongPress: null, onSecondaryLongPressStart: null, onSecondaryLongPressMoveUpdate: null, onSecondaryLongPressUp: null, onSecondaryLongPressEnd: null, onTertiaryLongPressDown: null, onTertiaryLongPressCancel: null, onTertiaryLongPress: null, onTertiaryLongPressStart: null, onTertiaryLongPressMoveUpdate: null, onTertiaryLongPressUp: null, onTertiaryLongPressEnd: null, onVerticalDragDown: null, onVerticalDragStart: null, onVerticalDragUpdate: null, onVerticalDragEnd: null, onVerticalDragCancel: null, onHorizontalDragDown: null, onHorizontalDragStart: null, onHorizontalDragUpdate: null, onHorizontalDragEnd: null, onHorizontalDragCancel: null, onForcePressStart: null, onForcePressPeak: null, onForcePressUpdate: null, onForcePressEnd: null, onPanDown: null, onPanStart: null, onPanUpdate: null, onPanEnd: null, onPanCancel: null, onScaleStart: null, onScaleUpdate: null, onScaleEnd: null, behavior: null, excludeFromSemantics: (tree.flutterGestureDetector.hasExcludeFromSemantics() ? tree.flutterGestureDetector.excludeFromSemantics : false), trackpadScrollCausesScale: (tree.flutterGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterGestureDetector.trackpadScrollCausesScale : false), supportedDevices: null);
    case proto.WidgetExpression_Result.flutterRawGestureDetector:
      return $c254.RawGestureDetector(key: (tree.flutterRawGestureDetector.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRawGestureDetector.key) : null), child: (tree.flutterRawGestureDetector.hasChild() ? evaluateWidgetExpression(tree.flutterRawGestureDetector.child) : null), behavior: null, excludeFromSemantics: (tree.flutterRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterRawGestureDetector.excludeFromSemantics : false), semantics: null);
    case proto.WidgetExpression_Result.flutterGridPaper:
      return $c255.GridPaper(key: (tree.flutterGridPaper.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterGridPaper.key) : null), interval: (tree.flutterGridPaper.hasInterval() ? tree.flutterGridPaper.interval : 100.0), divisions: (tree.flutterGridPaper.hasDivisions() ? tree.flutterGridPaper.divisions : 2), subdivisions: (tree.flutterGridPaper.hasSubdivisions() ? tree.flutterGridPaper.subdivisions : 5), child: (tree.flutterGridPaper.hasChild() ? evaluateWidgetExpression(tree.flutterGridPaper.child) : null));
    case proto.WidgetExpression_Result.flutterHeroMode:
      return $c256.HeroMode(key: (tree.flutterHeroMode.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterHeroMode.key) : null), child: (tree.flutterHeroMode.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterHeroMode.child) : missing('child')), enabled: (tree.flutterHeroMode.hasEnabled() ? tree.flutterHeroMode.enabled : true));
    case proto.WidgetExpression_Result.flutterIcon:
      return $c257.Icon(null, key: (tree.flutterIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterIcon.key) : null), size: (tree.flutterIcon.hasSize() ? tree.flutterIcon.size : null), fill: (tree.flutterIcon.hasFill() ? tree.flutterIcon.fill : null), weight: (tree.flutterIcon.hasWeight() ? tree.flutterIcon.weight : null), grade: (tree.flutterIcon.hasGrade() ? tree.flutterIcon.grade : null), opticalSize: (tree.flutterIcon.hasOpticalSize() ? tree.flutterIcon.opticalSize : null), color: null, shadows: null, semanticLabel: (tree.flutterIcon.hasSemanticLabel() ? tree.flutterIcon.semanticLabel : null), textDirection: null);
    case proto.WidgetExpression_Result.flutterImageNamedNetwork:
      return $c258.Image.network((tree.flutterImageNamedNetwork.hasSrc() ? tree.flutterImageNamedNetwork.src : missing('src')), key: (tree.flutterImageNamedNetwork.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterImageNamedNetwork.key) : null), scale: (tree.flutterImageNamedNetwork.hasScale() ? tree.flutterImageNamedNetwork.scale : 1.0), frameBuilder: null, loadingBuilder: null, errorBuilder: null, semanticLabel: (tree.flutterImageNamedNetwork.hasSemanticLabel() ? tree.flutterImageNamedNetwork.semanticLabel : null), excludeFromSemantics: (tree.flutterImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterImageNamedNetwork.excludeFromSemantics : false), width: (tree.flutterImageNamedNetwork.hasWidth() ? tree.flutterImageNamedNetwork.width : null), height: (tree.flutterImageNamedNetwork.hasHeight() ? tree.flutterImageNamedNetwork.height : null), color: null, opacity: null, colorBlendMode: null, fit: null, centerSlice: null, matchTextDirection: (tree.flutterImageNamedNetwork.hasMatchTextDirection() ? tree.flutterImageNamedNetwork.matchTextDirection : false), gaplessPlayback: (tree.flutterImageNamedNetwork.hasGaplessPlayback() ? tree.flutterImageNamedNetwork.gaplessPlayback : false), isAntiAlias: (tree.flutterImageNamedNetwork.hasIsAntiAlias() ? tree.flutterImageNamedNetwork.isAntiAlias : false), headers: null, cacheWidth: (tree.flutterImageNamedNetwork.hasCacheWidth() ? tree.flutterImageNamedNetwork.cacheWidth : null), cacheHeight: (tree.flutterImageNamedNetwork.hasCacheHeight() ? tree.flutterImageNamedNetwork.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterImageNamedAsset:
      return $c259.Image.asset((tree.flutterImageNamedAsset.hasName() ? tree.flutterImageNamedAsset.name : missing('name')), key: (tree.flutterImageNamedAsset.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterImageNamedAsset.key) : null), bundle: null, frameBuilder: null, errorBuilder: null, semanticLabel: (tree.flutterImageNamedAsset.hasSemanticLabel() ? tree.flutterImageNamedAsset.semanticLabel : null), excludeFromSemantics: (tree.flutterImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterImageNamedAsset.excludeFromSemantics : false), scale: (tree.flutterImageNamedAsset.hasScale() ? tree.flutterImageNamedAsset.scale : null), width: (tree.flutterImageNamedAsset.hasWidth() ? tree.flutterImageNamedAsset.width : null), height: (tree.flutterImageNamedAsset.hasHeight() ? tree.flutterImageNamedAsset.height : null), color: null, opacity: null, colorBlendMode: null, fit: null, centerSlice: null, matchTextDirection: (tree.flutterImageNamedAsset.hasMatchTextDirection() ? tree.flutterImageNamedAsset.matchTextDirection : false), gaplessPlayback: (tree.flutterImageNamedAsset.hasGaplessPlayback() ? tree.flutterImageNamedAsset.gaplessPlayback : false), isAntiAlias: (tree.flutterImageNamedAsset.hasIsAntiAlias() ? tree.flutterImageNamedAsset.isAntiAlias : false), package: (tree.flutterImageNamedAsset.hasPackage() ? tree.flutterImageNamedAsset.package : null), cacheWidth: (tree.flutterImageNamedAsset.hasCacheWidth() ? tree.flutterImageNamedAsset.cacheWidth : null), cacheHeight: (tree.flutterImageNamedAsset.hasCacheHeight() ? tree.flutterImageNamedAsset.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterImageIcon:
      return $c260.ImageIcon(null, key: (tree.flutterImageIcon.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterImageIcon.key) : null), size: (tree.flutterImageIcon.hasSize() ? tree.flutterImageIcon.size : null), color: null, semanticLabel: (tree.flutterImageIcon.hasSemanticLabel() ? tree.flutterImageIcon.semanticLabel : null));
    case proto.WidgetExpression_Result.flutterAnimatedContainer:
      return $c261.AnimatedContainer(key: (tree.flutterAnimatedContainer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedContainer.key) : null), alignment: null, padding: null, color: null, decoration: null, foregroundDecoration: null, width: (tree.flutterAnimatedContainer.hasWidth() ? tree.flutterAnimatedContainer.width : null), height: (tree.flutterAnimatedContainer.hasHeight() ? tree.flutterAnimatedContainer.height : null), constraints: null, margin: null, transform: null, transformAlignment: null, child: (tree.flutterAnimatedContainer.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedContainer.child) : null), duration: (tree.flutterAnimatedContainer.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedContainer.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterAnimatedFractionallySizedBox:
      return $c262.AnimatedFractionallySizedBox(key: (tree.flutterAnimatedFractionallySizedBox.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedFractionallySizedBox.key) : null), child: (tree.flutterAnimatedFractionallySizedBox.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedFractionallySizedBox.child) : null), heightFactor: (tree.flutterAnimatedFractionallySizedBox.hasHeightFactor() ? tree.flutterAnimatedFractionallySizedBox.heightFactor : null), widthFactor: (tree.flutterAnimatedFractionallySizedBox.hasWidthFactor() ? tree.flutterAnimatedFractionallySizedBox.widthFactor : null), duration: (tree.flutterAnimatedFractionallySizedBox.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedFractionallySizedBox.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterAnimatedOpacity:
      return $c263.AnimatedOpacity(key: (tree.flutterAnimatedOpacity.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedOpacity.key) : null), child: (tree.flutterAnimatedOpacity.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedOpacity.child) : null), opacity: (tree.flutterAnimatedOpacity.hasOpacity() ? tree.flutterAnimatedOpacity.opacity : missing('opacity')), duration: (tree.flutterAnimatedOpacity.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedOpacity.duration) : missing('duration')), onEnd: null, alwaysIncludeSemantics: (tree.flutterAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterAnimatedOpacity.alwaysIncludeSemantics : false));
    case proto.WidgetExpression_Result.flutterAnimatedPositioned:
      return $c264.AnimatedPositioned(key: (tree.flutterAnimatedPositioned.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedPositioned.key) : null), child: (tree.flutterAnimatedPositioned.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterAnimatedPositioned.child) : missing('child')), left: (tree.flutterAnimatedPositioned.hasLeft() ? tree.flutterAnimatedPositioned.left : null), top: (tree.flutterAnimatedPositioned.hasTop() ? tree.flutterAnimatedPositioned.top : null), right: (tree.flutterAnimatedPositioned.hasRight() ? tree.flutterAnimatedPositioned.right : null), bottom: (tree.flutterAnimatedPositioned.hasBottom() ? tree.flutterAnimatedPositioned.bottom : null), width: (tree.flutterAnimatedPositioned.hasWidth() ? tree.flutterAnimatedPositioned.width : null), height: (tree.flutterAnimatedPositioned.hasHeight() ? tree.flutterAnimatedPositioned.height : null), duration: (tree.flutterAnimatedPositioned.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedPositioned.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterAnimatedPositionedDirectional:
      return $c265.AnimatedPositionedDirectional(key: (tree.flutterAnimatedPositionedDirectional.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedPositionedDirectional.key) : null), child: (tree.flutterAnimatedPositionedDirectional.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterAnimatedPositionedDirectional.child) : missing('child')), start: (tree.flutterAnimatedPositionedDirectional.hasStart() ? tree.flutterAnimatedPositionedDirectional.start : null), top: (tree.flutterAnimatedPositionedDirectional.hasTop() ? tree.flutterAnimatedPositionedDirectional.top : null), end: (tree.flutterAnimatedPositionedDirectional.hasEnd() ? tree.flutterAnimatedPositionedDirectional.end : null), bottom: (tree.flutterAnimatedPositionedDirectional.hasBottom() ? tree.flutterAnimatedPositionedDirectional.bottom : null), width: (tree.flutterAnimatedPositionedDirectional.hasWidth() ? tree.flutterAnimatedPositionedDirectional.width : null), height: (tree.flutterAnimatedPositionedDirectional.hasHeight() ? tree.flutterAnimatedPositionedDirectional.height : null), duration: (tree.flutterAnimatedPositionedDirectional.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedPositionedDirectional.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterAnimatedRotation:
      return $c266.AnimatedRotation(key: (tree.flutterAnimatedRotation.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedRotation.key) : null), child: (tree.flutterAnimatedRotation.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedRotation.child) : null), turns: (tree.flutterAnimatedRotation.hasTurns() ? tree.flutterAnimatedRotation.turns : missing('turns')), filterQuality: null, duration: (tree.flutterAnimatedRotation.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedRotation.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterAnimatedScale:
      return $c267.AnimatedScale(key: (tree.flutterAnimatedScale.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAnimatedScale.key) : null), child: (tree.flutterAnimatedScale.hasChild() ? evaluateWidgetExpression(tree.flutterAnimatedScale.child) : null), scale: (tree.flutterAnimatedScale.hasScale() ? tree.flutterAnimatedScale.scale : missing('scale')), filterQuality: null, duration: (tree.flutterAnimatedScale.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterAnimatedScale.duration) : missing('duration')), onEnd: null);
    case proto.WidgetExpression_Result.flutterSliverAnimatedOpacity:
      return $c268.SliverAnimatedOpacity(key: (tree.flutterSliverAnimatedOpacity.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverAnimatedOpacity.key) : null), sliver: (tree.flutterSliverAnimatedOpacity.hasSliver() ? evaluateWidgetExpression(tree.flutterSliverAnimatedOpacity.sliver) : null), opacity: (tree.flutterSliverAnimatedOpacity.hasOpacity() ? tree.flutterSliverAnimatedOpacity.opacity : missing('opacity')), duration: (tree.flutterSliverAnimatedOpacity.hasDuration() ? types.evaluateRequiredDurationExpression(tree.flutterSliverAnimatedOpacity.duration) : missing('duration')), onEnd: null, alwaysIncludeSemantics: (tree.flutterSliverAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverAnimatedOpacity.alwaysIncludeSemantics : false));
    case proto.WidgetExpression_Result.flutterInteractiveViewer:
      return $c269.InteractiveViewer(key: (tree.flutterInteractiveViewer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterInteractiveViewer.key) : null), constrained: (tree.flutterInteractiveViewer.hasConstrained() ? tree.flutterInteractiveViewer.constrained : true), maxScale: (tree.flutterInteractiveViewer.hasMaxScale() ? tree.flutterInteractiveViewer.maxScale : 2.5), minScale: (tree.flutterInteractiveViewer.hasMinScale() ? tree.flutterInteractiveViewer.minScale : 0.8), interactionEndFrictionCoefficient: (tree.flutterInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterInteractiveViewer.interactionEndFrictionCoefficient : missing('interactionEndFrictionCoefficient')), onInteractionEnd: null, onInteractionStart: null, onInteractionUpdate: null, panEnabled: (tree.flutterInteractiveViewer.hasPanEnabled() ? tree.flutterInteractiveViewer.panEnabled : true), scaleEnabled: (tree.flutterInteractiveViewer.hasScaleEnabled() ? tree.flutterInteractiveViewer.scaleEnabled : true), scaleFactor: (tree.flutterInteractiveViewer.hasScaleFactor() ? tree.flutterInteractiveViewer.scaleFactor : missing('scaleFactor')), transformationController: null, alignment: null, trackpadScrollCausesScale: (tree.flutterInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterInteractiveViewer.trackpadScrollCausesScale : false), child: (tree.flutterInteractiveViewer.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterInteractiveViewer.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterListWheelScrollView:
      return $c270.ListWheelScrollView(key: (tree.flutterListWheelScrollView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterListWheelScrollView.key) : null), controller: null, physics: null, diameterRatio: (tree.flutterListWheelScrollView.hasDiameterRatio() ? tree.flutterListWheelScrollView.diameterRatio : missing('diameterRatio')), perspective: (tree.flutterListWheelScrollView.hasPerspective() ? tree.flutterListWheelScrollView.perspective : missing('perspective')), offAxisFraction: (tree.flutterListWheelScrollView.hasOffAxisFraction() ? tree.flutterListWheelScrollView.offAxisFraction : 0.0), useMagnifier: (tree.flutterListWheelScrollView.hasUseMagnifier() ? tree.flutterListWheelScrollView.useMagnifier : false), magnification: (tree.flutterListWheelScrollView.hasMagnification() ? tree.flutterListWheelScrollView.magnification : 1.0), overAndUnderCenterOpacity: (tree.flutterListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollView.overAndUnderCenterOpacity : 1.0), itemExtent: (tree.flutterListWheelScrollView.hasItemExtent() ? tree.flutterListWheelScrollView.itemExtent : missing('itemExtent')), squeeze: (tree.flutterListWheelScrollView.hasSqueeze() ? tree.flutterListWheelScrollView.squeeze : 1.0), onSelectedItemChanged: null, renderChildrenOutsideViewport: (tree.flutterListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollView.renderChildrenOutsideViewport : false), restorationId: (tree.flutterListWheelScrollView.hasRestorationId() ? tree.flutterListWheelScrollView.restorationId : null), scrollBehavior: null, children: tree.flutterListWheelScrollView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterLookupBoundary:
      return $c271.LookupBoundary(key: (tree.flutterLookupBoundary.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterLookupBoundary.key) : null), child: (tree.flutterLookupBoundary.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterLookupBoundary.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterModalBarrier:
      return $c272.ModalBarrier(key: (tree.flutterModalBarrier.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterModalBarrier.key) : null), color: null, dismissible: (tree.flutterModalBarrier.hasDismissible() ? tree.flutterModalBarrier.dismissible : true), onDismiss: null, semanticsLabel: (tree.flutterModalBarrier.hasSemanticsLabel() ? tree.flutterModalBarrier.semanticsLabel : null), barrierSemanticsDismissible: (tree.flutterModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterModalBarrier.barrierSemanticsDismissible : true), clipDetailsNotifier: null, semanticsOnTapHint: (tree.flutterModalBarrier.hasSemanticsOnTapHint() ? tree.flutterModalBarrier.semanticsOnTapHint : null));
    case proto.WidgetExpression_Result.flutterNavigationToolbar:
      return $c273.NavigationToolbar(key: (tree.flutterNavigationToolbar.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterNavigationToolbar.key) : null), leading: (tree.flutterNavigationToolbar.hasLeading() ? evaluateWidgetExpression(tree.flutterNavigationToolbar.leading) : null), middle: (tree.flutterNavigationToolbar.hasMiddle() ? evaluateWidgetExpression(tree.flutterNavigationToolbar.middle) : null), trailing: (tree.flutterNavigationToolbar.hasTrailing() ? evaluateWidgetExpression(tree.flutterNavigationToolbar.trailing) : null), centerMiddle: (tree.flutterNavigationToolbar.hasCenterMiddle() ? tree.flutterNavigationToolbar.centerMiddle : true), middleSpacing: (tree.flutterNavigationToolbar.hasMiddleSpacing() ? tree.flutterNavigationToolbar.middleSpacing : missing('middleSpacing')));
    case proto.WidgetExpression_Result.flutterHeroControllerScopeNamedNone:
      return $c274.HeroControllerScope.none(key: (tree.flutterHeroControllerScopeNamedNone.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterHeroControllerScopeNamedNone.key) : null), child: (tree.flutterHeroControllerScopeNamedNone.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterHeroControllerScopeNamedNone.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterNavigator:
      return $c275.Navigator(key: (tree.flutterNavigator.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterNavigator.key) : null), onPopPage: null, initialRoute: (tree.flutterNavigator.hasInitialRoute() ? tree.flutterNavigator.initialRoute : null), onGenerateRoute: null, onUnknownRoute: null, reportsRouteUpdateToEngine: (tree.flutterNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterNavigator.reportsRouteUpdateToEngine : false), requestFocus: (tree.flutterNavigator.hasRequestFocus() ? tree.flutterNavigator.requestFocus : true), restorationScopeId: (tree.flutterNavigator.hasRestorationScopeId() ? tree.flutterNavigator.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterNotificationListener:
      return $c276.NotificationListener(key: (tree.flutterNotificationListener.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterNotificationListener.key) : null), child: (tree.flutterNotificationListener.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterNotificationListener.child) : missing('child')), onNotification: null);
    case proto.WidgetExpression_Result.flutterOverflowBar:
      return $c277.OverflowBar(key: (tree.flutterOverflowBar.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterOverflowBar.key) : null), spacing: (tree.flutterOverflowBar.hasSpacing() ? tree.flutterOverflowBar.spacing : 0.0), alignment: null, overflowSpacing: (tree.flutterOverflowBar.hasOverflowSpacing() ? tree.flutterOverflowBar.overflowSpacing : 0.0), textDirection: null, children: tree.flutterOverflowBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterOverlay:
      return $c278.Overlay(key: (tree.flutterOverlay.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterOverlay.key) : null));
    case proto.WidgetExpression_Result.flutterPageView:
      return $c279.PageView(key: (tree.flutterPageView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPageView.key) : null), reverse: (tree.flutterPageView.hasReverse() ? tree.flutterPageView.reverse : false), controller: null, physics: null, pageSnapping: (tree.flutterPageView.hasPageSnapping() ? tree.flutterPageView.pageSnapping : true), onPageChanged: null, children: tree.flutterPageView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), allowImplicitScrolling: (tree.flutterPageView.hasAllowImplicitScrolling() ? tree.flutterPageView.allowImplicitScrolling : false), restorationId: (tree.flutterPageView.hasRestorationId() ? tree.flutterPageView.restorationId : null), scrollBehavior: null, padEnds: (tree.flutterPageView.hasPadEnds() ? tree.flutterPageView.padEnds : true));
    case proto.WidgetExpression_Result.flutterPerformanceOverlay:
      return $c280.PerformanceOverlay(key: (tree.flutterPerformanceOverlay.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPerformanceOverlay.key) : null), optionsMask: (tree.flutterPerformanceOverlay.hasOptionsMask() ? tree.flutterPerformanceOverlay.optionsMask : 0), rasterizerThreshold: (tree.flutterPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterPerformanceOverlay.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlay.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlay.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterPerformanceOverlayNamedAllEnabled:
      return $c281.PerformanceOverlay.allEnabled(key: (tree.flutterPerformanceOverlayNamedAllEnabled.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPerformanceOverlayNamedAllEnabled.key) : null), rasterizerThreshold: (tree.flutterPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterPlaceholder:
      return $c282.Placeholder(key: (tree.flutterPlaceholder.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPlaceholder.key) : null), strokeWidth: (tree.flutterPlaceholder.hasStrokeWidth() ? tree.flutterPlaceholder.strokeWidth : 2.0), fallbackWidth: (tree.flutterPlaceholder.hasFallbackWidth() ? tree.flutterPlaceholder.fallbackWidth : 400.0), fallbackHeight: (tree.flutterPlaceholder.hasFallbackHeight() ? tree.flutterPlaceholder.fallbackHeight : 400.0), child: (tree.flutterPlaceholder.hasChild() ? evaluateWidgetExpression(tree.flutterPlaceholder.child) : null));
    case proto.WidgetExpression_Result.flutterAndroidView:
      return $c283.AndroidView(key: (tree.flutterAndroidView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterAndroidView.key) : null), viewType: (tree.flutterAndroidView.hasViewType() ? tree.flutterAndroidView.viewType : missing('viewType')), onPlatformViewCreated: null, layoutDirection: null, gestureRecognizers: null, creationParamsCodec: null);
    case proto.WidgetExpression_Result.flutterHtmlElementView:
      return $c284.HtmlElementView(key: (tree.flutterHtmlElementView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterHtmlElementView.key) : null), viewType: (tree.flutterHtmlElementView.hasViewType() ? tree.flutterHtmlElementView.viewType : missing('viewType')), onPlatformViewCreated: null, creationParams: null);
    case proto.WidgetExpression_Result.flutterUiKitView:
      return $c285.UiKitView(key: (tree.flutterUiKitView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterUiKitView.key) : null), viewType: (tree.flutterUiKitView.hasViewType() ? tree.flutterUiKitView.viewType : missing('viewType')), onPlatformViewCreated: null, layoutDirection: null, creationParamsCodec: null, gestureRecognizers: null);
    case proto.WidgetExpression_Result.flutterPrimaryScrollControllerNamedNone:
      return $c286.PrimaryScrollController.none(key: (tree.flutterPrimaryScrollControllerNamedNone.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterPrimaryScrollControllerNamedNone.key) : null), child: (tree.flutterPrimaryScrollControllerNamedNone.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterPrimaryScrollControllerNamedNone.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterReorderableDelayedDragStartListener:
      return $c287.ReorderableDelayedDragStartListener(key: (tree.flutterReorderableDelayedDragStartListener.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterReorderableDelayedDragStartListener.key) : null), child: (tree.flutterReorderableDelayedDragStartListener.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterReorderableDelayedDragStartListener.child) : missing('child')), index: (tree.flutterReorderableDelayedDragStartListener.hasIndex() ? tree.flutterReorderableDelayedDragStartListener.index : missing('index')), enabled: (tree.flutterReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterReorderableDelayedDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterReorderableDragStartListener:
      return $c288.ReorderableDragStartListener(key: (tree.flutterReorderableDragStartListener.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterReorderableDragStartListener.key) : null), child: (tree.flutterReorderableDragStartListener.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterReorderableDragStartListener.child) : missing('child')), index: (tree.flutterReorderableDragStartListener.hasIndex() ? tree.flutterReorderableDragStartListener.index : missing('index')), enabled: (tree.flutterReorderableDragStartListener.hasEnabled() ? tree.flutterReorderableDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterRestorationScope:
      return $c289.RestorationScope(key: (tree.flutterRestorationScope.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRestorationScope.key) : null), restorationId: (tree.flutterRestorationScope.hasRestorationId() ? tree.flutterRestorationScope.restorationId : null), child: (tree.flutterRestorationScope.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterRestorationScope.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterRootRestorationScope:
      return $c290.RootRestorationScope(key: (tree.flutterRootRestorationScope.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRootRestorationScope.key) : null), restorationId: (tree.flutterRootRestorationScope.hasRestorationId() ? tree.flutterRootRestorationScope.restorationId : null), child: (tree.flutterRootRestorationScope.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterRootRestorationScope.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterUnmanagedRestorationScope:
      return $c291.UnmanagedRestorationScope(key: (tree.flutterUnmanagedRestorationScope.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterUnmanagedRestorationScope.key) : null), bucket: null, child: (tree.flutterUnmanagedRestorationScope.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterUnmanagedRestorationScope.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSafeArea:
      return $c292.SafeArea(key: (tree.flutterSafeArea.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSafeArea.key) : null), left: (tree.flutterSafeArea.hasLeft() ? tree.flutterSafeArea.left : true), top: (tree.flutterSafeArea.hasTop() ? tree.flutterSafeArea.top : true), right: (tree.flutterSafeArea.hasRight() ? tree.flutterSafeArea.right : true), bottom: (tree.flutterSafeArea.hasBottom() ? tree.flutterSafeArea.bottom : true), maintainBottomViewPadding: (tree.flutterSafeArea.hasMaintainBottomViewPadding() ? tree.flutterSafeArea.maintainBottomViewPadding : false), child: (tree.flutterSafeArea.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterSafeArea.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSliverSafeArea:
      return $c293.SliverSafeArea(key: (tree.flutterSliverSafeArea.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverSafeArea.key) : null), left: (tree.flutterSliverSafeArea.hasLeft() ? tree.flutterSliverSafeArea.left : true), top: (tree.flutterSliverSafeArea.hasTop() ? tree.flutterSliverSafeArea.top : true), right: (tree.flutterSliverSafeArea.hasRight() ? tree.flutterSliverSafeArea.right : true), bottom: (tree.flutterSliverSafeArea.hasBottom() ? tree.flutterSliverSafeArea.bottom : true), sliver: (tree.flutterSliverSafeArea.hasSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverSafeArea.sliver) : missing('sliver')));
    case proto.WidgetExpression_Result.flutterScrollNotificationObserver:
      return $c294.ScrollNotificationObserver(key: (tree.flutterScrollNotificationObserver.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterScrollNotificationObserver.key) : null), child: (tree.flutterScrollNotificationObserver.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterScrollNotificationObserver.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterCustomScrollView:
      return $c295.CustomScrollView(key: (tree.flutterCustomScrollView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterCustomScrollView.key) : null), reverse: (tree.flutterCustomScrollView.hasReverse() ? tree.flutterCustomScrollView.reverse : false), controller: null, primary: (tree.flutterCustomScrollView.hasPrimary() ? tree.flutterCustomScrollView.primary : null), physics: null, scrollBehavior: null, shrinkWrap: (tree.flutterCustomScrollView.hasShrinkWrap() ? tree.flutterCustomScrollView.shrinkWrap : false), center: (tree.flutterCustomScrollView.hasCenter() ? types.evaluateFlutterKeyExpression(tree.flutterCustomScrollView.center) : null), anchor: (tree.flutterCustomScrollView.hasAnchor() ? tree.flutterCustomScrollView.anchor : 0.0), cacheExtent: (tree.flutterCustomScrollView.hasCacheExtent() ? tree.flutterCustomScrollView.cacheExtent : null), slivers: tree.flutterCustomScrollView.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterCustomScrollView.hasSemanticChildCount() ? tree.flutterCustomScrollView.semanticChildCount : null), restorationId: (tree.flutterCustomScrollView.hasRestorationId() ? tree.flutterCustomScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterGridViewNamedCount:
      return $c296.GridView.count(key: (tree.flutterGridViewNamedCount.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterGridViewNamedCount.key) : null), reverse: (tree.flutterGridViewNamedCount.hasReverse() ? tree.flutterGridViewNamedCount.reverse : false), controller: null, primary: (tree.flutterGridViewNamedCount.hasPrimary() ? tree.flutterGridViewNamedCount.primary : null), physics: null, shrinkWrap: (tree.flutterGridViewNamedCount.hasShrinkWrap() ? tree.flutterGridViewNamedCount.shrinkWrap : false), padding: null, crossAxisCount: (tree.flutterGridViewNamedCount.hasCrossAxisCount() ? tree.flutterGridViewNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterGridViewNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterGridViewNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterGridViewNamedCount.hasChildAspectRatio() ? tree.flutterGridViewNamedCount.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedCount.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedCount.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterGridViewNamedCount.addSemanticIndexes : true), cacheExtent: (tree.flutterGridViewNamedCount.hasCacheExtent() ? tree.flutterGridViewNamedCount.cacheExtent : null), children: tree.flutterGridViewNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterGridViewNamedCount.hasSemanticChildCount() ? tree.flutterGridViewNamedCount.semanticChildCount : null), restorationId: (tree.flutterGridViewNamedCount.hasRestorationId() ? tree.flutterGridViewNamedCount.restorationId : null));
    case proto.WidgetExpression_Result.flutterGridViewNamedExtent:
      return $c297.GridView.extent(key: (tree.flutterGridViewNamedExtent.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterGridViewNamedExtent.key) : null), reverse: (tree.flutterGridViewNamedExtent.hasReverse() ? tree.flutterGridViewNamedExtent.reverse : false), controller: null, primary: (tree.flutterGridViewNamedExtent.hasPrimary() ? tree.flutterGridViewNamedExtent.primary : null), physics: null, shrinkWrap: (tree.flutterGridViewNamedExtent.hasShrinkWrap() ? tree.flutterGridViewNamedExtent.shrinkWrap : false), padding: null, maxCrossAxisExtent: (tree.flutterGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterGridViewNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterGridViewNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterGridViewNamedExtent.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedExtent.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedExtent.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterGridViewNamedExtent.addSemanticIndexes : true), cacheExtent: (tree.flutterGridViewNamedExtent.hasCacheExtent() ? tree.flutterGridViewNamedExtent.cacheExtent : null), children: tree.flutterGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterGridViewNamedExtent.semanticChildCount : null), restorationId: (tree.flutterGridViewNamedExtent.hasRestorationId() ? tree.flutterGridViewNamedExtent.restorationId : null));
    case proto.WidgetExpression_Result.flutterListView:
      return $c298.ListView(key: (tree.flutterListView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterListView.key) : null), reverse: (tree.flutterListView.hasReverse() ? tree.flutterListView.reverse : false), controller: null, primary: (tree.flutterListView.hasPrimary() ? tree.flutterListView.primary : null), physics: null, shrinkWrap: (tree.flutterListView.hasShrinkWrap() ? tree.flutterListView.shrinkWrap : false), padding: null, itemExtent: (tree.flutterListView.hasItemExtent() ? tree.flutterListView.itemExtent : null), prototypeItem: (tree.flutterListView.hasPrototypeItem() ? evaluateWidgetExpression(tree.flutterListView.prototypeItem) : null), addAutomaticKeepAlives: (tree.flutterListView.hasAddAutomaticKeepAlives() ? tree.flutterListView.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterListView.hasAddRepaintBoundaries() ? tree.flutterListView.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterListView.hasAddSemanticIndexes() ? tree.flutterListView.addSemanticIndexes : true), cacheExtent: (tree.flutterListView.hasCacheExtent() ? tree.flutterListView.cacheExtent : null), children: tree.flutterListView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterListView.hasSemanticChildCount() ? tree.flutterListView.semanticChildCount : null), restorationId: (tree.flutterListView.hasRestorationId() ? tree.flutterListView.restorationId : null));
    case proto.WidgetExpression_Result.flutterRawScrollbar:
      return $c299.RawScrollbar(key: (tree.flutterRawScrollbar.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterRawScrollbar.key) : null), child: (tree.flutterRawScrollbar.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterRawScrollbar.child) : missing('child')), controller: null, thumbVisibility: (tree.flutterRawScrollbar.hasThumbVisibility() ? tree.flutterRawScrollbar.thumbVisibility : null), shape: null, radius: null, thickness: (tree.flutterRawScrollbar.hasThickness() ? tree.flutterRawScrollbar.thickness : null), thumbColor: null, minThumbLength: (tree.flutterRawScrollbar.hasMinThumbLength() ? tree.flutterRawScrollbar.minThumbLength : missing('minThumbLength')), minOverscrollLength: (tree.flutterRawScrollbar.hasMinOverscrollLength() ? tree.flutterRawScrollbar.minOverscrollLength : null), trackVisibility: (tree.flutterRawScrollbar.hasTrackVisibility() ? tree.flutterRawScrollbar.trackVisibility : null), trackRadius: null, trackColor: null, trackBorderColor: null, fadeDuration: (tree.flutterRawScrollbar.hasFadeDuration() ? types.evaluateRequiredDurationExpression(tree.flutterRawScrollbar.fadeDuration) : missing('fadeDuration')), timeToFade: (tree.flutterRawScrollbar.hasTimeToFade() ? types.evaluateRequiredDurationExpression(tree.flutterRawScrollbar.timeToFade) : missing('timeToFade')), pressDuration: (tree.flutterRawScrollbar.hasPressDuration() ? types.evaluateRequiredDurationExpression(tree.flutterRawScrollbar.pressDuration) : missing('pressDuration')), interactive: (tree.flutterRawScrollbar.hasInteractive() ? tree.flutterRawScrollbar.interactive : null), scrollbarOrientation: null, mainAxisMargin: (tree.flutterRawScrollbar.hasMainAxisMargin() ? tree.flutterRawScrollbar.mainAxisMargin : 0.0), crossAxisMargin: (tree.flutterRawScrollbar.hasCrossAxisMargin() ? tree.flutterRawScrollbar.crossAxisMargin : 0.0), padding: null);
    case proto.WidgetExpression_Result.flutterSelectionContainerNamedDisabled:
      return $c300.SelectionContainer.disabled(key: (tree.flutterSelectionContainerNamedDisabled.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSelectionContainerNamedDisabled.key) : null), child: (tree.flutterSelectionContainerNamedDisabled.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterSelectionContainerNamedDisabled.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSemanticsDebugger:
      return $c301.SemanticsDebugger(key: (tree.flutterSemanticsDebugger.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSemanticsDebugger.key) : null), child: (tree.flutterSemanticsDebugger.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterSemanticsDebugger.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSharedAppData:
      return $c302.SharedAppData(key: (tree.flutterSharedAppData.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSharedAppData.key) : null), child: (tree.flutterSharedAppData.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterSharedAppData.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterShortcutRegistrar:
      return $c303.ShortcutRegistrar(key: (tree.flutterShortcutRegistrar.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterShortcutRegistrar.key) : null), child: (tree.flutterShortcutRegistrar.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterShortcutRegistrar.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSingleChildScrollView:
      return $c304.SingleChildScrollView(key: (tree.flutterSingleChildScrollView.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSingleChildScrollView.key) : null), reverse: (tree.flutterSingleChildScrollView.hasReverse() ? tree.flutterSingleChildScrollView.reverse : false), padding: null, primary: (tree.flutterSingleChildScrollView.hasPrimary() ? tree.flutterSingleChildScrollView.primary : null), physics: null, controller: null, child: (tree.flutterSingleChildScrollView.hasChild() ? evaluateWidgetExpression(tree.flutterSingleChildScrollView.child) : null), restorationId: (tree.flutterSingleChildScrollView.hasRestorationId() ? tree.flutterSingleChildScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterSizeChangedLayoutNotifier:
      return $c305.SizeChangedLayoutNotifier(key: (tree.flutterSizeChangedLayoutNotifier.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSizeChangedLayoutNotifier.key) : null), child: (tree.flutterSizeChangedLayoutNotifier.hasChild() ? evaluateWidgetExpression(tree.flutterSizeChangedLayoutNotifier.child) : null));
    case proto.WidgetExpression_Result.flutterKeepAlive:
      return $c306.KeepAlive(key: (tree.flutterKeepAlive.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterKeepAlive.key) : null), keepAlive: (tree.flutterKeepAlive.hasKeepAlive() ? tree.flutterKeepAlive.keepAlive : missing('keepAlive')), child: (tree.flutterKeepAlive.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterKeepAlive.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSliverConstrainedCrossAxis:
      return $c307.SliverConstrainedCrossAxis(key: (tree.flutterSliverConstrainedCrossAxis.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverConstrainedCrossAxis.key) : null), maxExtent: (tree.flutterSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')), sliver: (tree.flutterSliverConstrainedCrossAxis.hasSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverConstrainedCrossAxis.sliver) : missing('sliver')));
    case proto.WidgetExpression_Result.flutterSliverCrossAxisExpanded:
      return $c308.SliverCrossAxisExpanded(key: (tree.flutterSliverCrossAxisExpanded.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverCrossAxisExpanded.key) : null), flex: (tree.flutterSliverCrossAxisExpanded.hasFlex() ? tree.flutterSliverCrossAxisExpanded.flex : missing('flex')), sliver: (tree.flutterSliverCrossAxisExpanded.hasSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverCrossAxisExpanded.sliver) : missing('sliver')));
    case proto.WidgetExpression_Result.flutterSliverCrossAxisGroup:
      return $c309.SliverCrossAxisGroup(key: (tree.flutterSliverCrossAxisGroup.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverCrossAxisGroup.key) : null), slivers: tree.flutterSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterSliverFixedExtentListNamedList:
      return $c310.SliverFixedExtentList.list(key: (tree.flutterSliverFixedExtentListNamedList.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverFixedExtentListNamedList.key) : null), children: tree.flutterSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), itemExtent: (tree.flutterSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')), addAutomaticKeepAlives: (tree.flutterSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverFixedExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverFixedExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterSliverGridNamedCount:
      return $c311.SliverGrid.count(key: (tree.flutterSliverGridNamedCount.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverGridNamedCount.key) : null), crossAxisCount: (tree.flutterSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterSliverGridNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterSliverGridNamedCount.childAspectRatio : 1.0), children: tree.flutterSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterSliverGridNamedExtent:
      return $c312.SliverGrid.extent(key: (tree.flutterSliverGridNamedExtent.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverGridNamedExtent.key) : null), maxCrossAxisExtent: (tree.flutterSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterSliverGridNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterSliverGridNamedExtent.childAspectRatio : 1.0), children: tree.flutterSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterSliverIgnorePointer:
      return $c313.SliverIgnorePointer(key: (tree.flutterSliverIgnorePointer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverIgnorePointer.key) : null), ignoring: (tree.flutterSliverIgnorePointer.hasIgnoring() ? tree.flutterSliverIgnorePointer.ignoring : true), sliver: (tree.flutterSliverIgnorePointer.hasSliver() ? evaluateWidgetExpression(tree.flutterSliverIgnorePointer.sliver) : null));
    case proto.WidgetExpression_Result.flutterSliverListNamedList:
      return $c314.SliverList.list(key: (tree.flutterSliverListNamedList.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverListNamedList.key) : null), children: tree.flutterSliverListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), addAutomaticKeepAlives: (tree.flutterSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterSliverMainAxisGroup:
      return $c315.SliverMainAxisGroup(key: (tree.flutterSliverMainAxisGroup.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverMainAxisGroup.key) : null), slivers: tree.flutterSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterSliverOffstage:
      return $c316.SliverOffstage(key: (tree.flutterSliverOffstage.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverOffstage.key) : null), offstage: (tree.flutterSliverOffstage.hasOffstage() ? tree.flutterSliverOffstage.offstage : true), sliver: (tree.flutterSliverOffstage.hasSliver() ? evaluateWidgetExpression(tree.flutterSliverOffstage.sliver) : null));
    case proto.WidgetExpression_Result.flutterSliverOpacity:
      return $c317.SliverOpacity(key: (tree.flutterSliverOpacity.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverOpacity.key) : null), opacity: (tree.flutterSliverOpacity.hasOpacity() ? tree.flutterSliverOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverOpacity.alwaysIncludeSemantics : false), sliver: (tree.flutterSliverOpacity.hasSliver() ? evaluateWidgetExpression(tree.flutterSliverOpacity.sliver) : null));
    case proto.WidgetExpression_Result.flutterSliverFillRemaining:
      return $c318.SliverFillRemaining(key: (tree.flutterSliverFillRemaining.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverFillRemaining.key) : null), child: (tree.flutterSliverFillRemaining.hasChild() ? evaluateWidgetExpression(tree.flutterSliverFillRemaining.child) : null), hasScrollBody: (tree.flutterSliverFillRemaining.hasHasScrollBody() ? tree.flutterSliverFillRemaining.hasScrollBody : true), fillOverscroll: (tree.flutterSliverFillRemaining.hasFillOverscroll() ? tree.flutterSliverFillRemaining.fillOverscroll : false));
    case proto.WidgetExpression_Result.flutterSliverPrototypeExtentListNamedList:
      return $c319.SliverPrototypeExtentList.list(key: (tree.flutterSliverPrototypeExtentListNamedList.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverPrototypeExtentListNamedList.key) : null), children: tree.flutterSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), prototypeItem: (tree.flutterSliverPrototypeExtentListNamedList.hasPrototypeItem() ? evaluateRequiredWidgetExpression(tree.flutterSliverPrototypeExtentListNamedList.prototypeItem) : missing('prototypeItem')), addAutomaticKeepAlives: (tree.flutterSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverPrototypeExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterSpacer:
      return $c320.Spacer(key: (tree.flutterSpacer.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSpacer.key) : null), flex: (tree.flutterSpacer.hasFlex() ? tree.flutterSpacer.flex : 1));
    case proto.WidgetExpression_Result.flutterTable:
      return $c321.Table(key: (tree.flutterTable.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTable.key) : null), columnWidths: null, textDirection: null, border: null, textBaseline: null);
    case proto.WidgetExpression_Result.flutterTableCell:
      return $c322.TableCell(key: (tree.flutterTableCell.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTableCell.key) : null), verticalAlignment: null, child: (tree.flutterTableCell.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterTableCell.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterTapRegion:
      return $c323.TapRegion(key: (tree.flutterTapRegion.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTapRegion.key) : null), child: (tree.flutterTapRegion.hasChild() ? evaluateWidgetExpression(tree.flutterTapRegion.child) : null), enabled: (tree.flutterTapRegion.hasEnabled() ? tree.flutterTapRegion.enabled : true), onTapOutside: null, onTapInside: null, groupId: null, debugLabel: (tree.flutterTapRegion.hasDebugLabel() ? tree.flutterTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterTapRegionSurface:
      return $c324.TapRegionSurface(key: (tree.flutterTapRegionSurface.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTapRegionSurface.key) : null), child: (tree.flutterTapRegionSurface.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterTapRegionSurface.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterTextFieldTapRegion:
      return $c325.TextFieldTapRegion(key: (tree.flutterTextFieldTapRegion.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTextFieldTapRegion.key) : null), child: (tree.flutterTextFieldTapRegion.hasChild() ? evaluateWidgetExpression(tree.flutterTextFieldTapRegion.child) : null), enabled: (tree.flutterTextFieldTapRegion.hasEnabled() ? tree.flutterTextFieldTapRegion.enabled : true), onTapOutside: null, onTapInside: null, debugLabel: (tree.flutterTextFieldTapRegion.hasDebugLabel() ? tree.flutterTextFieldTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterDefaultTextStyleNamedFallback:
      return $c326.DefaultTextStyle.fallback(key: (tree.flutterDefaultTextStyleNamedFallback.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterDefaultTextStyleNamedFallback.key) : null));
    case proto.WidgetExpression_Result.flutterText:
      return $c327.Text((tree.flutterText.hasData() ? tree.flutterText.data : missing('data')), key: (tree.flutterText.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterText.key) : null), style: null, strutStyle: null, textAlign: null, textDirection: null, locale: null, softWrap: (tree.flutterText.hasSoftWrap() ? tree.flutterText.softWrap : null), overflow: null, textScaleFactor: (tree.flutterText.hasTextScaleFactor() ? tree.flutterText.textScaleFactor : null), maxLines: (tree.flutterText.hasMaxLines() ? tree.flutterText.maxLines : null), semanticsLabel: (tree.flutterText.hasSemanticsLabel() ? tree.flutterText.semanticsLabel : null), textWidthBasis: null, textHeightBehavior: null, selectionColor: null);
    case proto.WidgetExpression_Result.flutterTextSelectionGestureDetector:
      return $c328.TextSelectionGestureDetector(key: (tree.flutterTextSelectionGestureDetector.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTextSelectionGestureDetector.key) : null), onTapDown: null, onForcePressStart: null, onForcePressEnd: null, onSecondaryTap: null, onSecondaryTapDown: null, onSingleTapUp: null, onSingleTapCancel: null, onSingleLongTapStart: null, onSingleLongTapMoveUpdate: null, onSingleLongTapEnd: null, onDoubleTapDown: null, onTripleTapDown: null, onDragSelectionStart: null, onDragSelectionUpdate: null, onDragSelectionEnd: null, behavior: null, child: (tree.flutterTextSelectionGestureDetector.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterTextSelectionGestureDetector.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterTexture:
      return $c329.Texture(key: (tree.flutterTexture.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTexture.key) : null), textureId: (tree.flutterTexture.hasTextureId() ? tree.flutterTexture.textureId : missing('textureId')), freeze: (tree.flutterTexture.hasFreeze_4() ? tree.flutterTexture.freeze_4 : false));
    case proto.WidgetExpression_Result.flutterTickerMode:
      return $c330.TickerMode(key: (tree.flutterTickerMode.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterTickerMode.key) : null), enabled: (tree.flutterTickerMode.hasEnabled() ? tree.flutterTickerMode.enabled : missing('enabled')), child: (tree.flutterTickerMode.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterTickerMode.child) : missing('child')));
    case proto.WidgetExpression_Result.flutterSliverVisibility:
      return $c331.SliverVisibility(key: (tree.flutterSliverVisibility.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverVisibility.key) : null), sliver: (tree.flutterSliverVisibility.hasSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverVisibility.sliver) : missing('sliver')), replacementSliver: (tree.flutterSliverVisibility.hasReplacementSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverVisibility.replacementSliver) : missing('replacementSliver')), visible: (tree.flutterSliverVisibility.hasVisible() ? tree.flutterSliverVisibility.visible : true), maintainState: (tree.flutterSliverVisibility.hasMaintainState() ? tree.flutterSliverVisibility.maintainState : false), maintainAnimation: (tree.flutterSliverVisibility.hasMaintainAnimation() ? tree.flutterSliverVisibility.maintainAnimation : false), maintainSize: (tree.flutterSliverVisibility.hasMaintainSize() ? tree.flutterSliverVisibility.maintainSize : false), maintainSemantics: (tree.flutterSliverVisibility.hasMaintainSemantics() ? tree.flutterSliverVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterSliverVisibility.hasMaintainInteractivity() ? tree.flutterSliverVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterSliverVisibilityNamedMaintain:
      return $c332.SliverVisibility.maintain(key: (tree.flutterSliverVisibilityNamedMaintain.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterSliverVisibilityNamedMaintain.key) : null), sliver: (tree.flutterSliverVisibilityNamedMaintain.hasSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverVisibilityNamedMaintain.sliver) : missing('sliver')), replacementSliver: (tree.flutterSliverVisibilityNamedMaintain.hasReplacementSliver() ? evaluateRequiredWidgetExpression(tree.flutterSliverVisibilityNamedMaintain.replacementSliver) : missing('replacementSliver')), visible: (tree.flutterSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterSliverVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterVisibility:
      return $c333.Visibility(key: (tree.flutterVisibility.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterVisibility.key) : null), child: (tree.flutterVisibility.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterVisibility.child) : missing('child')), replacement: (tree.flutterVisibility.hasReplacement() ? evaluateRequiredWidgetExpression(tree.flutterVisibility.replacement) : missing('replacement')), visible: (tree.flutterVisibility.hasVisible() ? tree.flutterVisibility.visible : true), maintainState: (tree.flutterVisibility.hasMaintainState() ? tree.flutterVisibility.maintainState : false), maintainAnimation: (tree.flutterVisibility.hasMaintainAnimation() ? tree.flutterVisibility.maintainAnimation : false), maintainSize: (tree.flutterVisibility.hasMaintainSize() ? tree.flutterVisibility.maintainSize : false), maintainSemantics: (tree.flutterVisibility.hasMaintainSemantics() ? tree.flutterVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterVisibility.hasMaintainInteractivity() ? tree.flutterVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterVisibilityNamedMaintain:
      return $c334.Visibility.maintain(key: (tree.flutterVisibilityNamedMaintain.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterVisibilityNamedMaintain.key) : null), child: (tree.flutterVisibilityNamedMaintain.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterVisibilityNamedMaintain.child) : missing('child')), visible: (tree.flutterVisibilityNamedMaintain.hasVisible() ? tree.flutterVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterWidgetInspector:
      return $c335.WidgetInspector(key: (tree.flutterWidgetInspector.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterWidgetInspector.key) : null), child: (tree.flutterWidgetInspector.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterWidgetInspector.child) : missing('child')), selectButtonBuilder: null);
    case proto.WidgetExpression_Result.flutterWillPopScope:
      return $c336.WillPopScope(key: (tree.flutterWillPopScope.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterWillPopScope.key) : null), child: (tree.flutterWillPopScope.hasChild() ? evaluateRequiredWidgetExpression(tree.flutterWillPopScope.child) : missing('child')), onWillPop: null);
    case proto.WidgetExpression_Result.flutterProjectMyApp:
      return $c337.MyApp(key: (tree.flutterProjectMyApp.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterProjectMyApp.key) : null));
    case proto.WidgetExpression_Result.flutterProjectMyHomePage:
      return $c338.MyHomePage(key: (tree.flutterProjectMyHomePage.hasKey() ? types.evaluateFlutterKeyExpression(tree.flutterProjectMyHomePage.key) : null), title: (tree.flutterProjectMyHomePage.hasTitle() ? tree.flutterProjectMyHomePage.title : missing('title')));
    default:
      return null;
  }
}
