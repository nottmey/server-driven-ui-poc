//
//  Generated. Do not modify.
//

import 'package:flutter/widgets.dart';
import 'package:proto_package/proto/widgets.pb.dart' as proto;

import 'package:flutter/cupertino.dart' as $l0;
import 'package:flutter/material.dart' as $l1;
import 'package:flutter/widgets.dart' as $l2;
import 'package:flutter_project/main.dart' as $l3;

T missing<T>(String field) {
  throw AssertionError('required field $field is missing');
}

Widget evaluateRequiredWidgetExpression(proto.WidgetExpression tree) {
  final result = evaluateWidgetExpression(tree);
  if(result != null) {
    return result;
  } else {
    throw AssertionError('unable to parse required sub-tree');
  }
}

Widget? evaluateWidgetExpression(proto.WidgetExpression? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichResult()) {
    case proto.WidgetExpression_Result.flutterCupertinoAbsorbPointer:
      return $l0.AbsorbPointer(absorbing: (tree.flutterCupertinoAbsorbPointer.hasAbsorbing() ? tree.flutterCupertinoAbsorbPointer.absorbing : true), child: evaluateWidgetExpression((tree.flutterCupertinoAbsorbPointer.hasChild() ? tree.flutterCupertinoAbsorbPointer.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoAlign:
      return $l0.Align(widthFactor: (tree.flutterCupertinoAlign.hasWidthFactor() ? tree.flutterCupertinoAlign.widthFactor : null), heightFactor: (tree.flutterCupertinoAlign.hasHeightFactor() ? tree.flutterCupertinoAlign.heightFactor : null), child: evaluateWidgetExpression((tree.flutterCupertinoAlign.hasChild() ? tree.flutterCupertinoAlign.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoAndroidView:
      return $l0.AndroidView(viewType: (tree.flutterCupertinoAndroidView.hasViewType() ? tree.flutterCupertinoAndroidView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterCupertinoAspectRatio:
      return $l0.AspectRatio(aspectRatio: (tree.flutterCupertinoAspectRatio.hasAspectRatio() ? tree.flutterCupertinoAspectRatio.aspectRatio : missing('aspectRatio')), child: evaluateWidgetExpression((tree.flutterCupertinoAspectRatio.hasChild() ? tree.flutterCupertinoAspectRatio.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoAutofillGroup:
      return $l0.AutofillGroup(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoAutofillGroup.hasChild() ? tree.flutterCupertinoAutofillGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoAutomaticKeepAlive:
      return $l0.AutomaticKeepAlive(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoAutomaticKeepAlive.hasChild() ? tree.flutterCupertinoAutomaticKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoBlockSemantics:
      return $l0.BlockSemantics(blocking: (tree.flutterCupertinoBlockSemantics.hasBlocking() ? tree.flutterCupertinoBlockSemantics.blocking : true), child: evaluateWidgetExpression((tree.flutterCupertinoBlockSemantics.hasChild() ? tree.flutterCupertinoBlockSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCenter:
      return $l0.Center(widthFactor: (tree.flutterCupertinoCenter.hasWidthFactor() ? tree.flutterCupertinoCenter.widthFactor : null), heightFactor: (tree.flutterCupertinoCenter.hasHeightFactor() ? tree.flutterCupertinoCenter.heightFactor : null), child: evaluateWidgetExpression((tree.flutterCupertinoCenter.hasChild() ? tree.flutterCupertinoCenter.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCheckedModeBanner:
      return $l0.CheckedModeBanner(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCheckedModeBanner.hasChild() ? tree.flutterCupertinoCheckedModeBanner.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoClipOval:
      return $l0.ClipOval(child: evaluateWidgetExpression((tree.flutterCupertinoClipOval.hasChild() ? tree.flutterCupertinoClipOval.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoClipPath:
      return $l0.ClipPath(child: evaluateWidgetExpression((tree.flutterCupertinoClipPath.hasChild() ? tree.flutterCupertinoClipPath.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoClipRRect:
      return $l0.ClipRRect(child: evaluateWidgetExpression((tree.flutterCupertinoClipRRect.hasChild() ? tree.flutterCupertinoClipRRect.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoClipRect:
      return $l0.ClipRect(child: evaluateWidgetExpression((tree.flutterCupertinoClipRect.hasChild() ? tree.flutterCupertinoClipRect.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoColumn:
      return $l0.Column(children: tree.flutterCupertinoColumn.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoContainer:
      return $l0.Container(width: (tree.flutterCupertinoContainer.hasWidth() ? tree.flutterCupertinoContainer.width : null), height: (tree.flutterCupertinoContainer.hasHeight() ? tree.flutterCupertinoContainer.height : null), child: evaluateWidgetExpression((tree.flutterCupertinoContainer.hasChild() ? tree.flutterCupertinoContainer.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoActionSheet:
      return $l0.CupertinoActionSheet(title: evaluateWidgetExpression((tree.flutterCupertinoCupertinoActionSheet.hasTitle() ? tree.flutterCupertinoCupertinoActionSheet.title : null)), message: evaluateWidgetExpression((tree.flutterCupertinoCupertinoActionSheet.hasMessage() ? tree.flutterCupertinoCupertinoActionSheet.message : null)), actions: tree.flutterCupertinoCupertinoActionSheet.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), cancelButton: evaluateWidgetExpression((tree.flutterCupertinoCupertinoActionSheet.hasCancelButton() ? tree.flutterCupertinoCupertinoActionSheet.cancelButton : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoActivityIndicator:
      return $l0.CupertinoActivityIndicator(animating: (tree.flutterCupertinoCupertinoActivityIndicator.hasAnimating() ? tree.flutterCupertinoCupertinoActivityIndicator.animating : true), radius: (tree.flutterCupertinoCupertinoActivityIndicator.hasRadius() ? tree.flutterCupertinoCupertinoActivityIndicator.radius : missing('radius')));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoActivityIndicatorNamedPartiallyRevealed:
      return $l0.CupertinoActivityIndicator.partiallyRevealed(radius: (tree.flutterCupertinoCupertinoActivityIndicatorNamedPartiallyRevealed.hasRadius() ? tree.flutterCupertinoCupertinoActivityIndicatorNamedPartiallyRevealed.radius : missing('radius')), progress: (tree.flutterCupertinoCupertinoActivityIndicatorNamedPartiallyRevealed.hasProgress() ? tree.flutterCupertinoCupertinoActivityIndicatorNamedPartiallyRevealed.progress : 1.0));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoAlertDialog:
      return $l0.CupertinoAlertDialog(title: evaluateWidgetExpression((tree.flutterCupertinoCupertinoAlertDialog.hasTitle() ? tree.flutterCupertinoCupertinoAlertDialog.title : null)), content: evaluateWidgetExpression((tree.flutterCupertinoCupertinoAlertDialog.hasContent() ? tree.flutterCupertinoCupertinoAlertDialog.content : null)), actions: tree.flutterCupertinoCupertinoAlertDialog.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoApp:
      return $l0.CupertinoApp(home: evaluateWidgetExpression((tree.flutterCupertinoCupertinoApp.hasHome() ? tree.flutterCupertinoCupertinoApp.home : null)), initialRoute: (tree.flutterCupertinoCupertinoApp.hasInitialRoute() ? tree.flutterCupertinoCupertinoApp.initialRoute : null), title: (tree.flutterCupertinoCupertinoApp.hasTitle() ? tree.flutterCupertinoCupertinoApp.title : ''), showPerformanceOverlay: (tree.flutterCupertinoCupertinoApp.hasShowPerformanceOverlay() ? tree.flutterCupertinoCupertinoApp.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.flutterCupertinoCupertinoApp.hasCheckerboardRasterCacheImages() ? tree.flutterCupertinoCupertinoApp.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterCupertinoCupertinoApp.hasCheckerboardOffscreenLayers() ? tree.flutterCupertinoCupertinoApp.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.flutterCupertinoCupertinoApp.hasShowSemanticsDebugger() ? tree.flutterCupertinoCupertinoApp.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.flutterCupertinoCupertinoApp.hasDebugShowCheckedModeBanner() ? tree.flutterCupertinoCupertinoApp.debugShowCheckedModeBanner : true), restorationScopeId: (tree.flutterCupertinoCupertinoApp.hasRestorationScopeId() ? tree.flutterCupertinoCupertinoApp.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoAppNamedRouter:
      return $l0.CupertinoApp.router(title: (tree.flutterCupertinoCupertinoAppNamedRouter.hasTitle() ? tree.flutterCupertinoCupertinoAppNamedRouter.title : ''), showPerformanceOverlay: (tree.flutterCupertinoCupertinoAppNamedRouter.hasShowPerformanceOverlay() ? tree.flutterCupertinoCupertinoAppNamedRouter.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.flutterCupertinoCupertinoAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.flutterCupertinoCupertinoAppNamedRouter.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterCupertinoCupertinoAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.flutterCupertinoCupertinoAppNamedRouter.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.flutterCupertinoCupertinoAppNamedRouter.hasShowSemanticsDebugger() ? tree.flutterCupertinoCupertinoAppNamedRouter.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.flutterCupertinoCupertinoAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.flutterCupertinoCupertinoAppNamedRouter.debugShowCheckedModeBanner : true), restorationScopeId: (tree.flutterCupertinoCupertinoAppNamedRouter.hasRestorationScopeId() ? tree.flutterCupertinoCupertinoAppNamedRouter.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoContextMenu:
      return $l0.CupertinoContextMenu(actions: tree.flutterCupertinoCupertinoContextMenu.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoContextMenu.hasChild() ? tree.flutterCupertinoCupertinoContextMenu.child : missing('child'))), enableHapticFeedback: (tree.flutterCupertinoCupertinoContextMenu.hasEnableHapticFeedback() ? tree.flutterCupertinoCupertinoContextMenu.enableHapticFeedback : false));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoContextMenuAction:
      return $l0.CupertinoContextMenuAction(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoContextMenuAction.hasChild() ? tree.flutterCupertinoCupertinoContextMenuAction.child : missing('child'))), isDefaultAction: (tree.flutterCupertinoCupertinoContextMenuAction.hasIsDefaultAction() ? tree.flutterCupertinoCupertinoContextMenuAction.isDefaultAction : false), isDestructiveAction: (tree.flutterCupertinoCupertinoContextMenuAction.hasIsDestructiveAction() ? tree.flutterCupertinoCupertinoContextMenuAction.isDestructiveAction : false));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoDialogAction:
      return $l0.CupertinoDialogAction(isDefaultAction: (tree.flutterCupertinoCupertinoDialogAction.hasIsDefaultAction() ? tree.flutterCupertinoCupertinoDialogAction.isDefaultAction : false), isDestructiveAction: (tree.flutterCupertinoCupertinoDialogAction.hasIsDestructiveAction() ? tree.flutterCupertinoCupertinoDialogAction.isDestructiveAction : false), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoDialogAction.hasChild() ? tree.flutterCupertinoCupertinoDialogAction.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoFormRow:
      return $l0.CupertinoFormRow(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoFormRow.hasChild() ? tree.flutterCupertinoCupertinoFormRow.child : missing('child'))), prefix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormRow.hasPrefix() ? tree.flutterCupertinoCupertinoFormRow.prefix : null)), helper: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormRow.hasHelper() ? tree.flutterCupertinoCupertinoFormRow.helper : null)), error: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormRow.hasError() ? tree.flutterCupertinoCupertinoFormRow.error : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoFormSection:
      return $l0.CupertinoFormSection(children: tree.flutterCupertinoCupertinoFormSection.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormSection.hasHeader() ? tree.flutterCupertinoCupertinoFormSection.header : null)), footer: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormSection.hasFooter() ? tree.flutterCupertinoCupertinoFormSection.footer : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoFormSectionNamedInsetGrouped:
      return $l0.CupertinoFormSection.insetGrouped(children: tree.flutterCupertinoCupertinoFormSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormSectionNamedInsetGrouped.hasHeader() ? tree.flutterCupertinoCupertinoFormSectionNamedInsetGrouped.header : null)), footer: evaluateWidgetExpression((tree.flutterCupertinoCupertinoFormSectionNamedInsetGrouped.hasFooter() ? tree.flutterCupertinoCupertinoFormSectionNamedInsetGrouped.footer : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoListSection:
      return $l0.CupertinoListSection(children: tree.flutterCupertinoCupertinoListSection.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListSection.hasHeader() ? tree.flutterCupertinoCupertinoListSection.header : null)), footer: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListSection.hasFooter() ? tree.flutterCupertinoCupertinoListSection.footer : null)), dividerMargin: (tree.flutterCupertinoCupertinoListSection.hasDividerMargin() ? tree.flutterCupertinoCupertinoListSection.dividerMargin : missing('dividerMargin')), additionalDividerMargin: (tree.flutterCupertinoCupertinoListSection.hasAdditionalDividerMargin() ? tree.flutterCupertinoCupertinoListSection.additionalDividerMargin : null), topMargin: (tree.flutterCupertinoCupertinoListSection.hasTopMargin() ? tree.flutterCupertinoCupertinoListSection.topMargin : null), hasLeading: (tree.flutterCupertinoCupertinoListSection.hasHasLeading() ? tree.flutterCupertinoCupertinoListSection.hasLeading : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoListSectionNamedInsetGrouped:
      return $l0.CupertinoListSection.insetGrouped(children: tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), header: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasHeader() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.header : null)), footer: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasFooter() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.footer : null)), dividerMargin: (tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasDividerMargin() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.dividerMargin : missing('dividerMargin')), additionalDividerMargin: (tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasAdditionalDividerMargin() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.additionalDividerMargin : null), topMargin: (tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasTopMargin() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.topMargin : null), hasLeading: (tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasHasLeading() ? tree.flutterCupertinoCupertinoListSectionNamedInsetGrouped.hasLeading : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoListTile:
      return $l0.CupertinoListTile(title: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoListTile.hasTitle() ? tree.flutterCupertinoCupertinoListTile.title : missing('title'))), subtitle: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTile.hasSubtitle() ? tree.flutterCupertinoCupertinoListTile.subtitle : null)), additionalInfo: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTile.hasAdditionalInfo() ? tree.flutterCupertinoCupertinoListTile.additionalInfo : null)), leading: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTile.hasLeading() ? tree.flutterCupertinoCupertinoListTile.leading : null)), trailing: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTile.hasTrailing() ? tree.flutterCupertinoCupertinoListTile.trailing : null)), leadingSize: (tree.flutterCupertinoCupertinoListTile.hasLeadingSize() ? tree.flutterCupertinoCupertinoListTile.leadingSize : missing('leadingSize')), leadingToTitle: (tree.flutterCupertinoCupertinoListTile.hasLeadingToTitle() ? tree.flutterCupertinoCupertinoListTile.leadingToTitle : missing('leadingToTitle')));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoListTileChevron:
      return $l0.CupertinoListTileChevron();
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoListTileNamedNotched:
      return $l0.CupertinoListTile.notched(title: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoListTileNamedNotched.hasTitle() ? tree.flutterCupertinoCupertinoListTileNamedNotched.title : missing('title'))), subtitle: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTileNamedNotched.hasSubtitle() ? tree.flutterCupertinoCupertinoListTileNamedNotched.subtitle : null)), additionalInfo: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTileNamedNotched.hasAdditionalInfo() ? tree.flutterCupertinoCupertinoListTileNamedNotched.additionalInfo : null)), leading: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTileNamedNotched.hasLeading() ? tree.flutterCupertinoCupertinoListTileNamedNotched.leading : null)), trailing: evaluateWidgetExpression((tree.flutterCupertinoCupertinoListTileNamedNotched.hasTrailing() ? tree.flutterCupertinoCupertinoListTileNamedNotched.trailing : null)), leadingSize: (tree.flutterCupertinoCupertinoListTileNamedNotched.hasLeadingSize() ? tree.flutterCupertinoCupertinoListTileNamedNotched.leadingSize : missing('leadingSize')), leadingToTitle: (tree.flutterCupertinoCupertinoListTileNamedNotched.hasLeadingToTitle() ? tree.flutterCupertinoCupertinoListTileNamedNotched.leadingToTitle : missing('leadingToTitle')));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoMagnifier:
      return $l0.CupertinoMagnifier();
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoNavigationBar:
      return $l0.CupertinoNavigationBar(leading: evaluateWidgetExpression((tree.flutterCupertinoCupertinoNavigationBar.hasLeading() ? tree.flutterCupertinoCupertinoNavigationBar.leading : null)), automaticallyImplyLeading: (tree.flutterCupertinoCupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.flutterCupertinoCupertinoNavigationBar.automaticallyImplyLeading : true), automaticallyImplyMiddle: (tree.flutterCupertinoCupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.flutterCupertinoCupertinoNavigationBar.automaticallyImplyMiddle : true), previousPageTitle: (tree.flutterCupertinoCupertinoNavigationBar.hasPreviousPageTitle() ? tree.flutterCupertinoCupertinoNavigationBar.previousPageTitle : null), middle: evaluateWidgetExpression((tree.flutterCupertinoCupertinoNavigationBar.hasMiddle() ? tree.flutterCupertinoCupertinoNavigationBar.middle : null)), trailing: evaluateWidgetExpression((tree.flutterCupertinoCupertinoNavigationBar.hasTrailing() ? tree.flutterCupertinoCupertinoNavigationBar.trailing : null)), transitionBetweenRoutes: (tree.flutterCupertinoCupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.flutterCupertinoCupertinoNavigationBar.transitionBetweenRoutes : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoNavigationBarBackButton:
      return $l0.CupertinoNavigationBarBackButton(previousPageTitle: (tree.flutterCupertinoCupertinoNavigationBarBackButton.hasPreviousPageTitle() ? tree.flutterCupertinoCupertinoNavigationBarBackButton.previousPageTitle : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoPageScaffold:
      return $l0.CupertinoPageScaffold(resizeToAvoidBottomInset: (tree.flutterCupertinoCupertinoPageScaffold.hasResizeToAvoidBottomInset() ? tree.flutterCupertinoCupertinoPageScaffold.resizeToAvoidBottomInset : true), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoPageScaffold.hasChild() ? tree.flutterCupertinoCupertinoPageScaffold.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoPickerDefaultSelectionOverlay:
      return $l0.CupertinoPickerDefaultSelectionOverlay(capStartEdge: (tree.flutterCupertinoCupertinoPickerDefaultSelectionOverlay.hasCapStartEdge() ? tree.flutterCupertinoCupertinoPickerDefaultSelectionOverlay.capStartEdge : true), capEndEdge: (tree.flutterCupertinoCupertinoPickerDefaultSelectionOverlay.hasCapEndEdge() ? tree.flutterCupertinoCupertinoPickerDefaultSelectionOverlay.capEndEdge : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoPopupSurface:
      return $l0.CupertinoPopupSurface(isSurfacePainted: (tree.flutterCupertinoCupertinoPopupSurface.hasIsSurfacePainted() ? tree.flutterCupertinoCupertinoPopupSurface.isSurfacePainted : true), child: evaluateWidgetExpression((tree.flutterCupertinoCupertinoPopupSurface.hasChild() ? tree.flutterCupertinoCupertinoPopupSurface.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoScrollbar:
      return $l0.CupertinoScrollbar(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoScrollbar.hasChild() ? tree.flutterCupertinoCupertinoScrollbar.child : missing('child'))), thumbVisibility: (tree.flutterCupertinoCupertinoScrollbar.hasThumbVisibility() ? tree.flutterCupertinoCupertinoScrollbar.thumbVisibility : null), thickness: (tree.flutterCupertinoCupertinoScrollbar.hasThickness() ? tree.flutterCupertinoCupertinoScrollbar.thickness : missing('thickness')), thicknessWhileDragging: (tree.flutterCupertinoCupertinoScrollbar.hasThicknessWhileDragging() ? tree.flutterCupertinoCupertinoScrollbar.thicknessWhileDragging : missing('thicknessWhileDragging')));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoSearchTextField:
      return $l0.CupertinoSearchTextField(placeholder: (tree.flutterCupertinoCupertinoSearchTextField.hasPlaceholder() ? tree.flutterCupertinoCupertinoSearchTextField.placeholder : null), itemSize: (tree.flutterCupertinoCupertinoSearchTextField.hasItemSize() ? tree.flutterCupertinoCupertinoSearchTextField.itemSize : 20.0), prefixIcon: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoSearchTextField.hasPrefixIcon() ? tree.flutterCupertinoCupertinoSearchTextField.prefixIcon : missing('prefixIcon'))), restorationId: (tree.flutterCupertinoCupertinoSearchTextField.hasRestorationId() ? tree.flutterCupertinoCupertinoSearchTextField.restorationId : null), enableIMEPersonalizedLearning: (tree.flutterCupertinoCupertinoSearchTextField.hasEnableIMEPersonalizedLearning() ? tree.flutterCupertinoCupertinoSearchTextField.enableIMEPersonalizedLearning : true), autofocus: (tree.flutterCupertinoCupertinoSearchTextField.hasAutofocus() ? tree.flutterCupertinoCupertinoSearchTextField.autofocus : false), autocorrect: (tree.flutterCupertinoCupertinoSearchTextField.hasAutocorrect() ? tree.flutterCupertinoCupertinoSearchTextField.autocorrect : true), enabled: (tree.flutterCupertinoCupertinoSearchTextField.hasEnabled() ? tree.flutterCupertinoCupertinoSearchTextField.enabled : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoSliverNavigationBar:
      return $l0.CupertinoSliverNavigationBar(largeTitle: evaluateWidgetExpression((tree.flutterCupertinoCupertinoSliverNavigationBar.hasLargeTitle() ? tree.flutterCupertinoCupertinoSliverNavigationBar.largeTitle : null)), leading: evaluateWidgetExpression((tree.flutterCupertinoCupertinoSliverNavigationBar.hasLeading() ? tree.flutterCupertinoCupertinoSliverNavigationBar.leading : null)), automaticallyImplyLeading: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasAutomaticallyImplyLeading() ? tree.flutterCupertinoCupertinoSliverNavigationBar.automaticallyImplyLeading : true), automaticallyImplyTitle: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasAutomaticallyImplyTitle() ? tree.flutterCupertinoCupertinoSliverNavigationBar.automaticallyImplyTitle : true), alwaysShowMiddle: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasAlwaysShowMiddle() ? tree.flutterCupertinoCupertinoSliverNavigationBar.alwaysShowMiddle : true), previousPageTitle: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasPreviousPageTitle() ? tree.flutterCupertinoCupertinoSliverNavigationBar.previousPageTitle : null), middle: evaluateWidgetExpression((tree.flutterCupertinoCupertinoSliverNavigationBar.hasMiddle() ? tree.flutterCupertinoCupertinoSliverNavigationBar.middle : null)), trailing: evaluateWidgetExpression((tree.flutterCupertinoCupertinoSliverNavigationBar.hasTrailing() ? tree.flutterCupertinoCupertinoSliverNavigationBar.trailing : null)), transitionBetweenRoutes: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasTransitionBetweenRoutes() ? tree.flutterCupertinoCupertinoSliverNavigationBar.transitionBetweenRoutes : true), stretch: (tree.flutterCupertinoCupertinoSliverNavigationBar.hasStretch() ? tree.flutterCupertinoCupertinoSliverNavigationBar.stretch : false));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoSliverRefreshControl:
      return $l0.CupertinoSliverRefreshControl(refreshTriggerPullDistance: (tree.flutterCupertinoCupertinoSliverRefreshControl.hasRefreshTriggerPullDistance() ? tree.flutterCupertinoCupertinoSliverRefreshControl.refreshTriggerPullDistance : missing('refreshTriggerPullDistance')), refreshIndicatorExtent: (tree.flutterCupertinoCupertinoSliverRefreshControl.hasRefreshIndicatorExtent() ? tree.flutterCupertinoCupertinoSliverRefreshControl.refreshIndicatorExtent : missing('refreshIndicatorExtent')));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTabView:
      return $l0.CupertinoTabView(defaultTitle: (tree.flutterCupertinoCupertinoTabView.hasDefaultTitle() ? tree.flutterCupertinoCupertinoTabView.defaultTitle : null), restorationScopeId: (tree.flutterCupertinoCupertinoTabView.hasRestorationScopeId() ? tree.flutterCupertinoCupertinoTabView.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTextField:
      return $l0.CupertinoTextField(placeholder: (tree.flutterCupertinoCupertinoTextField.hasPlaceholder() ? tree.flutterCupertinoCupertinoTextField.placeholder : null), prefix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoTextField.hasPrefix() ? tree.flutterCupertinoCupertinoTextField.prefix : null)), suffix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoTextField.hasSuffix() ? tree.flutterCupertinoCupertinoTextField.suffix : null)), readOnly: (tree.flutterCupertinoCupertinoTextField.hasReadOnly() ? tree.flutterCupertinoCupertinoTextField.readOnly : false), showCursor: (tree.flutterCupertinoCupertinoTextField.hasShowCursor() ? tree.flutterCupertinoCupertinoTextField.showCursor : null), autofocus: (tree.flutterCupertinoCupertinoTextField.hasAutofocus() ? tree.flutterCupertinoCupertinoTextField.autofocus : false), obscuringCharacter: (tree.flutterCupertinoCupertinoTextField.hasObscuringCharacter() ? tree.flutterCupertinoCupertinoTextField.obscuringCharacter : '•'), obscureText: (tree.flutterCupertinoCupertinoTextField.hasObscureText() ? tree.flutterCupertinoCupertinoTextField.obscureText : false), autocorrect: (tree.flutterCupertinoCupertinoTextField.hasAutocorrect() ? tree.flutterCupertinoCupertinoTextField.autocorrect : true), enableSuggestions: (tree.flutterCupertinoCupertinoTextField.hasEnableSuggestions() ? tree.flutterCupertinoCupertinoTextField.enableSuggestions : true), maxLines: (tree.flutterCupertinoCupertinoTextField.hasMaxLines() ? tree.flutterCupertinoCupertinoTextField.maxLines : 1), minLines: (tree.flutterCupertinoCupertinoTextField.hasMinLines() ? tree.flutterCupertinoCupertinoTextField.minLines : null), expands: (tree.flutterCupertinoCupertinoTextField.hasExpands() ? tree.flutterCupertinoCupertinoTextField.expands : false), maxLength: (tree.flutterCupertinoCupertinoTextField.hasMaxLength() ? tree.flutterCupertinoCupertinoTextField.maxLength : null), enabled: (tree.flutterCupertinoCupertinoTextField.hasEnabled() ? tree.flutterCupertinoCupertinoTextField.enabled : null), cursorWidth: (tree.flutterCupertinoCupertinoTextField.hasCursorWidth() ? tree.flutterCupertinoCupertinoTextField.cursorWidth : 2.0), cursorHeight: (tree.flutterCupertinoCupertinoTextField.hasCursorHeight() ? tree.flutterCupertinoCupertinoTextField.cursorHeight : null), cursorOpacityAnimates: (tree.flutterCupertinoCupertinoTextField.hasCursorOpacityAnimates() ? tree.flutterCupertinoCupertinoTextField.cursorOpacityAnimates : true), enableInteractiveSelection: (tree.flutterCupertinoCupertinoTextField.hasEnableInteractiveSelection() ? tree.flutterCupertinoCupertinoTextField.enableInteractiveSelection : null), autofillHints: tree.flutterCupertinoCupertinoTextField.autofillHints, restorationId: (tree.flutterCupertinoCupertinoTextField.hasRestorationId() ? tree.flutterCupertinoCupertinoTextField.restorationId : null), scribbleEnabled: (tree.flutterCupertinoCupertinoTextField.hasScribbleEnabled() ? tree.flutterCupertinoCupertinoTextField.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.flutterCupertinoCupertinoTextField.hasEnableIMEPersonalizedLearning() ? tree.flutterCupertinoCupertinoTextField.enableIMEPersonalizedLearning : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTextFieldNamedBorderless:
      return $l0.CupertinoTextField.borderless(placeholder: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasPlaceholder() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.placeholder : null), prefix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasPrefix() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.prefix : null)), suffix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasSuffix() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.suffix : null)), readOnly: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasReadOnly() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.readOnly : false), showCursor: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasShowCursor() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.showCursor : null), autofocus: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasAutofocus() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.autofocus : false), obscuringCharacter: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasObscuringCharacter() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.obscuringCharacter : '•'), obscureText: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasObscureText() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.obscureText : false), autocorrect: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasAutocorrect() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.autocorrect : true), enableSuggestions: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasEnableSuggestions() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.enableSuggestions : true), maxLines: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasMaxLines() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.maxLines : 1), minLines: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasMinLines() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.minLines : null), expands: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasExpands() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.expands : false), maxLength: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasMaxLength() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.maxLength : null), enabled: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasEnabled() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.enabled : null), cursorWidth: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasCursorWidth() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.cursorWidth : 2.0), cursorHeight: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasCursorHeight() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.cursorHeight : null), cursorOpacityAnimates: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasCursorOpacityAnimates() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.cursorOpacityAnimates : true), enableInteractiveSelection: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasEnableInteractiveSelection() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.enableInteractiveSelection : null), autofillHints: tree.flutterCupertinoCupertinoTextFieldNamedBorderless.autofillHints, restorationId: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasRestorationId() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.restorationId : null), scribbleEnabled: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasScribbleEnabled() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.flutterCupertinoCupertinoTextFieldNamedBorderless.hasEnableIMEPersonalizedLearning() ? tree.flutterCupertinoCupertinoTextFieldNamedBorderless.enableIMEPersonalizedLearning : true));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTextFormFieldRow:
      return $l0.CupertinoTextFormFieldRow(prefix: evaluateWidgetExpression((tree.flutterCupertinoCupertinoTextFormFieldRow.hasPrefix() ? tree.flutterCupertinoCupertinoTextFormFieldRow.prefix : null)), initialValue: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasInitialValue() ? tree.flutterCupertinoCupertinoTextFormFieldRow.initialValue : null), autofocus: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasAutofocus() ? tree.flutterCupertinoCupertinoTextFormFieldRow.autofocus : false), readOnly: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasReadOnly() ? tree.flutterCupertinoCupertinoTextFormFieldRow.readOnly : false), showCursor: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasShowCursor() ? tree.flutterCupertinoCupertinoTextFormFieldRow.showCursor : null), obscuringCharacter: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasObscuringCharacter() ? tree.flutterCupertinoCupertinoTextFormFieldRow.obscuringCharacter : '•'), obscureText: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasObscureText() ? tree.flutterCupertinoCupertinoTextFormFieldRow.obscureText : false), autocorrect: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasAutocorrect() ? tree.flutterCupertinoCupertinoTextFormFieldRow.autocorrect : true), enableSuggestions: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasEnableSuggestions() ? tree.flutterCupertinoCupertinoTextFormFieldRow.enableSuggestions : true), maxLines: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasMaxLines() ? tree.flutterCupertinoCupertinoTextFormFieldRow.maxLines : 1), minLines: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasMinLines() ? tree.flutterCupertinoCupertinoTextFormFieldRow.minLines : null), expands: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasExpands() ? tree.flutterCupertinoCupertinoTextFormFieldRow.expands : false), maxLength: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasMaxLength() ? tree.flutterCupertinoCupertinoTextFormFieldRow.maxLength : null), enabled: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasEnabled() ? tree.flutterCupertinoCupertinoTextFormFieldRow.enabled : null), cursorWidth: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasCursorWidth() ? tree.flutterCupertinoCupertinoTextFormFieldRow.cursorWidth : 2.0), cursorHeight: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasCursorHeight() ? tree.flutterCupertinoCupertinoTextFormFieldRow.cursorHeight : null), enableInteractiveSelection: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasEnableInteractiveSelection() ? tree.flutterCupertinoCupertinoTextFormFieldRow.enableInteractiveSelection : true), autofillHints: tree.flutterCupertinoCupertinoTextFormFieldRow.autofillHints, placeholder: (tree.flutterCupertinoCupertinoTextFormFieldRow.hasPlaceholder() ? tree.flutterCupertinoCupertinoTextFormFieldRow.placeholder : null));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTextSelectionToolbarButton:
      return $l0.CupertinoTextSelectionToolbarButton(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoCupertinoTextSelectionToolbarButton.hasChild() ? tree.flutterCupertinoCupertinoTextSelectionToolbarButton.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoCupertinoTextSelectionToolbarButtonNamedText:
      return $l0.CupertinoTextSelectionToolbarButton.text(text: (tree.flutterCupertinoCupertinoTextSelectionToolbarButtonNamedText.hasText() ? tree.flutterCupertinoCupertinoTextSelectionToolbarButtonNamedText.text : null));
    case proto.WidgetExpression_Result.flutterCupertinoCustomPaint:
      return $l0.CustomPaint(isComplex: (tree.flutterCupertinoCustomPaint.hasIsComplex() ? tree.flutterCupertinoCustomPaint.isComplex : false), willChange: (tree.flutterCupertinoCustomPaint.hasWillChange() ? tree.flutterCupertinoCustomPaint.willChange : false), child: evaluateWidgetExpression((tree.flutterCupertinoCustomPaint.hasChild() ? tree.flutterCupertinoCustomPaint.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoCustomScrollView:
      return $l0.CustomScrollView(reverse: (tree.flutterCupertinoCustomScrollView.hasReverse() ? tree.flutterCupertinoCustomScrollView.reverse : false), primary: (tree.flutterCupertinoCustomScrollView.hasPrimary() ? tree.flutterCupertinoCustomScrollView.primary : null), shrinkWrap: (tree.flutterCupertinoCustomScrollView.hasShrinkWrap() ? tree.flutterCupertinoCustomScrollView.shrinkWrap : false), anchor: (tree.flutterCupertinoCustomScrollView.hasAnchor() ? tree.flutterCupertinoCustomScrollView.anchor : 0.0), cacheExtent: (tree.flutterCupertinoCustomScrollView.hasCacheExtent() ? tree.flutterCupertinoCustomScrollView.cacheExtent : null), slivers: tree.flutterCupertinoCustomScrollView.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterCupertinoCustomScrollView.hasSemanticChildCount() ? tree.flutterCupertinoCustomScrollView.semanticChildCount : null), restorationId: (tree.flutterCupertinoCustomScrollView.hasRestorationId() ? tree.flutterCupertinoCustomScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterCupertinoDefaultSelectionStyle:
      return $l0.DefaultSelectionStyle(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoDefaultSelectionStyle.hasChild() ? tree.flutterCupertinoDefaultSelectionStyle.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoDefaultSelectionStyleNamedFallback:
      return $l0.DefaultSelectionStyle.fallback();
    case proto.WidgetExpression_Result.flutterCupertinoDefaultTextEditingShortcuts:
      return $l0.DefaultTextEditingShortcuts(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoDefaultTextEditingShortcuts.hasChild() ? tree.flutterCupertinoDefaultTextEditingShortcuts.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoDefaultTextStyleNamedFallback:
      return $l0.DefaultTextStyle.fallback();
    case proto.WidgetExpression_Result.flutterCupertinoDisplayFeatureSubScreen:
      return $l0.DisplayFeatureSubScreen(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoDisplayFeatureSubScreen.hasChild() ? tree.flutterCupertinoDisplayFeatureSubScreen.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoDraggable:
      return $l0.Draggable(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoDraggable.hasChild() ? tree.flutterCupertinoDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterCupertinoDraggable.hasFeedback() ? tree.flutterCupertinoDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterCupertinoDraggable.hasChildWhenDragging() ? tree.flutterCupertinoDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterCupertinoDraggable.hasMaxSimultaneousDrags() ? tree.flutterCupertinoDraggable.maxSimultaneousDrags : null), ignoringFeedbackSemantics: (tree.flutterCupertinoDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterCupertinoDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterCupertinoDraggable.hasIgnoringFeedbackPointer() ? tree.flutterCupertinoDraggable.ignoringFeedbackPointer : true), rootOverlay: (tree.flutterCupertinoDraggable.hasRootOverlay() ? tree.flutterCupertinoDraggable.rootOverlay : false));
    case proto.WidgetExpression_Result.flutterCupertinoDraggableScrollableActuator:
      return $l0.DraggableScrollableActuator(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoDraggableScrollableActuator.hasChild() ? tree.flutterCupertinoDraggableScrollableActuator.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoErrorWidgetNamedWithDetails:
      return $l0.ErrorWidget.withDetails(message: (tree.flutterCupertinoErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterCupertinoErrorWidgetNamedWithDetails.message : ''));
    case proto.WidgetExpression_Result.flutterCupertinoExcludeFocus:
      return $l0.ExcludeFocus(excluding: (tree.flutterCupertinoExcludeFocus.hasExcluding() ? tree.flutterCupertinoExcludeFocus.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoExcludeFocus.hasChild() ? tree.flutterCupertinoExcludeFocus.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoExcludeFocusTraversal:
      return $l0.ExcludeFocusTraversal(excluding: (tree.flutterCupertinoExcludeFocusTraversal.hasExcluding() ? tree.flutterCupertinoExcludeFocusTraversal.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoExcludeFocusTraversal.hasChild() ? tree.flutterCupertinoExcludeFocusTraversal.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoExcludeSemantics:
      return $l0.ExcludeSemantics(excluding: (tree.flutterCupertinoExcludeSemantics.hasExcluding() ? tree.flutterCupertinoExcludeSemantics.excluding : true), child: evaluateWidgetExpression((tree.flutterCupertinoExcludeSemantics.hasChild() ? tree.flutterCupertinoExcludeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoExpanded:
      return $l0.Expanded(flex: (tree.flutterCupertinoExpanded.hasFlex() ? tree.flutterCupertinoExpanded.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoExpanded.hasChild() ? tree.flutterCupertinoExpanded.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoFadeInImageNamedAssetNetwork:
      return $l0.FadeInImage.assetNetwork(placeholder: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')), image: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.image : missing('image')), placeholderScale: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.placeholderScale : null), imageScale: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.imageScale : 1.0), excludeFromSemantics: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.excludeFromSemantics : false), imageSemanticLabel: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.imageSemanticLabel : null), width: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.width : null), height: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.height : null), matchTextDirection: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.matchTextDirection : false), placeholderCacheWidth: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.placeholderCacheWidth : null), placeholderCacheHeight: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.placeholderCacheHeight : null), imageCacheWidth: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.imageCacheWidth : null), imageCacheHeight: (tree.flutterCupertinoFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterCupertinoFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case proto.WidgetExpression_Result.flutterCupertinoFittedBox:
      return $l0.FittedBox(child: evaluateWidgetExpression((tree.flutterCupertinoFittedBox.hasChild() ? tree.flutterCupertinoFittedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoFlexible:
      return $l0.Flexible(flex: (tree.flutterCupertinoFlexible.hasFlex() ? tree.flutterCupertinoFlexible.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoFlexible.hasChild() ? tree.flutterCupertinoFlexible.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoFocus:
      return $l0.Focus(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoFocus.hasChild() ? tree.flutterCupertinoFocus.child : missing('child'))), autofocus: (tree.flutterCupertinoFocus.hasAutofocus() ? tree.flutterCupertinoFocus.autofocus : false), canRequestFocus: (tree.flutterCupertinoFocus.hasCanRequestFocus() ? tree.flutterCupertinoFocus.canRequestFocus : null), skipTraversal: (tree.flutterCupertinoFocus.hasSkipTraversal() ? tree.flutterCupertinoFocus.skipTraversal : null), descendantsAreFocusable: (tree.flutterCupertinoFocus.hasDescendantsAreFocusable() ? tree.flutterCupertinoFocus.descendantsAreFocusable : null), descendantsAreTraversable: (tree.flutterCupertinoFocus.hasDescendantsAreTraversable() ? tree.flutterCupertinoFocus.descendantsAreTraversable : null), includeSemantics: (tree.flutterCupertinoFocus.hasIncludeSemantics() ? tree.flutterCupertinoFocus.includeSemantics : true), debugLabel: (tree.flutterCupertinoFocus.hasDebugLabel() ? tree.flutterCupertinoFocus.debugLabel : null));
    case proto.WidgetExpression_Result.flutterCupertinoFocusScope:
      return $l0.FocusScope(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoFocusScope.hasChild() ? tree.flutterCupertinoFocusScope.child : missing('child'))), autofocus: (tree.flutterCupertinoFocusScope.hasAutofocus() ? tree.flutterCupertinoFocusScope.autofocus : false), canRequestFocus: (tree.flutterCupertinoFocusScope.hasCanRequestFocus() ? tree.flutterCupertinoFocusScope.canRequestFocus : null), skipTraversal: (tree.flutterCupertinoFocusScope.hasSkipTraversal() ? tree.flutterCupertinoFocusScope.skipTraversal : null), debugLabel: (tree.flutterCupertinoFocusScope.hasDebugLabel() ? tree.flutterCupertinoFocusScope.debugLabel : null));
    case proto.WidgetExpression_Result.flutterCupertinoFocusTraversalGroup:
      return $l0.FocusTraversalGroup(descendantsAreFocusable: (tree.flutterCupertinoFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterCupertinoFocusTraversalGroup.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterCupertinoFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterCupertinoFocusTraversalGroup.descendantsAreTraversable : true), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoFocusTraversalGroup.hasChild() ? tree.flutterCupertinoFocusTraversalGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoFocusableActionDetector:
      return $l0.FocusableActionDetector(enabled: (tree.flutterCupertinoFocusableActionDetector.hasEnabled() ? tree.flutterCupertinoFocusableActionDetector.enabled : true), autofocus: (tree.flutterCupertinoFocusableActionDetector.hasAutofocus() ? tree.flutterCupertinoFocusableActionDetector.autofocus : false), descendantsAreFocusable: (tree.flutterCupertinoFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterCupertinoFocusableActionDetector.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterCupertinoFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterCupertinoFocusableActionDetector.descendantsAreTraversable : true), includeFocusSemantics: (tree.flutterCupertinoFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterCupertinoFocusableActionDetector.includeFocusSemantics : true), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoFocusableActionDetector.hasChild() ? tree.flutterCupertinoFocusableActionDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoForm:
      return $l0.Form(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoForm.hasChild() ? tree.flutterCupertinoForm.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoFractionallySizedBox:
      return $l0.FractionallySizedBox(widthFactor: (tree.flutterCupertinoFractionallySizedBox.hasWidthFactor() ? tree.flutterCupertinoFractionallySizedBox.widthFactor : null), heightFactor: (tree.flutterCupertinoFractionallySizedBox.hasHeightFactor() ? tree.flutterCupertinoFractionallySizedBox.heightFactor : null), child: evaluateWidgetExpression((tree.flutterCupertinoFractionallySizedBox.hasChild() ? tree.flutterCupertinoFractionallySizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoGestureDetector:
      return $l0.GestureDetector(child: evaluateWidgetExpression((tree.flutterCupertinoGestureDetector.hasChild() ? tree.flutterCupertinoGestureDetector.child : null)), excludeFromSemantics: (tree.flutterCupertinoGestureDetector.hasExcludeFromSemantics() ? tree.flutterCupertinoGestureDetector.excludeFromSemantics : false), trackpadScrollCausesScale: (tree.flutterCupertinoGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterCupertinoGestureDetector.trackpadScrollCausesScale : false));
    case proto.WidgetExpression_Result.flutterCupertinoGridPaper:
      return $l0.GridPaper(interval: (tree.flutterCupertinoGridPaper.hasInterval() ? tree.flutterCupertinoGridPaper.interval : 100.0), divisions: (tree.flutterCupertinoGridPaper.hasDivisions() ? tree.flutterCupertinoGridPaper.divisions : 2), subdivisions: (tree.flutterCupertinoGridPaper.hasSubdivisions() ? tree.flutterCupertinoGridPaper.subdivisions : 5), child: evaluateWidgetExpression((tree.flutterCupertinoGridPaper.hasChild() ? tree.flutterCupertinoGridPaper.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoGridViewNamedCount:
      return $l0.GridView.count(reverse: (tree.flutterCupertinoGridViewNamedCount.hasReverse() ? tree.flutterCupertinoGridViewNamedCount.reverse : false), primary: (tree.flutterCupertinoGridViewNamedCount.hasPrimary() ? tree.flutterCupertinoGridViewNamedCount.primary : null), shrinkWrap: (tree.flutterCupertinoGridViewNamedCount.hasShrinkWrap() ? tree.flutterCupertinoGridViewNamedCount.shrinkWrap : false), crossAxisCount: (tree.flutterCupertinoGridViewNamedCount.hasCrossAxisCount() ? tree.flutterCupertinoGridViewNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterCupertinoGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterCupertinoGridViewNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterCupertinoGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterCupertinoGridViewNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterCupertinoGridViewNamedCount.hasChildAspectRatio() ? tree.flutterCupertinoGridViewNamedCount.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterCupertinoGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoGridViewNamedCount.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterCupertinoGridViewNamedCount.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterCupertinoGridViewNamedCount.addSemanticIndexes : true), cacheExtent: (tree.flutterCupertinoGridViewNamedCount.hasCacheExtent() ? tree.flutterCupertinoGridViewNamedCount.cacheExtent : null), children: tree.flutterCupertinoGridViewNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterCupertinoGridViewNamedCount.hasSemanticChildCount() ? tree.flutterCupertinoGridViewNamedCount.semanticChildCount : null), restorationId: (tree.flutterCupertinoGridViewNamedCount.hasRestorationId() ? tree.flutterCupertinoGridViewNamedCount.restorationId : null));
    case proto.WidgetExpression_Result.flutterCupertinoGridViewNamedExtent:
      return $l0.GridView.extent(reverse: (tree.flutterCupertinoGridViewNamedExtent.hasReverse() ? tree.flutterCupertinoGridViewNamedExtent.reverse : false), primary: (tree.flutterCupertinoGridViewNamedExtent.hasPrimary() ? tree.flutterCupertinoGridViewNamedExtent.primary : null), shrinkWrap: (tree.flutterCupertinoGridViewNamedExtent.hasShrinkWrap() ? tree.flutterCupertinoGridViewNamedExtent.shrinkWrap : false), maxCrossAxisExtent: (tree.flutterCupertinoGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterCupertinoGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterCupertinoGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterCupertinoGridViewNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterCupertinoGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterCupertinoGridViewNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterCupertinoGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterCupertinoGridViewNamedExtent.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterCupertinoGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoGridViewNamedExtent.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterCupertinoGridViewNamedExtent.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterCupertinoGridViewNamedExtent.addSemanticIndexes : true), cacheExtent: (tree.flutterCupertinoGridViewNamedExtent.hasCacheExtent() ? tree.flutterCupertinoGridViewNamedExtent.cacheExtent : null), children: tree.flutterCupertinoGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterCupertinoGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterCupertinoGridViewNamedExtent.semanticChildCount : null), restorationId: (tree.flutterCupertinoGridViewNamedExtent.hasRestorationId() ? tree.flutterCupertinoGridViewNamedExtent.restorationId : null));
    case proto.WidgetExpression_Result.flutterCupertinoHeroControllerScopeNamedNone:
      return $l0.HeroControllerScope.none(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoHeroControllerScopeNamedNone.hasChild() ? tree.flutterCupertinoHeroControllerScopeNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoHeroMode:
      return $l0.HeroMode(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoHeroMode.hasChild() ? tree.flutterCupertinoHeroMode.child : missing('child'))), enabled: (tree.flutterCupertinoHeroMode.hasEnabled() ? tree.flutterCupertinoHeroMode.enabled : true));
    case proto.WidgetExpression_Result.flutterCupertinoHtmlElementView:
      return $l0.HtmlElementView(viewType: (tree.flutterCupertinoHtmlElementView.hasViewType() ? tree.flutterCupertinoHtmlElementView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterCupertinoIgnorePointer:
      return $l0.IgnorePointer(ignoring: (tree.flutterCupertinoIgnorePointer.hasIgnoring() ? tree.flutterCupertinoIgnorePointer.ignoring : true), child: evaluateWidgetExpression((tree.flutterCupertinoIgnorePointer.hasChild() ? tree.flutterCupertinoIgnorePointer.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoImageNamedAsset:
      return $l0.Image.asset((tree.flutterCupertinoImageNamedAsset.hasName() ? tree.flutterCupertinoImageNamedAsset.name : missing('name')), semanticLabel: (tree.flutterCupertinoImageNamedAsset.hasSemanticLabel() ? tree.flutterCupertinoImageNamedAsset.semanticLabel : null), excludeFromSemantics: (tree.flutterCupertinoImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterCupertinoImageNamedAsset.excludeFromSemantics : false), scale: (tree.flutterCupertinoImageNamedAsset.hasScale() ? tree.flutterCupertinoImageNamedAsset.scale : null), width: (tree.flutterCupertinoImageNamedAsset.hasWidth() ? tree.flutterCupertinoImageNamedAsset.width : null), height: (tree.flutterCupertinoImageNamedAsset.hasHeight() ? tree.flutterCupertinoImageNamedAsset.height : null), matchTextDirection: (tree.flutterCupertinoImageNamedAsset.hasMatchTextDirection() ? tree.flutterCupertinoImageNamedAsset.matchTextDirection : false), gaplessPlayback: (tree.flutterCupertinoImageNamedAsset.hasGaplessPlayback() ? tree.flutterCupertinoImageNamedAsset.gaplessPlayback : false), isAntiAlias: (tree.flutterCupertinoImageNamedAsset.hasIsAntiAlias() ? tree.flutterCupertinoImageNamedAsset.isAntiAlias : false), package: (tree.flutterCupertinoImageNamedAsset.hasPackage() ? tree.flutterCupertinoImageNamedAsset.package : null), cacheWidth: (tree.flutterCupertinoImageNamedAsset.hasCacheWidth() ? tree.flutterCupertinoImageNamedAsset.cacheWidth : null), cacheHeight: (tree.flutterCupertinoImageNamedAsset.hasCacheHeight() ? tree.flutterCupertinoImageNamedAsset.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterCupertinoImageNamedNetwork:
      return $l0.Image.network((tree.flutterCupertinoImageNamedNetwork.hasSrc() ? tree.flutterCupertinoImageNamedNetwork.src : missing('src')), scale: (tree.flutterCupertinoImageNamedNetwork.hasScale() ? tree.flutterCupertinoImageNamedNetwork.scale : 1.0), semanticLabel: (tree.flutterCupertinoImageNamedNetwork.hasSemanticLabel() ? tree.flutterCupertinoImageNamedNetwork.semanticLabel : null), excludeFromSemantics: (tree.flutterCupertinoImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterCupertinoImageNamedNetwork.excludeFromSemantics : false), width: (tree.flutterCupertinoImageNamedNetwork.hasWidth() ? tree.flutterCupertinoImageNamedNetwork.width : null), height: (tree.flutterCupertinoImageNamedNetwork.hasHeight() ? tree.flutterCupertinoImageNamedNetwork.height : null), matchTextDirection: (tree.flutterCupertinoImageNamedNetwork.hasMatchTextDirection() ? tree.flutterCupertinoImageNamedNetwork.matchTextDirection : false), gaplessPlayback: (tree.flutterCupertinoImageNamedNetwork.hasGaplessPlayback() ? tree.flutterCupertinoImageNamedNetwork.gaplessPlayback : false), isAntiAlias: (tree.flutterCupertinoImageNamedNetwork.hasIsAntiAlias() ? tree.flutterCupertinoImageNamedNetwork.isAntiAlias : false), cacheWidth: (tree.flutterCupertinoImageNamedNetwork.hasCacheWidth() ? tree.flutterCupertinoImageNamedNetwork.cacheWidth : null), cacheHeight: (tree.flutterCupertinoImageNamedNetwork.hasCacheHeight() ? tree.flutterCupertinoImageNamedNetwork.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterCupertinoIndexedSemantics:
      return $l0.IndexedSemantics(index: (tree.flutterCupertinoIndexedSemantics.hasIndex() ? tree.flutterCupertinoIndexedSemantics.index : missing('index')), child: evaluateWidgetExpression((tree.flutterCupertinoIndexedSemantics.hasChild() ? tree.flutterCupertinoIndexedSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoIndexedStack:
      return $l0.IndexedStack(index: (tree.flutterCupertinoIndexedStack.hasIndex() ? tree.flutterCupertinoIndexedStack.index : 0), children: tree.flutterCupertinoIndexedStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoInteractiveViewer:
      return $l0.InteractiveViewer(constrained: (tree.flutterCupertinoInteractiveViewer.hasConstrained() ? tree.flutterCupertinoInteractiveViewer.constrained : true), maxScale: (tree.flutterCupertinoInteractiveViewer.hasMaxScale() ? tree.flutterCupertinoInteractiveViewer.maxScale : 2.5), minScale: (tree.flutterCupertinoInteractiveViewer.hasMinScale() ? tree.flutterCupertinoInteractiveViewer.minScale : 0.8), interactionEndFrictionCoefficient: (tree.flutterCupertinoInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterCupertinoInteractiveViewer.interactionEndFrictionCoefficient : missing('interactionEndFrictionCoefficient')), panEnabled: (tree.flutterCupertinoInteractiveViewer.hasPanEnabled() ? tree.flutterCupertinoInteractiveViewer.panEnabled : true), scaleEnabled: (tree.flutterCupertinoInteractiveViewer.hasScaleEnabled() ? tree.flutterCupertinoInteractiveViewer.scaleEnabled : true), scaleFactor: (tree.flutterCupertinoInteractiveViewer.hasScaleFactor() ? tree.flutterCupertinoInteractiveViewer.scaleFactor : missing('scaleFactor')), trackpadScrollCausesScale: (tree.flutterCupertinoInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterCupertinoInteractiveViewer.trackpadScrollCausesScale : false), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoInteractiveViewer.hasChild() ? tree.flutterCupertinoInteractiveViewer.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoIntrinsicHeight:
      return $l0.IntrinsicHeight(child: evaluateWidgetExpression((tree.flutterCupertinoIntrinsicHeight.hasChild() ? tree.flutterCupertinoIntrinsicHeight.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoIntrinsicWidth:
      return $l0.IntrinsicWidth(stepWidth: (tree.flutterCupertinoIntrinsicWidth.hasStepWidth() ? tree.flutterCupertinoIntrinsicWidth.stepWidth : null), stepHeight: (tree.flutterCupertinoIntrinsicWidth.hasStepHeight() ? tree.flutterCupertinoIntrinsicWidth.stepHeight : null), child: evaluateWidgetExpression((tree.flutterCupertinoIntrinsicWidth.hasChild() ? tree.flutterCupertinoIntrinsicWidth.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoKeepAlive:
      return $l0.KeepAlive(keepAlive: (tree.flutterCupertinoKeepAlive.hasKeepAlive() ? tree.flutterCupertinoKeepAlive.keepAlive : missing('keepAlive')), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoKeepAlive.hasChild() ? tree.flutterCupertinoKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoKeyedSubtree:
      return $l0.KeyedSubtree(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoKeyedSubtree.hasChild() ? tree.flutterCupertinoKeyedSubtree.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoKeyedSubtreeNamedWrap:
      return $l0.KeyedSubtree.wrap(evaluateRequiredWidgetExpression((tree.flutterCupertinoKeyedSubtreeNamedWrap.hasChild() ? tree.flutterCupertinoKeyedSubtreeNamedWrap.child : missing('child'))), (tree.flutterCupertinoKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterCupertinoKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterCupertinoLimitedBox:
      return $l0.LimitedBox(maxWidth: (tree.flutterCupertinoLimitedBox.hasMaxWidth() ? tree.flutterCupertinoLimitedBox.maxWidth : missing('maxWidth')), maxHeight: (tree.flutterCupertinoLimitedBox.hasMaxHeight() ? tree.flutterCupertinoLimitedBox.maxHeight : missing('maxHeight')), child: evaluateWidgetExpression((tree.flutterCupertinoLimitedBox.hasChild() ? tree.flutterCupertinoLimitedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoListBody:
      return $l0.ListBody(reverse: (tree.flutterCupertinoListBody.hasReverse() ? tree.flutterCupertinoListBody.reverse : false), children: tree.flutterCupertinoListBody.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoListView:
      return $l0.ListView(reverse: (tree.flutterCupertinoListView.hasReverse() ? tree.flutterCupertinoListView.reverse : false), primary: (tree.flutterCupertinoListView.hasPrimary() ? tree.flutterCupertinoListView.primary : null), shrinkWrap: (tree.flutterCupertinoListView.hasShrinkWrap() ? tree.flutterCupertinoListView.shrinkWrap : false), itemExtent: (tree.flutterCupertinoListView.hasItemExtent() ? tree.flutterCupertinoListView.itemExtent : null), prototypeItem: evaluateWidgetExpression((tree.flutterCupertinoListView.hasPrototypeItem() ? tree.flutterCupertinoListView.prototypeItem : null)), addAutomaticKeepAlives: (tree.flutterCupertinoListView.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoListView.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoListView.hasAddRepaintBoundaries() ? tree.flutterCupertinoListView.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoListView.hasAddSemanticIndexes() ? tree.flutterCupertinoListView.addSemanticIndexes : true), cacheExtent: (tree.flutterCupertinoListView.hasCacheExtent() ? tree.flutterCupertinoListView.cacheExtent : null), children: tree.flutterCupertinoListView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterCupertinoListView.hasSemanticChildCount() ? tree.flutterCupertinoListView.semanticChildCount : null), restorationId: (tree.flutterCupertinoListView.hasRestorationId() ? tree.flutterCupertinoListView.restorationId : null));
    case proto.WidgetExpression_Result.flutterCupertinoListWheelScrollView:
      return $l0.ListWheelScrollView(diameterRatio: (tree.flutterCupertinoListWheelScrollView.hasDiameterRatio() ? tree.flutterCupertinoListWheelScrollView.diameterRatio : missing('diameterRatio')), perspective: (tree.flutterCupertinoListWheelScrollView.hasPerspective() ? tree.flutterCupertinoListWheelScrollView.perspective : missing('perspective')), offAxisFraction: (tree.flutterCupertinoListWheelScrollView.hasOffAxisFraction() ? tree.flutterCupertinoListWheelScrollView.offAxisFraction : 0.0), useMagnifier: (tree.flutterCupertinoListWheelScrollView.hasUseMagnifier() ? tree.flutterCupertinoListWheelScrollView.useMagnifier : false), magnification: (tree.flutterCupertinoListWheelScrollView.hasMagnification() ? tree.flutterCupertinoListWheelScrollView.magnification : 1.0), overAndUnderCenterOpacity: (tree.flutterCupertinoListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterCupertinoListWheelScrollView.overAndUnderCenterOpacity : 1.0), itemExtent: (tree.flutterCupertinoListWheelScrollView.hasItemExtent() ? tree.flutterCupertinoListWheelScrollView.itemExtent : missing('itemExtent')), squeeze: (tree.flutterCupertinoListWheelScrollView.hasSqueeze() ? tree.flutterCupertinoListWheelScrollView.squeeze : 1.0), renderChildrenOutsideViewport: (tree.flutterCupertinoListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterCupertinoListWheelScrollView.renderChildrenOutsideViewport : false), restorationId: (tree.flutterCupertinoListWheelScrollView.hasRestorationId() ? tree.flutterCupertinoListWheelScrollView.restorationId : null), children: tree.flutterCupertinoListWheelScrollView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoListener:
      return $l0.Listener(child: evaluateWidgetExpression((tree.flutterCupertinoListener.hasChild() ? tree.flutterCupertinoListener.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoLongPressDraggable:
      return $l0.LongPressDraggable(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoLongPressDraggable.hasChild() ? tree.flutterCupertinoLongPressDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterCupertinoLongPressDraggable.hasFeedback() ? tree.flutterCupertinoLongPressDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterCupertinoLongPressDraggable.hasChildWhenDragging() ? tree.flutterCupertinoLongPressDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterCupertinoLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterCupertinoLongPressDraggable.maxSimultaneousDrags : null), hapticFeedbackOnStart: (tree.flutterCupertinoLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterCupertinoLongPressDraggable.hapticFeedbackOnStart : true), ignoringFeedbackSemantics: (tree.flutterCupertinoLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterCupertinoLongPressDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterCupertinoLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterCupertinoLongPressDraggable.ignoringFeedbackPointer : true));
    case proto.WidgetExpression_Result.flutterCupertinoLookupBoundary:
      return $l0.LookupBoundary(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoLookupBoundary.hasChild() ? tree.flutterCupertinoLookupBoundary.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoMergeSemantics:
      return $l0.MergeSemantics(child: evaluateWidgetExpression((tree.flutterCupertinoMergeSemantics.hasChild() ? tree.flutterCupertinoMergeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoMetaData:
      return $l0.MetaData(child: evaluateWidgetExpression((tree.flutterCupertinoMetaData.hasChild() ? tree.flutterCupertinoMetaData.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoModalBarrier:
      return $l0.ModalBarrier(dismissible: (tree.flutterCupertinoModalBarrier.hasDismissible() ? tree.flutterCupertinoModalBarrier.dismissible : true), semanticsLabel: (tree.flutterCupertinoModalBarrier.hasSemanticsLabel() ? tree.flutterCupertinoModalBarrier.semanticsLabel : null), barrierSemanticsDismissible: (tree.flutterCupertinoModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterCupertinoModalBarrier.barrierSemanticsDismissible : true), semanticsOnTapHint: (tree.flutterCupertinoModalBarrier.hasSemanticsOnTapHint() ? tree.flutterCupertinoModalBarrier.semanticsOnTapHint : null));
    case proto.WidgetExpression_Result.flutterCupertinoMouseRegion:
      return $l0.MouseRegion(opaque: (tree.flutterCupertinoMouseRegion.hasOpaque() ? tree.flutterCupertinoMouseRegion.opaque : true), child: evaluateWidgetExpression((tree.flutterCupertinoMouseRegion.hasChild() ? tree.flutterCupertinoMouseRegion.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoNavigationToolbar:
      return $l0.NavigationToolbar(leading: evaluateWidgetExpression((tree.flutterCupertinoNavigationToolbar.hasLeading() ? tree.flutterCupertinoNavigationToolbar.leading : null)), middle: evaluateWidgetExpression((tree.flutterCupertinoNavigationToolbar.hasMiddle() ? tree.flutterCupertinoNavigationToolbar.middle : null)), trailing: evaluateWidgetExpression((tree.flutterCupertinoNavigationToolbar.hasTrailing() ? tree.flutterCupertinoNavigationToolbar.trailing : null)), centerMiddle: (tree.flutterCupertinoNavigationToolbar.hasCenterMiddle() ? tree.flutterCupertinoNavigationToolbar.centerMiddle : true), middleSpacing: (tree.flutterCupertinoNavigationToolbar.hasMiddleSpacing() ? tree.flutterCupertinoNavigationToolbar.middleSpacing : missing('middleSpacing')));
    case proto.WidgetExpression_Result.flutterCupertinoNavigator:
      return $l0.Navigator(initialRoute: (tree.flutterCupertinoNavigator.hasInitialRoute() ? tree.flutterCupertinoNavigator.initialRoute : null), reportsRouteUpdateToEngine: (tree.flutterCupertinoNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterCupertinoNavigator.reportsRouteUpdateToEngine : false), requestFocus: (tree.flutterCupertinoNavigator.hasRequestFocus() ? tree.flutterCupertinoNavigator.requestFocus : true), restorationScopeId: (tree.flutterCupertinoNavigator.hasRestorationScopeId() ? tree.flutterCupertinoNavigator.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterCupertinoNotificationListener:
      return $l0.NotificationListener(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoNotificationListener.hasChild() ? tree.flutterCupertinoNotificationListener.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoOffstage:
      return $l0.Offstage(offstage: (tree.flutterCupertinoOffstage.hasOffstage() ? tree.flutterCupertinoOffstage.offstage : true), child: evaluateWidgetExpression((tree.flutterCupertinoOffstage.hasChild() ? tree.flutterCupertinoOffstage.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoOpacity:
      return $l0.Opacity(opacity: (tree.flutterCupertinoOpacity.hasOpacity() ? tree.flutterCupertinoOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterCupertinoOpacity.hasAlwaysIncludeSemantics() ? tree.flutterCupertinoOpacity.alwaysIncludeSemantics : false), child: evaluateWidgetExpression((tree.flutterCupertinoOpacity.hasChild() ? tree.flutterCupertinoOpacity.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoOverflowBar:
      return $l0.OverflowBar(spacing: (tree.flutterCupertinoOverflowBar.hasSpacing() ? tree.flutterCupertinoOverflowBar.spacing : 0.0), overflowSpacing: (tree.flutterCupertinoOverflowBar.hasOverflowSpacing() ? tree.flutterCupertinoOverflowBar.overflowSpacing : 0.0), children: tree.flutterCupertinoOverflowBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoOverflowBox:
      return $l0.OverflowBox(minWidth: (tree.flutterCupertinoOverflowBox.hasMinWidth() ? tree.flutterCupertinoOverflowBox.minWidth : null), maxWidth: (tree.flutterCupertinoOverflowBox.hasMaxWidth() ? tree.flutterCupertinoOverflowBox.maxWidth : null), minHeight: (tree.flutterCupertinoOverflowBox.hasMinHeight() ? tree.flutterCupertinoOverflowBox.minHeight : null), maxHeight: (tree.flutterCupertinoOverflowBox.hasMaxHeight() ? tree.flutterCupertinoOverflowBox.maxHeight : null), child: evaluateWidgetExpression((tree.flutterCupertinoOverflowBox.hasChild() ? tree.flutterCupertinoOverflowBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoOverlay:
      return $l0.Overlay();
    case proto.WidgetExpression_Result.flutterCupertinoPageView:
      return $l0.PageView(reverse: (tree.flutterCupertinoPageView.hasReverse() ? tree.flutterCupertinoPageView.reverse : false), pageSnapping: (tree.flutterCupertinoPageView.hasPageSnapping() ? tree.flutterCupertinoPageView.pageSnapping : true), children: tree.flutterCupertinoPageView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), allowImplicitScrolling: (tree.flutterCupertinoPageView.hasAllowImplicitScrolling() ? tree.flutterCupertinoPageView.allowImplicitScrolling : false), restorationId: (tree.flutterCupertinoPageView.hasRestorationId() ? tree.flutterCupertinoPageView.restorationId : null), padEnds: (tree.flutterCupertinoPageView.hasPadEnds() ? tree.flutterCupertinoPageView.padEnds : true));
    case proto.WidgetExpression_Result.flutterCupertinoPerformanceOverlay:
      return $l0.PerformanceOverlay(optionsMask: (tree.flutterCupertinoPerformanceOverlay.hasOptionsMask() ? tree.flutterCupertinoPerformanceOverlay.optionsMask : 0), rasterizerThreshold: (tree.flutterCupertinoPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterCupertinoPerformanceOverlay.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterCupertinoPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterCupertinoPerformanceOverlay.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterCupertinoPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterCupertinoPerformanceOverlay.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterCupertinoPerformanceOverlayNamedAllEnabled:
      return $l0.PerformanceOverlay.allEnabled(rasterizerThreshold: (tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterCupertinoPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterCupertinoPlaceholder:
      return $l0.Placeholder(strokeWidth: (tree.flutterCupertinoPlaceholder.hasStrokeWidth() ? tree.flutterCupertinoPlaceholder.strokeWidth : 2.0), fallbackWidth: (tree.flutterCupertinoPlaceholder.hasFallbackWidth() ? tree.flutterCupertinoPlaceholder.fallbackWidth : 400.0), fallbackHeight: (tree.flutterCupertinoPlaceholder.hasFallbackHeight() ? tree.flutterCupertinoPlaceholder.fallbackHeight : 400.0), child: evaluateWidgetExpression((tree.flutterCupertinoPlaceholder.hasChild() ? tree.flutterCupertinoPlaceholder.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoPlatformSelectableRegionContextMenu:
      return $l0.PlatformSelectableRegionContextMenu(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoPlatformSelectableRegionContextMenu.hasChild() ? tree.flutterCupertinoPlatformSelectableRegionContextMenu.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoPositioned:
      return $l0.Positioned(left: (tree.flutterCupertinoPositioned.hasLeft() ? tree.flutterCupertinoPositioned.left : null), top: (tree.flutterCupertinoPositioned.hasTop() ? tree.flutterCupertinoPositioned.top : null), right: (tree.flutterCupertinoPositioned.hasRight() ? tree.flutterCupertinoPositioned.right : null), bottom: (tree.flutterCupertinoPositioned.hasBottom() ? tree.flutterCupertinoPositioned.bottom : null), width: (tree.flutterCupertinoPositioned.hasWidth() ? tree.flutterCupertinoPositioned.width : null), height: (tree.flutterCupertinoPositioned.hasHeight() ? tree.flutterCupertinoPositioned.height : null), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoPositioned.hasChild() ? tree.flutterCupertinoPositioned.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoPositionedDirectional:
      return $l0.PositionedDirectional(start: (tree.flutterCupertinoPositionedDirectional.hasStart() ? tree.flutterCupertinoPositionedDirectional.start : null), top: (tree.flutterCupertinoPositionedDirectional.hasTop() ? tree.flutterCupertinoPositionedDirectional.top : null), end: (tree.flutterCupertinoPositionedDirectional.hasEnd() ? tree.flutterCupertinoPositionedDirectional.end : null), bottom: (tree.flutterCupertinoPositionedDirectional.hasBottom() ? tree.flutterCupertinoPositionedDirectional.bottom : null), width: (tree.flutterCupertinoPositionedDirectional.hasWidth() ? tree.flutterCupertinoPositionedDirectional.width : null), height: (tree.flutterCupertinoPositionedDirectional.hasHeight() ? tree.flutterCupertinoPositionedDirectional.height : null), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoPositionedDirectional.hasChild() ? tree.flutterCupertinoPositionedDirectional.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoPositionedNamedFill:
      return $l0.Positioned.fill(left: (tree.flutterCupertinoPositionedNamedFill.hasLeft() ? tree.flutterCupertinoPositionedNamedFill.left : 0.0), top: (tree.flutterCupertinoPositionedNamedFill.hasTop() ? tree.flutterCupertinoPositionedNamedFill.top : 0.0), right: (tree.flutterCupertinoPositionedNamedFill.hasRight() ? tree.flutterCupertinoPositionedNamedFill.right : 0.0), bottom: (tree.flutterCupertinoPositionedNamedFill.hasBottom() ? tree.flutterCupertinoPositionedNamedFill.bottom : 0.0), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoPositionedNamedFill.hasChild() ? tree.flutterCupertinoPositionedNamedFill.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoPrimaryScrollControllerNamedNone:
      return $l0.PrimaryScrollController.none(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoPrimaryScrollControllerNamedNone.hasChild() ? tree.flutterCupertinoPrimaryScrollControllerNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoRawGestureDetector:
      return $l0.RawGestureDetector(child: evaluateWidgetExpression((tree.flutterCupertinoRawGestureDetector.hasChild() ? tree.flutterCupertinoRawGestureDetector.child : null)), excludeFromSemantics: (tree.flutterCupertinoRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterCupertinoRawGestureDetector.excludeFromSemantics : false));
    case proto.WidgetExpression_Result.flutterCupertinoRawImage:
      return $l0.RawImage(debugImageLabel: (tree.flutterCupertinoRawImage.hasDebugImageLabel() ? tree.flutterCupertinoRawImage.debugImageLabel : null), width: (tree.flutterCupertinoRawImage.hasWidth() ? tree.flutterCupertinoRawImage.width : null), height: (tree.flutterCupertinoRawImage.hasHeight() ? tree.flutterCupertinoRawImage.height : null), scale: (tree.flutterCupertinoRawImage.hasScale() ? tree.flutterCupertinoRawImage.scale : 1.0), matchTextDirection: (tree.flutterCupertinoRawImage.hasMatchTextDirection() ? tree.flutterCupertinoRawImage.matchTextDirection : false), invertColors: (tree.flutterCupertinoRawImage.hasInvertColors() ? tree.flutterCupertinoRawImage.invertColors : false), isAntiAlias: (tree.flutterCupertinoRawImage.hasIsAntiAlias() ? tree.flutterCupertinoRawImage.isAntiAlias : false));
    case proto.WidgetExpression_Result.flutterCupertinoRawScrollbar:
      return $l0.RawScrollbar(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoRawScrollbar.hasChild() ? tree.flutterCupertinoRawScrollbar.child : missing('child'))), thumbVisibility: (tree.flutterCupertinoRawScrollbar.hasThumbVisibility() ? tree.flutterCupertinoRawScrollbar.thumbVisibility : null), thickness: (tree.flutterCupertinoRawScrollbar.hasThickness() ? tree.flutterCupertinoRawScrollbar.thickness : null), minThumbLength: (tree.flutterCupertinoRawScrollbar.hasMinThumbLength() ? tree.flutterCupertinoRawScrollbar.minThumbLength : missing('minThumbLength')), minOverscrollLength: (tree.flutterCupertinoRawScrollbar.hasMinOverscrollLength() ? tree.flutterCupertinoRawScrollbar.minOverscrollLength : null), trackVisibility: (tree.flutterCupertinoRawScrollbar.hasTrackVisibility() ? tree.flutterCupertinoRawScrollbar.trackVisibility : null), interactive: (tree.flutterCupertinoRawScrollbar.hasInteractive() ? tree.flutterCupertinoRawScrollbar.interactive : null), mainAxisMargin: (tree.flutterCupertinoRawScrollbar.hasMainAxisMargin() ? tree.flutterCupertinoRawScrollbar.mainAxisMargin : 0.0), crossAxisMargin: (tree.flutterCupertinoRawScrollbar.hasCrossAxisMargin() ? tree.flutterCupertinoRawScrollbar.crossAxisMargin : 0.0));
    case proto.WidgetExpression_Result.flutterCupertinoReorderableDelayedDragStartListener:
      return $l0.ReorderableDelayedDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoReorderableDelayedDragStartListener.hasChild() ? tree.flutterCupertinoReorderableDelayedDragStartListener.child : missing('child'))), index: (tree.flutterCupertinoReorderableDelayedDragStartListener.hasIndex() ? tree.flutterCupertinoReorderableDelayedDragStartListener.index : missing('index')), enabled: (tree.flutterCupertinoReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterCupertinoReorderableDelayedDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterCupertinoReorderableDragStartListener:
      return $l0.ReorderableDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoReorderableDragStartListener.hasChild() ? tree.flutterCupertinoReorderableDragStartListener.child : missing('child'))), index: (tree.flutterCupertinoReorderableDragStartListener.hasIndex() ? tree.flutterCupertinoReorderableDragStartListener.index : missing('index')), enabled: (tree.flutterCupertinoReorderableDragStartListener.hasEnabled() ? tree.flutterCupertinoReorderableDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterCupertinoRepaintBoundary:
      return $l0.RepaintBoundary(child: evaluateWidgetExpression((tree.flutterCupertinoRepaintBoundary.hasChild() ? tree.flutterCupertinoRepaintBoundary.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoRepaintBoundaryNamedWrap:
      return $l0.RepaintBoundary.wrap(evaluateRequiredWidgetExpression((tree.flutterCupertinoRepaintBoundaryNamedWrap.hasChild() ? tree.flutterCupertinoRepaintBoundaryNamedWrap.child : missing('child'))), (tree.flutterCupertinoRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterCupertinoRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterCupertinoRestorationScope:
      return $l0.RestorationScope(restorationId: (tree.flutterCupertinoRestorationScope.hasRestorationId() ? tree.flutterCupertinoRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoRestorationScope.hasChild() ? tree.flutterCupertinoRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoRootRestorationScope:
      return $l0.RootRestorationScope(restorationId: (tree.flutterCupertinoRootRestorationScope.hasRestorationId() ? tree.flutterCupertinoRootRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoRootRestorationScope.hasChild() ? tree.flutterCupertinoRootRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoRotatedBox:
      return $l0.RotatedBox(quarterTurns: (tree.flutterCupertinoRotatedBox.hasQuarterTurns() ? tree.flutterCupertinoRotatedBox.quarterTurns : missing('quarterTurns')), child: evaluateWidgetExpression((tree.flutterCupertinoRotatedBox.hasChild() ? tree.flutterCupertinoRotatedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoRow:
      return $l0.Row(children: tree.flutterCupertinoRow.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoSafeArea:
      return $l0.SafeArea(left: (tree.flutterCupertinoSafeArea.hasLeft() ? tree.flutterCupertinoSafeArea.left : true), top: (tree.flutterCupertinoSafeArea.hasTop() ? tree.flutterCupertinoSafeArea.top : true), right: (tree.flutterCupertinoSafeArea.hasRight() ? tree.flutterCupertinoSafeArea.right : true), bottom: (tree.flutterCupertinoSafeArea.hasBottom() ? tree.flutterCupertinoSafeArea.bottom : true), maintainBottomViewPadding: (tree.flutterCupertinoSafeArea.hasMaintainBottomViewPadding() ? tree.flutterCupertinoSafeArea.maintainBottomViewPadding : false), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoSafeArea.hasChild() ? tree.flutterCupertinoSafeArea.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoScrollNotificationObserver:
      return $l0.ScrollNotificationObserver(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoScrollNotificationObserver.hasChild() ? tree.flutterCupertinoScrollNotificationObserver.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoSelectionContainerNamedDisabled:
      return $l0.SelectionContainer.disabled(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoSelectionContainerNamedDisabled.hasChild() ? tree.flutterCupertinoSelectionContainerNamedDisabled.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoSemantics:
      return $l0.Semantics(child: evaluateWidgetExpression((tree.flutterCupertinoSemantics.hasChild() ? tree.flutterCupertinoSemantics.child : null)), container: (tree.flutterCupertinoSemantics.hasContainer() ? tree.flutterCupertinoSemantics.container : false), explicitChildNodes: (tree.flutterCupertinoSemantics.hasExplicitChildNodes() ? tree.flutterCupertinoSemantics.explicitChildNodes : false), excludeSemantics: (tree.flutterCupertinoSemantics.hasExcludeSemantics() ? tree.flutterCupertinoSemantics.excludeSemantics : false), blockUserActions: (tree.flutterCupertinoSemantics.hasBlockUserActions() ? tree.flutterCupertinoSemantics.blockUserActions : false), enabled: (tree.flutterCupertinoSemantics.hasEnabled() ? tree.flutterCupertinoSemantics.enabled : null), checked: (tree.flutterCupertinoSemantics.hasChecked() ? tree.flutterCupertinoSemantics.checked : null), mixed: (tree.flutterCupertinoSemantics.hasMixed() ? tree.flutterCupertinoSemantics.mixed : null), selected: (tree.flutterCupertinoSemantics.hasSelected() ? tree.flutterCupertinoSemantics.selected : null), toggled: (tree.flutterCupertinoSemantics.hasToggled() ? tree.flutterCupertinoSemantics.toggled : null), button: (tree.flutterCupertinoSemantics.hasButton() ? tree.flutterCupertinoSemantics.button : null), slider: (tree.flutterCupertinoSemantics.hasSlider() ? tree.flutterCupertinoSemantics.slider : null), keyboardKey: (tree.flutterCupertinoSemantics.hasKeyboardKey() ? tree.flutterCupertinoSemantics.keyboardKey : null), link: (tree.flutterCupertinoSemantics.hasLink() ? tree.flutterCupertinoSemantics.link : null), header: (tree.flutterCupertinoSemantics.hasHeader() ? tree.flutterCupertinoSemantics.header : null), textField: (tree.flutterCupertinoSemantics.hasTextField() ? tree.flutterCupertinoSemantics.textField : null), readOnly: (tree.flutterCupertinoSemantics.hasReadOnly() ? tree.flutterCupertinoSemantics.readOnly : null), focusable: (tree.flutterCupertinoSemantics.hasFocusable() ? tree.flutterCupertinoSemantics.focusable : null), focused: (tree.flutterCupertinoSemantics.hasFocused() ? tree.flutterCupertinoSemantics.focused : null), inMutuallyExclusiveGroup: (tree.flutterCupertinoSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterCupertinoSemantics.inMutuallyExclusiveGroup : null), obscured: (tree.flutterCupertinoSemantics.hasObscured() ? tree.flutterCupertinoSemantics.obscured : null), multiline: (tree.flutterCupertinoSemantics.hasMultiline() ? tree.flutterCupertinoSemantics.multiline : null), scopesRoute: (tree.flutterCupertinoSemantics.hasScopesRoute() ? tree.flutterCupertinoSemantics.scopesRoute : null), namesRoute: (tree.flutterCupertinoSemantics.hasNamesRoute() ? tree.flutterCupertinoSemantics.namesRoute : null), hidden: (tree.flutterCupertinoSemantics.hasHidden() ? tree.flutterCupertinoSemantics.hidden : null), image: (tree.flutterCupertinoSemantics.hasImage() ? tree.flutterCupertinoSemantics.image : null), liveRegion: (tree.flutterCupertinoSemantics.hasLiveRegion() ? tree.flutterCupertinoSemantics.liveRegion : null), maxValueLength: (tree.flutterCupertinoSemantics.hasMaxValueLength() ? tree.flutterCupertinoSemantics.maxValueLength : null), currentValueLength: (tree.flutterCupertinoSemantics.hasCurrentValueLength() ? tree.flutterCupertinoSemantics.currentValueLength : null), label: (tree.flutterCupertinoSemantics.hasLabel() ? tree.flutterCupertinoSemantics.label : null), value: (tree.flutterCupertinoSemantics.hasValue() ? tree.flutterCupertinoSemantics.value : null), increasedValue: (tree.flutterCupertinoSemantics.hasIncreasedValue() ? tree.flutterCupertinoSemantics.increasedValue : null), decreasedValue: (tree.flutterCupertinoSemantics.hasDecreasedValue() ? tree.flutterCupertinoSemantics.decreasedValue : null), hint: (tree.flutterCupertinoSemantics.hasHint() ? tree.flutterCupertinoSemantics.hint : null), tooltip: (tree.flutterCupertinoSemantics.hasTooltip() ? tree.flutterCupertinoSemantics.tooltip : null), onTapHint: (tree.flutterCupertinoSemantics.hasOnTapHint() ? tree.flutterCupertinoSemantics.onTapHint : null), onLongPressHint: (tree.flutterCupertinoSemantics.hasOnLongPressHint() ? tree.flutterCupertinoSemantics.onLongPressHint : null));
    case proto.WidgetExpression_Result.flutterCupertinoSemanticsDebugger:
      return $l0.SemanticsDebugger(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoSemanticsDebugger.hasChild() ? tree.flutterCupertinoSemanticsDebugger.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoSharedAppData:
      return $l0.SharedAppData(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoSharedAppData.hasChild() ? tree.flutterCupertinoSharedAppData.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoShortcutRegistrar:
      return $l0.ShortcutRegistrar(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoShortcutRegistrar.hasChild() ? tree.flutterCupertinoShortcutRegistrar.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoSingleChildScrollView:
      return $l0.SingleChildScrollView(reverse: (tree.flutterCupertinoSingleChildScrollView.hasReverse() ? tree.flutterCupertinoSingleChildScrollView.reverse : false), primary: (tree.flutterCupertinoSingleChildScrollView.hasPrimary() ? tree.flutterCupertinoSingleChildScrollView.primary : null), child: evaluateWidgetExpression((tree.flutterCupertinoSingleChildScrollView.hasChild() ? tree.flutterCupertinoSingleChildScrollView.child : null)), restorationId: (tree.flutterCupertinoSingleChildScrollView.hasRestorationId() ? tree.flutterCupertinoSingleChildScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterCupertinoSizeChangedLayoutNotifier:
      return $l0.SizeChangedLayoutNotifier(child: evaluateWidgetExpression((tree.flutterCupertinoSizeChangedLayoutNotifier.hasChild() ? tree.flutterCupertinoSizeChangedLayoutNotifier.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSizedBox:
      return $l0.SizedBox(width: (tree.flutterCupertinoSizedBox.hasWidth() ? tree.flutterCupertinoSizedBox.width : null), height: (tree.flutterCupertinoSizedBox.hasHeight() ? tree.flutterCupertinoSizedBox.height : null), child: evaluateWidgetExpression((tree.flutterCupertinoSizedBox.hasChild() ? tree.flutterCupertinoSizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSizedBoxNamedExpand:
      return $l0.SizedBox.expand(child: evaluateWidgetExpression((tree.flutterCupertinoSizedBoxNamedExpand.hasChild() ? tree.flutterCupertinoSizedBoxNamedExpand.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSizedBoxNamedFromSize:
      return $l0.SizedBox.fromSize(child: evaluateWidgetExpression((tree.flutterCupertinoSizedBoxNamedFromSize.hasChild() ? tree.flutterCupertinoSizedBoxNamedFromSize.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSizedBoxNamedShrink:
      return $l0.SizedBox.shrink(child: evaluateWidgetExpression((tree.flutterCupertinoSizedBoxNamedShrink.hasChild() ? tree.flutterCupertinoSizedBoxNamedShrink.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSizedBoxNamedSquare:
      return $l0.SizedBox.square(child: evaluateWidgetExpression((tree.flutterCupertinoSizedBoxNamedSquare.hasChild() ? tree.flutterCupertinoSizedBoxNamedSquare.child : null)), dimension: (tree.flutterCupertinoSizedBoxNamedSquare.hasDimension() ? tree.flutterCupertinoSizedBoxNamedSquare.dimension : null));
    case proto.WidgetExpression_Result.flutterCupertinoSliverConstrainedCrossAxis:
      return $l0.SliverConstrainedCrossAxis(maxExtent: (tree.flutterCupertinoSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterCupertinoSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')), sliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverConstrainedCrossAxis.hasSliver() ? tree.flutterCupertinoSliverConstrainedCrossAxis.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterCupertinoSliverCrossAxisExpanded:
      return $l0.SliverCrossAxisExpanded(flex: (tree.flutterCupertinoSliverCrossAxisExpanded.hasFlex() ? tree.flutterCupertinoSliverCrossAxisExpanded.flex : missing('flex')), sliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverCrossAxisExpanded.hasSliver() ? tree.flutterCupertinoSliverCrossAxisExpanded.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterCupertinoSliverCrossAxisGroup:
      return $l0.SliverCrossAxisGroup(slivers: tree.flutterCupertinoSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoSliverFillRemaining:
      return $l0.SliverFillRemaining(child: evaluateWidgetExpression((tree.flutterCupertinoSliverFillRemaining.hasChild() ? tree.flutterCupertinoSliverFillRemaining.child : null)), hasScrollBody: (tree.flutterCupertinoSliverFillRemaining.hasHasScrollBody() ? tree.flutterCupertinoSliverFillRemaining.hasScrollBody : true), fillOverscroll: (tree.flutterCupertinoSliverFillRemaining.hasFillOverscroll() ? tree.flutterCupertinoSliverFillRemaining.fillOverscroll : false));
    case proto.WidgetExpression_Result.flutterCupertinoSliverFixedExtentListNamedList:
      return $l0.SliverFixedExtentList.list(children: tree.flutterCupertinoSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), itemExtent: (tree.flutterCupertinoSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterCupertinoSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')), addAutomaticKeepAlives: (tree.flutterCupertinoSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoSliverFixedExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterCupertinoSliverFixedExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterCupertinoSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterCupertinoSliverGridNamedCount:
      return $l0.SliverGrid.count(crossAxisCount: (tree.flutterCupertinoSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterCupertinoSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterCupertinoSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterCupertinoSliverGridNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterCupertinoSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterCupertinoSliverGridNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterCupertinoSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterCupertinoSliverGridNamedCount.childAspectRatio : 1.0), children: tree.flutterCupertinoSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoSliverGridNamedExtent:
      return $l0.SliverGrid.extent(maxCrossAxisExtent: (tree.flutterCupertinoSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterCupertinoSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterCupertinoSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterCupertinoSliverGridNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterCupertinoSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterCupertinoSliverGridNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterCupertinoSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterCupertinoSliverGridNamedExtent.childAspectRatio : 1.0), children: tree.flutterCupertinoSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoSliverIgnorePointer:
      return $l0.SliverIgnorePointer(ignoring: (tree.flutterCupertinoSliverIgnorePointer.hasIgnoring() ? tree.flutterCupertinoSliverIgnorePointer.ignoring : true), sliver: evaluateWidgetExpression((tree.flutterCupertinoSliverIgnorePointer.hasSliver() ? tree.flutterCupertinoSliverIgnorePointer.sliver : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSliverListNamedList:
      return $l0.SliverList.list(children: tree.flutterCupertinoSliverListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), addAutomaticKeepAlives: (tree.flutterCupertinoSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoSliverListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterCupertinoSliverListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterCupertinoSliverListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterCupertinoSliverMainAxisGroup:
      return $l0.SliverMainAxisGroup(slivers: tree.flutterCupertinoSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoSliverOffstage:
      return $l0.SliverOffstage(offstage: (tree.flutterCupertinoSliverOffstage.hasOffstage() ? tree.flutterCupertinoSliverOffstage.offstage : true), sliver: evaluateWidgetExpression((tree.flutterCupertinoSliverOffstage.hasSliver() ? tree.flutterCupertinoSliverOffstage.sliver : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSliverOpacity:
      return $l0.SliverOpacity(opacity: (tree.flutterCupertinoSliverOpacity.hasOpacity() ? tree.flutterCupertinoSliverOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterCupertinoSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterCupertinoSliverOpacity.alwaysIncludeSemantics : false), sliver: evaluateWidgetExpression((tree.flutterCupertinoSliverOpacity.hasSliver() ? tree.flutterCupertinoSliverOpacity.sliver : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSliverPrototypeExtentListNamedList:
      return $l0.SliverPrototypeExtentList.list(children: tree.flutterCupertinoSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), prototypeItem: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverPrototypeExtentListNamedList.hasPrototypeItem() ? tree.flutterCupertinoSliverPrototypeExtentListNamedList.prototypeItem : missing('prototypeItem'))), addAutomaticKeepAlives: (tree.flutterCupertinoSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterCupertinoSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterCupertinoSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterCupertinoSliverPrototypeExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterCupertinoSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterCupertinoSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterCupertinoSliverSafeArea:
      return $l0.SliverSafeArea(left: (tree.flutterCupertinoSliverSafeArea.hasLeft() ? tree.flutterCupertinoSliverSafeArea.left : true), top: (tree.flutterCupertinoSliverSafeArea.hasTop() ? tree.flutterCupertinoSliverSafeArea.top : true), right: (tree.flutterCupertinoSliverSafeArea.hasRight() ? tree.flutterCupertinoSliverSafeArea.right : true), bottom: (tree.flutterCupertinoSliverSafeArea.hasBottom() ? tree.flutterCupertinoSliverSafeArea.bottom : true), sliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverSafeArea.hasSliver() ? tree.flutterCupertinoSliverSafeArea.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterCupertinoSliverToBoxAdapter:
      return $l0.SliverToBoxAdapter(child: evaluateWidgetExpression((tree.flutterCupertinoSliverToBoxAdapter.hasChild() ? tree.flutterCupertinoSliverToBoxAdapter.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoSliverVisibility:
      return $l0.SliverVisibility(sliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverVisibility.hasSliver() ? tree.flutterCupertinoSliverVisibility.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverVisibility.hasReplacementSliver() ? tree.flutterCupertinoSliverVisibility.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterCupertinoSliverVisibility.hasVisible() ? tree.flutterCupertinoSliverVisibility.visible : true), maintainState: (tree.flutterCupertinoSliverVisibility.hasMaintainState() ? tree.flutterCupertinoSliverVisibility.maintainState : false), maintainAnimation: (tree.flutterCupertinoSliverVisibility.hasMaintainAnimation() ? tree.flutterCupertinoSliverVisibility.maintainAnimation : false), maintainSize: (tree.flutterCupertinoSliverVisibility.hasMaintainSize() ? tree.flutterCupertinoSliverVisibility.maintainSize : false), maintainSemantics: (tree.flutterCupertinoSliverVisibility.hasMaintainSemantics() ? tree.flutterCupertinoSliverVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterCupertinoSliverVisibility.hasMaintainInteractivity() ? tree.flutterCupertinoSliverVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterCupertinoSliverVisibilityNamedMaintain:
      return $l0.SliverVisibility.maintain(sliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverVisibilityNamedMaintain.hasSliver() ? tree.flutterCupertinoSliverVisibilityNamedMaintain.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterCupertinoSliverVisibilityNamedMaintain.hasReplacementSliver() ? tree.flutterCupertinoSliverVisibilityNamedMaintain.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterCupertinoSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterCupertinoSliverVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterCupertinoSpacer:
      return $l0.Spacer(flex: (tree.flutterCupertinoSpacer.hasFlex() ? tree.flutterCupertinoSpacer.flex : 1));
    case proto.WidgetExpression_Result.flutterCupertinoStack:
      return $l0.Stack(children: tree.flutterCupertinoStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterCupertinoTable:
      return $l0.Table();
    case proto.WidgetExpression_Result.flutterCupertinoTableCell:
      return $l0.TableCell(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoTableCell.hasChild() ? tree.flutterCupertinoTableCell.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoTapRegion:
      return $l0.TapRegion(child: evaluateWidgetExpression((tree.flutterCupertinoTapRegion.hasChild() ? tree.flutterCupertinoTapRegion.child : null)), enabled: (tree.flutterCupertinoTapRegion.hasEnabled() ? tree.flutterCupertinoTapRegion.enabled : true), debugLabel: (tree.flutterCupertinoTapRegion.hasDebugLabel() ? tree.flutterCupertinoTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterCupertinoTapRegionSurface:
      return $l0.TapRegionSurface(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoTapRegionSurface.hasChild() ? tree.flutterCupertinoTapRegionSurface.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoText:
      return $l0.Text((tree.flutterCupertinoText.hasData() ? tree.flutterCupertinoText.data : missing('data')), softWrap: (tree.flutterCupertinoText.hasSoftWrap() ? tree.flutterCupertinoText.softWrap : null), textScaleFactor: (tree.flutterCupertinoText.hasTextScaleFactor() ? tree.flutterCupertinoText.textScaleFactor : null), maxLines: (tree.flutterCupertinoText.hasMaxLines() ? tree.flutterCupertinoText.maxLines : null), semanticsLabel: (tree.flutterCupertinoText.hasSemanticsLabel() ? tree.flutterCupertinoText.semanticsLabel : null));
    case proto.WidgetExpression_Result.flutterCupertinoTextFieldTapRegion:
      return $l0.TextFieldTapRegion(child: evaluateWidgetExpression((tree.flutterCupertinoTextFieldTapRegion.hasChild() ? tree.flutterCupertinoTextFieldTapRegion.child : null)), enabled: (tree.flutterCupertinoTextFieldTapRegion.hasEnabled() ? tree.flutterCupertinoTextFieldTapRegion.enabled : true), debugLabel: (tree.flutterCupertinoTextFieldTapRegion.hasDebugLabel() ? tree.flutterCupertinoTextFieldTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterCupertinoTextSelectionGestureDetector:
      return $l0.TextSelectionGestureDetector(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoTextSelectionGestureDetector.hasChild() ? tree.flutterCupertinoTextSelectionGestureDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoTexture:
      return $l0.Texture(textureId: (tree.flutterCupertinoTexture.hasTextureId() ? tree.flutterCupertinoTexture.textureId : missing('textureId')), freeze: (tree.flutterCupertinoTexture.hasFreeze_4() ? tree.flutterCupertinoTexture.freeze_4 : false));
    case proto.WidgetExpression_Result.flutterCupertinoTickerMode:
      return $l0.TickerMode(enabled: (tree.flutterCupertinoTickerMode.hasEnabled() ? tree.flutterCupertinoTickerMode.enabled : missing('enabled')), child: evaluateRequiredWidgetExpression((tree.flutterCupertinoTickerMode.hasChild() ? tree.flutterCupertinoTickerMode.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoTransformNamedFlip:
      return $l0.Transform.flip(flipX: (tree.flutterCupertinoTransformNamedFlip.hasFlipX() ? tree.flutterCupertinoTransformNamedFlip.flipX : false), flipY: (tree.flutterCupertinoTransformNamedFlip.hasFlipY() ? tree.flutterCupertinoTransformNamedFlip.flipY : false), transformHitTests: (tree.flutterCupertinoTransformNamedFlip.hasTransformHitTests() ? tree.flutterCupertinoTransformNamedFlip.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterCupertinoTransformNamedFlip.hasChild() ? tree.flutterCupertinoTransformNamedFlip.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoTransformNamedRotate:
      return $l0.Transform.rotate(angle: (tree.flutterCupertinoTransformNamedRotate.hasAngle() ? tree.flutterCupertinoTransformNamedRotate.angle : missing('angle')), transformHitTests: (tree.flutterCupertinoTransformNamedRotate.hasTransformHitTests() ? tree.flutterCupertinoTransformNamedRotate.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterCupertinoTransformNamedRotate.hasChild() ? tree.flutterCupertinoTransformNamedRotate.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoTransformNamedScale:
      return $l0.Transform.scale(scale: (tree.flutterCupertinoTransformNamedScale.hasScale() ? tree.flutterCupertinoTransformNamedScale.scale : null), scaleX: (tree.flutterCupertinoTransformNamedScale.hasScaleX() ? tree.flutterCupertinoTransformNamedScale.scaleX : null), scaleY: (tree.flutterCupertinoTransformNamedScale.hasScaleY() ? tree.flutterCupertinoTransformNamedScale.scaleY : null), transformHitTests: (tree.flutterCupertinoTransformNamedScale.hasTransformHitTests() ? tree.flutterCupertinoTransformNamedScale.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterCupertinoTransformNamedScale.hasChild() ? tree.flutterCupertinoTransformNamedScale.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoUiKitView:
      return $l0.UiKitView(viewType: (tree.flutterCupertinoUiKitView.hasViewType() ? tree.flutterCupertinoUiKitView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterCupertinoUnconstrainedBox:
      return $l0.UnconstrainedBox(child: evaluateWidgetExpression((tree.flutterCupertinoUnconstrainedBox.hasChild() ? tree.flutterCupertinoUnconstrainedBox.child : null)));
    case proto.WidgetExpression_Result.flutterCupertinoUnmanagedRestorationScope:
      return $l0.UnmanagedRestorationScope(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoUnmanagedRestorationScope.hasChild() ? tree.flutterCupertinoUnmanagedRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterCupertinoVisibility:
      return $l0.Visibility(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoVisibility.hasChild() ? tree.flutterCupertinoVisibility.child : missing('child'))), replacement: evaluateRequiredWidgetExpression((tree.flutterCupertinoVisibility.hasReplacement() ? tree.flutterCupertinoVisibility.replacement : missing('replacement'))), visible: (tree.flutterCupertinoVisibility.hasVisible() ? tree.flutterCupertinoVisibility.visible : true), maintainState: (tree.flutterCupertinoVisibility.hasMaintainState() ? tree.flutterCupertinoVisibility.maintainState : false), maintainAnimation: (tree.flutterCupertinoVisibility.hasMaintainAnimation() ? tree.flutterCupertinoVisibility.maintainAnimation : false), maintainSize: (tree.flutterCupertinoVisibility.hasMaintainSize() ? tree.flutterCupertinoVisibility.maintainSize : false), maintainSemantics: (tree.flutterCupertinoVisibility.hasMaintainSemantics() ? tree.flutterCupertinoVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterCupertinoVisibility.hasMaintainInteractivity() ? tree.flutterCupertinoVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterCupertinoVisibilityNamedMaintain:
      return $l0.Visibility.maintain(child: evaluateRequiredWidgetExpression((tree.flutterCupertinoVisibilityNamedMaintain.hasChild() ? tree.flutterCupertinoVisibilityNamedMaintain.child : missing('child'))), visible: (tree.flutterCupertinoVisibilityNamedMaintain.hasVisible() ? tree.flutterCupertinoVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterCupertinoWrap:
      return $l0.Wrap(spacing: (tree.flutterCupertinoWrap.hasSpacing() ? tree.flutterCupertinoWrap.spacing : 0.0), runSpacing: (tree.flutterCupertinoWrap.hasRunSpacing() ? tree.flutterCupertinoWrap.runSpacing : 0.0), children: tree.flutterCupertinoWrap.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialAboutDialog:
      return $l1.AboutDialog(applicationName: (tree.flutterMaterialAboutDialog.hasApplicationName() ? tree.flutterMaterialAboutDialog.applicationName : null), applicationVersion: (tree.flutterMaterialAboutDialog.hasApplicationVersion() ? tree.flutterMaterialAboutDialog.applicationVersion : null), applicationIcon: evaluateWidgetExpression((tree.flutterMaterialAboutDialog.hasApplicationIcon() ? tree.flutterMaterialAboutDialog.applicationIcon : null)), applicationLegalese: (tree.flutterMaterialAboutDialog.hasApplicationLegalese() ? tree.flutterMaterialAboutDialog.applicationLegalese : null), children: tree.flutterMaterialAboutDialog.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialAboutListTile:
      return $l1.AboutListTile(icon: evaluateWidgetExpression((tree.flutterMaterialAboutListTile.hasIcon() ? tree.flutterMaterialAboutListTile.icon : null)), child: evaluateWidgetExpression((tree.flutterMaterialAboutListTile.hasChild() ? tree.flutterMaterialAboutListTile.child : null)), applicationName: (tree.flutterMaterialAboutListTile.hasApplicationName() ? tree.flutterMaterialAboutListTile.applicationName : null), applicationVersion: (tree.flutterMaterialAboutListTile.hasApplicationVersion() ? tree.flutterMaterialAboutListTile.applicationVersion : null), applicationIcon: evaluateWidgetExpression((tree.flutterMaterialAboutListTile.hasApplicationIcon() ? tree.flutterMaterialAboutListTile.applicationIcon : null)), applicationLegalese: (tree.flutterMaterialAboutListTile.hasApplicationLegalese() ? tree.flutterMaterialAboutListTile.applicationLegalese : null), aboutBoxChildren: tree.flutterMaterialAboutListTile.aboutBoxChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), dense: (tree.flutterMaterialAboutListTile.hasDense() ? tree.flutterMaterialAboutListTile.dense : null));
    case proto.WidgetExpression_Result.flutterMaterialAbsorbPointer:
      return $l1.AbsorbPointer(absorbing: (tree.flutterMaterialAbsorbPointer.hasAbsorbing() ? tree.flutterMaterialAbsorbPointer.absorbing : true), child: evaluateWidgetExpression((tree.flutterMaterialAbsorbPointer.hasChild() ? tree.flutterMaterialAbsorbPointer.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialActionChip:
      return $l1.ActionChip(avatar: evaluateWidgetExpression((tree.flutterMaterialActionChip.hasAvatar() ? tree.flutterMaterialActionChip.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialActionChip.hasLabel() ? tree.flutterMaterialActionChip.label : missing('label'))), pressElevation: (tree.flutterMaterialActionChip.hasPressElevation() ? tree.flutterMaterialActionChip.pressElevation : null), tooltip: (tree.flutterMaterialActionChip.hasTooltip() ? tree.flutterMaterialActionChip.tooltip : null), autofocus: (tree.flutterMaterialActionChip.hasAutofocus() ? tree.flutterMaterialActionChip.autofocus : false), elevation: (tree.flutterMaterialActionChip.hasElevation() ? tree.flutterMaterialActionChip.elevation : null));
    case proto.WidgetExpression_Result.flutterMaterialActionChipNamedElevated:
      return $l1.ActionChip.elevated(avatar: evaluateWidgetExpression((tree.flutterMaterialActionChipNamedElevated.hasAvatar() ? tree.flutterMaterialActionChipNamedElevated.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialActionChipNamedElevated.hasLabel() ? tree.flutterMaterialActionChipNamedElevated.label : missing('label'))), pressElevation: (tree.flutterMaterialActionChipNamedElevated.hasPressElevation() ? tree.flutterMaterialActionChipNamedElevated.pressElevation : null), tooltip: (tree.flutterMaterialActionChipNamedElevated.hasTooltip() ? tree.flutterMaterialActionChipNamedElevated.tooltip : null), autofocus: (tree.flutterMaterialActionChipNamedElevated.hasAutofocus() ? tree.flutterMaterialActionChipNamedElevated.autofocus : false), elevation: (tree.flutterMaterialActionChipNamedElevated.hasElevation() ? tree.flutterMaterialActionChipNamedElevated.elevation : null));
    case proto.WidgetExpression_Result.flutterMaterialAlertDialog:
      return $l1.AlertDialog(icon: evaluateWidgetExpression((tree.flutterMaterialAlertDialog.hasIcon() ? tree.flutterMaterialAlertDialog.icon : null)), title: evaluateWidgetExpression((tree.flutterMaterialAlertDialog.hasTitle() ? tree.flutterMaterialAlertDialog.title : null)), content: evaluateWidgetExpression((tree.flutterMaterialAlertDialog.hasContent() ? tree.flutterMaterialAlertDialog.content : null)), actions: tree.flutterMaterialAlertDialog.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), actionsOverflowButtonSpacing: (tree.flutterMaterialAlertDialog.hasActionsOverflowButtonSpacing() ? tree.flutterMaterialAlertDialog.actionsOverflowButtonSpacing : null), elevation: (tree.flutterMaterialAlertDialog.hasElevation() ? tree.flutterMaterialAlertDialog.elevation : null), semanticLabel: (tree.flutterMaterialAlertDialog.hasSemanticLabel() ? tree.flutterMaterialAlertDialog.semanticLabel : null), scrollable: (tree.flutterMaterialAlertDialog.hasScrollable() ? tree.flutterMaterialAlertDialog.scrollable : false));
    case proto.WidgetExpression_Result.flutterMaterialAlertDialogNamedAdaptive:
      return $l1.AlertDialog.adaptive(icon: evaluateWidgetExpression((tree.flutterMaterialAlertDialogNamedAdaptive.hasIcon() ? tree.flutterMaterialAlertDialogNamedAdaptive.icon : null)), title: evaluateWidgetExpression((tree.flutterMaterialAlertDialogNamedAdaptive.hasTitle() ? tree.flutterMaterialAlertDialogNamedAdaptive.title : null)), content: evaluateWidgetExpression((tree.flutterMaterialAlertDialogNamedAdaptive.hasContent() ? tree.flutterMaterialAlertDialogNamedAdaptive.content : null)), actions: tree.flutterMaterialAlertDialogNamedAdaptive.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), actionsOverflowButtonSpacing: (tree.flutterMaterialAlertDialogNamedAdaptive.hasActionsOverflowButtonSpacing() ? tree.flutterMaterialAlertDialogNamedAdaptive.actionsOverflowButtonSpacing : null), elevation: (tree.flutterMaterialAlertDialogNamedAdaptive.hasElevation() ? tree.flutterMaterialAlertDialogNamedAdaptive.elevation : null), semanticLabel: (tree.flutterMaterialAlertDialogNamedAdaptive.hasSemanticLabel() ? tree.flutterMaterialAlertDialogNamedAdaptive.semanticLabel : null), scrollable: (tree.flutterMaterialAlertDialogNamedAdaptive.hasScrollable() ? tree.flutterMaterialAlertDialogNamedAdaptive.scrollable : missing('scrollable')));
    case proto.WidgetExpression_Result.flutterMaterialAlign:
      return $l1.Align(widthFactor: (tree.flutterMaterialAlign.hasWidthFactor() ? tree.flutterMaterialAlign.widthFactor : null), heightFactor: (tree.flutterMaterialAlign.hasHeightFactor() ? tree.flutterMaterialAlign.heightFactor : null), child: evaluateWidgetExpression((tree.flutterMaterialAlign.hasChild() ? tree.flutterMaterialAlign.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialAndroidView:
      return $l1.AndroidView(viewType: (tree.flutterMaterialAndroidView.hasViewType() ? tree.flutterMaterialAndroidView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterMaterialAppBar:
      return $l1.AppBar(leading: evaluateWidgetExpression((tree.flutterMaterialAppBar.hasLeading() ? tree.flutterMaterialAppBar.leading : null)), automaticallyImplyLeading: (tree.flutterMaterialAppBar.hasAutomaticallyImplyLeading() ? tree.flutterMaterialAppBar.automaticallyImplyLeading : true), title: evaluateWidgetExpression((tree.flutterMaterialAppBar.hasTitle() ? tree.flutterMaterialAppBar.title : null)), actions: tree.flutterMaterialAppBar.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: evaluateWidgetExpression((tree.flutterMaterialAppBar.hasFlexibleSpace() ? tree.flutterMaterialAppBar.flexibleSpace : null)), elevation: (tree.flutterMaterialAppBar.hasElevation() ? tree.flutterMaterialAppBar.elevation : null), scrolledUnderElevation: (tree.flutterMaterialAppBar.hasScrolledUnderElevation() ? tree.flutterMaterialAppBar.scrolledUnderElevation : null), primary: (tree.flutterMaterialAppBar.hasPrimary() ? tree.flutterMaterialAppBar.primary : true), centerTitle: (tree.flutterMaterialAppBar.hasCenterTitle() ? tree.flutterMaterialAppBar.centerTitle : null), excludeHeaderSemantics: (tree.flutterMaterialAppBar.hasExcludeHeaderSemantics() ? tree.flutterMaterialAppBar.excludeHeaderSemantics : false), titleSpacing: (tree.flutterMaterialAppBar.hasTitleSpacing() ? tree.flutterMaterialAppBar.titleSpacing : null), toolbarOpacity: (tree.flutterMaterialAppBar.hasToolbarOpacity() ? tree.flutterMaterialAppBar.toolbarOpacity : 1.0), bottomOpacity: (tree.flutterMaterialAppBar.hasBottomOpacity() ? tree.flutterMaterialAppBar.bottomOpacity : 1.0), toolbarHeight: (tree.flutterMaterialAppBar.hasToolbarHeight() ? tree.flutterMaterialAppBar.toolbarHeight : null), leadingWidth: (tree.flutterMaterialAppBar.hasLeadingWidth() ? tree.flutterMaterialAppBar.leadingWidth : null), forceMaterialTransparency: (tree.flutterMaterialAppBar.hasForceMaterialTransparency() ? tree.flutterMaterialAppBar.forceMaterialTransparency : false));
    case proto.WidgetExpression_Result.flutterMaterialAspectRatio:
      return $l1.AspectRatio(aspectRatio: (tree.flutterMaterialAspectRatio.hasAspectRatio() ? tree.flutterMaterialAspectRatio.aspectRatio : missing('aspectRatio')), child: evaluateWidgetExpression((tree.flutterMaterialAspectRatio.hasChild() ? tree.flutterMaterialAspectRatio.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialAutofillGroup:
      return $l1.AutofillGroup(child: evaluateRequiredWidgetExpression((tree.flutterMaterialAutofillGroup.hasChild() ? tree.flutterMaterialAutofillGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialAutomaticKeepAlive:
      return $l1.AutomaticKeepAlive(child: evaluateRequiredWidgetExpression((tree.flutterMaterialAutomaticKeepAlive.hasChild() ? tree.flutterMaterialAutomaticKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialBackButton:
      return $l1.BackButton();
    case proto.WidgetExpression_Result.flutterMaterialBackButtonIcon:
      return $l1.BackButtonIcon();
    case proto.WidgetExpression_Result.flutterMaterialBadge:
      return $l1.Badge(smallSize: (tree.flutterMaterialBadge.hasSmallSize() ? tree.flutterMaterialBadge.smallSize : null), largeSize: (tree.flutterMaterialBadge.hasLargeSize() ? tree.flutterMaterialBadge.largeSize : null), label: evaluateWidgetExpression((tree.flutterMaterialBadge.hasLabel() ? tree.flutterMaterialBadge.label : null)), isLabelVisible: (tree.flutterMaterialBadge.hasIsLabelVisible() ? tree.flutterMaterialBadge.isLabelVisible : true), child: evaluateWidgetExpression((tree.flutterMaterialBadge.hasChild() ? tree.flutterMaterialBadge.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialBadgeNamedCount:
      return $l1.Badge.count(smallSize: (tree.flutterMaterialBadgeNamedCount.hasSmallSize() ? tree.flutterMaterialBadgeNamedCount.smallSize : null), largeSize: (tree.flutterMaterialBadgeNamedCount.hasLargeSize() ? tree.flutterMaterialBadgeNamedCount.largeSize : null), count: (tree.flutterMaterialBadgeNamedCount.hasCount() ? tree.flutterMaterialBadgeNamedCount.count : missing('count')), isLabelVisible: (tree.flutterMaterialBadgeNamedCount.hasIsLabelVisible() ? tree.flutterMaterialBadgeNamedCount.isLabelVisible : true), child: evaluateWidgetExpression((tree.flutterMaterialBadgeNamedCount.hasChild() ? tree.flutterMaterialBadgeNamedCount.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialBlockSemantics:
      return $l1.BlockSemantics(blocking: (tree.flutterMaterialBlockSemantics.hasBlocking() ? tree.flutterMaterialBlockSemantics.blocking : true), child: evaluateWidgetExpression((tree.flutterMaterialBlockSemantics.hasChild() ? tree.flutterMaterialBlockSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialBottomAppBar:
      return $l1.BottomAppBar(elevation: (tree.flutterMaterialBottomAppBar.hasElevation() ? tree.flutterMaterialBottomAppBar.elevation : null), notchMargin: (tree.flutterMaterialBottomAppBar.hasNotchMargin() ? tree.flutterMaterialBottomAppBar.notchMargin : 4.0), child: evaluateWidgetExpression((tree.flutterMaterialBottomAppBar.hasChild() ? tree.flutterMaterialBottomAppBar.child : null)), height: (tree.flutterMaterialBottomAppBar.hasHeight() ? tree.flutterMaterialBottomAppBar.height : null));
    case proto.WidgetExpression_Result.flutterMaterialButtonBar:
      return $l1.ButtonBar(buttonMinWidth: (tree.flutterMaterialButtonBar.hasButtonMinWidth() ? tree.flutterMaterialButtonBar.buttonMinWidth : null), buttonHeight: (tree.flutterMaterialButtonBar.hasButtonHeight() ? tree.flutterMaterialButtonBar.buttonHeight : null), buttonAlignedDropdown: (tree.flutterMaterialButtonBar.hasButtonAlignedDropdown() ? tree.flutterMaterialButtonBar.buttonAlignedDropdown : null), overflowButtonSpacing: (tree.flutterMaterialButtonBar.hasOverflowButtonSpacing() ? tree.flutterMaterialButtonBar.overflowButtonSpacing : null), children: tree.flutterMaterialButtonBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialButtonTheme:
      return $l1.ButtonTheme(minWidth: (tree.flutterMaterialButtonTheme.hasMinWidth() ? tree.flutterMaterialButtonTheme.minWidth : 88.0), height: (tree.flutterMaterialButtonTheme.hasHeight() ? tree.flutterMaterialButtonTheme.height : 36.0), alignedDropdown: (tree.flutterMaterialButtonTheme.hasAlignedDropdown() ? tree.flutterMaterialButtonTheme.alignedDropdown : false), child: evaluateRequiredWidgetExpression((tree.flutterMaterialButtonTheme.hasChild() ? tree.flutterMaterialButtonTheme.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialCard:
      return $l1.Card(elevation: (tree.flutterMaterialCard.hasElevation() ? tree.flutterMaterialCard.elevation : null), borderOnForeground: (tree.flutterMaterialCard.hasBorderOnForeground() ? tree.flutterMaterialCard.borderOnForeground : true), child: evaluateWidgetExpression((tree.flutterMaterialCard.hasChild() ? tree.flutterMaterialCard.child : null)), semanticContainer: (tree.flutterMaterialCard.hasSemanticContainer() ? tree.flutterMaterialCard.semanticContainer : true));
    case proto.WidgetExpression_Result.flutterMaterialCenter:
      return $l1.Center(widthFactor: (tree.flutterMaterialCenter.hasWidthFactor() ? tree.flutterMaterialCenter.widthFactor : null), heightFactor: (tree.flutterMaterialCenter.hasHeightFactor() ? tree.flutterMaterialCenter.heightFactor : null), child: evaluateWidgetExpression((tree.flutterMaterialCenter.hasChild() ? tree.flutterMaterialCenter.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialCheckedModeBanner:
      return $l1.CheckedModeBanner(child: evaluateRequiredWidgetExpression((tree.flutterMaterialCheckedModeBanner.hasChild() ? tree.flutterMaterialCheckedModeBanner.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialCheckedPopupMenuItem:
      return $l1.CheckedPopupMenuItem(checked: (tree.flutterMaterialCheckedPopupMenuItem.hasChecked() ? tree.flutterMaterialCheckedPopupMenuItem.checked : false), enabled: (tree.flutterMaterialCheckedPopupMenuItem.hasEnabled() ? tree.flutterMaterialCheckedPopupMenuItem.enabled : true), height: (tree.flutterMaterialCheckedPopupMenuItem.hasHeight() ? tree.flutterMaterialCheckedPopupMenuItem.height : missing('height')), child: evaluateWidgetExpression((tree.flutterMaterialCheckedPopupMenuItem.hasChild() ? tree.flutterMaterialCheckedPopupMenuItem.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialChip:
      return $l1.Chip(avatar: evaluateWidgetExpression((tree.flutterMaterialChip.hasAvatar() ? tree.flutterMaterialChip.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialChip.hasLabel() ? tree.flutterMaterialChip.label : missing('label'))), deleteIcon: evaluateWidgetExpression((tree.flutterMaterialChip.hasDeleteIcon() ? tree.flutterMaterialChip.deleteIcon : null)), deleteButtonTooltipMessage: (tree.flutterMaterialChip.hasDeleteButtonTooltipMessage() ? tree.flutterMaterialChip.deleteButtonTooltipMessage : null), autofocus: (tree.flutterMaterialChip.hasAutofocus() ? tree.flutterMaterialChip.autofocus : false), elevation: (tree.flutterMaterialChip.hasElevation() ? tree.flutterMaterialChip.elevation : null));
    case proto.WidgetExpression_Result.flutterMaterialChoiceChip:
      return $l1.ChoiceChip(avatar: evaluateWidgetExpression((tree.flutterMaterialChoiceChip.hasAvatar() ? tree.flutterMaterialChoiceChip.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialChoiceChip.hasLabel() ? tree.flutterMaterialChoiceChip.label : missing('label'))), pressElevation: (tree.flutterMaterialChoiceChip.hasPressElevation() ? tree.flutterMaterialChoiceChip.pressElevation : null), selected: (tree.flutterMaterialChoiceChip.hasSelected() ? tree.flutterMaterialChoiceChip.selected : missing('selected')), tooltip: (tree.flutterMaterialChoiceChip.hasTooltip() ? tree.flutterMaterialChoiceChip.tooltip : null), autofocus: (tree.flutterMaterialChoiceChip.hasAutofocus() ? tree.flutterMaterialChoiceChip.autofocus : false), elevation: (tree.flutterMaterialChoiceChip.hasElevation() ? tree.flutterMaterialChoiceChip.elevation : null), showCheckmark: (tree.flutterMaterialChoiceChip.hasShowCheckmark() ? tree.flutterMaterialChoiceChip.showCheckmark : null));
    case proto.WidgetExpression_Result.flutterMaterialChoiceChipNamedElevated:
      return $l1.ChoiceChip.elevated(avatar: evaluateWidgetExpression((tree.flutterMaterialChoiceChipNamedElevated.hasAvatar() ? tree.flutterMaterialChoiceChipNamedElevated.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialChoiceChipNamedElevated.hasLabel() ? tree.flutterMaterialChoiceChipNamedElevated.label : missing('label'))), pressElevation: (tree.flutterMaterialChoiceChipNamedElevated.hasPressElevation() ? tree.flutterMaterialChoiceChipNamedElevated.pressElevation : null), selected: (tree.flutterMaterialChoiceChipNamedElevated.hasSelected() ? tree.flutterMaterialChoiceChipNamedElevated.selected : missing('selected')), tooltip: (tree.flutterMaterialChoiceChipNamedElevated.hasTooltip() ? tree.flutterMaterialChoiceChipNamedElevated.tooltip : null), autofocus: (tree.flutterMaterialChoiceChipNamedElevated.hasAutofocus() ? tree.flutterMaterialChoiceChipNamedElevated.autofocus : false), elevation: (tree.flutterMaterialChoiceChipNamedElevated.hasElevation() ? tree.flutterMaterialChoiceChipNamedElevated.elevation : null), showCheckmark: (tree.flutterMaterialChoiceChipNamedElevated.hasShowCheckmark() ? tree.flutterMaterialChoiceChipNamedElevated.showCheckmark : null));
    case proto.WidgetExpression_Result.flutterMaterialCircleAvatar:
      return $l1.CircleAvatar(child: evaluateWidgetExpression((tree.flutterMaterialCircleAvatar.hasChild() ? tree.flutterMaterialCircleAvatar.child : null)), radius: (tree.flutterMaterialCircleAvatar.hasRadius() ? tree.flutterMaterialCircleAvatar.radius : null), minRadius: (tree.flutterMaterialCircleAvatar.hasMinRadius() ? tree.flutterMaterialCircleAvatar.minRadius : null), maxRadius: (tree.flutterMaterialCircleAvatar.hasMaxRadius() ? tree.flutterMaterialCircleAvatar.maxRadius : null));
    case proto.WidgetExpression_Result.flutterMaterialCircularProgressIndicator:
      return $l1.CircularProgressIndicator(value: (tree.flutterMaterialCircularProgressIndicator.hasValue() ? tree.flutterMaterialCircularProgressIndicator.value : null), strokeWidth: (tree.flutterMaterialCircularProgressIndicator.hasStrokeWidth() ? tree.flutterMaterialCircularProgressIndicator.strokeWidth : 4.0), strokeAlign: (tree.flutterMaterialCircularProgressIndicator.hasStrokeAlign() ? tree.flutterMaterialCircularProgressIndicator.strokeAlign : missing('strokeAlign')), semanticsLabel: (tree.flutterMaterialCircularProgressIndicator.hasSemanticsLabel() ? tree.flutterMaterialCircularProgressIndicator.semanticsLabel : null), semanticsValue: (tree.flutterMaterialCircularProgressIndicator.hasSemanticsValue() ? tree.flutterMaterialCircularProgressIndicator.semanticsValue : null));
    case proto.WidgetExpression_Result.flutterMaterialCircularProgressIndicatorNamedAdaptive:
      return $l1.CircularProgressIndicator.adaptive(value: (tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.hasValue() ? tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.value : null), strokeWidth: (tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.hasStrokeWidth() ? tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.strokeWidth : 4.0), semanticsLabel: (tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.hasSemanticsLabel() ? tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.semanticsLabel : null), semanticsValue: (tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.hasSemanticsValue() ? tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.semanticsValue : null), strokeAlign: (tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.hasStrokeAlign() ? tree.flutterMaterialCircularProgressIndicatorNamedAdaptive.strokeAlign : missing('strokeAlign')));
    case proto.WidgetExpression_Result.flutterMaterialClipOval:
      return $l1.ClipOval(child: evaluateWidgetExpression((tree.flutterMaterialClipOval.hasChild() ? tree.flutterMaterialClipOval.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialClipPath:
      return $l1.ClipPath(child: evaluateWidgetExpression((tree.flutterMaterialClipPath.hasChild() ? tree.flutterMaterialClipPath.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialClipRRect:
      return $l1.ClipRRect(child: evaluateWidgetExpression((tree.flutterMaterialClipRRect.hasChild() ? tree.flutterMaterialClipRRect.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialClipRect:
      return $l1.ClipRect(child: evaluateWidgetExpression((tree.flutterMaterialClipRect.hasChild() ? tree.flutterMaterialClipRect.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialCloseButton:
      return $l1.CloseButton();
    case proto.WidgetExpression_Result.flutterMaterialCloseButtonIcon:
      return $l1.CloseButtonIcon();
    case proto.WidgetExpression_Result.flutterMaterialColumn:
      return $l1.Column(children: tree.flutterMaterialColumn.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialContainer:
      return $l1.Container(width: (tree.flutterMaterialContainer.hasWidth() ? tree.flutterMaterialContainer.width : null), height: (tree.flutterMaterialContainer.hasHeight() ? tree.flutterMaterialContainer.height : null), child: evaluateWidgetExpression((tree.flutterMaterialContainer.hasChild() ? tree.flutterMaterialContainer.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialCustomPaint:
      return $l1.CustomPaint(isComplex: (tree.flutterMaterialCustomPaint.hasIsComplex() ? tree.flutterMaterialCustomPaint.isComplex : false), willChange: (tree.flutterMaterialCustomPaint.hasWillChange() ? tree.flutterMaterialCustomPaint.willChange : false), child: evaluateWidgetExpression((tree.flutterMaterialCustomPaint.hasChild() ? tree.flutterMaterialCustomPaint.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialCustomScrollView:
      return $l1.CustomScrollView(reverse: (tree.flutterMaterialCustomScrollView.hasReverse() ? tree.flutterMaterialCustomScrollView.reverse : false), primary: (tree.flutterMaterialCustomScrollView.hasPrimary() ? tree.flutterMaterialCustomScrollView.primary : null), shrinkWrap: (tree.flutterMaterialCustomScrollView.hasShrinkWrap() ? tree.flutterMaterialCustomScrollView.shrinkWrap : false), anchor: (tree.flutterMaterialCustomScrollView.hasAnchor() ? tree.flutterMaterialCustomScrollView.anchor : 0.0), cacheExtent: (tree.flutterMaterialCustomScrollView.hasCacheExtent() ? tree.flutterMaterialCustomScrollView.cacheExtent : null), slivers: tree.flutterMaterialCustomScrollView.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterMaterialCustomScrollView.hasSemanticChildCount() ? tree.flutterMaterialCustomScrollView.semanticChildCount : null), restorationId: (tree.flutterMaterialCustomScrollView.hasRestorationId() ? tree.flutterMaterialCustomScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialDefaultSelectionStyle:
      return $l1.DefaultSelectionStyle(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDefaultSelectionStyle.hasChild() ? tree.flutterMaterialDefaultSelectionStyle.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDefaultSelectionStyleNamedFallback:
      return $l1.DefaultSelectionStyle.fallback();
    case proto.WidgetExpression_Result.flutterMaterialDefaultTabController:
      return $l1.DefaultTabController(length: (tree.flutterMaterialDefaultTabController.hasLength() ? tree.flutterMaterialDefaultTabController.length : missing('length')), initialIndex: (tree.flutterMaterialDefaultTabController.hasInitialIndex() ? tree.flutterMaterialDefaultTabController.initialIndex : 0), child: evaluateRequiredWidgetExpression((tree.flutterMaterialDefaultTabController.hasChild() ? tree.flutterMaterialDefaultTabController.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDefaultTextEditingShortcuts:
      return $l1.DefaultTextEditingShortcuts(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDefaultTextEditingShortcuts.hasChild() ? tree.flutterMaterialDefaultTextEditingShortcuts.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDefaultTextStyleNamedFallback:
      return $l1.DefaultTextStyle.fallback();
    case proto.WidgetExpression_Result.flutterMaterialDialog:
      return $l1.Dialog(elevation: (tree.flutterMaterialDialog.hasElevation() ? tree.flutterMaterialDialog.elevation : null), child: evaluateWidgetExpression((tree.flutterMaterialDialog.hasChild() ? tree.flutterMaterialDialog.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialDialogNamedFullscreen:
      return $l1.Dialog.fullscreen(child: evaluateWidgetExpression((tree.flutterMaterialDialogNamedFullscreen.hasChild() ? tree.flutterMaterialDialogNamedFullscreen.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialDisplayFeatureSubScreen:
      return $l1.DisplayFeatureSubScreen(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDisplayFeatureSubScreen.hasChild() ? tree.flutterMaterialDisplayFeatureSubScreen.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDivider:
      return $l1.Divider(height: (tree.flutterMaterialDivider.hasHeight() ? tree.flutterMaterialDivider.height : null), thickness: (tree.flutterMaterialDivider.hasThickness() ? tree.flutterMaterialDivider.thickness : null), indent: (tree.flutterMaterialDivider.hasIndent() ? tree.flutterMaterialDivider.indent : null), endIndent: (tree.flutterMaterialDivider.hasEndIndent() ? tree.flutterMaterialDivider.endIndent : null));
    case proto.WidgetExpression_Result.flutterMaterialDraggable:
      return $l1.Draggable(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDraggable.hasChild() ? tree.flutterMaterialDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterMaterialDraggable.hasFeedback() ? tree.flutterMaterialDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterMaterialDraggable.hasChildWhenDragging() ? tree.flutterMaterialDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterMaterialDraggable.hasMaxSimultaneousDrags() ? tree.flutterMaterialDraggable.maxSimultaneousDrags : null), ignoringFeedbackSemantics: (tree.flutterMaterialDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterMaterialDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterMaterialDraggable.hasIgnoringFeedbackPointer() ? tree.flutterMaterialDraggable.ignoringFeedbackPointer : true), rootOverlay: (tree.flutterMaterialDraggable.hasRootOverlay() ? tree.flutterMaterialDraggable.rootOverlay : false));
    case proto.WidgetExpression_Result.flutterMaterialDraggableScrollableActuator:
      return $l1.DraggableScrollableActuator(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDraggableScrollableActuator.hasChild() ? tree.flutterMaterialDraggableScrollableActuator.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDrawer:
      return $l1.Drawer(elevation: (tree.flutterMaterialDrawer.hasElevation() ? tree.flutterMaterialDrawer.elevation : null), width: (tree.flutterMaterialDrawer.hasWidth() ? tree.flutterMaterialDrawer.width : null), child: evaluateWidgetExpression((tree.flutterMaterialDrawer.hasChild() ? tree.flutterMaterialDrawer.child : null)), semanticLabel: (tree.flutterMaterialDrawer.hasSemanticLabel() ? tree.flutterMaterialDrawer.semanticLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialDrawerButton:
      return $l1.DrawerButton();
    case proto.WidgetExpression_Result.flutterMaterialDrawerButtonIcon:
      return $l1.DrawerButtonIcon();
    case proto.WidgetExpression_Result.flutterMaterialDrawerHeader:
      return $l1.DrawerHeader(child: evaluateWidgetExpression((tree.flutterMaterialDrawerHeader.hasChild() ? tree.flutterMaterialDrawerHeader.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialDropdownButtonHideUnderline:
      return $l1.DropdownButtonHideUnderline(child: evaluateRequiredWidgetExpression((tree.flutterMaterialDropdownButtonHideUnderline.hasChild() ? tree.flutterMaterialDropdownButtonHideUnderline.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialDropdownMenuItem:
      return $l1.DropdownMenuItem(enabled: (tree.flutterMaterialDropdownMenuItem.hasEnabled() ? tree.flutterMaterialDropdownMenuItem.enabled : true), child: evaluateRequiredWidgetExpression((tree.flutterMaterialDropdownMenuItem.hasChild() ? tree.flutterMaterialDropdownMenuItem.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialEndDrawerButton:
      return $l1.EndDrawerButton();
    case proto.WidgetExpression_Result.flutterMaterialEndDrawerButtonIcon:
      return $l1.EndDrawerButtonIcon();
    case proto.WidgetExpression_Result.flutterMaterialErrorWidgetNamedWithDetails:
      return $l1.ErrorWidget.withDetails(message: (tree.flutterMaterialErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterMaterialErrorWidgetNamedWithDetails.message : ''));
    case proto.WidgetExpression_Result.flutterMaterialExcludeFocus:
      return $l1.ExcludeFocus(excluding: (tree.flutterMaterialExcludeFocus.hasExcluding() ? tree.flutterMaterialExcludeFocus.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterMaterialExcludeFocus.hasChild() ? tree.flutterMaterialExcludeFocus.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialExcludeFocusTraversal:
      return $l1.ExcludeFocusTraversal(excluding: (tree.flutterMaterialExcludeFocusTraversal.hasExcluding() ? tree.flutterMaterialExcludeFocusTraversal.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterMaterialExcludeFocusTraversal.hasChild() ? tree.flutterMaterialExcludeFocusTraversal.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialExcludeSemantics:
      return $l1.ExcludeSemantics(excluding: (tree.flutterMaterialExcludeSemantics.hasExcluding() ? tree.flutterMaterialExcludeSemantics.excluding : true), child: evaluateWidgetExpression((tree.flutterMaterialExcludeSemantics.hasChild() ? tree.flutterMaterialExcludeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialExpanded:
      return $l1.Expanded(flex: (tree.flutterMaterialExpanded.hasFlex() ? tree.flutterMaterialExpanded.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterMaterialExpanded.hasChild() ? tree.flutterMaterialExpanded.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialExpansionPanelList:
      return $l1.ExpansionPanelList(elevation: (tree.flutterMaterialExpansionPanelList.hasElevation() ? tree.flutterMaterialExpansionPanelList.elevation : 2), materialGapSize: (tree.flutterMaterialExpansionPanelList.hasMaterialGapSize() ? tree.flutterMaterialExpansionPanelList.materialGapSize : 16.0));
    case proto.WidgetExpression_Result.flutterMaterialExpansionPanelListNamedRadio:
      return $l1.ExpansionPanelList.radio(elevation: (tree.flutterMaterialExpansionPanelListNamedRadio.hasElevation() ? tree.flutterMaterialExpansionPanelListNamedRadio.elevation : 2), materialGapSize: (tree.flutterMaterialExpansionPanelListNamedRadio.hasMaterialGapSize() ? tree.flutterMaterialExpansionPanelListNamedRadio.materialGapSize : 16.0));
    case proto.WidgetExpression_Result.flutterMaterialExpansionTile:
      return $l1.ExpansionTile(leading: evaluateWidgetExpression((tree.flutterMaterialExpansionTile.hasLeading() ? tree.flutterMaterialExpansionTile.leading : null)), title: evaluateRequiredWidgetExpression((tree.flutterMaterialExpansionTile.hasTitle() ? tree.flutterMaterialExpansionTile.title : missing('title'))), subtitle: evaluateWidgetExpression((tree.flutterMaterialExpansionTile.hasSubtitle() ? tree.flutterMaterialExpansionTile.subtitle : null)), children: tree.flutterMaterialExpansionTile.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), trailing: evaluateWidgetExpression((tree.flutterMaterialExpansionTile.hasTrailing() ? tree.flutterMaterialExpansionTile.trailing : null)), initiallyExpanded: (tree.flutterMaterialExpansionTile.hasInitiallyExpanded() ? tree.flutterMaterialExpansionTile.initiallyExpanded : false), maintainState: (tree.flutterMaterialExpansionTile.hasMaintainState() ? tree.flutterMaterialExpansionTile.maintainState : false));
    case proto.WidgetExpression_Result.flutterMaterialFadeInImageNamedAssetNetwork:
      return $l1.FadeInImage.assetNetwork(placeholder: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')), image: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.image : missing('image')), placeholderScale: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.placeholderScale : null), imageScale: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.imageScale : 1.0), excludeFromSemantics: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.excludeFromSemantics : false), imageSemanticLabel: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.imageSemanticLabel : null), width: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.width : null), height: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.height : null), matchTextDirection: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.matchTextDirection : false), placeholderCacheWidth: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.placeholderCacheWidth : null), placeholderCacheHeight: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.placeholderCacheHeight : null), imageCacheWidth: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.imageCacheWidth : null), imageCacheHeight: (tree.flutterMaterialFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterMaterialFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case proto.WidgetExpression_Result.flutterMaterialFittedBox:
      return $l1.FittedBox(child: evaluateWidgetExpression((tree.flutterMaterialFittedBox.hasChild() ? tree.flutterMaterialFittedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialFlexible:
      return $l1.Flexible(flex: (tree.flutterMaterialFlexible.hasFlex() ? tree.flutterMaterialFlexible.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterMaterialFlexible.hasChild() ? tree.flutterMaterialFlexible.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialFlexibleSpaceBar:
      return $l1.FlexibleSpaceBar(title: evaluateWidgetExpression((tree.flutterMaterialFlexibleSpaceBar.hasTitle() ? tree.flutterMaterialFlexibleSpaceBar.title : null)), background: evaluateWidgetExpression((tree.flutterMaterialFlexibleSpaceBar.hasBackground() ? tree.flutterMaterialFlexibleSpaceBar.background : null)), centerTitle: (tree.flutterMaterialFlexibleSpaceBar.hasCenterTitle() ? tree.flutterMaterialFlexibleSpaceBar.centerTitle : null), expandedTitleScale: (tree.flutterMaterialFlexibleSpaceBar.hasExpandedTitleScale() ? tree.flutterMaterialFlexibleSpaceBar.expandedTitleScale : 1.5));
    case proto.WidgetExpression_Result.flutterMaterialFlexibleSpaceBarSettings:
      return $l1.FlexibleSpaceBarSettings(toolbarOpacity: (tree.flutterMaterialFlexibleSpaceBarSettings.hasToolbarOpacity() ? tree.flutterMaterialFlexibleSpaceBarSettings.toolbarOpacity : missing('toolbarOpacity')), minExtent: (tree.flutterMaterialFlexibleSpaceBarSettings.hasMinExtent() ? tree.flutterMaterialFlexibleSpaceBarSettings.minExtent : missing('minExtent')), maxExtent: (tree.flutterMaterialFlexibleSpaceBarSettings.hasMaxExtent() ? tree.flutterMaterialFlexibleSpaceBarSettings.maxExtent : missing('maxExtent')), currentExtent: (tree.flutterMaterialFlexibleSpaceBarSettings.hasCurrentExtent() ? tree.flutterMaterialFlexibleSpaceBarSettings.currentExtent : missing('currentExtent')), child: evaluateRequiredWidgetExpression((tree.flutterMaterialFlexibleSpaceBarSettings.hasChild() ? tree.flutterMaterialFlexibleSpaceBarSettings.child : missing('child'))), isScrolledUnder: (tree.flutterMaterialFlexibleSpaceBarSettings.hasIsScrolledUnder() ? tree.flutterMaterialFlexibleSpaceBarSettings.isScrolledUnder : null));
    case proto.WidgetExpression_Result.flutterMaterialFlutterLogo:
      return $l1.FlutterLogo(size: (tree.flutterMaterialFlutterLogo.hasSize() ? tree.flutterMaterialFlutterLogo.size : null));
    case proto.WidgetExpression_Result.flutterMaterialFocus:
      return $l1.Focus(child: evaluateRequiredWidgetExpression((tree.flutterMaterialFocus.hasChild() ? tree.flutterMaterialFocus.child : missing('child'))), autofocus: (tree.flutterMaterialFocus.hasAutofocus() ? tree.flutterMaterialFocus.autofocus : false), canRequestFocus: (tree.flutterMaterialFocus.hasCanRequestFocus() ? tree.flutterMaterialFocus.canRequestFocus : null), skipTraversal: (tree.flutterMaterialFocus.hasSkipTraversal() ? tree.flutterMaterialFocus.skipTraversal : null), descendantsAreFocusable: (tree.flutterMaterialFocus.hasDescendantsAreFocusable() ? tree.flutterMaterialFocus.descendantsAreFocusable : null), descendantsAreTraversable: (tree.flutterMaterialFocus.hasDescendantsAreTraversable() ? tree.flutterMaterialFocus.descendantsAreTraversable : null), includeSemantics: (tree.flutterMaterialFocus.hasIncludeSemantics() ? tree.flutterMaterialFocus.includeSemantics : true), debugLabel: (tree.flutterMaterialFocus.hasDebugLabel() ? tree.flutterMaterialFocus.debugLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialFocusScope:
      return $l1.FocusScope(child: evaluateRequiredWidgetExpression((tree.flutterMaterialFocusScope.hasChild() ? tree.flutterMaterialFocusScope.child : missing('child'))), autofocus: (tree.flutterMaterialFocusScope.hasAutofocus() ? tree.flutterMaterialFocusScope.autofocus : false), canRequestFocus: (tree.flutterMaterialFocusScope.hasCanRequestFocus() ? tree.flutterMaterialFocusScope.canRequestFocus : null), skipTraversal: (tree.flutterMaterialFocusScope.hasSkipTraversal() ? tree.flutterMaterialFocusScope.skipTraversal : null), debugLabel: (tree.flutterMaterialFocusScope.hasDebugLabel() ? tree.flutterMaterialFocusScope.debugLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialFocusTraversalGroup:
      return $l1.FocusTraversalGroup(descendantsAreFocusable: (tree.flutterMaterialFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterMaterialFocusTraversalGroup.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterMaterialFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterMaterialFocusTraversalGroup.descendantsAreTraversable : true), child: evaluateRequiredWidgetExpression((tree.flutterMaterialFocusTraversalGroup.hasChild() ? tree.flutterMaterialFocusTraversalGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialFocusableActionDetector:
      return $l1.FocusableActionDetector(enabled: (tree.flutterMaterialFocusableActionDetector.hasEnabled() ? tree.flutterMaterialFocusableActionDetector.enabled : true), autofocus: (tree.flutterMaterialFocusableActionDetector.hasAutofocus() ? tree.flutterMaterialFocusableActionDetector.autofocus : false), descendantsAreFocusable: (tree.flutterMaterialFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterMaterialFocusableActionDetector.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterMaterialFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterMaterialFocusableActionDetector.descendantsAreTraversable : true), includeFocusSemantics: (tree.flutterMaterialFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterMaterialFocusableActionDetector.includeFocusSemantics : true), child: evaluateRequiredWidgetExpression((tree.flutterMaterialFocusableActionDetector.hasChild() ? tree.flutterMaterialFocusableActionDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialForm:
      return $l1.Form(child: evaluateRequiredWidgetExpression((tree.flutterMaterialForm.hasChild() ? tree.flutterMaterialForm.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialFractionallySizedBox:
      return $l1.FractionallySizedBox(widthFactor: (tree.flutterMaterialFractionallySizedBox.hasWidthFactor() ? tree.flutterMaterialFractionallySizedBox.widthFactor : null), heightFactor: (tree.flutterMaterialFractionallySizedBox.hasHeightFactor() ? tree.flutterMaterialFractionallySizedBox.heightFactor : null), child: evaluateWidgetExpression((tree.flutterMaterialFractionallySizedBox.hasChild() ? tree.flutterMaterialFractionallySizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialGestureDetector:
      return $l1.GestureDetector(child: evaluateWidgetExpression((tree.flutterMaterialGestureDetector.hasChild() ? tree.flutterMaterialGestureDetector.child : null)), excludeFromSemantics: (tree.flutterMaterialGestureDetector.hasExcludeFromSemantics() ? tree.flutterMaterialGestureDetector.excludeFromSemantics : false), trackpadScrollCausesScale: (tree.flutterMaterialGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterMaterialGestureDetector.trackpadScrollCausesScale : false));
    case proto.WidgetExpression_Result.flutterMaterialGridPaper:
      return $l1.GridPaper(interval: (tree.flutterMaterialGridPaper.hasInterval() ? tree.flutterMaterialGridPaper.interval : 100.0), divisions: (tree.flutterMaterialGridPaper.hasDivisions() ? tree.flutterMaterialGridPaper.divisions : 2), subdivisions: (tree.flutterMaterialGridPaper.hasSubdivisions() ? tree.flutterMaterialGridPaper.subdivisions : 5), child: evaluateWidgetExpression((tree.flutterMaterialGridPaper.hasChild() ? tree.flutterMaterialGridPaper.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialGridTile:
      return $l1.GridTile(header: evaluateWidgetExpression((tree.flutterMaterialGridTile.hasHeader() ? tree.flutterMaterialGridTile.header : null)), footer: evaluateWidgetExpression((tree.flutterMaterialGridTile.hasFooter() ? tree.flutterMaterialGridTile.footer : null)), child: evaluateRequiredWidgetExpression((tree.flutterMaterialGridTile.hasChild() ? tree.flutterMaterialGridTile.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialGridTileBar:
      return $l1.GridTileBar(leading: evaluateWidgetExpression((tree.flutterMaterialGridTileBar.hasLeading() ? tree.flutterMaterialGridTileBar.leading : null)), title: evaluateWidgetExpression((tree.flutterMaterialGridTileBar.hasTitle() ? tree.flutterMaterialGridTileBar.title : null)), subtitle: evaluateWidgetExpression((tree.flutterMaterialGridTileBar.hasSubtitle() ? tree.flutterMaterialGridTileBar.subtitle : null)), trailing: evaluateWidgetExpression((tree.flutterMaterialGridTileBar.hasTrailing() ? tree.flutterMaterialGridTileBar.trailing : null)));
    case proto.WidgetExpression_Result.flutterMaterialGridViewNamedCount:
      return $l1.GridView.count(reverse: (tree.flutterMaterialGridViewNamedCount.hasReverse() ? tree.flutterMaterialGridViewNamedCount.reverse : false), primary: (tree.flutterMaterialGridViewNamedCount.hasPrimary() ? tree.flutterMaterialGridViewNamedCount.primary : null), shrinkWrap: (tree.flutterMaterialGridViewNamedCount.hasShrinkWrap() ? tree.flutterMaterialGridViewNamedCount.shrinkWrap : false), crossAxisCount: (tree.flutterMaterialGridViewNamedCount.hasCrossAxisCount() ? tree.flutterMaterialGridViewNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterMaterialGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterMaterialGridViewNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterMaterialGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterMaterialGridViewNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterMaterialGridViewNamedCount.hasChildAspectRatio() ? tree.flutterMaterialGridViewNamedCount.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterMaterialGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterMaterialGridViewNamedCount.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterMaterialGridViewNamedCount.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterMaterialGridViewNamedCount.addSemanticIndexes : true), cacheExtent: (tree.flutterMaterialGridViewNamedCount.hasCacheExtent() ? tree.flutterMaterialGridViewNamedCount.cacheExtent : null), children: tree.flutterMaterialGridViewNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterMaterialGridViewNamedCount.hasSemanticChildCount() ? tree.flutterMaterialGridViewNamedCount.semanticChildCount : null), restorationId: (tree.flutterMaterialGridViewNamedCount.hasRestorationId() ? tree.flutterMaterialGridViewNamedCount.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialGridViewNamedExtent:
      return $l1.GridView.extent(reverse: (tree.flutterMaterialGridViewNamedExtent.hasReverse() ? tree.flutterMaterialGridViewNamedExtent.reverse : false), primary: (tree.flutterMaterialGridViewNamedExtent.hasPrimary() ? tree.flutterMaterialGridViewNamedExtent.primary : null), shrinkWrap: (tree.flutterMaterialGridViewNamedExtent.hasShrinkWrap() ? tree.flutterMaterialGridViewNamedExtent.shrinkWrap : false), maxCrossAxisExtent: (tree.flutterMaterialGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterMaterialGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterMaterialGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterMaterialGridViewNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterMaterialGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterMaterialGridViewNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterMaterialGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterMaterialGridViewNamedExtent.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterMaterialGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterMaterialGridViewNamedExtent.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterMaterialGridViewNamedExtent.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterMaterialGridViewNamedExtent.addSemanticIndexes : true), cacheExtent: (tree.flutterMaterialGridViewNamedExtent.hasCacheExtent() ? tree.flutterMaterialGridViewNamedExtent.cacheExtent : null), children: tree.flutterMaterialGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterMaterialGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterMaterialGridViewNamedExtent.semanticChildCount : null), restorationId: (tree.flutterMaterialGridViewNamedExtent.hasRestorationId() ? tree.flutterMaterialGridViewNamedExtent.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialHeroControllerScopeNamedNone:
      return $l1.HeroControllerScope.none(child: evaluateRequiredWidgetExpression((tree.flutterMaterialHeroControllerScopeNamedNone.hasChild() ? tree.flutterMaterialHeroControllerScopeNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialHeroMode:
      return $l1.HeroMode(child: evaluateRequiredWidgetExpression((tree.flutterMaterialHeroMode.hasChild() ? tree.flutterMaterialHeroMode.child : missing('child'))), enabled: (tree.flutterMaterialHeroMode.hasEnabled() ? tree.flutterMaterialHeroMode.enabled : true));
    case proto.WidgetExpression_Result.flutterMaterialHtmlElementView:
      return $l1.HtmlElementView(viewType: (tree.flutterMaterialHtmlElementView.hasViewType() ? tree.flutterMaterialHtmlElementView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterMaterialIgnorePointer:
      return $l1.IgnorePointer(ignoring: (tree.flutterMaterialIgnorePointer.hasIgnoring() ? tree.flutterMaterialIgnorePointer.ignoring : true), child: evaluateWidgetExpression((tree.flutterMaterialIgnorePointer.hasChild() ? tree.flutterMaterialIgnorePointer.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialImageNamedAsset:
      return $l1.Image.asset((tree.flutterMaterialImageNamedAsset.hasName() ? tree.flutterMaterialImageNamedAsset.name : missing('name')), semanticLabel: (tree.flutterMaterialImageNamedAsset.hasSemanticLabel() ? tree.flutterMaterialImageNamedAsset.semanticLabel : null), excludeFromSemantics: (tree.flutterMaterialImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterMaterialImageNamedAsset.excludeFromSemantics : false), scale: (tree.flutterMaterialImageNamedAsset.hasScale() ? tree.flutterMaterialImageNamedAsset.scale : null), width: (tree.flutterMaterialImageNamedAsset.hasWidth() ? tree.flutterMaterialImageNamedAsset.width : null), height: (tree.flutterMaterialImageNamedAsset.hasHeight() ? tree.flutterMaterialImageNamedAsset.height : null), matchTextDirection: (tree.flutterMaterialImageNamedAsset.hasMatchTextDirection() ? tree.flutterMaterialImageNamedAsset.matchTextDirection : false), gaplessPlayback: (tree.flutterMaterialImageNamedAsset.hasGaplessPlayback() ? tree.flutterMaterialImageNamedAsset.gaplessPlayback : false), isAntiAlias: (tree.flutterMaterialImageNamedAsset.hasIsAntiAlias() ? tree.flutterMaterialImageNamedAsset.isAntiAlias : false), package: (tree.flutterMaterialImageNamedAsset.hasPackage() ? tree.flutterMaterialImageNamedAsset.package : null), cacheWidth: (tree.flutterMaterialImageNamedAsset.hasCacheWidth() ? tree.flutterMaterialImageNamedAsset.cacheWidth : null), cacheHeight: (tree.flutterMaterialImageNamedAsset.hasCacheHeight() ? tree.flutterMaterialImageNamedAsset.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterMaterialImageNamedNetwork:
      return $l1.Image.network((tree.flutterMaterialImageNamedNetwork.hasSrc() ? tree.flutterMaterialImageNamedNetwork.src : missing('src')), scale: (tree.flutterMaterialImageNamedNetwork.hasScale() ? tree.flutterMaterialImageNamedNetwork.scale : 1.0), semanticLabel: (tree.flutterMaterialImageNamedNetwork.hasSemanticLabel() ? tree.flutterMaterialImageNamedNetwork.semanticLabel : null), excludeFromSemantics: (tree.flutterMaterialImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterMaterialImageNamedNetwork.excludeFromSemantics : false), width: (tree.flutterMaterialImageNamedNetwork.hasWidth() ? tree.flutterMaterialImageNamedNetwork.width : null), height: (tree.flutterMaterialImageNamedNetwork.hasHeight() ? tree.flutterMaterialImageNamedNetwork.height : null), matchTextDirection: (tree.flutterMaterialImageNamedNetwork.hasMatchTextDirection() ? tree.flutterMaterialImageNamedNetwork.matchTextDirection : false), gaplessPlayback: (tree.flutterMaterialImageNamedNetwork.hasGaplessPlayback() ? tree.flutterMaterialImageNamedNetwork.gaplessPlayback : false), isAntiAlias: (tree.flutterMaterialImageNamedNetwork.hasIsAntiAlias() ? tree.flutterMaterialImageNamedNetwork.isAntiAlias : false), cacheWidth: (tree.flutterMaterialImageNamedNetwork.hasCacheWidth() ? tree.flutterMaterialImageNamedNetwork.cacheWidth : null), cacheHeight: (tree.flutterMaterialImageNamedNetwork.hasCacheHeight() ? tree.flutterMaterialImageNamedNetwork.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterMaterialIndexedSemantics:
      return $l1.IndexedSemantics(index: (tree.flutterMaterialIndexedSemantics.hasIndex() ? tree.flutterMaterialIndexedSemantics.index : missing('index')), child: evaluateWidgetExpression((tree.flutterMaterialIndexedSemantics.hasChild() ? tree.flutterMaterialIndexedSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialIndexedStack:
      return $l1.IndexedStack(index: (tree.flutterMaterialIndexedStack.hasIndex() ? tree.flutterMaterialIndexedStack.index : 0), children: tree.flutterMaterialIndexedStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialInk:
      return $l1.Ink(width: (tree.flutterMaterialInk.hasWidth() ? tree.flutterMaterialInk.width : null), height: (tree.flutterMaterialInk.hasHeight() ? tree.flutterMaterialInk.height : null), child: evaluateWidgetExpression((tree.flutterMaterialInk.hasChild() ? tree.flutterMaterialInk.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialInkResponse:
      return $l1.InkResponse(child: evaluateWidgetExpression((tree.flutterMaterialInkResponse.hasChild() ? tree.flutterMaterialInkResponse.child : null)), containedInkWell: (tree.flutterMaterialInkResponse.hasContainedInkWell() ? tree.flutterMaterialInkResponse.containedInkWell : false), radius: (tree.flutterMaterialInkResponse.hasRadius() ? tree.flutterMaterialInkResponse.radius : null), enableFeedback: (tree.flutterMaterialInkResponse.hasEnableFeedback() ? tree.flutterMaterialInkResponse.enableFeedback : true), excludeFromSemantics: (tree.flutterMaterialInkResponse.hasExcludeFromSemantics() ? tree.flutterMaterialInkResponse.excludeFromSemantics : false), canRequestFocus: (tree.flutterMaterialInkResponse.hasCanRequestFocus() ? tree.flutterMaterialInkResponse.canRequestFocus : true), autofocus: (tree.flutterMaterialInkResponse.hasAutofocus() ? tree.flutterMaterialInkResponse.autofocus : false));
    case proto.WidgetExpression_Result.flutterMaterialInkWell:
      return $l1.InkWell(child: evaluateWidgetExpression((tree.flutterMaterialInkWell.hasChild() ? tree.flutterMaterialInkWell.child : null)), radius: (tree.flutterMaterialInkWell.hasRadius() ? tree.flutterMaterialInkWell.radius : null), enableFeedback: (tree.flutterMaterialInkWell.hasEnableFeedback() ? tree.flutterMaterialInkWell.enableFeedback : true), excludeFromSemantics: (tree.flutterMaterialInkWell.hasExcludeFromSemantics() ? tree.flutterMaterialInkWell.excludeFromSemantics : false), canRequestFocus: (tree.flutterMaterialInkWell.hasCanRequestFocus() ? tree.flutterMaterialInkWell.canRequestFocus : true), autofocus: (tree.flutterMaterialInkWell.hasAutofocus() ? tree.flutterMaterialInkWell.autofocus : false));
    case proto.WidgetExpression_Result.flutterMaterialInputChip:
      return $l1.InputChip(avatar: evaluateWidgetExpression((tree.flutterMaterialInputChip.hasAvatar() ? tree.flutterMaterialInputChip.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialInputChip.hasLabel() ? tree.flutterMaterialInputChip.label : missing('label'))), selected: (tree.flutterMaterialInputChip.hasSelected() ? tree.flutterMaterialInputChip.selected : false), isEnabled: (tree.flutterMaterialInputChip.hasIsEnabled() ? tree.flutterMaterialInputChip.isEnabled : true), deleteIcon: evaluateWidgetExpression((tree.flutterMaterialInputChip.hasDeleteIcon() ? tree.flutterMaterialInputChip.deleteIcon : null)), deleteButtonTooltipMessage: (tree.flutterMaterialInputChip.hasDeleteButtonTooltipMessage() ? tree.flutterMaterialInputChip.deleteButtonTooltipMessage : null), pressElevation: (tree.flutterMaterialInputChip.hasPressElevation() ? tree.flutterMaterialInputChip.pressElevation : null), tooltip: (tree.flutterMaterialInputChip.hasTooltip() ? tree.flutterMaterialInputChip.tooltip : null), autofocus: (tree.flutterMaterialInputChip.hasAutofocus() ? tree.flutterMaterialInputChip.autofocus : false), elevation: (tree.flutterMaterialInputChip.hasElevation() ? tree.flutterMaterialInputChip.elevation : null), showCheckmark: (tree.flutterMaterialInputChip.hasShowCheckmark() ? tree.flutterMaterialInputChip.showCheckmark : null));
    case proto.WidgetExpression_Result.flutterMaterialInteractiveViewer:
      return $l1.InteractiveViewer(constrained: (tree.flutterMaterialInteractiveViewer.hasConstrained() ? tree.flutterMaterialInteractiveViewer.constrained : true), maxScale: (tree.flutterMaterialInteractiveViewer.hasMaxScale() ? tree.flutterMaterialInteractiveViewer.maxScale : 2.5), minScale: (tree.flutterMaterialInteractiveViewer.hasMinScale() ? tree.flutterMaterialInteractiveViewer.minScale : 0.8), interactionEndFrictionCoefficient: (tree.flutterMaterialInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterMaterialInteractiveViewer.interactionEndFrictionCoefficient : missing('interactionEndFrictionCoefficient')), panEnabled: (tree.flutterMaterialInteractiveViewer.hasPanEnabled() ? tree.flutterMaterialInteractiveViewer.panEnabled : true), scaleEnabled: (tree.flutterMaterialInteractiveViewer.hasScaleEnabled() ? tree.flutterMaterialInteractiveViewer.scaleEnabled : true), scaleFactor: (tree.flutterMaterialInteractiveViewer.hasScaleFactor() ? tree.flutterMaterialInteractiveViewer.scaleFactor : missing('scaleFactor')), trackpadScrollCausesScale: (tree.flutterMaterialInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterMaterialInteractiveViewer.trackpadScrollCausesScale : false), child: evaluateRequiredWidgetExpression((tree.flutterMaterialInteractiveViewer.hasChild() ? tree.flutterMaterialInteractiveViewer.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialIntrinsicHeight:
      return $l1.IntrinsicHeight(child: evaluateWidgetExpression((tree.flutterMaterialIntrinsicHeight.hasChild() ? tree.flutterMaterialIntrinsicHeight.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialIntrinsicWidth:
      return $l1.IntrinsicWidth(stepWidth: (tree.flutterMaterialIntrinsicWidth.hasStepWidth() ? tree.flutterMaterialIntrinsicWidth.stepWidth : null), stepHeight: (tree.flutterMaterialIntrinsicWidth.hasStepHeight() ? tree.flutterMaterialIntrinsicWidth.stepHeight : null), child: evaluateWidgetExpression((tree.flutterMaterialIntrinsicWidth.hasChild() ? tree.flutterMaterialIntrinsicWidth.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialKeepAlive:
      return $l1.KeepAlive(keepAlive: (tree.flutterMaterialKeepAlive.hasKeepAlive() ? tree.flutterMaterialKeepAlive.keepAlive : missing('keepAlive')), child: evaluateRequiredWidgetExpression((tree.flutterMaterialKeepAlive.hasChild() ? tree.flutterMaterialKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialKeyedSubtree:
      return $l1.KeyedSubtree(child: evaluateRequiredWidgetExpression((tree.flutterMaterialKeyedSubtree.hasChild() ? tree.flutterMaterialKeyedSubtree.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialKeyedSubtreeNamedWrap:
      return $l1.KeyedSubtree.wrap(evaluateRequiredWidgetExpression((tree.flutterMaterialKeyedSubtreeNamedWrap.hasChild() ? tree.flutterMaterialKeyedSubtreeNamedWrap.child : missing('child'))), (tree.flutterMaterialKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterMaterialKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterMaterialLicensePage:
      return $l1.LicensePage(applicationName: (tree.flutterMaterialLicensePage.hasApplicationName() ? tree.flutterMaterialLicensePage.applicationName : null), applicationVersion: (tree.flutterMaterialLicensePage.hasApplicationVersion() ? tree.flutterMaterialLicensePage.applicationVersion : null), applicationIcon: evaluateWidgetExpression((tree.flutterMaterialLicensePage.hasApplicationIcon() ? tree.flutterMaterialLicensePage.applicationIcon : null)), applicationLegalese: (tree.flutterMaterialLicensePage.hasApplicationLegalese() ? tree.flutterMaterialLicensePage.applicationLegalese : null));
    case proto.WidgetExpression_Result.flutterMaterialLimitedBox:
      return $l1.LimitedBox(maxWidth: (tree.flutterMaterialLimitedBox.hasMaxWidth() ? tree.flutterMaterialLimitedBox.maxWidth : missing('maxWidth')), maxHeight: (tree.flutterMaterialLimitedBox.hasMaxHeight() ? tree.flutterMaterialLimitedBox.maxHeight : missing('maxHeight')), child: evaluateWidgetExpression((tree.flutterMaterialLimitedBox.hasChild() ? tree.flutterMaterialLimitedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialLinearProgressIndicator:
      return $l1.LinearProgressIndicator(value: (tree.flutterMaterialLinearProgressIndicator.hasValue() ? tree.flutterMaterialLinearProgressIndicator.value : null), minHeight: (tree.flutterMaterialLinearProgressIndicator.hasMinHeight() ? tree.flutterMaterialLinearProgressIndicator.minHeight : null), semanticsLabel: (tree.flutterMaterialLinearProgressIndicator.hasSemanticsLabel() ? tree.flutterMaterialLinearProgressIndicator.semanticsLabel : null), semanticsValue: (tree.flutterMaterialLinearProgressIndicator.hasSemanticsValue() ? tree.flutterMaterialLinearProgressIndicator.semanticsValue : null));
    case proto.WidgetExpression_Result.flutterMaterialListBody:
      return $l1.ListBody(reverse: (tree.flutterMaterialListBody.hasReverse() ? tree.flutterMaterialListBody.reverse : false), children: tree.flutterMaterialListBody.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialListTile:
      return $l1.ListTile(leading: evaluateWidgetExpression((tree.flutterMaterialListTile.hasLeading() ? tree.flutterMaterialListTile.leading : null)), title: evaluateWidgetExpression((tree.flutterMaterialListTile.hasTitle() ? tree.flutterMaterialListTile.title : null)), subtitle: evaluateWidgetExpression((tree.flutterMaterialListTile.hasSubtitle() ? tree.flutterMaterialListTile.subtitle : null)), trailing: evaluateWidgetExpression((tree.flutterMaterialListTile.hasTrailing() ? tree.flutterMaterialListTile.trailing : null)), isThreeLine: (tree.flutterMaterialListTile.hasIsThreeLine() ? tree.flutterMaterialListTile.isThreeLine : false), dense: (tree.flutterMaterialListTile.hasDense() ? tree.flutterMaterialListTile.dense : null), enabled: (tree.flutterMaterialListTile.hasEnabled() ? tree.flutterMaterialListTile.enabled : true), selected: (tree.flutterMaterialListTile.hasSelected() ? tree.flutterMaterialListTile.selected : false), autofocus: (tree.flutterMaterialListTile.hasAutofocus() ? tree.flutterMaterialListTile.autofocus : false), enableFeedback: (tree.flutterMaterialListTile.hasEnableFeedback() ? tree.flutterMaterialListTile.enableFeedback : null), horizontalTitleGap: (tree.flutterMaterialListTile.hasHorizontalTitleGap() ? tree.flutterMaterialListTile.horizontalTitleGap : null), minVerticalPadding: (tree.flutterMaterialListTile.hasMinVerticalPadding() ? tree.flutterMaterialListTile.minVerticalPadding : null), minLeadingWidth: (tree.flutterMaterialListTile.hasMinLeadingWidth() ? tree.flutterMaterialListTile.minLeadingWidth : null));
    case proto.WidgetExpression_Result.flutterMaterialListTileTheme:
      return $l1.ListTileTheme(dense: (tree.flutterMaterialListTileTheme.hasDense() ? tree.flutterMaterialListTileTheme.dense : null), enableFeedback: (tree.flutterMaterialListTileTheme.hasEnableFeedback() ? tree.flutterMaterialListTileTheme.enableFeedback : null), horizontalTitleGap: (tree.flutterMaterialListTileTheme.hasHorizontalTitleGap() ? tree.flutterMaterialListTileTheme.horizontalTitleGap : null), minVerticalPadding: (tree.flutterMaterialListTileTheme.hasMinVerticalPadding() ? tree.flutterMaterialListTileTheme.minVerticalPadding : null), minLeadingWidth: (tree.flutterMaterialListTileTheme.hasMinLeadingWidth() ? tree.flutterMaterialListTileTheme.minLeadingWidth : null), child: evaluateRequiredWidgetExpression((tree.flutterMaterialListTileTheme.hasChild() ? tree.flutterMaterialListTileTheme.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialListView:
      return $l1.ListView(reverse: (tree.flutterMaterialListView.hasReverse() ? tree.flutterMaterialListView.reverse : false), primary: (tree.flutterMaterialListView.hasPrimary() ? tree.flutterMaterialListView.primary : null), shrinkWrap: (tree.flutterMaterialListView.hasShrinkWrap() ? tree.flutterMaterialListView.shrinkWrap : false), itemExtent: (tree.flutterMaterialListView.hasItemExtent() ? tree.flutterMaterialListView.itemExtent : null), prototypeItem: evaluateWidgetExpression((tree.flutterMaterialListView.hasPrototypeItem() ? tree.flutterMaterialListView.prototypeItem : null)), addAutomaticKeepAlives: (tree.flutterMaterialListView.hasAddAutomaticKeepAlives() ? tree.flutterMaterialListView.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialListView.hasAddRepaintBoundaries() ? tree.flutterMaterialListView.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialListView.hasAddSemanticIndexes() ? tree.flutterMaterialListView.addSemanticIndexes : true), cacheExtent: (tree.flutterMaterialListView.hasCacheExtent() ? tree.flutterMaterialListView.cacheExtent : null), children: tree.flutterMaterialListView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterMaterialListView.hasSemanticChildCount() ? tree.flutterMaterialListView.semanticChildCount : null), restorationId: (tree.flutterMaterialListView.hasRestorationId() ? tree.flutterMaterialListView.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialListWheelScrollView:
      return $l1.ListWheelScrollView(diameterRatio: (tree.flutterMaterialListWheelScrollView.hasDiameterRatio() ? tree.flutterMaterialListWheelScrollView.diameterRatio : missing('diameterRatio')), perspective: (tree.flutterMaterialListWheelScrollView.hasPerspective() ? tree.flutterMaterialListWheelScrollView.perspective : missing('perspective')), offAxisFraction: (tree.flutterMaterialListWheelScrollView.hasOffAxisFraction() ? tree.flutterMaterialListWheelScrollView.offAxisFraction : 0.0), useMagnifier: (tree.flutterMaterialListWheelScrollView.hasUseMagnifier() ? tree.flutterMaterialListWheelScrollView.useMagnifier : false), magnification: (tree.flutterMaterialListWheelScrollView.hasMagnification() ? tree.flutterMaterialListWheelScrollView.magnification : 1.0), overAndUnderCenterOpacity: (tree.flutterMaterialListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterMaterialListWheelScrollView.overAndUnderCenterOpacity : 1.0), itemExtent: (tree.flutterMaterialListWheelScrollView.hasItemExtent() ? tree.flutterMaterialListWheelScrollView.itemExtent : missing('itemExtent')), squeeze: (tree.flutterMaterialListWheelScrollView.hasSqueeze() ? tree.flutterMaterialListWheelScrollView.squeeze : 1.0), renderChildrenOutsideViewport: (tree.flutterMaterialListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterMaterialListWheelScrollView.renderChildrenOutsideViewport : false), restorationId: (tree.flutterMaterialListWheelScrollView.hasRestorationId() ? tree.flutterMaterialListWheelScrollView.restorationId : null), children: tree.flutterMaterialListWheelScrollView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialListener:
      return $l1.Listener(child: evaluateWidgetExpression((tree.flutterMaterialListener.hasChild() ? tree.flutterMaterialListener.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialLongPressDraggable:
      return $l1.LongPressDraggable(child: evaluateRequiredWidgetExpression((tree.flutterMaterialLongPressDraggable.hasChild() ? tree.flutterMaterialLongPressDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterMaterialLongPressDraggable.hasFeedback() ? tree.flutterMaterialLongPressDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterMaterialLongPressDraggable.hasChildWhenDragging() ? tree.flutterMaterialLongPressDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterMaterialLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterMaterialLongPressDraggable.maxSimultaneousDrags : null), hapticFeedbackOnStart: (tree.flutterMaterialLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterMaterialLongPressDraggable.hapticFeedbackOnStart : true), ignoringFeedbackSemantics: (tree.flutterMaterialLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterMaterialLongPressDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterMaterialLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterMaterialLongPressDraggable.ignoringFeedbackPointer : true));
    case proto.WidgetExpression_Result.flutterMaterialLookupBoundary:
      return $l1.LookupBoundary(child: evaluateRequiredWidgetExpression((tree.flutterMaterialLookupBoundary.hasChild() ? tree.flutterMaterialLookupBoundary.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialMagnifier:
      return $l1.Magnifier();
    case proto.WidgetExpression_Result.flutterMaterialMaterial:
      return $l1.Material(elevation: (tree.flutterMaterialMaterial.hasElevation() ? tree.flutterMaterialMaterial.elevation : 0.0), borderOnForeground: (tree.flutterMaterialMaterial.hasBorderOnForeground() ? tree.flutterMaterialMaterial.borderOnForeground : true), child: evaluateWidgetExpression((tree.flutterMaterialMaterial.hasChild() ? tree.flutterMaterialMaterial.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialMaterialApp:
      return $l1.MaterialApp(home: evaluateWidgetExpression((tree.flutterMaterialMaterialApp.hasHome() ? tree.flutterMaterialMaterialApp.home : null)), initialRoute: (tree.flutterMaterialMaterialApp.hasInitialRoute() ? tree.flutterMaterialMaterialApp.initialRoute : null), title: (tree.flutterMaterialMaterialApp.hasTitle() ? tree.flutterMaterialMaterialApp.title : ''), debugShowMaterialGrid: (tree.flutterMaterialMaterialApp.hasDebugShowMaterialGrid() ? tree.flutterMaterialMaterialApp.debugShowMaterialGrid : false), showPerformanceOverlay: (tree.flutterMaterialMaterialApp.hasShowPerformanceOverlay() ? tree.flutterMaterialMaterialApp.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.flutterMaterialMaterialApp.hasCheckerboardRasterCacheImages() ? tree.flutterMaterialMaterialApp.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterMaterialMaterialApp.hasCheckerboardOffscreenLayers() ? tree.flutterMaterialMaterialApp.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.flutterMaterialMaterialApp.hasShowSemanticsDebugger() ? tree.flutterMaterialMaterialApp.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.flutterMaterialMaterialApp.hasDebugShowCheckedModeBanner() ? tree.flutterMaterialMaterialApp.debugShowCheckedModeBanner : true), restorationScopeId: (tree.flutterMaterialMaterialApp.hasRestorationScopeId() ? tree.flutterMaterialMaterialApp.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterMaterialMaterialAppNamedRouter:
      return $l1.MaterialApp.router(title: (tree.flutterMaterialMaterialAppNamedRouter.hasTitle() ? tree.flutterMaterialMaterialAppNamedRouter.title : ''), debugShowMaterialGrid: (tree.flutterMaterialMaterialAppNamedRouter.hasDebugShowMaterialGrid() ? tree.flutterMaterialMaterialAppNamedRouter.debugShowMaterialGrid : false), showPerformanceOverlay: (tree.flutterMaterialMaterialAppNamedRouter.hasShowPerformanceOverlay() ? tree.flutterMaterialMaterialAppNamedRouter.showPerformanceOverlay : false), checkerboardRasterCacheImages: (tree.flutterMaterialMaterialAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.flutterMaterialMaterialAppNamedRouter.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterMaterialMaterialAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.flutterMaterialMaterialAppNamedRouter.checkerboardOffscreenLayers : false), showSemanticsDebugger: (tree.flutterMaterialMaterialAppNamedRouter.hasShowSemanticsDebugger() ? tree.flutterMaterialMaterialAppNamedRouter.showSemanticsDebugger : false), debugShowCheckedModeBanner: (tree.flutterMaterialMaterialAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.flutterMaterialMaterialAppNamedRouter.debugShowCheckedModeBanner : true), restorationScopeId: (tree.flutterMaterialMaterialAppNamedRouter.hasRestorationScopeId() ? tree.flutterMaterialMaterialAppNamedRouter.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterMaterialMaterialBanner:
      return $l1.MaterialBanner(content: evaluateRequiredWidgetExpression((tree.flutterMaterialMaterialBanner.hasContent() ? tree.flutterMaterialMaterialBanner.content : missing('content'))), actions: tree.flutterMaterialMaterialBanner.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), elevation: (tree.flutterMaterialMaterialBanner.hasElevation() ? tree.flutterMaterialMaterialBanner.elevation : null), leading: evaluateWidgetExpression((tree.flutterMaterialMaterialBanner.hasLeading() ? tree.flutterMaterialMaterialBanner.leading : null)), forceActionsBelow: (tree.flutterMaterialMaterialBanner.hasForceActionsBelow() ? tree.flutterMaterialMaterialBanner.forceActionsBelow : false));
    case proto.WidgetExpression_Result.flutterMaterialMaterialBannerTheme:
      return $l1.MaterialBannerTheme(child: evaluateRequiredWidgetExpression((tree.flutterMaterialMaterialBannerTheme.hasChild() ? tree.flutterMaterialMaterialBannerTheme.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialMenuAcceleratorCallbackBinding:
      return $l1.MenuAcceleratorCallbackBinding(hasSubmenu: (tree.flutterMaterialMenuAcceleratorCallbackBinding.hasHasSubmenu() ? tree.flutterMaterialMenuAcceleratorCallbackBinding.hasSubmenu : false), child: evaluateRequiredWidgetExpression((tree.flutterMaterialMenuAcceleratorCallbackBinding.hasChild() ? tree.flutterMaterialMenuAcceleratorCallbackBinding.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialMenuAcceleratorLabel:
      return $l1.MenuAcceleratorLabel((tree.flutterMaterialMenuAcceleratorLabel.hasLabel() ? tree.flutterMaterialMenuAcceleratorLabel.label : missing('label')));
    case proto.WidgetExpression_Result.flutterMaterialMenuAnchor:
      return $l1.MenuAnchor(anchorTapClosesMenu: (tree.flutterMaterialMenuAnchor.hasAnchorTapClosesMenu() ? tree.flutterMaterialMenuAnchor.anchorTapClosesMenu : false), crossAxisUnconstrained: (tree.flutterMaterialMenuAnchor.hasCrossAxisUnconstrained() ? tree.flutterMaterialMenuAnchor.crossAxisUnconstrained : true), menuChildren: tree.flutterMaterialMenuAnchor.menuChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), child: evaluateWidgetExpression((tree.flutterMaterialMenuAnchor.hasChild() ? tree.flutterMaterialMenuAnchor.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialMenuBar:
      return $l1.MenuBar(children: tree.flutterMaterialMenuBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialMenuItemButton:
      return $l1.MenuItemButton(requestFocusOnHover: (tree.flutterMaterialMenuItemButton.hasRequestFocusOnHover() ? tree.flutterMaterialMenuItemButton.requestFocusOnHover : true), leadingIcon: evaluateWidgetExpression((tree.flutterMaterialMenuItemButton.hasLeadingIcon() ? tree.flutterMaterialMenuItemButton.leadingIcon : null)), trailingIcon: evaluateWidgetExpression((tree.flutterMaterialMenuItemButton.hasTrailingIcon() ? tree.flutterMaterialMenuItemButton.trailingIcon : null)), closeOnActivate: (tree.flutterMaterialMenuItemButton.hasCloseOnActivate() ? tree.flutterMaterialMenuItemButton.closeOnActivate : true), child: evaluateWidgetExpression((tree.flutterMaterialMenuItemButton.hasChild() ? tree.flutterMaterialMenuItemButton.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialMergeSemantics:
      return $l1.MergeSemantics(child: evaluateWidgetExpression((tree.flutterMaterialMergeSemantics.hasChild() ? tree.flutterMaterialMergeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialMergeableMaterial:
      return $l1.MergeableMaterial(elevation: (tree.flutterMaterialMergeableMaterial.hasElevation() ? tree.flutterMaterialMergeableMaterial.elevation : 2), hasDividers: (tree.flutterMaterialMergeableMaterial.hasHasDividers() ? tree.flutterMaterialMergeableMaterial.hasDividers : false));
    case proto.WidgetExpression_Result.flutterMaterialMetaData:
      return $l1.MetaData(child: evaluateWidgetExpression((tree.flutterMaterialMetaData.hasChild() ? tree.flutterMaterialMetaData.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialModalBarrier:
      return $l1.ModalBarrier(dismissible: (tree.flutterMaterialModalBarrier.hasDismissible() ? tree.flutterMaterialModalBarrier.dismissible : true), semanticsLabel: (tree.flutterMaterialModalBarrier.hasSemanticsLabel() ? tree.flutterMaterialModalBarrier.semanticsLabel : null), barrierSemanticsDismissible: (tree.flutterMaterialModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterMaterialModalBarrier.barrierSemanticsDismissible : true), semanticsOnTapHint: (tree.flutterMaterialModalBarrier.hasSemanticsOnTapHint() ? tree.flutterMaterialModalBarrier.semanticsOnTapHint : null));
    case proto.WidgetExpression_Result.flutterMaterialMouseRegion:
      return $l1.MouseRegion(opaque: (tree.flutterMaterialMouseRegion.hasOpaque() ? tree.flutterMaterialMouseRegion.opaque : true), child: evaluateWidgetExpression((tree.flutterMaterialMouseRegion.hasChild() ? tree.flutterMaterialMouseRegion.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialNavigationBar:
      return $l1.NavigationBar(selectedIndex: (tree.flutterMaterialNavigationBar.hasSelectedIndex() ? tree.flutterMaterialNavigationBar.selectedIndex : 0), destinations: tree.flutterMaterialNavigationBar.destinations.map((e) => evaluateRequiredWidgetExpression(e)).toList(), elevation: (tree.flutterMaterialNavigationBar.hasElevation() ? tree.flutterMaterialNavigationBar.elevation : null), height: (tree.flutterMaterialNavigationBar.hasHeight() ? tree.flutterMaterialNavigationBar.height : null));
    case proto.WidgetExpression_Result.flutterMaterialNavigationDestination:
      return $l1.NavigationDestination(icon: evaluateRequiredWidgetExpression((tree.flutterMaterialNavigationDestination.hasIcon() ? tree.flutterMaterialNavigationDestination.icon : missing('icon'))), selectedIcon: evaluateWidgetExpression((tree.flutterMaterialNavigationDestination.hasSelectedIcon() ? tree.flutterMaterialNavigationDestination.selectedIcon : null)), label: (tree.flutterMaterialNavigationDestination.hasLabel() ? tree.flutterMaterialNavigationDestination.label : missing('label')), tooltip: (tree.flutterMaterialNavigationDestination.hasTooltip() ? tree.flutterMaterialNavigationDestination.tooltip : null));
    case proto.WidgetExpression_Result.flutterMaterialNavigationDrawer:
      return $l1.NavigationDrawer(children: tree.flutterMaterialNavigationDrawer.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), elevation: (tree.flutterMaterialNavigationDrawer.hasElevation() ? tree.flutterMaterialNavigationDrawer.elevation : null), selectedIndex: (tree.flutterMaterialNavigationDrawer.hasSelectedIndex() ? tree.flutterMaterialNavigationDrawer.selectedIndex : 0));
    case proto.WidgetExpression_Result.flutterMaterialNavigationDrawerDestination:
      return $l1.NavigationDrawerDestination(icon: evaluateRequiredWidgetExpression((tree.flutterMaterialNavigationDrawerDestination.hasIcon() ? tree.flutterMaterialNavigationDrawerDestination.icon : missing('icon'))), selectedIcon: evaluateWidgetExpression((tree.flutterMaterialNavigationDrawerDestination.hasSelectedIcon() ? tree.flutterMaterialNavigationDrawerDestination.selectedIcon : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialNavigationDrawerDestination.hasLabel() ? tree.flutterMaterialNavigationDrawerDestination.label : missing('label'))));
    case proto.WidgetExpression_Result.flutterMaterialNavigationToolbar:
      return $l1.NavigationToolbar(leading: evaluateWidgetExpression((tree.flutterMaterialNavigationToolbar.hasLeading() ? tree.flutterMaterialNavigationToolbar.leading : null)), middle: evaluateWidgetExpression((tree.flutterMaterialNavigationToolbar.hasMiddle() ? tree.flutterMaterialNavigationToolbar.middle : null)), trailing: evaluateWidgetExpression((tree.flutterMaterialNavigationToolbar.hasTrailing() ? tree.flutterMaterialNavigationToolbar.trailing : null)), centerMiddle: (tree.flutterMaterialNavigationToolbar.hasCenterMiddle() ? tree.flutterMaterialNavigationToolbar.centerMiddle : true), middleSpacing: (tree.flutterMaterialNavigationToolbar.hasMiddleSpacing() ? tree.flutterMaterialNavigationToolbar.middleSpacing : missing('middleSpacing')));
    case proto.WidgetExpression_Result.flutterMaterialNavigator:
      return $l1.Navigator(initialRoute: (tree.flutterMaterialNavigator.hasInitialRoute() ? tree.flutterMaterialNavigator.initialRoute : null), reportsRouteUpdateToEngine: (tree.flutterMaterialNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterMaterialNavigator.reportsRouteUpdateToEngine : false), requestFocus: (tree.flutterMaterialNavigator.hasRequestFocus() ? tree.flutterMaterialNavigator.requestFocus : true), restorationScopeId: (tree.flutterMaterialNavigator.hasRestorationScopeId() ? tree.flutterMaterialNavigator.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterMaterialNotificationListener:
      return $l1.NotificationListener(child: evaluateRequiredWidgetExpression((tree.flutterMaterialNotificationListener.hasChild() ? tree.flutterMaterialNotificationListener.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialOffstage:
      return $l1.Offstage(offstage: (tree.flutterMaterialOffstage.hasOffstage() ? tree.flutterMaterialOffstage.offstage : true), child: evaluateWidgetExpression((tree.flutterMaterialOffstage.hasChild() ? tree.flutterMaterialOffstage.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialOpacity:
      return $l1.Opacity(opacity: (tree.flutterMaterialOpacity.hasOpacity() ? tree.flutterMaterialOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterMaterialOpacity.hasAlwaysIncludeSemantics() ? tree.flutterMaterialOpacity.alwaysIncludeSemantics : false), child: evaluateWidgetExpression((tree.flutterMaterialOpacity.hasChild() ? tree.flutterMaterialOpacity.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialOverflowBar:
      return $l1.OverflowBar(spacing: (tree.flutterMaterialOverflowBar.hasSpacing() ? tree.flutterMaterialOverflowBar.spacing : 0.0), overflowSpacing: (tree.flutterMaterialOverflowBar.hasOverflowSpacing() ? tree.flutterMaterialOverflowBar.overflowSpacing : 0.0), children: tree.flutterMaterialOverflowBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialOverflowBox:
      return $l1.OverflowBox(minWidth: (tree.flutterMaterialOverflowBox.hasMinWidth() ? tree.flutterMaterialOverflowBox.minWidth : null), maxWidth: (tree.flutterMaterialOverflowBox.hasMaxWidth() ? tree.flutterMaterialOverflowBox.maxWidth : null), minHeight: (tree.flutterMaterialOverflowBox.hasMinHeight() ? tree.flutterMaterialOverflowBox.minHeight : null), maxHeight: (tree.flutterMaterialOverflowBox.hasMaxHeight() ? tree.flutterMaterialOverflowBox.maxHeight : null), child: evaluateWidgetExpression((tree.flutterMaterialOverflowBox.hasChild() ? tree.flutterMaterialOverflowBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialOverlay:
      return $l1.Overlay();
    case proto.WidgetExpression_Result.flutterMaterialPageView:
      return $l1.PageView(reverse: (tree.flutterMaterialPageView.hasReverse() ? tree.flutterMaterialPageView.reverse : false), pageSnapping: (tree.flutterMaterialPageView.hasPageSnapping() ? tree.flutterMaterialPageView.pageSnapping : true), children: tree.flutterMaterialPageView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), allowImplicitScrolling: (tree.flutterMaterialPageView.hasAllowImplicitScrolling() ? tree.flutterMaterialPageView.allowImplicitScrolling : false), restorationId: (tree.flutterMaterialPageView.hasRestorationId() ? tree.flutterMaterialPageView.restorationId : null), padEnds: (tree.flutterMaterialPageView.hasPadEnds() ? tree.flutterMaterialPageView.padEnds : true));
    case proto.WidgetExpression_Result.flutterMaterialPerformanceOverlay:
      return $l1.PerformanceOverlay(optionsMask: (tree.flutterMaterialPerformanceOverlay.hasOptionsMask() ? tree.flutterMaterialPerformanceOverlay.optionsMask : 0), rasterizerThreshold: (tree.flutterMaterialPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterMaterialPerformanceOverlay.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterMaterialPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterMaterialPerformanceOverlay.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterMaterialPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterMaterialPerformanceOverlay.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterMaterialPerformanceOverlayNamedAllEnabled:
      return $l1.PerformanceOverlay.allEnabled(rasterizerThreshold: (tree.flutterMaterialPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterMaterialPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterMaterialPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterMaterialPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterMaterialPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterMaterialPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterMaterialPlaceholder:
      return $l1.Placeholder(strokeWidth: (tree.flutterMaterialPlaceholder.hasStrokeWidth() ? tree.flutterMaterialPlaceholder.strokeWidth : 2.0), fallbackWidth: (tree.flutterMaterialPlaceholder.hasFallbackWidth() ? tree.flutterMaterialPlaceholder.fallbackWidth : 400.0), fallbackHeight: (tree.flutterMaterialPlaceholder.hasFallbackHeight() ? tree.flutterMaterialPlaceholder.fallbackHeight : 400.0), child: evaluateWidgetExpression((tree.flutterMaterialPlaceholder.hasChild() ? tree.flutterMaterialPlaceholder.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialPlatformSelectableRegionContextMenu:
      return $l1.PlatformSelectableRegionContextMenu(child: evaluateRequiredWidgetExpression((tree.flutterMaterialPlatformSelectableRegionContextMenu.hasChild() ? tree.flutterMaterialPlatformSelectableRegionContextMenu.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialPopupMenuDivider:
      return $l1.PopupMenuDivider(height: (tree.flutterMaterialPopupMenuDivider.hasHeight() ? tree.flutterMaterialPopupMenuDivider.height : missing('height')));
    case proto.WidgetExpression_Result.flutterMaterialPopupMenuItem:
      return $l1.PopupMenuItem(enabled: (tree.flutterMaterialPopupMenuItem.hasEnabled() ? tree.flutterMaterialPopupMenuItem.enabled : true), height: (tree.flutterMaterialPopupMenuItem.hasHeight() ? tree.flutterMaterialPopupMenuItem.height : missing('height')), child: evaluateWidgetExpression((tree.flutterMaterialPopupMenuItem.hasChild() ? tree.flutterMaterialPopupMenuItem.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialPositioned:
      return $l1.Positioned(left: (tree.flutterMaterialPositioned.hasLeft() ? tree.flutterMaterialPositioned.left : null), top: (tree.flutterMaterialPositioned.hasTop() ? tree.flutterMaterialPositioned.top : null), right: (tree.flutterMaterialPositioned.hasRight() ? tree.flutterMaterialPositioned.right : null), bottom: (tree.flutterMaterialPositioned.hasBottom() ? tree.flutterMaterialPositioned.bottom : null), width: (tree.flutterMaterialPositioned.hasWidth() ? tree.flutterMaterialPositioned.width : null), height: (tree.flutterMaterialPositioned.hasHeight() ? tree.flutterMaterialPositioned.height : null), child: evaluateRequiredWidgetExpression((tree.flutterMaterialPositioned.hasChild() ? tree.flutterMaterialPositioned.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialPositionedDirectional:
      return $l1.PositionedDirectional(start: (tree.flutterMaterialPositionedDirectional.hasStart() ? tree.flutterMaterialPositionedDirectional.start : null), top: (tree.flutterMaterialPositionedDirectional.hasTop() ? tree.flutterMaterialPositionedDirectional.top : null), end: (tree.flutterMaterialPositionedDirectional.hasEnd() ? tree.flutterMaterialPositionedDirectional.end : null), bottom: (tree.flutterMaterialPositionedDirectional.hasBottom() ? tree.flutterMaterialPositionedDirectional.bottom : null), width: (tree.flutterMaterialPositionedDirectional.hasWidth() ? tree.flutterMaterialPositionedDirectional.width : null), height: (tree.flutterMaterialPositionedDirectional.hasHeight() ? tree.flutterMaterialPositionedDirectional.height : null), child: evaluateRequiredWidgetExpression((tree.flutterMaterialPositionedDirectional.hasChild() ? tree.flutterMaterialPositionedDirectional.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialPositionedNamedFill:
      return $l1.Positioned.fill(left: (tree.flutterMaterialPositionedNamedFill.hasLeft() ? tree.flutterMaterialPositionedNamedFill.left : 0.0), top: (tree.flutterMaterialPositionedNamedFill.hasTop() ? tree.flutterMaterialPositionedNamedFill.top : 0.0), right: (tree.flutterMaterialPositionedNamedFill.hasRight() ? tree.flutterMaterialPositionedNamedFill.right : 0.0), bottom: (tree.flutterMaterialPositionedNamedFill.hasBottom() ? tree.flutterMaterialPositionedNamedFill.bottom : 0.0), child: evaluateRequiredWidgetExpression((tree.flutterMaterialPositionedNamedFill.hasChild() ? tree.flutterMaterialPositionedNamedFill.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialPrimaryScrollControllerNamedNone:
      return $l1.PrimaryScrollController.none(child: evaluateRequiredWidgetExpression((tree.flutterMaterialPrimaryScrollControllerNamedNone.hasChild() ? tree.flutterMaterialPrimaryScrollControllerNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialRawChip:
      return $l1.RawChip(avatar: evaluateWidgetExpression((tree.flutterMaterialRawChip.hasAvatar() ? tree.flutterMaterialRawChip.avatar : null)), label: evaluateRequiredWidgetExpression((tree.flutterMaterialRawChip.hasLabel() ? tree.flutterMaterialRawChip.label : missing('label'))), deleteIcon: evaluateWidgetExpression((tree.flutterMaterialRawChip.hasDeleteIcon() ? tree.flutterMaterialRawChip.deleteIcon : null)), deleteButtonTooltipMessage: (tree.flutterMaterialRawChip.hasDeleteButtonTooltipMessage() ? tree.flutterMaterialRawChip.deleteButtonTooltipMessage : null), pressElevation: (tree.flutterMaterialRawChip.hasPressElevation() ? tree.flutterMaterialRawChip.pressElevation : null), tapEnabled: (tree.flutterMaterialRawChip.hasTapEnabled() ? tree.flutterMaterialRawChip.tapEnabled : true), selected: (tree.flutterMaterialRawChip.hasSelected() ? tree.flutterMaterialRawChip.selected : false), isEnabled: (tree.flutterMaterialRawChip.hasIsEnabled() ? tree.flutterMaterialRawChip.isEnabled : true), tooltip: (tree.flutterMaterialRawChip.hasTooltip() ? tree.flutterMaterialRawChip.tooltip : null), autofocus: (tree.flutterMaterialRawChip.hasAutofocus() ? tree.flutterMaterialRawChip.autofocus : false), elevation: (tree.flutterMaterialRawChip.hasElevation() ? tree.flutterMaterialRawChip.elevation : null), showCheckmark: (tree.flutterMaterialRawChip.hasShowCheckmark() ? tree.flutterMaterialRawChip.showCheckmark : true));
    case proto.WidgetExpression_Result.flutterMaterialRawGestureDetector:
      return $l1.RawGestureDetector(child: evaluateWidgetExpression((tree.flutterMaterialRawGestureDetector.hasChild() ? tree.flutterMaterialRawGestureDetector.child : null)), excludeFromSemantics: (tree.flutterMaterialRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterMaterialRawGestureDetector.excludeFromSemantics : false));
    case proto.WidgetExpression_Result.flutterMaterialRawImage:
      return $l1.RawImage(debugImageLabel: (tree.flutterMaterialRawImage.hasDebugImageLabel() ? tree.flutterMaterialRawImage.debugImageLabel : null), width: (tree.flutterMaterialRawImage.hasWidth() ? tree.flutterMaterialRawImage.width : null), height: (tree.flutterMaterialRawImage.hasHeight() ? tree.flutterMaterialRawImage.height : null), scale: (tree.flutterMaterialRawImage.hasScale() ? tree.flutterMaterialRawImage.scale : 1.0), matchTextDirection: (tree.flutterMaterialRawImage.hasMatchTextDirection() ? tree.flutterMaterialRawImage.matchTextDirection : false), invertColors: (tree.flutterMaterialRawImage.hasInvertColors() ? tree.flutterMaterialRawImage.invertColors : false), isAntiAlias: (tree.flutterMaterialRawImage.hasIsAntiAlias() ? tree.flutterMaterialRawImage.isAntiAlias : false));
    case proto.WidgetExpression_Result.flutterMaterialRawScrollbar:
      return $l1.RawScrollbar(child: evaluateRequiredWidgetExpression((tree.flutterMaterialRawScrollbar.hasChild() ? tree.flutterMaterialRawScrollbar.child : missing('child'))), thumbVisibility: (tree.flutterMaterialRawScrollbar.hasThumbVisibility() ? tree.flutterMaterialRawScrollbar.thumbVisibility : null), thickness: (tree.flutterMaterialRawScrollbar.hasThickness() ? tree.flutterMaterialRawScrollbar.thickness : null), minThumbLength: (tree.flutterMaterialRawScrollbar.hasMinThumbLength() ? tree.flutterMaterialRawScrollbar.minThumbLength : missing('minThumbLength')), minOverscrollLength: (tree.flutterMaterialRawScrollbar.hasMinOverscrollLength() ? tree.flutterMaterialRawScrollbar.minOverscrollLength : null), trackVisibility: (tree.flutterMaterialRawScrollbar.hasTrackVisibility() ? tree.flutterMaterialRawScrollbar.trackVisibility : null), interactive: (tree.flutterMaterialRawScrollbar.hasInteractive() ? tree.flutterMaterialRawScrollbar.interactive : null), mainAxisMargin: (tree.flutterMaterialRawScrollbar.hasMainAxisMargin() ? tree.flutterMaterialRawScrollbar.mainAxisMargin : 0.0), crossAxisMargin: (tree.flutterMaterialRawScrollbar.hasCrossAxisMargin() ? tree.flutterMaterialRawScrollbar.crossAxisMargin : 0.0));
    case proto.WidgetExpression_Result.flutterMaterialRefreshProgressIndicator:
      return $l1.RefreshProgressIndicator(value: (tree.flutterMaterialRefreshProgressIndicator.hasValue() ? tree.flutterMaterialRefreshProgressIndicator.value : null), strokeWidth: (tree.flutterMaterialRefreshProgressIndicator.hasStrokeWidth() ? tree.flutterMaterialRefreshProgressIndicator.strokeWidth : missing('strokeWidth')), strokeAlign: (tree.flutterMaterialRefreshProgressIndicator.hasStrokeAlign() ? tree.flutterMaterialRefreshProgressIndicator.strokeAlign : missing('strokeAlign')), semanticsLabel: (tree.flutterMaterialRefreshProgressIndicator.hasSemanticsLabel() ? tree.flutterMaterialRefreshProgressIndicator.semanticsLabel : null), semanticsValue: (tree.flutterMaterialRefreshProgressIndicator.hasSemanticsValue() ? tree.flutterMaterialRefreshProgressIndicator.semanticsValue : null));
    case proto.WidgetExpression_Result.flutterMaterialReorderableDelayedDragStartListener:
      return $l1.ReorderableDelayedDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterMaterialReorderableDelayedDragStartListener.hasChild() ? tree.flutterMaterialReorderableDelayedDragStartListener.child : missing('child'))), index: (tree.flutterMaterialReorderableDelayedDragStartListener.hasIndex() ? tree.flutterMaterialReorderableDelayedDragStartListener.index : missing('index')), enabled: (tree.flutterMaterialReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterMaterialReorderableDelayedDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterMaterialReorderableDragStartListener:
      return $l1.ReorderableDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterMaterialReorderableDragStartListener.hasChild() ? tree.flutterMaterialReorderableDragStartListener.child : missing('child'))), index: (tree.flutterMaterialReorderableDragStartListener.hasIndex() ? tree.flutterMaterialReorderableDragStartListener.index : missing('index')), enabled: (tree.flutterMaterialReorderableDragStartListener.hasEnabled() ? tree.flutterMaterialReorderableDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterMaterialRepaintBoundary:
      return $l1.RepaintBoundary(child: evaluateWidgetExpression((tree.flutterMaterialRepaintBoundary.hasChild() ? tree.flutterMaterialRepaintBoundary.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialRepaintBoundaryNamedWrap:
      return $l1.RepaintBoundary.wrap(evaluateRequiredWidgetExpression((tree.flutterMaterialRepaintBoundaryNamedWrap.hasChild() ? tree.flutterMaterialRepaintBoundaryNamedWrap.child : missing('child'))), (tree.flutterMaterialRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterMaterialRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterMaterialRestorationScope:
      return $l1.RestorationScope(restorationId: (tree.flutterMaterialRestorationScope.hasRestorationId() ? tree.flutterMaterialRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterMaterialRestorationScope.hasChild() ? tree.flutterMaterialRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialRootRestorationScope:
      return $l1.RootRestorationScope(restorationId: (tree.flutterMaterialRootRestorationScope.hasRestorationId() ? tree.flutterMaterialRootRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterMaterialRootRestorationScope.hasChild() ? tree.flutterMaterialRootRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialRotatedBox:
      return $l1.RotatedBox(quarterTurns: (tree.flutterMaterialRotatedBox.hasQuarterTurns() ? tree.flutterMaterialRotatedBox.quarterTurns : missing('quarterTurns')), child: evaluateWidgetExpression((tree.flutterMaterialRotatedBox.hasChild() ? tree.flutterMaterialRotatedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialRow:
      return $l1.Row(children: tree.flutterMaterialRow.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSafeArea:
      return $l1.SafeArea(left: (tree.flutterMaterialSafeArea.hasLeft() ? tree.flutterMaterialSafeArea.left : true), top: (tree.flutterMaterialSafeArea.hasTop() ? tree.flutterMaterialSafeArea.top : true), right: (tree.flutterMaterialSafeArea.hasRight() ? tree.flutterMaterialSafeArea.right : true), bottom: (tree.flutterMaterialSafeArea.hasBottom() ? tree.flutterMaterialSafeArea.bottom : true), maintainBottomViewPadding: (tree.flutterMaterialSafeArea.hasMaintainBottomViewPadding() ? tree.flutterMaterialSafeArea.maintainBottomViewPadding : false), child: evaluateRequiredWidgetExpression((tree.flutterMaterialSafeArea.hasChild() ? tree.flutterMaterialSafeArea.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialScaffold:
      return $l1.Scaffold(body: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasBody() ? tree.flutterMaterialScaffold.body : null)), floatingActionButton: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasFloatingActionButton() ? tree.flutterMaterialScaffold.floatingActionButton : null)), persistentFooterButtons: tree.flutterMaterialScaffold.persistentFooterButtons.map((e) => evaluateRequiredWidgetExpression(e)).toList(), drawer: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasDrawer() ? tree.flutterMaterialScaffold.drawer : null)), endDrawer: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasEndDrawer() ? tree.flutterMaterialScaffold.endDrawer : null)), bottomNavigationBar: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasBottomNavigationBar() ? tree.flutterMaterialScaffold.bottomNavigationBar : null)), bottomSheet: evaluateWidgetExpression((tree.flutterMaterialScaffold.hasBottomSheet() ? tree.flutterMaterialScaffold.bottomSheet : null)), resizeToAvoidBottomInset: (tree.flutterMaterialScaffold.hasResizeToAvoidBottomInset() ? tree.flutterMaterialScaffold.resizeToAvoidBottomInset : null), primary: (tree.flutterMaterialScaffold.hasPrimary() ? tree.flutterMaterialScaffold.primary : true), extendBody: (tree.flutterMaterialScaffold.hasExtendBody() ? tree.flutterMaterialScaffold.extendBody : false), extendBodyBehindAppBar: (tree.flutterMaterialScaffold.hasExtendBodyBehindAppBar() ? tree.flutterMaterialScaffold.extendBodyBehindAppBar : false), drawerEdgeDragWidth: (tree.flutterMaterialScaffold.hasDrawerEdgeDragWidth() ? tree.flutterMaterialScaffold.drawerEdgeDragWidth : null), drawerEnableOpenDragGesture: (tree.flutterMaterialScaffold.hasDrawerEnableOpenDragGesture() ? tree.flutterMaterialScaffold.drawerEnableOpenDragGesture : true), endDrawerEnableOpenDragGesture: (tree.flutterMaterialScaffold.hasEndDrawerEnableOpenDragGesture() ? tree.flutterMaterialScaffold.endDrawerEnableOpenDragGesture : true), restorationId: (tree.flutterMaterialScaffold.hasRestorationId() ? tree.flutterMaterialScaffold.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialScaffoldMessenger:
      return $l1.ScaffoldMessenger(child: evaluateRequiredWidgetExpression((tree.flutterMaterialScaffoldMessenger.hasChild() ? tree.flutterMaterialScaffoldMessenger.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialScrollNotificationObserver:
      return $l1.ScrollNotificationObserver(child: evaluateRequiredWidgetExpression((tree.flutterMaterialScrollNotificationObserver.hasChild() ? tree.flutterMaterialScrollNotificationObserver.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialScrollbar:
      return $l1.Scrollbar(child: evaluateRequiredWidgetExpression((tree.flutterMaterialScrollbar.hasChild() ? tree.flutterMaterialScrollbar.child : missing('child'))), thumbVisibility: (tree.flutterMaterialScrollbar.hasThumbVisibility() ? tree.flutterMaterialScrollbar.thumbVisibility : null), trackVisibility: (tree.flutterMaterialScrollbar.hasTrackVisibility() ? tree.flutterMaterialScrollbar.trackVisibility : null), thickness: (tree.flutterMaterialScrollbar.hasThickness() ? tree.flutterMaterialScrollbar.thickness : null), interactive: (tree.flutterMaterialScrollbar.hasInteractive() ? tree.flutterMaterialScrollbar.interactive : null));
    case proto.WidgetExpression_Result.flutterMaterialSearchBar:
      return $l1.SearchBar(hintText: (tree.flutterMaterialSearchBar.hasHintText() ? tree.flutterMaterialSearchBar.hintText : null), leading: evaluateWidgetExpression((tree.flutterMaterialSearchBar.hasLeading() ? tree.flutterMaterialSearchBar.leading : null)), trailing: tree.flutterMaterialSearchBar.trailing.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSelectableText:
      return $l1.SelectableText((tree.flutterMaterialSelectableText.hasData() ? tree.flutterMaterialSelectableText.data : missing('data')), textScaleFactor: (tree.flutterMaterialSelectableText.hasTextScaleFactor() ? tree.flutterMaterialSelectableText.textScaleFactor : null), showCursor: (tree.flutterMaterialSelectableText.hasShowCursor() ? tree.flutterMaterialSelectableText.showCursor : false), autofocus: (tree.flutterMaterialSelectableText.hasAutofocus() ? tree.flutterMaterialSelectableText.autofocus : false), minLines: (tree.flutterMaterialSelectableText.hasMinLines() ? tree.flutterMaterialSelectableText.minLines : null), maxLines: (tree.flutterMaterialSelectableText.hasMaxLines() ? tree.flutterMaterialSelectableText.maxLines : null), cursorWidth: (tree.flutterMaterialSelectableText.hasCursorWidth() ? tree.flutterMaterialSelectableText.cursorWidth : 2.0), cursorHeight: (tree.flutterMaterialSelectableText.hasCursorHeight() ? tree.flutterMaterialSelectableText.cursorHeight : null), enableInteractiveSelection: (tree.flutterMaterialSelectableText.hasEnableInteractiveSelection() ? tree.flutterMaterialSelectableText.enableInteractiveSelection : true), semanticsLabel: (tree.flutterMaterialSelectableText.hasSemanticsLabel() ? tree.flutterMaterialSelectableText.semanticsLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialSelectionArea:
      return $l1.SelectionArea(child: evaluateRequiredWidgetExpression((tree.flutterMaterialSelectionArea.hasChild() ? tree.flutterMaterialSelectionArea.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialSelectionContainerNamedDisabled:
      return $l1.SelectionContainer.disabled(child: evaluateRequiredWidgetExpression((tree.flutterMaterialSelectionContainerNamedDisabled.hasChild() ? tree.flutterMaterialSelectionContainerNamedDisabled.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialSemantics:
      return $l1.Semantics(child: evaluateWidgetExpression((tree.flutterMaterialSemantics.hasChild() ? tree.flutterMaterialSemantics.child : null)), container: (tree.flutterMaterialSemantics.hasContainer() ? tree.flutterMaterialSemantics.container : false), explicitChildNodes: (tree.flutterMaterialSemantics.hasExplicitChildNodes() ? tree.flutterMaterialSemantics.explicitChildNodes : false), excludeSemantics: (tree.flutterMaterialSemantics.hasExcludeSemantics() ? tree.flutterMaterialSemantics.excludeSemantics : false), blockUserActions: (tree.flutterMaterialSemantics.hasBlockUserActions() ? tree.flutterMaterialSemantics.blockUserActions : false), enabled: (tree.flutterMaterialSemantics.hasEnabled() ? tree.flutterMaterialSemantics.enabled : null), checked: (tree.flutterMaterialSemantics.hasChecked() ? tree.flutterMaterialSemantics.checked : null), mixed: (tree.flutterMaterialSemantics.hasMixed() ? tree.flutterMaterialSemantics.mixed : null), selected: (tree.flutterMaterialSemantics.hasSelected() ? tree.flutterMaterialSemantics.selected : null), toggled: (tree.flutterMaterialSemantics.hasToggled() ? tree.flutterMaterialSemantics.toggled : null), button: (tree.flutterMaterialSemantics.hasButton() ? tree.flutterMaterialSemantics.button : null), slider: (tree.flutterMaterialSemantics.hasSlider() ? tree.flutterMaterialSemantics.slider : null), keyboardKey: (tree.flutterMaterialSemantics.hasKeyboardKey() ? tree.flutterMaterialSemantics.keyboardKey : null), link: (tree.flutterMaterialSemantics.hasLink() ? tree.flutterMaterialSemantics.link : null), header: (tree.flutterMaterialSemantics.hasHeader() ? tree.flutterMaterialSemantics.header : null), textField: (tree.flutterMaterialSemantics.hasTextField() ? tree.flutterMaterialSemantics.textField : null), readOnly: (tree.flutterMaterialSemantics.hasReadOnly() ? tree.flutterMaterialSemantics.readOnly : null), focusable: (tree.flutterMaterialSemantics.hasFocusable() ? tree.flutterMaterialSemantics.focusable : null), focused: (tree.flutterMaterialSemantics.hasFocused() ? tree.flutterMaterialSemantics.focused : null), inMutuallyExclusiveGroup: (tree.flutterMaterialSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterMaterialSemantics.inMutuallyExclusiveGroup : null), obscured: (tree.flutterMaterialSemantics.hasObscured() ? tree.flutterMaterialSemantics.obscured : null), multiline: (tree.flutterMaterialSemantics.hasMultiline() ? tree.flutterMaterialSemantics.multiline : null), scopesRoute: (tree.flutterMaterialSemantics.hasScopesRoute() ? tree.flutterMaterialSemantics.scopesRoute : null), namesRoute: (tree.flutterMaterialSemantics.hasNamesRoute() ? tree.flutterMaterialSemantics.namesRoute : null), hidden: (tree.flutterMaterialSemantics.hasHidden() ? tree.flutterMaterialSemantics.hidden : null), image: (tree.flutterMaterialSemantics.hasImage() ? tree.flutterMaterialSemantics.image : null), liveRegion: (tree.flutterMaterialSemantics.hasLiveRegion() ? tree.flutterMaterialSemantics.liveRegion : null), maxValueLength: (tree.flutterMaterialSemantics.hasMaxValueLength() ? tree.flutterMaterialSemantics.maxValueLength : null), currentValueLength: (tree.flutterMaterialSemantics.hasCurrentValueLength() ? tree.flutterMaterialSemantics.currentValueLength : null), label: (tree.flutterMaterialSemantics.hasLabel() ? tree.flutterMaterialSemantics.label : null), value: (tree.flutterMaterialSemantics.hasValue() ? tree.flutterMaterialSemantics.value : null), increasedValue: (tree.flutterMaterialSemantics.hasIncreasedValue() ? tree.flutterMaterialSemantics.increasedValue : null), decreasedValue: (tree.flutterMaterialSemantics.hasDecreasedValue() ? tree.flutterMaterialSemantics.decreasedValue : null), hint: (tree.flutterMaterialSemantics.hasHint() ? tree.flutterMaterialSemantics.hint : null), tooltip: (tree.flutterMaterialSemantics.hasTooltip() ? tree.flutterMaterialSemantics.tooltip : null), onTapHint: (tree.flutterMaterialSemantics.hasOnTapHint() ? tree.flutterMaterialSemantics.onTapHint : null), onLongPressHint: (tree.flutterMaterialSemantics.hasOnLongPressHint() ? tree.flutterMaterialSemantics.onLongPressHint : null));
    case proto.WidgetExpression_Result.flutterMaterialSemanticsDebugger:
      return $l1.SemanticsDebugger(child: evaluateRequiredWidgetExpression((tree.flutterMaterialSemanticsDebugger.hasChild() ? tree.flutterMaterialSemanticsDebugger.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialSharedAppData:
      return $l1.SharedAppData(child: evaluateRequiredWidgetExpression((tree.flutterMaterialSharedAppData.hasChild() ? tree.flutterMaterialSharedAppData.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialShortcutRegistrar:
      return $l1.ShortcutRegistrar(child: evaluateRequiredWidgetExpression((tree.flutterMaterialShortcutRegistrar.hasChild() ? tree.flutterMaterialShortcutRegistrar.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialSimpleDialog:
      return $l1.SimpleDialog(title: evaluateWidgetExpression((tree.flutterMaterialSimpleDialog.hasTitle() ? tree.flutterMaterialSimpleDialog.title : null)), children: tree.flutterMaterialSimpleDialog.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), elevation: (tree.flutterMaterialSimpleDialog.hasElevation() ? tree.flutterMaterialSimpleDialog.elevation : null), semanticLabel: (tree.flutterMaterialSimpleDialog.hasSemanticLabel() ? tree.flutterMaterialSimpleDialog.semanticLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialSimpleDialogOption:
      return $l1.SimpleDialogOption(child: evaluateWidgetExpression((tree.flutterMaterialSimpleDialogOption.hasChild() ? tree.flutterMaterialSimpleDialogOption.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSingleChildScrollView:
      return $l1.SingleChildScrollView(reverse: (tree.flutterMaterialSingleChildScrollView.hasReverse() ? tree.flutterMaterialSingleChildScrollView.reverse : false), primary: (tree.flutterMaterialSingleChildScrollView.hasPrimary() ? tree.flutterMaterialSingleChildScrollView.primary : null), child: evaluateWidgetExpression((tree.flutterMaterialSingleChildScrollView.hasChild() ? tree.flutterMaterialSingleChildScrollView.child : null)), restorationId: (tree.flutterMaterialSingleChildScrollView.hasRestorationId() ? tree.flutterMaterialSingleChildScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterMaterialSizeChangedLayoutNotifier:
      return $l1.SizeChangedLayoutNotifier(child: evaluateWidgetExpression((tree.flutterMaterialSizeChangedLayoutNotifier.hasChild() ? tree.flutterMaterialSizeChangedLayoutNotifier.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSizedBox:
      return $l1.SizedBox(width: (tree.flutterMaterialSizedBox.hasWidth() ? tree.flutterMaterialSizedBox.width : null), height: (tree.flutterMaterialSizedBox.hasHeight() ? tree.flutterMaterialSizedBox.height : null), child: evaluateWidgetExpression((tree.flutterMaterialSizedBox.hasChild() ? tree.flutterMaterialSizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSizedBoxNamedExpand:
      return $l1.SizedBox.expand(child: evaluateWidgetExpression((tree.flutterMaterialSizedBoxNamedExpand.hasChild() ? tree.flutterMaterialSizedBoxNamedExpand.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSizedBoxNamedFromSize:
      return $l1.SizedBox.fromSize(child: evaluateWidgetExpression((tree.flutterMaterialSizedBoxNamedFromSize.hasChild() ? tree.flutterMaterialSizedBoxNamedFromSize.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSizedBoxNamedShrink:
      return $l1.SizedBox.shrink(child: evaluateWidgetExpression((tree.flutterMaterialSizedBoxNamedShrink.hasChild() ? tree.flutterMaterialSizedBoxNamedShrink.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSizedBoxNamedSquare:
      return $l1.SizedBox.square(child: evaluateWidgetExpression((tree.flutterMaterialSizedBoxNamedSquare.hasChild() ? tree.flutterMaterialSizedBoxNamedSquare.child : null)), dimension: (tree.flutterMaterialSizedBoxNamedSquare.hasDimension() ? tree.flutterMaterialSizedBoxNamedSquare.dimension : null));
    case proto.WidgetExpression_Result.flutterMaterialSliverAppBar:
      return $l1.SliverAppBar(leading: evaluateWidgetExpression((tree.flutterMaterialSliverAppBar.hasLeading() ? tree.flutterMaterialSliverAppBar.leading : null)), automaticallyImplyLeading: (tree.flutterMaterialSliverAppBar.hasAutomaticallyImplyLeading() ? tree.flutterMaterialSliverAppBar.automaticallyImplyLeading : true), title: evaluateWidgetExpression((tree.flutterMaterialSliverAppBar.hasTitle() ? tree.flutterMaterialSliverAppBar.title : null)), actions: tree.flutterMaterialSliverAppBar.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: evaluateWidgetExpression((tree.flutterMaterialSliverAppBar.hasFlexibleSpace() ? tree.flutterMaterialSliverAppBar.flexibleSpace : null)), elevation: (tree.flutterMaterialSliverAppBar.hasElevation() ? tree.flutterMaterialSliverAppBar.elevation : null), scrolledUnderElevation: (tree.flutterMaterialSliverAppBar.hasScrolledUnderElevation() ? tree.flutterMaterialSliverAppBar.scrolledUnderElevation : null), forceElevated: (tree.flutterMaterialSliverAppBar.hasForceElevated() ? tree.flutterMaterialSliverAppBar.forceElevated : false), primary: (tree.flutterMaterialSliverAppBar.hasPrimary() ? tree.flutterMaterialSliverAppBar.primary : true), centerTitle: (tree.flutterMaterialSliverAppBar.hasCenterTitle() ? tree.flutterMaterialSliverAppBar.centerTitle : null), excludeHeaderSemantics: (tree.flutterMaterialSliverAppBar.hasExcludeHeaderSemantics() ? tree.flutterMaterialSliverAppBar.excludeHeaderSemantics : false), titleSpacing: (tree.flutterMaterialSliverAppBar.hasTitleSpacing() ? tree.flutterMaterialSliverAppBar.titleSpacing : null), collapsedHeight: (tree.flutterMaterialSliverAppBar.hasCollapsedHeight() ? tree.flutterMaterialSliverAppBar.collapsedHeight : null), expandedHeight: (tree.flutterMaterialSliverAppBar.hasExpandedHeight() ? tree.flutterMaterialSliverAppBar.expandedHeight : null), floating: (tree.flutterMaterialSliverAppBar.hasFloating() ? tree.flutterMaterialSliverAppBar.floating : false), pinned: (tree.flutterMaterialSliverAppBar.hasPinned() ? tree.flutterMaterialSliverAppBar.pinned : false), snap: (tree.flutterMaterialSliverAppBar.hasSnap() ? tree.flutterMaterialSliverAppBar.snap : false), stretch: (tree.flutterMaterialSliverAppBar.hasStretch() ? tree.flutterMaterialSliverAppBar.stretch : false), stretchTriggerOffset: (tree.flutterMaterialSliverAppBar.hasStretchTriggerOffset() ? tree.flutterMaterialSliverAppBar.stretchTriggerOffset : 100.0), toolbarHeight: (tree.flutterMaterialSliverAppBar.hasToolbarHeight() ? tree.flutterMaterialSliverAppBar.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.flutterMaterialSliverAppBar.hasLeadingWidth() ? tree.flutterMaterialSliverAppBar.leadingWidth : null), forceMaterialTransparency: (tree.flutterMaterialSliverAppBar.hasForceMaterialTransparency() ? tree.flutterMaterialSliverAppBar.forceMaterialTransparency : false));
    case proto.WidgetExpression_Result.flutterMaterialSliverAppBarNamedLarge:
      return $l1.SliverAppBar.large(leading: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedLarge.hasLeading() ? tree.flutterMaterialSliverAppBarNamedLarge.leading : null)), automaticallyImplyLeading: (tree.flutterMaterialSliverAppBarNamedLarge.hasAutomaticallyImplyLeading() ? tree.flutterMaterialSliverAppBarNamedLarge.automaticallyImplyLeading : true), title: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedLarge.hasTitle() ? tree.flutterMaterialSliverAppBarNamedLarge.title : null)), actions: tree.flutterMaterialSliverAppBarNamedLarge.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedLarge.hasFlexibleSpace() ? tree.flutterMaterialSliverAppBarNamedLarge.flexibleSpace : null)), elevation: (tree.flutterMaterialSliverAppBarNamedLarge.hasElevation() ? tree.flutterMaterialSliverAppBarNamedLarge.elevation : null), scrolledUnderElevation: (tree.flutterMaterialSliverAppBarNamedLarge.hasScrolledUnderElevation() ? tree.flutterMaterialSliverAppBarNamedLarge.scrolledUnderElevation : null), forceElevated: (tree.flutterMaterialSliverAppBarNamedLarge.hasForceElevated() ? tree.flutterMaterialSliverAppBarNamedLarge.forceElevated : false), primary: (tree.flutterMaterialSliverAppBarNamedLarge.hasPrimary() ? tree.flutterMaterialSliverAppBarNamedLarge.primary : true), centerTitle: (tree.flutterMaterialSliverAppBarNamedLarge.hasCenterTitle() ? tree.flutterMaterialSliverAppBarNamedLarge.centerTitle : null), excludeHeaderSemantics: (tree.flutterMaterialSliverAppBarNamedLarge.hasExcludeHeaderSemantics() ? tree.flutterMaterialSliverAppBarNamedLarge.excludeHeaderSemantics : false), titleSpacing: (tree.flutterMaterialSliverAppBarNamedLarge.hasTitleSpacing() ? tree.flutterMaterialSliverAppBarNamedLarge.titleSpacing : null), collapsedHeight: (tree.flutterMaterialSliverAppBarNamedLarge.hasCollapsedHeight() ? tree.flutterMaterialSliverAppBarNamedLarge.collapsedHeight : null), expandedHeight: (tree.flutterMaterialSliverAppBarNamedLarge.hasExpandedHeight() ? tree.flutterMaterialSliverAppBarNamedLarge.expandedHeight : null), floating: (tree.flutterMaterialSliverAppBarNamedLarge.hasFloating() ? tree.flutterMaterialSliverAppBarNamedLarge.floating : false), pinned: (tree.flutterMaterialSliverAppBarNamedLarge.hasPinned() ? tree.flutterMaterialSliverAppBarNamedLarge.pinned : true), snap: (tree.flutterMaterialSliverAppBarNamedLarge.hasSnap() ? tree.flutterMaterialSliverAppBarNamedLarge.snap : false), stretch: (tree.flutterMaterialSliverAppBarNamedLarge.hasStretch() ? tree.flutterMaterialSliverAppBarNamedLarge.stretch : false), stretchTriggerOffset: (tree.flutterMaterialSliverAppBarNamedLarge.hasStretchTriggerOffset() ? tree.flutterMaterialSliverAppBarNamedLarge.stretchTriggerOffset : 100.0), toolbarHeight: (tree.flutterMaterialSliverAppBarNamedLarge.hasToolbarHeight() ? tree.flutterMaterialSliverAppBarNamedLarge.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.flutterMaterialSliverAppBarNamedLarge.hasLeadingWidth() ? tree.flutterMaterialSliverAppBarNamedLarge.leadingWidth : null), forceMaterialTransparency: (tree.flutterMaterialSliverAppBarNamedLarge.hasForceMaterialTransparency() ? tree.flutterMaterialSliverAppBarNamedLarge.forceMaterialTransparency : false));
    case proto.WidgetExpression_Result.flutterMaterialSliverAppBarNamedMedium:
      return $l1.SliverAppBar.medium(leading: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedMedium.hasLeading() ? tree.flutterMaterialSliverAppBarNamedMedium.leading : null)), automaticallyImplyLeading: (tree.flutterMaterialSliverAppBarNamedMedium.hasAutomaticallyImplyLeading() ? tree.flutterMaterialSliverAppBarNamedMedium.automaticallyImplyLeading : true), title: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedMedium.hasTitle() ? tree.flutterMaterialSliverAppBarNamedMedium.title : null)), actions: tree.flutterMaterialSliverAppBarNamedMedium.actions.map((e) => evaluateRequiredWidgetExpression(e)).toList(), flexibleSpace: evaluateWidgetExpression((tree.flutterMaterialSliverAppBarNamedMedium.hasFlexibleSpace() ? tree.flutterMaterialSliverAppBarNamedMedium.flexibleSpace : null)), elevation: (tree.flutterMaterialSliverAppBarNamedMedium.hasElevation() ? tree.flutterMaterialSliverAppBarNamedMedium.elevation : null), scrolledUnderElevation: (tree.flutterMaterialSliverAppBarNamedMedium.hasScrolledUnderElevation() ? tree.flutterMaterialSliverAppBarNamedMedium.scrolledUnderElevation : null), forceElevated: (tree.flutterMaterialSliverAppBarNamedMedium.hasForceElevated() ? tree.flutterMaterialSliverAppBarNamedMedium.forceElevated : false), primary: (tree.flutterMaterialSliverAppBarNamedMedium.hasPrimary() ? tree.flutterMaterialSliverAppBarNamedMedium.primary : true), centerTitle: (tree.flutterMaterialSliverAppBarNamedMedium.hasCenterTitle() ? tree.flutterMaterialSliverAppBarNamedMedium.centerTitle : null), excludeHeaderSemantics: (tree.flutterMaterialSliverAppBarNamedMedium.hasExcludeHeaderSemantics() ? tree.flutterMaterialSliverAppBarNamedMedium.excludeHeaderSemantics : false), titleSpacing: (tree.flutterMaterialSliverAppBarNamedMedium.hasTitleSpacing() ? tree.flutterMaterialSliverAppBarNamedMedium.titleSpacing : null), collapsedHeight: (tree.flutterMaterialSliverAppBarNamedMedium.hasCollapsedHeight() ? tree.flutterMaterialSliverAppBarNamedMedium.collapsedHeight : null), expandedHeight: (tree.flutterMaterialSliverAppBarNamedMedium.hasExpandedHeight() ? tree.flutterMaterialSliverAppBarNamedMedium.expandedHeight : null), floating: (tree.flutterMaterialSliverAppBarNamedMedium.hasFloating() ? tree.flutterMaterialSliverAppBarNamedMedium.floating : false), pinned: (tree.flutterMaterialSliverAppBarNamedMedium.hasPinned() ? tree.flutterMaterialSliverAppBarNamedMedium.pinned : true), snap: (tree.flutterMaterialSliverAppBarNamedMedium.hasSnap() ? tree.flutterMaterialSliverAppBarNamedMedium.snap : false), stretch: (tree.flutterMaterialSliverAppBarNamedMedium.hasStretch() ? tree.flutterMaterialSliverAppBarNamedMedium.stretch : false), stretchTriggerOffset: (tree.flutterMaterialSliverAppBarNamedMedium.hasStretchTriggerOffset() ? tree.flutterMaterialSliverAppBarNamedMedium.stretchTriggerOffset : 100.0), toolbarHeight: (tree.flutterMaterialSliverAppBarNamedMedium.hasToolbarHeight() ? tree.flutterMaterialSliverAppBarNamedMedium.toolbarHeight : missing('toolbarHeight')), leadingWidth: (tree.flutterMaterialSliverAppBarNamedMedium.hasLeadingWidth() ? tree.flutterMaterialSliverAppBarNamedMedium.leadingWidth : null), forceMaterialTransparency: (tree.flutterMaterialSliverAppBarNamedMedium.hasForceMaterialTransparency() ? tree.flutterMaterialSliverAppBarNamedMedium.forceMaterialTransparency : false));
    case proto.WidgetExpression_Result.flutterMaterialSliverConstrainedCrossAxis:
      return $l1.SliverConstrainedCrossAxis(maxExtent: (tree.flutterMaterialSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterMaterialSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')), sliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverConstrainedCrossAxis.hasSliver() ? tree.flutterMaterialSliverConstrainedCrossAxis.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterMaterialSliverCrossAxisExpanded:
      return $l1.SliverCrossAxisExpanded(flex: (tree.flutterMaterialSliverCrossAxisExpanded.hasFlex() ? tree.flutterMaterialSliverCrossAxisExpanded.flex : missing('flex')), sliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverCrossAxisExpanded.hasSliver() ? tree.flutterMaterialSliverCrossAxisExpanded.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterMaterialSliverCrossAxisGroup:
      return $l1.SliverCrossAxisGroup(slivers: tree.flutterMaterialSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSliverFillRemaining:
      return $l1.SliverFillRemaining(child: evaluateWidgetExpression((tree.flutterMaterialSliverFillRemaining.hasChild() ? tree.flutterMaterialSliverFillRemaining.child : null)), hasScrollBody: (tree.flutterMaterialSliverFillRemaining.hasHasScrollBody() ? tree.flutterMaterialSliverFillRemaining.hasScrollBody : true), fillOverscroll: (tree.flutterMaterialSliverFillRemaining.hasFillOverscroll() ? tree.flutterMaterialSliverFillRemaining.fillOverscroll : false));
    case proto.WidgetExpression_Result.flutterMaterialSliverFixedExtentListNamedList:
      return $l1.SliverFixedExtentList.list(children: tree.flutterMaterialSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), itemExtent: (tree.flutterMaterialSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterMaterialSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')), addAutomaticKeepAlives: (tree.flutterMaterialSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterMaterialSliverFixedExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterMaterialSliverFixedExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterMaterialSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterMaterialSliverGridNamedCount:
      return $l1.SliverGrid.count(crossAxisCount: (tree.flutterMaterialSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterMaterialSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterMaterialSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterMaterialSliverGridNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterMaterialSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterMaterialSliverGridNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterMaterialSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterMaterialSliverGridNamedCount.childAspectRatio : 1.0), children: tree.flutterMaterialSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSliverGridNamedExtent:
      return $l1.SliverGrid.extent(maxCrossAxisExtent: (tree.flutterMaterialSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterMaterialSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterMaterialSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterMaterialSliverGridNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterMaterialSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterMaterialSliverGridNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterMaterialSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterMaterialSliverGridNamedExtent.childAspectRatio : 1.0), children: tree.flutterMaterialSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSliverIgnorePointer:
      return $l1.SliverIgnorePointer(ignoring: (tree.flutterMaterialSliverIgnorePointer.hasIgnoring() ? tree.flutterMaterialSliverIgnorePointer.ignoring : true), sliver: evaluateWidgetExpression((tree.flutterMaterialSliverIgnorePointer.hasSliver() ? tree.flutterMaterialSliverIgnorePointer.sliver : null)));
    case proto.WidgetExpression_Result.flutterMaterialSliverListNamedList:
      return $l1.SliverList.list(children: tree.flutterMaterialSliverListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), addAutomaticKeepAlives: (tree.flutterMaterialSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterMaterialSliverListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterMaterialSliverListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterMaterialSliverListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterMaterialSliverMainAxisGroup:
      return $l1.SliverMainAxisGroup(slivers: tree.flutterMaterialSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSliverOffstage:
      return $l1.SliverOffstage(offstage: (tree.flutterMaterialSliverOffstage.hasOffstage() ? tree.flutterMaterialSliverOffstage.offstage : true), sliver: evaluateWidgetExpression((tree.flutterMaterialSliverOffstage.hasSliver() ? tree.flutterMaterialSliverOffstage.sliver : null)));
    case proto.WidgetExpression_Result.flutterMaterialSliverOpacity:
      return $l1.SliverOpacity(opacity: (tree.flutterMaterialSliverOpacity.hasOpacity() ? tree.flutterMaterialSliverOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterMaterialSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterMaterialSliverOpacity.alwaysIncludeSemantics : false), sliver: evaluateWidgetExpression((tree.flutterMaterialSliverOpacity.hasSliver() ? tree.flutterMaterialSliverOpacity.sliver : null)));
    case proto.WidgetExpression_Result.flutterMaterialSliverPrototypeExtentListNamedList:
      return $l1.SliverPrototypeExtentList.list(children: tree.flutterMaterialSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), prototypeItem: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverPrototypeExtentListNamedList.hasPrototypeItem() ? tree.flutterMaterialSliverPrototypeExtentListNamedList.prototypeItem : missing('prototypeItem'))), addAutomaticKeepAlives: (tree.flutterMaterialSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterMaterialSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterMaterialSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterMaterialSliverPrototypeExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterMaterialSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterMaterialSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterMaterialSliverSafeArea:
      return $l1.SliverSafeArea(left: (tree.flutterMaterialSliverSafeArea.hasLeft() ? tree.flutterMaterialSliverSafeArea.left : true), top: (tree.flutterMaterialSliverSafeArea.hasTop() ? tree.flutterMaterialSliverSafeArea.top : true), right: (tree.flutterMaterialSliverSafeArea.hasRight() ? tree.flutterMaterialSliverSafeArea.right : true), bottom: (tree.flutterMaterialSliverSafeArea.hasBottom() ? tree.flutterMaterialSliverSafeArea.bottom : true), sliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverSafeArea.hasSliver() ? tree.flutterMaterialSliverSafeArea.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterMaterialSliverToBoxAdapter:
      return $l1.SliverToBoxAdapter(child: evaluateWidgetExpression((tree.flutterMaterialSliverToBoxAdapter.hasChild() ? tree.flutterMaterialSliverToBoxAdapter.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialSliverVisibility:
      return $l1.SliverVisibility(sliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverVisibility.hasSliver() ? tree.flutterMaterialSliverVisibility.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverVisibility.hasReplacementSliver() ? tree.flutterMaterialSliverVisibility.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterMaterialSliverVisibility.hasVisible() ? tree.flutterMaterialSliverVisibility.visible : true), maintainState: (tree.flutterMaterialSliverVisibility.hasMaintainState() ? tree.flutterMaterialSliverVisibility.maintainState : false), maintainAnimation: (tree.flutterMaterialSliverVisibility.hasMaintainAnimation() ? tree.flutterMaterialSliverVisibility.maintainAnimation : false), maintainSize: (tree.flutterMaterialSliverVisibility.hasMaintainSize() ? tree.flutterMaterialSliverVisibility.maintainSize : false), maintainSemantics: (tree.flutterMaterialSliverVisibility.hasMaintainSemantics() ? tree.flutterMaterialSliverVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterMaterialSliverVisibility.hasMaintainInteractivity() ? tree.flutterMaterialSliverVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterMaterialSliverVisibilityNamedMaintain:
      return $l1.SliverVisibility.maintain(sliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverVisibilityNamedMaintain.hasSliver() ? tree.flutterMaterialSliverVisibilityNamedMaintain.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterMaterialSliverVisibilityNamedMaintain.hasReplacementSliver() ? tree.flutterMaterialSliverVisibilityNamedMaintain.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterMaterialSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterMaterialSliverVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterMaterialSnackBar:
      return $l1.SnackBar(content: evaluateRequiredWidgetExpression((tree.flutterMaterialSnackBar.hasContent() ? tree.flutterMaterialSnackBar.content : missing('content'))), elevation: (tree.flutterMaterialSnackBar.hasElevation() ? tree.flutterMaterialSnackBar.elevation : null), width: (tree.flutterMaterialSnackBar.hasWidth() ? tree.flutterMaterialSnackBar.width : null), actionOverflowThreshold: (tree.flutterMaterialSnackBar.hasActionOverflowThreshold() ? tree.flutterMaterialSnackBar.actionOverflowThreshold : null), showCloseIcon: (tree.flutterMaterialSnackBar.hasShowCloseIcon() ? tree.flutterMaterialSnackBar.showCloseIcon : null));
    case proto.WidgetExpression_Result.flutterMaterialSpacer:
      return $l1.Spacer(flex: (tree.flutterMaterialSpacer.hasFlex() ? tree.flutterMaterialSpacer.flex : 1));
    case proto.WidgetExpression_Result.flutterMaterialStack:
      return $l1.Stack(children: tree.flutterMaterialStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterMaterialSubmenuButton:
      return $l1.SubmenuButton(leadingIcon: evaluateWidgetExpression((tree.flutterMaterialSubmenuButton.hasLeadingIcon() ? tree.flutterMaterialSubmenuButton.leadingIcon : null)), trailingIcon: evaluateWidgetExpression((tree.flutterMaterialSubmenuButton.hasTrailingIcon() ? tree.flutterMaterialSubmenuButton.trailingIcon : null)), menuChildren: tree.flutterMaterialSubmenuButton.menuChildren.map((e) => evaluateRequiredWidgetExpression(e)).toList(), child: evaluateWidgetExpression((tree.flutterMaterialSubmenuButton.hasChild() ? tree.flutterMaterialSubmenuButton.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTab:
      return $l1.Tab(text: (tree.flutterMaterialTab.hasText() ? tree.flutterMaterialTab.text : null), icon: evaluateWidgetExpression((tree.flutterMaterialTab.hasIcon() ? tree.flutterMaterialTab.icon : null)), height: (tree.flutterMaterialTab.hasHeight() ? tree.flutterMaterialTab.height : null), child: evaluateWidgetExpression((tree.flutterMaterialTab.hasChild() ? tree.flutterMaterialTab.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTabBar:
      return $l1.TabBar(tabs: tree.flutterMaterialTabBar.tabs.map((e) => evaluateRequiredWidgetExpression(e)).toList(), isScrollable: (tree.flutterMaterialTabBar.hasIsScrollable() ? tree.flutterMaterialTabBar.isScrollable : false), automaticIndicatorColorAdjustment: (tree.flutterMaterialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.flutterMaterialTabBar.automaticIndicatorColorAdjustment : true), indicatorWeight: (tree.flutterMaterialTabBar.hasIndicatorWeight() ? tree.flutterMaterialTabBar.indicatorWeight : 2.0), enableFeedback: (tree.flutterMaterialTabBar.hasEnableFeedback() ? tree.flutterMaterialTabBar.enableFeedback : null));
    case proto.WidgetExpression_Result.flutterMaterialTabBarNamedSecondary:
      return $l1.TabBar.secondary(tabs: tree.flutterMaterialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetExpression(e)).toList(), isScrollable: (tree.flutterMaterialTabBarNamedSecondary.hasIsScrollable() ? tree.flutterMaterialTabBarNamedSecondary.isScrollable : false), automaticIndicatorColorAdjustment: (tree.flutterMaterialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.flutterMaterialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true), indicatorWeight: (tree.flutterMaterialTabBarNamedSecondary.hasIndicatorWeight() ? tree.flutterMaterialTabBarNamedSecondary.indicatorWeight : 2.0), enableFeedback: (tree.flutterMaterialTabBarNamedSecondary.hasEnableFeedback() ? tree.flutterMaterialTabBarNamedSecondary.enableFeedback : null));
    case proto.WidgetExpression_Result.flutterMaterialTabBarView:
      return $l1.TabBarView(children: tree.flutterMaterialTabBarView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), viewportFraction: (tree.flutterMaterialTabBarView.hasViewportFraction() ? tree.flutterMaterialTabBarView.viewportFraction : 1.0));
    case proto.WidgetExpression_Result.flutterMaterialTabPageSelector:
      return $l1.TabPageSelector(indicatorSize: (tree.flutterMaterialTabPageSelector.hasIndicatorSize() ? tree.flutterMaterialTabPageSelector.indicatorSize : 12.0));
    case proto.WidgetExpression_Result.flutterMaterialTable:
      return $l1.Table();
    case proto.WidgetExpression_Result.flutterMaterialTableCell:
      return $l1.TableCell(child: evaluateRequiredWidgetExpression((tree.flutterMaterialTableCell.hasChild() ? tree.flutterMaterialTableCell.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialTableRowInkWell:
      return $l1.TableRowInkWell(child: evaluateWidgetExpression((tree.flutterMaterialTableRowInkWell.hasChild() ? tree.flutterMaterialTableRowInkWell.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTapRegion:
      return $l1.TapRegion(child: evaluateWidgetExpression((tree.flutterMaterialTapRegion.hasChild() ? tree.flutterMaterialTapRegion.child : null)), enabled: (tree.flutterMaterialTapRegion.hasEnabled() ? tree.flutterMaterialTapRegion.enabled : true), debugLabel: (tree.flutterMaterialTapRegion.hasDebugLabel() ? tree.flutterMaterialTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialTapRegionSurface:
      return $l1.TapRegionSurface(child: evaluateRequiredWidgetExpression((tree.flutterMaterialTapRegionSurface.hasChild() ? tree.flutterMaterialTapRegionSurface.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialText:
      return $l1.Text((tree.flutterMaterialText.hasData() ? tree.flutterMaterialText.data : missing('data')), softWrap: (tree.flutterMaterialText.hasSoftWrap() ? tree.flutterMaterialText.softWrap : null), textScaleFactor: (tree.flutterMaterialText.hasTextScaleFactor() ? tree.flutterMaterialText.textScaleFactor : null), maxLines: (tree.flutterMaterialText.hasMaxLines() ? tree.flutterMaterialText.maxLines : null), semanticsLabel: (tree.flutterMaterialText.hasSemanticsLabel() ? tree.flutterMaterialText.semanticsLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialTextField:
      return $l1.TextField(readOnly: (tree.flutterMaterialTextField.hasReadOnly() ? tree.flutterMaterialTextField.readOnly : false), showCursor: (tree.flutterMaterialTextField.hasShowCursor() ? tree.flutterMaterialTextField.showCursor : null), autofocus: (tree.flutterMaterialTextField.hasAutofocus() ? tree.flutterMaterialTextField.autofocus : false), obscuringCharacter: (tree.flutterMaterialTextField.hasObscuringCharacter() ? tree.flutterMaterialTextField.obscuringCharacter : '•'), obscureText: (tree.flutterMaterialTextField.hasObscureText() ? tree.flutterMaterialTextField.obscureText : false), autocorrect: (tree.flutterMaterialTextField.hasAutocorrect() ? tree.flutterMaterialTextField.autocorrect : true), enableSuggestions: (tree.flutterMaterialTextField.hasEnableSuggestions() ? tree.flutterMaterialTextField.enableSuggestions : true), maxLines: (tree.flutterMaterialTextField.hasMaxLines() ? tree.flutterMaterialTextField.maxLines : 1), minLines: (tree.flutterMaterialTextField.hasMinLines() ? tree.flutterMaterialTextField.minLines : null), expands: (tree.flutterMaterialTextField.hasExpands() ? tree.flutterMaterialTextField.expands : false), maxLength: (tree.flutterMaterialTextField.hasMaxLength() ? tree.flutterMaterialTextField.maxLength : null), enabled: (tree.flutterMaterialTextField.hasEnabled() ? tree.flutterMaterialTextField.enabled : null), cursorWidth: (tree.flutterMaterialTextField.hasCursorWidth() ? tree.flutterMaterialTextField.cursorWidth : 2.0), cursorHeight: (tree.flutterMaterialTextField.hasCursorHeight() ? tree.flutterMaterialTextField.cursorHeight : null), cursorOpacityAnimates: (tree.flutterMaterialTextField.hasCursorOpacityAnimates() ? tree.flutterMaterialTextField.cursorOpacityAnimates : null), enableInteractiveSelection: (tree.flutterMaterialTextField.hasEnableInteractiveSelection() ? tree.flutterMaterialTextField.enableInteractiveSelection : null), autofillHints: tree.flutterMaterialTextField.autofillHints, restorationId: (tree.flutterMaterialTextField.hasRestorationId() ? tree.flutterMaterialTextField.restorationId : null), scribbleEnabled: (tree.flutterMaterialTextField.hasScribbleEnabled() ? tree.flutterMaterialTextField.scribbleEnabled : true), enableIMEPersonalizedLearning: (tree.flutterMaterialTextField.hasEnableIMEPersonalizedLearning() ? tree.flutterMaterialTextField.enableIMEPersonalizedLearning : true), canRequestFocus: (tree.flutterMaterialTextField.hasCanRequestFocus() ? tree.flutterMaterialTextField.canRequestFocus : true));
    case proto.WidgetExpression_Result.flutterMaterialTextFieldTapRegion:
      return $l1.TextFieldTapRegion(child: evaluateWidgetExpression((tree.flutterMaterialTextFieldTapRegion.hasChild() ? tree.flutterMaterialTextFieldTapRegion.child : null)), enabled: (tree.flutterMaterialTextFieldTapRegion.hasEnabled() ? tree.flutterMaterialTextFieldTapRegion.enabled : true), debugLabel: (tree.flutterMaterialTextFieldTapRegion.hasDebugLabel() ? tree.flutterMaterialTextFieldTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterMaterialTextFormField:
      return $l1.TextFormField(initialValue: (tree.flutterMaterialTextFormField.hasInitialValue() ? tree.flutterMaterialTextFormField.initialValue : null), autofocus: (tree.flutterMaterialTextFormField.hasAutofocus() ? tree.flutterMaterialTextFormField.autofocus : false), readOnly: (tree.flutterMaterialTextFormField.hasReadOnly() ? tree.flutterMaterialTextFormField.readOnly : false), showCursor: (tree.flutterMaterialTextFormField.hasShowCursor() ? tree.flutterMaterialTextFormField.showCursor : null), obscuringCharacter: (tree.flutterMaterialTextFormField.hasObscuringCharacter() ? tree.flutterMaterialTextFormField.obscuringCharacter : '•'), obscureText: (tree.flutterMaterialTextFormField.hasObscureText() ? tree.flutterMaterialTextFormField.obscureText : false), autocorrect: (tree.flutterMaterialTextFormField.hasAutocorrect() ? tree.flutterMaterialTextFormField.autocorrect : true), enableSuggestions: (tree.flutterMaterialTextFormField.hasEnableSuggestions() ? tree.flutterMaterialTextFormField.enableSuggestions : true), maxLines: (tree.flutterMaterialTextFormField.hasMaxLines() ? tree.flutterMaterialTextFormField.maxLines : 1), minLines: (tree.flutterMaterialTextFormField.hasMinLines() ? tree.flutterMaterialTextFormField.minLines : null), expands: (tree.flutterMaterialTextFormField.hasExpands() ? tree.flutterMaterialTextFormField.expands : false), maxLength: (tree.flutterMaterialTextFormField.hasMaxLength() ? tree.flutterMaterialTextFormField.maxLength : null), enabled: (tree.flutterMaterialTextFormField.hasEnabled() ? tree.flutterMaterialTextFormField.enabled : null), cursorWidth: (tree.flutterMaterialTextFormField.hasCursorWidth() ? tree.flutterMaterialTextFormField.cursorWidth : 2.0), cursorHeight: (tree.flutterMaterialTextFormField.hasCursorHeight() ? tree.flutterMaterialTextFormField.cursorHeight : null), enableInteractiveSelection: (tree.flutterMaterialTextFormField.hasEnableInteractiveSelection() ? tree.flutterMaterialTextFormField.enableInteractiveSelection : null), autofillHints: tree.flutterMaterialTextFormField.autofillHints, restorationId: (tree.flutterMaterialTextFormField.hasRestorationId() ? tree.flutterMaterialTextFormField.restorationId : null), enableIMEPersonalizedLearning: (tree.flutterMaterialTextFormField.hasEnableIMEPersonalizedLearning() ? tree.flutterMaterialTextFormField.enableIMEPersonalizedLearning : true), cursorOpacityAnimates: (tree.flutterMaterialTextFormField.hasCursorOpacityAnimates() ? tree.flutterMaterialTextFormField.cursorOpacityAnimates : null), scribbleEnabled: (tree.flutterMaterialTextFormField.hasScribbleEnabled() ? tree.flutterMaterialTextFormField.scribbleEnabled : true), canRequestFocus: (tree.flutterMaterialTextFormField.hasCanRequestFocus() ? tree.flutterMaterialTextFormField.canRequestFocus : true));
    case proto.WidgetExpression_Result.flutterMaterialTextSelectionGestureDetector:
      return $l1.TextSelectionGestureDetector(child: evaluateRequiredWidgetExpression((tree.flutterMaterialTextSelectionGestureDetector.hasChild() ? tree.flutterMaterialTextSelectionGestureDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialTexture:
      return $l1.Texture(textureId: (tree.flutterMaterialTexture.hasTextureId() ? tree.flutterMaterialTexture.textureId : missing('textureId')), freeze: (tree.flutterMaterialTexture.hasFreeze_4() ? tree.flutterMaterialTexture.freeze_4 : false));
    case proto.WidgetExpression_Result.flutterMaterialTickerMode:
      return $l1.TickerMode(enabled: (tree.flutterMaterialTickerMode.hasEnabled() ? tree.flutterMaterialTickerMode.enabled : missing('enabled')), child: evaluateRequiredWidgetExpression((tree.flutterMaterialTickerMode.hasChild() ? tree.flutterMaterialTickerMode.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialToggleButtons:
      return $l1.ToggleButtons(children: tree.flutterMaterialToggleButtons.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), isSelected: tree.flutterMaterialToggleButtons.isSelected, renderBorder: (tree.flutterMaterialToggleButtons.hasRenderBorder() ? tree.flutterMaterialToggleButtons.renderBorder : true), borderWidth: (tree.flutterMaterialToggleButtons.hasBorderWidth() ? tree.flutterMaterialToggleButtons.borderWidth : null));
    case proto.WidgetExpression_Result.flutterMaterialTooltip:
      return $l1.Tooltip(message: (tree.flutterMaterialTooltip.hasMessage() ? tree.flutterMaterialTooltip.message : null), height: (tree.flutterMaterialTooltip.hasHeight() ? tree.flutterMaterialTooltip.height : null), verticalOffset: (tree.flutterMaterialTooltip.hasVerticalOffset() ? tree.flutterMaterialTooltip.verticalOffset : null), preferBelow: (tree.flutterMaterialTooltip.hasPreferBelow() ? tree.flutterMaterialTooltip.preferBelow : null), excludeFromSemantics: (tree.flutterMaterialTooltip.hasExcludeFromSemantics() ? tree.flutterMaterialTooltip.excludeFromSemantics : null), enableFeedback: (tree.flutterMaterialTooltip.hasEnableFeedback() ? tree.flutterMaterialTooltip.enableFeedback : null), child: evaluateWidgetExpression((tree.flutterMaterialTooltip.hasChild() ? tree.flutterMaterialTooltip.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTooltipVisibility:
      return $l1.TooltipVisibility(visible: (tree.flutterMaterialTooltipVisibility.hasVisible() ? tree.flutterMaterialTooltipVisibility.visible : missing('visible')), child: evaluateRequiredWidgetExpression((tree.flutterMaterialTooltipVisibility.hasChild() ? tree.flutterMaterialTooltipVisibility.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialTransformNamedFlip:
      return $l1.Transform.flip(flipX: (tree.flutterMaterialTransformNamedFlip.hasFlipX() ? tree.flutterMaterialTransformNamedFlip.flipX : false), flipY: (tree.flutterMaterialTransformNamedFlip.hasFlipY() ? tree.flutterMaterialTransformNamedFlip.flipY : false), transformHitTests: (tree.flutterMaterialTransformNamedFlip.hasTransformHitTests() ? tree.flutterMaterialTransformNamedFlip.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterMaterialTransformNamedFlip.hasChild() ? tree.flutterMaterialTransformNamedFlip.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTransformNamedRotate:
      return $l1.Transform.rotate(angle: (tree.flutterMaterialTransformNamedRotate.hasAngle() ? tree.flutterMaterialTransformNamedRotate.angle : missing('angle')), transformHitTests: (tree.flutterMaterialTransformNamedRotate.hasTransformHitTests() ? tree.flutterMaterialTransformNamedRotate.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterMaterialTransformNamedRotate.hasChild() ? tree.flutterMaterialTransformNamedRotate.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialTransformNamedScale:
      return $l1.Transform.scale(scale: (tree.flutterMaterialTransformNamedScale.hasScale() ? tree.flutterMaterialTransformNamedScale.scale : null), scaleX: (tree.flutterMaterialTransformNamedScale.hasScaleX() ? tree.flutterMaterialTransformNamedScale.scaleX : null), scaleY: (tree.flutterMaterialTransformNamedScale.hasScaleY() ? tree.flutterMaterialTransformNamedScale.scaleY : null), transformHitTests: (tree.flutterMaterialTransformNamedScale.hasTransformHitTests() ? tree.flutterMaterialTransformNamedScale.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterMaterialTransformNamedScale.hasChild() ? tree.flutterMaterialTransformNamedScale.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialUiKitView:
      return $l1.UiKitView(viewType: (tree.flutterMaterialUiKitView.hasViewType() ? tree.flutterMaterialUiKitView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterMaterialUnconstrainedBox:
      return $l1.UnconstrainedBox(child: evaluateWidgetExpression((tree.flutterMaterialUnconstrainedBox.hasChild() ? tree.flutterMaterialUnconstrainedBox.child : null)));
    case proto.WidgetExpression_Result.flutterMaterialUnmanagedRestorationScope:
      return $l1.UnmanagedRestorationScope(child: evaluateRequiredWidgetExpression((tree.flutterMaterialUnmanagedRestorationScope.hasChild() ? tree.flutterMaterialUnmanagedRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterMaterialUserAccountsDrawerHeader:
      return $l1.UserAccountsDrawerHeader(currentAccountPicture: evaluateWidgetExpression((tree.flutterMaterialUserAccountsDrawerHeader.hasCurrentAccountPicture() ? tree.flutterMaterialUserAccountsDrawerHeader.currentAccountPicture : null)), otherAccountsPictures: tree.flutterMaterialUserAccountsDrawerHeader.otherAccountsPictures.map((e) => evaluateRequiredWidgetExpression(e)).toList(), accountName: evaluateWidgetExpression((tree.flutterMaterialUserAccountsDrawerHeader.hasAccountName() ? tree.flutterMaterialUserAccountsDrawerHeader.accountName : null)), accountEmail: evaluateWidgetExpression((tree.flutterMaterialUserAccountsDrawerHeader.hasAccountEmail() ? tree.flutterMaterialUserAccountsDrawerHeader.accountEmail : null)));
    case proto.WidgetExpression_Result.flutterMaterialVerticalDivider:
      return $l1.VerticalDivider(width: (tree.flutterMaterialVerticalDivider.hasWidth() ? tree.flutterMaterialVerticalDivider.width : null), thickness: (tree.flutterMaterialVerticalDivider.hasThickness() ? tree.flutterMaterialVerticalDivider.thickness : null), indent: (tree.flutterMaterialVerticalDivider.hasIndent() ? tree.flutterMaterialVerticalDivider.indent : null), endIndent: (tree.flutterMaterialVerticalDivider.hasEndIndent() ? tree.flutterMaterialVerticalDivider.endIndent : null));
    case proto.WidgetExpression_Result.flutterMaterialVisibility:
      return $l1.Visibility(child: evaluateRequiredWidgetExpression((tree.flutterMaterialVisibility.hasChild() ? tree.flutterMaterialVisibility.child : missing('child'))), replacement: evaluateRequiredWidgetExpression((tree.flutterMaterialVisibility.hasReplacement() ? tree.flutterMaterialVisibility.replacement : missing('replacement'))), visible: (tree.flutterMaterialVisibility.hasVisible() ? tree.flutterMaterialVisibility.visible : true), maintainState: (tree.flutterMaterialVisibility.hasMaintainState() ? tree.flutterMaterialVisibility.maintainState : false), maintainAnimation: (tree.flutterMaterialVisibility.hasMaintainAnimation() ? tree.flutterMaterialVisibility.maintainAnimation : false), maintainSize: (tree.flutterMaterialVisibility.hasMaintainSize() ? tree.flutterMaterialVisibility.maintainSize : false), maintainSemantics: (tree.flutterMaterialVisibility.hasMaintainSemantics() ? tree.flutterMaterialVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterMaterialVisibility.hasMaintainInteractivity() ? tree.flutterMaterialVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterMaterialVisibilityNamedMaintain:
      return $l1.Visibility.maintain(child: evaluateRequiredWidgetExpression((tree.flutterMaterialVisibilityNamedMaintain.hasChild() ? tree.flutterMaterialVisibilityNamedMaintain.child : missing('child'))), visible: (tree.flutterMaterialVisibilityNamedMaintain.hasVisible() ? tree.flutterMaterialVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterMaterialWrap:
      return $l1.Wrap(spacing: (tree.flutterMaterialWrap.hasSpacing() ? tree.flutterMaterialWrap.spacing : 0.0), runSpacing: (tree.flutterMaterialWrap.hasRunSpacing() ? tree.flutterMaterialWrap.runSpacing : 0.0), children: tree.flutterMaterialWrap.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsAbsorbPointer:
      return $l2.AbsorbPointer(absorbing: (tree.flutterWidgetsAbsorbPointer.hasAbsorbing() ? tree.flutterWidgetsAbsorbPointer.absorbing : true), child: evaluateWidgetExpression((tree.flutterWidgetsAbsorbPointer.hasChild() ? tree.flutterWidgetsAbsorbPointer.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsAlign:
      return $l2.Align(widthFactor: (tree.flutterWidgetsAlign.hasWidthFactor() ? tree.flutterWidgetsAlign.widthFactor : null), heightFactor: (tree.flutterWidgetsAlign.hasHeightFactor() ? tree.flutterWidgetsAlign.heightFactor : null), child: evaluateWidgetExpression((tree.flutterWidgetsAlign.hasChild() ? tree.flutterWidgetsAlign.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsAndroidView:
      return $l2.AndroidView(viewType: (tree.flutterWidgetsAndroidView.hasViewType() ? tree.flutterWidgetsAndroidView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterWidgetsAspectRatio:
      return $l2.AspectRatio(aspectRatio: (tree.flutterWidgetsAspectRatio.hasAspectRatio() ? tree.flutterWidgetsAspectRatio.aspectRatio : missing('aspectRatio')), child: evaluateWidgetExpression((tree.flutterWidgetsAspectRatio.hasChild() ? tree.flutterWidgetsAspectRatio.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsAutofillGroup:
      return $l2.AutofillGroup(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsAutofillGroup.hasChild() ? tree.flutterWidgetsAutofillGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsAutomaticKeepAlive:
      return $l2.AutomaticKeepAlive(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsAutomaticKeepAlive.hasChild() ? tree.flutterWidgetsAutomaticKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsBlockSemantics:
      return $l2.BlockSemantics(blocking: (tree.flutterWidgetsBlockSemantics.hasBlocking() ? tree.flutterWidgetsBlockSemantics.blocking : true), child: evaluateWidgetExpression((tree.flutterWidgetsBlockSemantics.hasChild() ? tree.flutterWidgetsBlockSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsCenter:
      return $l2.Center(widthFactor: (tree.flutterWidgetsCenter.hasWidthFactor() ? tree.flutterWidgetsCenter.widthFactor : null), heightFactor: (tree.flutterWidgetsCenter.hasHeightFactor() ? tree.flutterWidgetsCenter.heightFactor : null), child: evaluateWidgetExpression((tree.flutterWidgetsCenter.hasChild() ? tree.flutterWidgetsCenter.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsCheckedModeBanner:
      return $l2.CheckedModeBanner(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsCheckedModeBanner.hasChild() ? tree.flutterWidgetsCheckedModeBanner.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsClipOval:
      return $l2.ClipOval(child: evaluateWidgetExpression((tree.flutterWidgetsClipOval.hasChild() ? tree.flutterWidgetsClipOval.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsClipPath:
      return $l2.ClipPath(child: evaluateWidgetExpression((tree.flutterWidgetsClipPath.hasChild() ? tree.flutterWidgetsClipPath.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsClipRRect:
      return $l2.ClipRRect(child: evaluateWidgetExpression((tree.flutterWidgetsClipRRect.hasChild() ? tree.flutterWidgetsClipRRect.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsClipRect:
      return $l2.ClipRect(child: evaluateWidgetExpression((tree.flutterWidgetsClipRect.hasChild() ? tree.flutterWidgetsClipRect.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsColumn:
      return $l2.Column(children: tree.flutterWidgetsColumn.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsContainer:
      return $l2.Container(width: (tree.flutterWidgetsContainer.hasWidth() ? tree.flutterWidgetsContainer.width : null), height: (tree.flutterWidgetsContainer.hasHeight() ? tree.flutterWidgetsContainer.height : null), child: evaluateWidgetExpression((tree.flutterWidgetsContainer.hasChild() ? tree.flutterWidgetsContainer.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsCustomPaint:
      return $l2.CustomPaint(isComplex: (tree.flutterWidgetsCustomPaint.hasIsComplex() ? tree.flutterWidgetsCustomPaint.isComplex : false), willChange: (tree.flutterWidgetsCustomPaint.hasWillChange() ? tree.flutterWidgetsCustomPaint.willChange : false), child: evaluateWidgetExpression((tree.flutterWidgetsCustomPaint.hasChild() ? tree.flutterWidgetsCustomPaint.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsCustomScrollView:
      return $l2.CustomScrollView(reverse: (tree.flutterWidgetsCustomScrollView.hasReverse() ? tree.flutterWidgetsCustomScrollView.reverse : false), primary: (tree.flutterWidgetsCustomScrollView.hasPrimary() ? tree.flutterWidgetsCustomScrollView.primary : null), shrinkWrap: (tree.flutterWidgetsCustomScrollView.hasShrinkWrap() ? tree.flutterWidgetsCustomScrollView.shrinkWrap : false), anchor: (tree.flutterWidgetsCustomScrollView.hasAnchor() ? tree.flutterWidgetsCustomScrollView.anchor : 0.0), cacheExtent: (tree.flutterWidgetsCustomScrollView.hasCacheExtent() ? tree.flutterWidgetsCustomScrollView.cacheExtent : null), slivers: tree.flutterWidgetsCustomScrollView.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterWidgetsCustomScrollView.hasSemanticChildCount() ? tree.flutterWidgetsCustomScrollView.semanticChildCount : null), restorationId: (tree.flutterWidgetsCustomScrollView.hasRestorationId() ? tree.flutterWidgetsCustomScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterWidgetsDefaultSelectionStyle:
      return $l2.DefaultSelectionStyle(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsDefaultSelectionStyle.hasChild() ? tree.flutterWidgetsDefaultSelectionStyle.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsDefaultSelectionStyleNamedFallback:
      return $l2.DefaultSelectionStyle.fallback();
    case proto.WidgetExpression_Result.flutterWidgetsDefaultTextEditingShortcuts:
      return $l2.DefaultTextEditingShortcuts(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsDefaultTextEditingShortcuts.hasChild() ? tree.flutterWidgetsDefaultTextEditingShortcuts.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsDefaultTextStyleNamedFallback:
      return $l2.DefaultTextStyle.fallback();
    case proto.WidgetExpression_Result.flutterWidgetsDisplayFeatureSubScreen:
      return $l2.DisplayFeatureSubScreen(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsDisplayFeatureSubScreen.hasChild() ? tree.flutterWidgetsDisplayFeatureSubScreen.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsDraggable:
      return $l2.Draggable(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsDraggable.hasChild() ? tree.flutterWidgetsDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterWidgetsDraggable.hasFeedback() ? tree.flutterWidgetsDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterWidgetsDraggable.hasChildWhenDragging() ? tree.flutterWidgetsDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterWidgetsDraggable.hasMaxSimultaneousDrags() ? tree.flutterWidgetsDraggable.maxSimultaneousDrags : null), ignoringFeedbackSemantics: (tree.flutterWidgetsDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterWidgetsDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterWidgetsDraggable.hasIgnoringFeedbackPointer() ? tree.flutterWidgetsDraggable.ignoringFeedbackPointer : true), rootOverlay: (tree.flutterWidgetsDraggable.hasRootOverlay() ? tree.flutterWidgetsDraggable.rootOverlay : false));
    case proto.WidgetExpression_Result.flutterWidgetsDraggableScrollableActuator:
      return $l2.DraggableScrollableActuator(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsDraggableScrollableActuator.hasChild() ? tree.flutterWidgetsDraggableScrollableActuator.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsErrorWidgetNamedWithDetails:
      return $l2.ErrorWidget.withDetails(message: (tree.flutterWidgetsErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterWidgetsErrorWidgetNamedWithDetails.message : ''));
    case proto.WidgetExpression_Result.flutterWidgetsExcludeFocus:
      return $l2.ExcludeFocus(excluding: (tree.flutterWidgetsExcludeFocus.hasExcluding() ? tree.flutterWidgetsExcludeFocus.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsExcludeFocus.hasChild() ? tree.flutterWidgetsExcludeFocus.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsExcludeFocusTraversal:
      return $l2.ExcludeFocusTraversal(excluding: (tree.flutterWidgetsExcludeFocusTraversal.hasExcluding() ? tree.flutterWidgetsExcludeFocusTraversal.excluding : true), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsExcludeFocusTraversal.hasChild() ? tree.flutterWidgetsExcludeFocusTraversal.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsExcludeSemantics:
      return $l2.ExcludeSemantics(excluding: (tree.flutterWidgetsExcludeSemantics.hasExcluding() ? tree.flutterWidgetsExcludeSemantics.excluding : true), child: evaluateWidgetExpression((tree.flutterWidgetsExcludeSemantics.hasChild() ? tree.flutterWidgetsExcludeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsExpanded:
      return $l2.Expanded(flex: (tree.flutterWidgetsExpanded.hasFlex() ? tree.flutterWidgetsExpanded.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsExpanded.hasChild() ? tree.flutterWidgetsExpanded.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsFadeInImageNamedAssetNetwork:
      return $l2.FadeInImage.assetNetwork(placeholder: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')), image: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.image : missing('image')), placeholderScale: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.placeholderScale : null), imageScale: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.imageScale : 1.0), excludeFromSemantics: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.excludeFromSemantics : false), imageSemanticLabel: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.imageSemanticLabel : null), width: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.width : null), height: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.height : null), matchTextDirection: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.matchTextDirection : false), placeholderCacheWidth: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.placeholderCacheWidth : null), placeholderCacheHeight: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.placeholderCacheHeight : null), imageCacheWidth: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.imageCacheWidth : null), imageCacheHeight: (tree.flutterWidgetsFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterWidgetsFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case proto.WidgetExpression_Result.flutterWidgetsFittedBox:
      return $l2.FittedBox(child: evaluateWidgetExpression((tree.flutterWidgetsFittedBox.hasChild() ? tree.flutterWidgetsFittedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsFlexible:
      return $l2.Flexible(flex: (tree.flutterWidgetsFlexible.hasFlex() ? tree.flutterWidgetsFlexible.flex : 1), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsFlexible.hasChild() ? tree.flutterWidgetsFlexible.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsFocus:
      return $l2.Focus(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsFocus.hasChild() ? tree.flutterWidgetsFocus.child : missing('child'))), autofocus: (tree.flutterWidgetsFocus.hasAutofocus() ? tree.flutterWidgetsFocus.autofocus : false), canRequestFocus: (tree.flutterWidgetsFocus.hasCanRequestFocus() ? tree.flutterWidgetsFocus.canRequestFocus : null), skipTraversal: (tree.flutterWidgetsFocus.hasSkipTraversal() ? tree.flutterWidgetsFocus.skipTraversal : null), descendantsAreFocusable: (tree.flutterWidgetsFocus.hasDescendantsAreFocusable() ? tree.flutterWidgetsFocus.descendantsAreFocusable : null), descendantsAreTraversable: (tree.flutterWidgetsFocus.hasDescendantsAreTraversable() ? tree.flutterWidgetsFocus.descendantsAreTraversable : null), includeSemantics: (tree.flutterWidgetsFocus.hasIncludeSemantics() ? tree.flutterWidgetsFocus.includeSemantics : true), debugLabel: (tree.flutterWidgetsFocus.hasDebugLabel() ? tree.flutterWidgetsFocus.debugLabel : null));
    case proto.WidgetExpression_Result.flutterWidgetsFocusScope:
      return $l2.FocusScope(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsFocusScope.hasChild() ? tree.flutterWidgetsFocusScope.child : missing('child'))), autofocus: (tree.flutterWidgetsFocusScope.hasAutofocus() ? tree.flutterWidgetsFocusScope.autofocus : false), canRequestFocus: (tree.flutterWidgetsFocusScope.hasCanRequestFocus() ? tree.flutterWidgetsFocusScope.canRequestFocus : null), skipTraversal: (tree.flutterWidgetsFocusScope.hasSkipTraversal() ? tree.flutterWidgetsFocusScope.skipTraversal : null), debugLabel: (tree.flutterWidgetsFocusScope.hasDebugLabel() ? tree.flutterWidgetsFocusScope.debugLabel : null));
    case proto.WidgetExpression_Result.flutterWidgetsFocusTraversalGroup:
      return $l2.FocusTraversalGroup(descendantsAreFocusable: (tree.flutterWidgetsFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterWidgetsFocusTraversalGroup.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterWidgetsFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterWidgetsFocusTraversalGroup.descendantsAreTraversable : true), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsFocusTraversalGroup.hasChild() ? tree.flutterWidgetsFocusTraversalGroup.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsFocusableActionDetector:
      return $l2.FocusableActionDetector(enabled: (tree.flutterWidgetsFocusableActionDetector.hasEnabled() ? tree.flutterWidgetsFocusableActionDetector.enabled : true), autofocus: (tree.flutterWidgetsFocusableActionDetector.hasAutofocus() ? tree.flutterWidgetsFocusableActionDetector.autofocus : false), descendantsAreFocusable: (tree.flutterWidgetsFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterWidgetsFocusableActionDetector.descendantsAreFocusable : true), descendantsAreTraversable: (tree.flutterWidgetsFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterWidgetsFocusableActionDetector.descendantsAreTraversable : true), includeFocusSemantics: (tree.flutterWidgetsFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterWidgetsFocusableActionDetector.includeFocusSemantics : true), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsFocusableActionDetector.hasChild() ? tree.flutterWidgetsFocusableActionDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsForm:
      return $l2.Form(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsForm.hasChild() ? tree.flutterWidgetsForm.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsFractionallySizedBox:
      return $l2.FractionallySizedBox(widthFactor: (tree.flutterWidgetsFractionallySizedBox.hasWidthFactor() ? tree.flutterWidgetsFractionallySizedBox.widthFactor : null), heightFactor: (tree.flutterWidgetsFractionallySizedBox.hasHeightFactor() ? tree.flutterWidgetsFractionallySizedBox.heightFactor : null), child: evaluateWidgetExpression((tree.flutterWidgetsFractionallySizedBox.hasChild() ? tree.flutterWidgetsFractionallySizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsGestureDetector:
      return $l2.GestureDetector(child: evaluateWidgetExpression((tree.flutterWidgetsGestureDetector.hasChild() ? tree.flutterWidgetsGestureDetector.child : null)), excludeFromSemantics: (tree.flutterWidgetsGestureDetector.hasExcludeFromSemantics() ? tree.flutterWidgetsGestureDetector.excludeFromSemantics : false), trackpadScrollCausesScale: (tree.flutterWidgetsGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterWidgetsGestureDetector.trackpadScrollCausesScale : false));
    case proto.WidgetExpression_Result.flutterWidgetsGridPaper:
      return $l2.GridPaper(interval: (tree.flutterWidgetsGridPaper.hasInterval() ? tree.flutterWidgetsGridPaper.interval : 100.0), divisions: (tree.flutterWidgetsGridPaper.hasDivisions() ? tree.flutterWidgetsGridPaper.divisions : 2), subdivisions: (tree.flutterWidgetsGridPaper.hasSubdivisions() ? tree.flutterWidgetsGridPaper.subdivisions : 5), child: evaluateWidgetExpression((tree.flutterWidgetsGridPaper.hasChild() ? tree.flutterWidgetsGridPaper.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsGridViewNamedCount:
      return $l2.GridView.count(reverse: (tree.flutterWidgetsGridViewNamedCount.hasReverse() ? tree.flutterWidgetsGridViewNamedCount.reverse : false), primary: (tree.flutterWidgetsGridViewNamedCount.hasPrimary() ? tree.flutterWidgetsGridViewNamedCount.primary : null), shrinkWrap: (tree.flutterWidgetsGridViewNamedCount.hasShrinkWrap() ? tree.flutterWidgetsGridViewNamedCount.shrinkWrap : false), crossAxisCount: (tree.flutterWidgetsGridViewNamedCount.hasCrossAxisCount() ? tree.flutterWidgetsGridViewNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterWidgetsGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterWidgetsGridViewNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterWidgetsGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterWidgetsGridViewNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterWidgetsGridViewNamedCount.hasChildAspectRatio() ? tree.flutterWidgetsGridViewNamedCount.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterWidgetsGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsGridViewNamedCount.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterWidgetsGridViewNamedCount.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterWidgetsGridViewNamedCount.addSemanticIndexes : true), cacheExtent: (tree.flutterWidgetsGridViewNamedCount.hasCacheExtent() ? tree.flutterWidgetsGridViewNamedCount.cacheExtent : null), children: tree.flutterWidgetsGridViewNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterWidgetsGridViewNamedCount.hasSemanticChildCount() ? tree.flutterWidgetsGridViewNamedCount.semanticChildCount : null), restorationId: (tree.flutterWidgetsGridViewNamedCount.hasRestorationId() ? tree.flutterWidgetsGridViewNamedCount.restorationId : null));
    case proto.WidgetExpression_Result.flutterWidgetsGridViewNamedExtent:
      return $l2.GridView.extent(reverse: (tree.flutterWidgetsGridViewNamedExtent.hasReverse() ? tree.flutterWidgetsGridViewNamedExtent.reverse : false), primary: (tree.flutterWidgetsGridViewNamedExtent.hasPrimary() ? tree.flutterWidgetsGridViewNamedExtent.primary : null), shrinkWrap: (tree.flutterWidgetsGridViewNamedExtent.hasShrinkWrap() ? tree.flutterWidgetsGridViewNamedExtent.shrinkWrap : false), maxCrossAxisExtent: (tree.flutterWidgetsGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterWidgetsGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterWidgetsGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterWidgetsGridViewNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterWidgetsGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterWidgetsGridViewNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterWidgetsGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterWidgetsGridViewNamedExtent.childAspectRatio : 1.0), addAutomaticKeepAlives: (tree.flutterWidgetsGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsGridViewNamedExtent.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterWidgetsGridViewNamedExtent.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterWidgetsGridViewNamedExtent.addSemanticIndexes : true), cacheExtent: (tree.flutterWidgetsGridViewNamedExtent.hasCacheExtent() ? tree.flutterWidgetsGridViewNamedExtent.cacheExtent : null), children: tree.flutterWidgetsGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterWidgetsGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterWidgetsGridViewNamedExtent.semanticChildCount : null), restorationId: (tree.flutterWidgetsGridViewNamedExtent.hasRestorationId() ? tree.flutterWidgetsGridViewNamedExtent.restorationId : null));
    case proto.WidgetExpression_Result.flutterWidgetsHeroControllerScopeNamedNone:
      return $l2.HeroControllerScope.none(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsHeroControllerScopeNamedNone.hasChild() ? tree.flutterWidgetsHeroControllerScopeNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsHeroMode:
      return $l2.HeroMode(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsHeroMode.hasChild() ? tree.flutterWidgetsHeroMode.child : missing('child'))), enabled: (tree.flutterWidgetsHeroMode.hasEnabled() ? tree.flutterWidgetsHeroMode.enabled : true));
    case proto.WidgetExpression_Result.flutterWidgetsHtmlElementView:
      return $l2.HtmlElementView(viewType: (tree.flutterWidgetsHtmlElementView.hasViewType() ? tree.flutterWidgetsHtmlElementView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterWidgetsIgnorePointer:
      return $l2.IgnorePointer(ignoring: (tree.flutterWidgetsIgnorePointer.hasIgnoring() ? tree.flutterWidgetsIgnorePointer.ignoring : true), child: evaluateWidgetExpression((tree.flutterWidgetsIgnorePointer.hasChild() ? tree.flutterWidgetsIgnorePointer.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsImageNamedAsset:
      return $l2.Image.asset((tree.flutterWidgetsImageNamedAsset.hasName() ? tree.flutterWidgetsImageNamedAsset.name : missing('name')), semanticLabel: (tree.flutterWidgetsImageNamedAsset.hasSemanticLabel() ? tree.flutterWidgetsImageNamedAsset.semanticLabel : null), excludeFromSemantics: (tree.flutterWidgetsImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterWidgetsImageNamedAsset.excludeFromSemantics : false), scale: (tree.flutterWidgetsImageNamedAsset.hasScale() ? tree.flutterWidgetsImageNamedAsset.scale : null), width: (tree.flutterWidgetsImageNamedAsset.hasWidth() ? tree.flutterWidgetsImageNamedAsset.width : null), height: (tree.flutterWidgetsImageNamedAsset.hasHeight() ? tree.flutterWidgetsImageNamedAsset.height : null), matchTextDirection: (tree.flutterWidgetsImageNamedAsset.hasMatchTextDirection() ? tree.flutterWidgetsImageNamedAsset.matchTextDirection : false), gaplessPlayback: (tree.flutterWidgetsImageNamedAsset.hasGaplessPlayback() ? tree.flutterWidgetsImageNamedAsset.gaplessPlayback : false), isAntiAlias: (tree.flutterWidgetsImageNamedAsset.hasIsAntiAlias() ? tree.flutterWidgetsImageNamedAsset.isAntiAlias : false), package: (tree.flutterWidgetsImageNamedAsset.hasPackage() ? tree.flutterWidgetsImageNamedAsset.package : null), cacheWidth: (tree.flutterWidgetsImageNamedAsset.hasCacheWidth() ? tree.flutterWidgetsImageNamedAsset.cacheWidth : null), cacheHeight: (tree.flutterWidgetsImageNamedAsset.hasCacheHeight() ? tree.flutterWidgetsImageNamedAsset.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterWidgetsImageNamedNetwork:
      return $l2.Image.network((tree.flutterWidgetsImageNamedNetwork.hasSrc() ? tree.flutterWidgetsImageNamedNetwork.src : missing('src')), scale: (tree.flutterWidgetsImageNamedNetwork.hasScale() ? tree.flutterWidgetsImageNamedNetwork.scale : 1.0), semanticLabel: (tree.flutterWidgetsImageNamedNetwork.hasSemanticLabel() ? tree.flutterWidgetsImageNamedNetwork.semanticLabel : null), excludeFromSemantics: (tree.flutterWidgetsImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterWidgetsImageNamedNetwork.excludeFromSemantics : false), width: (tree.flutterWidgetsImageNamedNetwork.hasWidth() ? tree.flutterWidgetsImageNamedNetwork.width : null), height: (tree.flutterWidgetsImageNamedNetwork.hasHeight() ? tree.flutterWidgetsImageNamedNetwork.height : null), matchTextDirection: (tree.flutterWidgetsImageNamedNetwork.hasMatchTextDirection() ? tree.flutterWidgetsImageNamedNetwork.matchTextDirection : false), gaplessPlayback: (tree.flutterWidgetsImageNamedNetwork.hasGaplessPlayback() ? tree.flutterWidgetsImageNamedNetwork.gaplessPlayback : false), isAntiAlias: (tree.flutterWidgetsImageNamedNetwork.hasIsAntiAlias() ? tree.flutterWidgetsImageNamedNetwork.isAntiAlias : false), cacheWidth: (tree.flutterWidgetsImageNamedNetwork.hasCacheWidth() ? tree.flutterWidgetsImageNamedNetwork.cacheWidth : null), cacheHeight: (tree.flutterWidgetsImageNamedNetwork.hasCacheHeight() ? tree.flutterWidgetsImageNamedNetwork.cacheHeight : null));
    case proto.WidgetExpression_Result.flutterWidgetsIndexedSemantics:
      return $l2.IndexedSemantics(index: (tree.flutterWidgetsIndexedSemantics.hasIndex() ? tree.flutterWidgetsIndexedSemantics.index : missing('index')), child: evaluateWidgetExpression((tree.flutterWidgetsIndexedSemantics.hasChild() ? tree.flutterWidgetsIndexedSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsIndexedStack:
      return $l2.IndexedStack(index: (tree.flutterWidgetsIndexedStack.hasIndex() ? tree.flutterWidgetsIndexedStack.index : 0), children: tree.flutterWidgetsIndexedStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsInteractiveViewer:
      return $l2.InteractiveViewer(constrained: (tree.flutterWidgetsInteractiveViewer.hasConstrained() ? tree.flutterWidgetsInteractiveViewer.constrained : true), maxScale: (tree.flutterWidgetsInteractiveViewer.hasMaxScale() ? tree.flutterWidgetsInteractiveViewer.maxScale : 2.5), minScale: (tree.flutterWidgetsInteractiveViewer.hasMinScale() ? tree.flutterWidgetsInteractiveViewer.minScale : 0.8), interactionEndFrictionCoefficient: (tree.flutterWidgetsInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterWidgetsInteractiveViewer.interactionEndFrictionCoefficient : missing('interactionEndFrictionCoefficient')), panEnabled: (tree.flutterWidgetsInteractiveViewer.hasPanEnabled() ? tree.flutterWidgetsInteractiveViewer.panEnabled : true), scaleEnabled: (tree.flutterWidgetsInteractiveViewer.hasScaleEnabled() ? tree.flutterWidgetsInteractiveViewer.scaleEnabled : true), scaleFactor: (tree.flutterWidgetsInteractiveViewer.hasScaleFactor() ? tree.flutterWidgetsInteractiveViewer.scaleFactor : missing('scaleFactor')), trackpadScrollCausesScale: (tree.flutterWidgetsInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterWidgetsInteractiveViewer.trackpadScrollCausesScale : false), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsInteractiveViewer.hasChild() ? tree.flutterWidgetsInteractiveViewer.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsIntrinsicHeight:
      return $l2.IntrinsicHeight(child: evaluateWidgetExpression((tree.flutterWidgetsIntrinsicHeight.hasChild() ? tree.flutterWidgetsIntrinsicHeight.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsIntrinsicWidth:
      return $l2.IntrinsicWidth(stepWidth: (tree.flutterWidgetsIntrinsicWidth.hasStepWidth() ? tree.flutterWidgetsIntrinsicWidth.stepWidth : null), stepHeight: (tree.flutterWidgetsIntrinsicWidth.hasStepHeight() ? tree.flutterWidgetsIntrinsicWidth.stepHeight : null), child: evaluateWidgetExpression((tree.flutterWidgetsIntrinsicWidth.hasChild() ? tree.flutterWidgetsIntrinsicWidth.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsKeepAlive:
      return $l2.KeepAlive(keepAlive: (tree.flutterWidgetsKeepAlive.hasKeepAlive() ? tree.flutterWidgetsKeepAlive.keepAlive : missing('keepAlive')), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsKeepAlive.hasChild() ? tree.flutterWidgetsKeepAlive.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsKeyedSubtree:
      return $l2.KeyedSubtree(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsKeyedSubtree.hasChild() ? tree.flutterWidgetsKeyedSubtree.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsKeyedSubtreeNamedWrap:
      return $l2.KeyedSubtree.wrap(evaluateRequiredWidgetExpression((tree.flutterWidgetsKeyedSubtreeNamedWrap.hasChild() ? tree.flutterWidgetsKeyedSubtreeNamedWrap.child : missing('child'))), (tree.flutterWidgetsKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterWidgetsKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterWidgetsLimitedBox:
      return $l2.LimitedBox(maxWidth: (tree.flutterWidgetsLimitedBox.hasMaxWidth() ? tree.flutterWidgetsLimitedBox.maxWidth : missing('maxWidth')), maxHeight: (tree.flutterWidgetsLimitedBox.hasMaxHeight() ? tree.flutterWidgetsLimitedBox.maxHeight : missing('maxHeight')), child: evaluateWidgetExpression((tree.flutterWidgetsLimitedBox.hasChild() ? tree.flutterWidgetsLimitedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsListBody:
      return $l2.ListBody(reverse: (tree.flutterWidgetsListBody.hasReverse() ? tree.flutterWidgetsListBody.reverse : false), children: tree.flutterWidgetsListBody.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsListView:
      return $l2.ListView(reverse: (tree.flutterWidgetsListView.hasReverse() ? tree.flutterWidgetsListView.reverse : false), primary: (tree.flutterWidgetsListView.hasPrimary() ? tree.flutterWidgetsListView.primary : null), shrinkWrap: (tree.flutterWidgetsListView.hasShrinkWrap() ? tree.flutterWidgetsListView.shrinkWrap : false), itemExtent: (tree.flutterWidgetsListView.hasItemExtent() ? tree.flutterWidgetsListView.itemExtent : null), prototypeItem: evaluateWidgetExpression((tree.flutterWidgetsListView.hasPrototypeItem() ? tree.flutterWidgetsListView.prototypeItem : null)), addAutomaticKeepAlives: (tree.flutterWidgetsListView.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsListView.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsListView.hasAddRepaintBoundaries() ? tree.flutterWidgetsListView.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsListView.hasAddSemanticIndexes() ? tree.flutterWidgetsListView.addSemanticIndexes : true), cacheExtent: (tree.flutterWidgetsListView.hasCacheExtent() ? tree.flutterWidgetsListView.cacheExtent : null), children: tree.flutterWidgetsListView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), semanticChildCount: (tree.flutterWidgetsListView.hasSemanticChildCount() ? tree.flutterWidgetsListView.semanticChildCount : null), restorationId: (tree.flutterWidgetsListView.hasRestorationId() ? tree.flutterWidgetsListView.restorationId : null));
    case proto.WidgetExpression_Result.flutterWidgetsListWheelScrollView:
      return $l2.ListWheelScrollView(diameterRatio: (tree.flutterWidgetsListWheelScrollView.hasDiameterRatio() ? tree.flutterWidgetsListWheelScrollView.diameterRatio : missing('diameterRatio')), perspective: (tree.flutterWidgetsListWheelScrollView.hasPerspective() ? tree.flutterWidgetsListWheelScrollView.perspective : missing('perspective')), offAxisFraction: (tree.flutterWidgetsListWheelScrollView.hasOffAxisFraction() ? tree.flutterWidgetsListWheelScrollView.offAxisFraction : 0.0), useMagnifier: (tree.flutterWidgetsListWheelScrollView.hasUseMagnifier() ? tree.flutterWidgetsListWheelScrollView.useMagnifier : false), magnification: (tree.flutterWidgetsListWheelScrollView.hasMagnification() ? tree.flutterWidgetsListWheelScrollView.magnification : 1.0), overAndUnderCenterOpacity: (tree.flutterWidgetsListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterWidgetsListWheelScrollView.overAndUnderCenterOpacity : 1.0), itemExtent: (tree.flutterWidgetsListWheelScrollView.hasItemExtent() ? tree.flutterWidgetsListWheelScrollView.itemExtent : missing('itemExtent')), squeeze: (tree.flutterWidgetsListWheelScrollView.hasSqueeze() ? tree.flutterWidgetsListWheelScrollView.squeeze : 1.0), renderChildrenOutsideViewport: (tree.flutterWidgetsListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterWidgetsListWheelScrollView.renderChildrenOutsideViewport : false), restorationId: (tree.flutterWidgetsListWheelScrollView.hasRestorationId() ? tree.flutterWidgetsListWheelScrollView.restorationId : null), children: tree.flutterWidgetsListWheelScrollView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsListener:
      return $l2.Listener(child: evaluateWidgetExpression((tree.flutterWidgetsListener.hasChild() ? tree.flutterWidgetsListener.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsLongPressDraggable:
      return $l2.LongPressDraggable(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsLongPressDraggable.hasChild() ? tree.flutterWidgetsLongPressDraggable.child : missing('child'))), feedback: evaluateRequiredWidgetExpression((tree.flutterWidgetsLongPressDraggable.hasFeedback() ? tree.flutterWidgetsLongPressDraggable.feedback : missing('feedback'))), childWhenDragging: evaluateWidgetExpression((tree.flutterWidgetsLongPressDraggable.hasChildWhenDragging() ? tree.flutterWidgetsLongPressDraggable.childWhenDragging : null)), maxSimultaneousDrags: (tree.flutterWidgetsLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterWidgetsLongPressDraggable.maxSimultaneousDrags : null), hapticFeedbackOnStart: (tree.flutterWidgetsLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterWidgetsLongPressDraggable.hapticFeedbackOnStart : true), ignoringFeedbackSemantics: (tree.flutterWidgetsLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterWidgetsLongPressDraggable.ignoringFeedbackSemantics : true), ignoringFeedbackPointer: (tree.flutterWidgetsLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterWidgetsLongPressDraggable.ignoringFeedbackPointer : true));
    case proto.WidgetExpression_Result.flutterWidgetsLookupBoundary:
      return $l2.LookupBoundary(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsLookupBoundary.hasChild() ? tree.flutterWidgetsLookupBoundary.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsMergeSemantics:
      return $l2.MergeSemantics(child: evaluateWidgetExpression((tree.flutterWidgetsMergeSemantics.hasChild() ? tree.flutterWidgetsMergeSemantics.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsMetaData:
      return $l2.MetaData(child: evaluateWidgetExpression((tree.flutterWidgetsMetaData.hasChild() ? tree.flutterWidgetsMetaData.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsModalBarrier:
      return $l2.ModalBarrier(dismissible: (tree.flutterWidgetsModalBarrier.hasDismissible() ? tree.flutterWidgetsModalBarrier.dismissible : true), semanticsLabel: (tree.flutterWidgetsModalBarrier.hasSemanticsLabel() ? tree.flutterWidgetsModalBarrier.semanticsLabel : null), barrierSemanticsDismissible: (tree.flutterWidgetsModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterWidgetsModalBarrier.barrierSemanticsDismissible : true), semanticsOnTapHint: (tree.flutterWidgetsModalBarrier.hasSemanticsOnTapHint() ? tree.flutterWidgetsModalBarrier.semanticsOnTapHint : null));
    case proto.WidgetExpression_Result.flutterWidgetsMouseRegion:
      return $l2.MouseRegion(opaque: (tree.flutterWidgetsMouseRegion.hasOpaque() ? tree.flutterWidgetsMouseRegion.opaque : true), child: evaluateWidgetExpression((tree.flutterWidgetsMouseRegion.hasChild() ? tree.flutterWidgetsMouseRegion.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsNavigationToolbar:
      return $l2.NavigationToolbar(leading: evaluateWidgetExpression((tree.flutterWidgetsNavigationToolbar.hasLeading() ? tree.flutterWidgetsNavigationToolbar.leading : null)), middle: evaluateWidgetExpression((tree.flutterWidgetsNavigationToolbar.hasMiddle() ? tree.flutterWidgetsNavigationToolbar.middle : null)), trailing: evaluateWidgetExpression((tree.flutterWidgetsNavigationToolbar.hasTrailing() ? tree.flutterWidgetsNavigationToolbar.trailing : null)), centerMiddle: (tree.flutterWidgetsNavigationToolbar.hasCenterMiddle() ? tree.flutterWidgetsNavigationToolbar.centerMiddle : true), middleSpacing: (tree.flutterWidgetsNavigationToolbar.hasMiddleSpacing() ? tree.flutterWidgetsNavigationToolbar.middleSpacing : missing('middleSpacing')));
    case proto.WidgetExpression_Result.flutterWidgetsNavigator:
      return $l2.Navigator(initialRoute: (tree.flutterWidgetsNavigator.hasInitialRoute() ? tree.flutterWidgetsNavigator.initialRoute : null), reportsRouteUpdateToEngine: (tree.flutterWidgetsNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterWidgetsNavigator.reportsRouteUpdateToEngine : false), requestFocus: (tree.flutterWidgetsNavigator.hasRequestFocus() ? tree.flutterWidgetsNavigator.requestFocus : true), restorationScopeId: (tree.flutterWidgetsNavigator.hasRestorationScopeId() ? tree.flutterWidgetsNavigator.restorationScopeId : null));
    case proto.WidgetExpression_Result.flutterWidgetsNotificationListener:
      return $l2.NotificationListener(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsNotificationListener.hasChild() ? tree.flutterWidgetsNotificationListener.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsOffstage:
      return $l2.Offstage(offstage: (tree.flutterWidgetsOffstage.hasOffstage() ? tree.flutterWidgetsOffstage.offstage : true), child: evaluateWidgetExpression((tree.flutterWidgetsOffstage.hasChild() ? tree.flutterWidgetsOffstage.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsOpacity:
      return $l2.Opacity(opacity: (tree.flutterWidgetsOpacity.hasOpacity() ? tree.flutterWidgetsOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterWidgetsOpacity.hasAlwaysIncludeSemantics() ? tree.flutterWidgetsOpacity.alwaysIncludeSemantics : false), child: evaluateWidgetExpression((tree.flutterWidgetsOpacity.hasChild() ? tree.flutterWidgetsOpacity.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsOverflowBar:
      return $l2.OverflowBar(spacing: (tree.flutterWidgetsOverflowBar.hasSpacing() ? tree.flutterWidgetsOverflowBar.spacing : 0.0), overflowSpacing: (tree.flutterWidgetsOverflowBar.hasOverflowSpacing() ? tree.flutterWidgetsOverflowBar.overflowSpacing : 0.0), children: tree.flutterWidgetsOverflowBar.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsOverflowBox:
      return $l2.OverflowBox(minWidth: (tree.flutterWidgetsOverflowBox.hasMinWidth() ? tree.flutterWidgetsOverflowBox.minWidth : null), maxWidth: (tree.flutterWidgetsOverflowBox.hasMaxWidth() ? tree.flutterWidgetsOverflowBox.maxWidth : null), minHeight: (tree.flutterWidgetsOverflowBox.hasMinHeight() ? tree.flutterWidgetsOverflowBox.minHeight : null), maxHeight: (tree.flutterWidgetsOverflowBox.hasMaxHeight() ? tree.flutterWidgetsOverflowBox.maxHeight : null), child: evaluateWidgetExpression((tree.flutterWidgetsOverflowBox.hasChild() ? tree.flutterWidgetsOverflowBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsOverlay:
      return $l2.Overlay();
    case proto.WidgetExpression_Result.flutterWidgetsPageView:
      return $l2.PageView(reverse: (tree.flutterWidgetsPageView.hasReverse() ? tree.flutterWidgetsPageView.reverse : false), pageSnapping: (tree.flutterWidgetsPageView.hasPageSnapping() ? tree.flutterWidgetsPageView.pageSnapping : true), children: tree.flutterWidgetsPageView.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), allowImplicitScrolling: (tree.flutterWidgetsPageView.hasAllowImplicitScrolling() ? tree.flutterWidgetsPageView.allowImplicitScrolling : false), restorationId: (tree.flutterWidgetsPageView.hasRestorationId() ? tree.flutterWidgetsPageView.restorationId : null), padEnds: (tree.flutterWidgetsPageView.hasPadEnds() ? tree.flutterWidgetsPageView.padEnds : true));
    case proto.WidgetExpression_Result.flutterWidgetsPerformanceOverlay:
      return $l2.PerformanceOverlay(optionsMask: (tree.flutterWidgetsPerformanceOverlay.hasOptionsMask() ? tree.flutterWidgetsPerformanceOverlay.optionsMask : 0), rasterizerThreshold: (tree.flutterWidgetsPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterWidgetsPerformanceOverlay.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterWidgetsPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsPerformanceOverlay.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterWidgetsPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsPerformanceOverlay.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterWidgetsPerformanceOverlayNamedAllEnabled:
      return $l2.PerformanceOverlay.allEnabled(rasterizerThreshold: (tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0), checkerboardRasterCacheImages: (tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false), checkerboardOffscreenLayers: (tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case proto.WidgetExpression_Result.flutterWidgetsPlaceholder:
      return $l2.Placeholder(strokeWidth: (tree.flutterWidgetsPlaceholder.hasStrokeWidth() ? tree.flutterWidgetsPlaceholder.strokeWidth : 2.0), fallbackWidth: (tree.flutterWidgetsPlaceholder.hasFallbackWidth() ? tree.flutterWidgetsPlaceholder.fallbackWidth : 400.0), fallbackHeight: (tree.flutterWidgetsPlaceholder.hasFallbackHeight() ? tree.flutterWidgetsPlaceholder.fallbackHeight : 400.0), child: evaluateWidgetExpression((tree.flutterWidgetsPlaceholder.hasChild() ? tree.flutterWidgetsPlaceholder.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsPlatformSelectableRegionContextMenu:
      return $l2.PlatformSelectableRegionContextMenu(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsPlatformSelectableRegionContextMenu.hasChild() ? tree.flutterWidgetsPlatformSelectableRegionContextMenu.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsPositioned:
      return $l2.Positioned(left: (tree.flutterWidgetsPositioned.hasLeft() ? tree.flutterWidgetsPositioned.left : null), top: (tree.flutterWidgetsPositioned.hasTop() ? tree.flutterWidgetsPositioned.top : null), right: (tree.flutterWidgetsPositioned.hasRight() ? tree.flutterWidgetsPositioned.right : null), bottom: (tree.flutterWidgetsPositioned.hasBottom() ? tree.flutterWidgetsPositioned.bottom : null), width: (tree.flutterWidgetsPositioned.hasWidth() ? tree.flutterWidgetsPositioned.width : null), height: (tree.flutterWidgetsPositioned.hasHeight() ? tree.flutterWidgetsPositioned.height : null), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsPositioned.hasChild() ? tree.flutterWidgetsPositioned.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsPositionedDirectional:
      return $l2.PositionedDirectional(start: (tree.flutterWidgetsPositionedDirectional.hasStart() ? tree.flutterWidgetsPositionedDirectional.start : null), top: (tree.flutterWidgetsPositionedDirectional.hasTop() ? tree.flutterWidgetsPositionedDirectional.top : null), end: (tree.flutterWidgetsPositionedDirectional.hasEnd() ? tree.flutterWidgetsPositionedDirectional.end : null), bottom: (tree.flutterWidgetsPositionedDirectional.hasBottom() ? tree.flutterWidgetsPositionedDirectional.bottom : null), width: (tree.flutterWidgetsPositionedDirectional.hasWidth() ? tree.flutterWidgetsPositionedDirectional.width : null), height: (tree.flutterWidgetsPositionedDirectional.hasHeight() ? tree.flutterWidgetsPositionedDirectional.height : null), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsPositionedDirectional.hasChild() ? tree.flutterWidgetsPositionedDirectional.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsPositionedNamedFill:
      return $l2.Positioned.fill(left: (tree.flutterWidgetsPositionedNamedFill.hasLeft() ? tree.flutterWidgetsPositionedNamedFill.left : 0.0), top: (tree.flutterWidgetsPositionedNamedFill.hasTop() ? tree.flutterWidgetsPositionedNamedFill.top : 0.0), right: (tree.flutterWidgetsPositionedNamedFill.hasRight() ? tree.flutterWidgetsPositionedNamedFill.right : 0.0), bottom: (tree.flutterWidgetsPositionedNamedFill.hasBottom() ? tree.flutterWidgetsPositionedNamedFill.bottom : 0.0), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsPositionedNamedFill.hasChild() ? tree.flutterWidgetsPositionedNamedFill.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsPrimaryScrollControllerNamedNone:
      return $l2.PrimaryScrollController.none(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsPrimaryScrollControllerNamedNone.hasChild() ? tree.flutterWidgetsPrimaryScrollControllerNamedNone.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsRawGestureDetector:
      return $l2.RawGestureDetector(child: evaluateWidgetExpression((tree.flutterWidgetsRawGestureDetector.hasChild() ? tree.flutterWidgetsRawGestureDetector.child : null)), excludeFromSemantics: (tree.flutterWidgetsRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterWidgetsRawGestureDetector.excludeFromSemantics : false));
    case proto.WidgetExpression_Result.flutterWidgetsRawImage:
      return $l2.RawImage(debugImageLabel: (tree.flutterWidgetsRawImage.hasDebugImageLabel() ? tree.flutterWidgetsRawImage.debugImageLabel : null), width: (tree.flutterWidgetsRawImage.hasWidth() ? tree.flutterWidgetsRawImage.width : null), height: (tree.flutterWidgetsRawImage.hasHeight() ? tree.flutterWidgetsRawImage.height : null), scale: (tree.flutterWidgetsRawImage.hasScale() ? tree.flutterWidgetsRawImage.scale : 1.0), matchTextDirection: (tree.flutterWidgetsRawImage.hasMatchTextDirection() ? tree.flutterWidgetsRawImage.matchTextDirection : false), invertColors: (tree.flutterWidgetsRawImage.hasInvertColors() ? tree.flutterWidgetsRawImage.invertColors : false), isAntiAlias: (tree.flutterWidgetsRawImage.hasIsAntiAlias() ? tree.flutterWidgetsRawImage.isAntiAlias : false));
    case proto.WidgetExpression_Result.flutterWidgetsRawScrollbar:
      return $l2.RawScrollbar(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsRawScrollbar.hasChild() ? tree.flutterWidgetsRawScrollbar.child : missing('child'))), thumbVisibility: (tree.flutterWidgetsRawScrollbar.hasThumbVisibility() ? tree.flutterWidgetsRawScrollbar.thumbVisibility : null), thickness: (tree.flutterWidgetsRawScrollbar.hasThickness() ? tree.flutterWidgetsRawScrollbar.thickness : null), minThumbLength: (tree.flutterWidgetsRawScrollbar.hasMinThumbLength() ? tree.flutterWidgetsRawScrollbar.minThumbLength : missing('minThumbLength')), minOverscrollLength: (tree.flutterWidgetsRawScrollbar.hasMinOverscrollLength() ? tree.flutterWidgetsRawScrollbar.minOverscrollLength : null), trackVisibility: (tree.flutterWidgetsRawScrollbar.hasTrackVisibility() ? tree.flutterWidgetsRawScrollbar.trackVisibility : null), interactive: (tree.flutterWidgetsRawScrollbar.hasInteractive() ? tree.flutterWidgetsRawScrollbar.interactive : null), mainAxisMargin: (tree.flutterWidgetsRawScrollbar.hasMainAxisMargin() ? tree.flutterWidgetsRawScrollbar.mainAxisMargin : 0.0), crossAxisMargin: (tree.flutterWidgetsRawScrollbar.hasCrossAxisMargin() ? tree.flutterWidgetsRawScrollbar.crossAxisMargin : 0.0));
    case proto.WidgetExpression_Result.flutterWidgetsReorderableDelayedDragStartListener:
      return $l2.ReorderableDelayedDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsReorderableDelayedDragStartListener.hasChild() ? tree.flutterWidgetsReorderableDelayedDragStartListener.child : missing('child'))), index: (tree.flutterWidgetsReorderableDelayedDragStartListener.hasIndex() ? tree.flutterWidgetsReorderableDelayedDragStartListener.index : missing('index')), enabled: (tree.flutterWidgetsReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterWidgetsReorderableDelayedDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterWidgetsReorderableDragStartListener:
      return $l2.ReorderableDragStartListener(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsReorderableDragStartListener.hasChild() ? tree.flutterWidgetsReorderableDragStartListener.child : missing('child'))), index: (tree.flutterWidgetsReorderableDragStartListener.hasIndex() ? tree.flutterWidgetsReorderableDragStartListener.index : missing('index')), enabled: (tree.flutterWidgetsReorderableDragStartListener.hasEnabled() ? tree.flutterWidgetsReorderableDragStartListener.enabled : true));
    case proto.WidgetExpression_Result.flutterWidgetsRepaintBoundary:
      return $l2.RepaintBoundary(child: evaluateWidgetExpression((tree.flutterWidgetsRepaintBoundary.hasChild() ? tree.flutterWidgetsRepaintBoundary.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsRepaintBoundaryNamedWrap:
      return $l2.RepaintBoundary.wrap(evaluateRequiredWidgetExpression((tree.flutterWidgetsRepaintBoundaryNamedWrap.hasChild() ? tree.flutterWidgetsRepaintBoundaryNamedWrap.child : missing('child'))), (tree.flutterWidgetsRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterWidgetsRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case proto.WidgetExpression_Result.flutterWidgetsRestorationScope:
      return $l2.RestorationScope(restorationId: (tree.flutterWidgetsRestorationScope.hasRestorationId() ? tree.flutterWidgetsRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsRestorationScope.hasChild() ? tree.flutterWidgetsRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsRootRestorationScope:
      return $l2.RootRestorationScope(restorationId: (tree.flutterWidgetsRootRestorationScope.hasRestorationId() ? tree.flutterWidgetsRootRestorationScope.restorationId : null), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsRootRestorationScope.hasChild() ? tree.flutterWidgetsRootRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsRotatedBox:
      return $l2.RotatedBox(quarterTurns: (tree.flutterWidgetsRotatedBox.hasQuarterTurns() ? tree.flutterWidgetsRotatedBox.quarterTurns : missing('quarterTurns')), child: evaluateWidgetExpression((tree.flutterWidgetsRotatedBox.hasChild() ? tree.flutterWidgetsRotatedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsRow:
      return $l2.Row(children: tree.flutterWidgetsRow.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsSafeArea:
      return $l2.SafeArea(left: (tree.flutterWidgetsSafeArea.hasLeft() ? tree.flutterWidgetsSafeArea.left : true), top: (tree.flutterWidgetsSafeArea.hasTop() ? tree.flutterWidgetsSafeArea.top : true), right: (tree.flutterWidgetsSafeArea.hasRight() ? tree.flutterWidgetsSafeArea.right : true), bottom: (tree.flutterWidgetsSafeArea.hasBottom() ? tree.flutterWidgetsSafeArea.bottom : true), maintainBottomViewPadding: (tree.flutterWidgetsSafeArea.hasMaintainBottomViewPadding() ? tree.flutterWidgetsSafeArea.maintainBottomViewPadding : false), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsSafeArea.hasChild() ? tree.flutterWidgetsSafeArea.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsScrollNotificationObserver:
      return $l2.ScrollNotificationObserver(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsScrollNotificationObserver.hasChild() ? tree.flutterWidgetsScrollNotificationObserver.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsSelectionContainerNamedDisabled:
      return $l2.SelectionContainer.disabled(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsSelectionContainerNamedDisabled.hasChild() ? tree.flutterWidgetsSelectionContainerNamedDisabled.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsSemantics:
      return $l2.Semantics(child: evaluateWidgetExpression((tree.flutterWidgetsSemantics.hasChild() ? tree.flutterWidgetsSemantics.child : null)), container: (tree.flutterWidgetsSemantics.hasContainer() ? tree.flutterWidgetsSemantics.container : false), explicitChildNodes: (tree.flutterWidgetsSemantics.hasExplicitChildNodes() ? tree.flutterWidgetsSemantics.explicitChildNodes : false), excludeSemantics: (tree.flutterWidgetsSemantics.hasExcludeSemantics() ? tree.flutterWidgetsSemantics.excludeSemantics : false), blockUserActions: (tree.flutterWidgetsSemantics.hasBlockUserActions() ? tree.flutterWidgetsSemantics.blockUserActions : false), enabled: (tree.flutterWidgetsSemantics.hasEnabled() ? tree.flutterWidgetsSemantics.enabled : null), checked: (tree.flutterWidgetsSemantics.hasChecked() ? tree.flutterWidgetsSemantics.checked : null), mixed: (tree.flutterWidgetsSemantics.hasMixed() ? tree.flutterWidgetsSemantics.mixed : null), selected: (tree.flutterWidgetsSemantics.hasSelected() ? tree.flutterWidgetsSemantics.selected : null), toggled: (tree.flutterWidgetsSemantics.hasToggled() ? tree.flutterWidgetsSemantics.toggled : null), button: (tree.flutterWidgetsSemantics.hasButton() ? tree.flutterWidgetsSemantics.button : null), slider: (tree.flutterWidgetsSemantics.hasSlider() ? tree.flutterWidgetsSemantics.slider : null), keyboardKey: (tree.flutterWidgetsSemantics.hasKeyboardKey() ? tree.flutterWidgetsSemantics.keyboardKey : null), link: (tree.flutterWidgetsSemantics.hasLink() ? tree.flutterWidgetsSemantics.link : null), header: (tree.flutterWidgetsSemantics.hasHeader() ? tree.flutterWidgetsSemantics.header : null), textField: (tree.flutterWidgetsSemantics.hasTextField() ? tree.flutterWidgetsSemantics.textField : null), readOnly: (tree.flutterWidgetsSemantics.hasReadOnly() ? tree.flutterWidgetsSemantics.readOnly : null), focusable: (tree.flutterWidgetsSemantics.hasFocusable() ? tree.flutterWidgetsSemantics.focusable : null), focused: (tree.flutterWidgetsSemantics.hasFocused() ? tree.flutterWidgetsSemantics.focused : null), inMutuallyExclusiveGroup: (tree.flutterWidgetsSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterWidgetsSemantics.inMutuallyExclusiveGroup : null), obscured: (tree.flutterWidgetsSemantics.hasObscured() ? tree.flutterWidgetsSemantics.obscured : null), multiline: (tree.flutterWidgetsSemantics.hasMultiline() ? tree.flutterWidgetsSemantics.multiline : null), scopesRoute: (tree.flutterWidgetsSemantics.hasScopesRoute() ? tree.flutterWidgetsSemantics.scopesRoute : null), namesRoute: (tree.flutterWidgetsSemantics.hasNamesRoute() ? tree.flutterWidgetsSemantics.namesRoute : null), hidden: (tree.flutterWidgetsSemantics.hasHidden() ? tree.flutterWidgetsSemantics.hidden : null), image: (tree.flutterWidgetsSemantics.hasImage() ? tree.flutterWidgetsSemantics.image : null), liveRegion: (tree.flutterWidgetsSemantics.hasLiveRegion() ? tree.flutterWidgetsSemantics.liveRegion : null), maxValueLength: (tree.flutterWidgetsSemantics.hasMaxValueLength() ? tree.flutterWidgetsSemantics.maxValueLength : null), currentValueLength: (tree.flutterWidgetsSemantics.hasCurrentValueLength() ? tree.flutterWidgetsSemantics.currentValueLength : null), label: (tree.flutterWidgetsSemantics.hasLabel() ? tree.flutterWidgetsSemantics.label : null), value: (tree.flutterWidgetsSemantics.hasValue() ? tree.flutterWidgetsSemantics.value : null), increasedValue: (tree.flutterWidgetsSemantics.hasIncreasedValue() ? tree.flutterWidgetsSemantics.increasedValue : null), decreasedValue: (tree.flutterWidgetsSemantics.hasDecreasedValue() ? tree.flutterWidgetsSemantics.decreasedValue : null), hint: (tree.flutterWidgetsSemantics.hasHint() ? tree.flutterWidgetsSemantics.hint : null), tooltip: (tree.flutterWidgetsSemantics.hasTooltip() ? tree.flutterWidgetsSemantics.tooltip : null), onTapHint: (tree.flutterWidgetsSemantics.hasOnTapHint() ? tree.flutterWidgetsSemantics.onTapHint : null), onLongPressHint: (tree.flutterWidgetsSemantics.hasOnLongPressHint() ? tree.flutterWidgetsSemantics.onLongPressHint : null));
    case proto.WidgetExpression_Result.flutterWidgetsSemanticsDebugger:
      return $l2.SemanticsDebugger(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsSemanticsDebugger.hasChild() ? tree.flutterWidgetsSemanticsDebugger.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsSharedAppData:
      return $l2.SharedAppData(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsSharedAppData.hasChild() ? tree.flutterWidgetsSharedAppData.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsShortcutRegistrar:
      return $l2.ShortcutRegistrar(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsShortcutRegistrar.hasChild() ? tree.flutterWidgetsShortcutRegistrar.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsSingleChildScrollView:
      return $l2.SingleChildScrollView(reverse: (tree.flutterWidgetsSingleChildScrollView.hasReverse() ? tree.flutterWidgetsSingleChildScrollView.reverse : false), primary: (tree.flutterWidgetsSingleChildScrollView.hasPrimary() ? tree.flutterWidgetsSingleChildScrollView.primary : null), child: evaluateWidgetExpression((tree.flutterWidgetsSingleChildScrollView.hasChild() ? tree.flutterWidgetsSingleChildScrollView.child : null)), restorationId: (tree.flutterWidgetsSingleChildScrollView.hasRestorationId() ? tree.flutterWidgetsSingleChildScrollView.restorationId : null));
    case proto.WidgetExpression_Result.flutterWidgetsSizeChangedLayoutNotifier:
      return $l2.SizeChangedLayoutNotifier(child: evaluateWidgetExpression((tree.flutterWidgetsSizeChangedLayoutNotifier.hasChild() ? tree.flutterWidgetsSizeChangedLayoutNotifier.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSizedBox:
      return $l2.SizedBox(width: (tree.flutterWidgetsSizedBox.hasWidth() ? tree.flutterWidgetsSizedBox.width : null), height: (tree.flutterWidgetsSizedBox.hasHeight() ? tree.flutterWidgetsSizedBox.height : null), child: evaluateWidgetExpression((tree.flutterWidgetsSizedBox.hasChild() ? tree.flutterWidgetsSizedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSizedBoxNamedExpand:
      return $l2.SizedBox.expand(child: evaluateWidgetExpression((tree.flutterWidgetsSizedBoxNamedExpand.hasChild() ? tree.flutterWidgetsSizedBoxNamedExpand.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSizedBoxNamedFromSize:
      return $l2.SizedBox.fromSize(child: evaluateWidgetExpression((tree.flutterWidgetsSizedBoxNamedFromSize.hasChild() ? tree.flutterWidgetsSizedBoxNamedFromSize.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSizedBoxNamedShrink:
      return $l2.SizedBox.shrink(child: evaluateWidgetExpression((tree.flutterWidgetsSizedBoxNamedShrink.hasChild() ? tree.flutterWidgetsSizedBoxNamedShrink.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSizedBoxNamedSquare:
      return $l2.SizedBox.square(child: evaluateWidgetExpression((tree.flutterWidgetsSizedBoxNamedSquare.hasChild() ? tree.flutterWidgetsSizedBoxNamedSquare.child : null)), dimension: (tree.flutterWidgetsSizedBoxNamedSquare.hasDimension() ? tree.flutterWidgetsSizedBoxNamedSquare.dimension : null));
    case proto.WidgetExpression_Result.flutterWidgetsSliverConstrainedCrossAxis:
      return $l2.SliverConstrainedCrossAxis(maxExtent: (tree.flutterWidgetsSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterWidgetsSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')), sliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverConstrainedCrossAxis.hasSliver() ? tree.flutterWidgetsSliverConstrainedCrossAxis.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterWidgetsSliverCrossAxisExpanded:
      return $l2.SliverCrossAxisExpanded(flex: (tree.flutterWidgetsSliverCrossAxisExpanded.hasFlex() ? tree.flutterWidgetsSliverCrossAxisExpanded.flex : missing('flex')), sliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverCrossAxisExpanded.hasSliver() ? tree.flutterWidgetsSliverCrossAxisExpanded.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterWidgetsSliverCrossAxisGroup:
      return $l2.SliverCrossAxisGroup(slivers: tree.flutterWidgetsSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsSliverFillRemaining:
      return $l2.SliverFillRemaining(child: evaluateWidgetExpression((tree.flutterWidgetsSliverFillRemaining.hasChild() ? tree.flutterWidgetsSliverFillRemaining.child : null)), hasScrollBody: (tree.flutterWidgetsSliverFillRemaining.hasHasScrollBody() ? tree.flutterWidgetsSliverFillRemaining.hasScrollBody : true), fillOverscroll: (tree.flutterWidgetsSliverFillRemaining.hasFillOverscroll() ? tree.flutterWidgetsSliverFillRemaining.fillOverscroll : false));
    case proto.WidgetExpression_Result.flutterWidgetsSliverFixedExtentListNamedList:
      return $l2.SliverFixedExtentList.list(children: tree.flutterWidgetsSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), itemExtent: (tree.flutterWidgetsSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterWidgetsSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')), addAutomaticKeepAlives: (tree.flutterWidgetsSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsSliverFixedExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterWidgetsSliverFixedExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterWidgetsSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterWidgetsSliverGridNamedCount:
      return $l2.SliverGrid.count(crossAxisCount: (tree.flutterWidgetsSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterWidgetsSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')), mainAxisSpacing: (tree.flutterWidgetsSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterWidgetsSliverGridNamedCount.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterWidgetsSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterWidgetsSliverGridNamedCount.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterWidgetsSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterWidgetsSliverGridNamedCount.childAspectRatio : 1.0), children: tree.flutterWidgetsSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsSliverGridNamedExtent:
      return $l2.SliverGrid.extent(maxCrossAxisExtent: (tree.flutterWidgetsSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterWidgetsSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')), mainAxisSpacing: (tree.flutterWidgetsSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterWidgetsSliverGridNamedExtent.mainAxisSpacing : 0.0), crossAxisSpacing: (tree.flutterWidgetsSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterWidgetsSliverGridNamedExtent.crossAxisSpacing : 0.0), childAspectRatio: (tree.flutterWidgetsSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterWidgetsSliverGridNamedExtent.childAspectRatio : 1.0), children: tree.flutterWidgetsSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsSliverIgnorePointer:
      return $l2.SliverIgnorePointer(ignoring: (tree.flutterWidgetsSliverIgnorePointer.hasIgnoring() ? tree.flutterWidgetsSliverIgnorePointer.ignoring : true), sliver: evaluateWidgetExpression((tree.flutterWidgetsSliverIgnorePointer.hasSliver() ? tree.flutterWidgetsSliverIgnorePointer.sliver : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSliverListNamedList:
      return $l2.SliverList.list(children: tree.flutterWidgetsSliverListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), addAutomaticKeepAlives: (tree.flutterWidgetsSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsSliverListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterWidgetsSliverListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterWidgetsSliverListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterWidgetsSliverMainAxisGroup:
      return $l2.SliverMainAxisGroup(slivers: tree.flutterWidgetsSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsSliverOffstage:
      return $l2.SliverOffstage(offstage: (tree.flutterWidgetsSliverOffstage.hasOffstage() ? tree.flutterWidgetsSliverOffstage.offstage : true), sliver: evaluateWidgetExpression((tree.flutterWidgetsSliverOffstage.hasSliver() ? tree.flutterWidgetsSliverOffstage.sliver : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSliverOpacity:
      return $l2.SliverOpacity(opacity: (tree.flutterWidgetsSliverOpacity.hasOpacity() ? tree.flutterWidgetsSliverOpacity.opacity : missing('opacity')), alwaysIncludeSemantics: (tree.flutterWidgetsSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterWidgetsSliverOpacity.alwaysIncludeSemantics : false), sliver: evaluateWidgetExpression((tree.flutterWidgetsSliverOpacity.hasSliver() ? tree.flutterWidgetsSliverOpacity.sliver : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSliverPrototypeExtentListNamedList:
      return $l2.SliverPrototypeExtentList.list(children: tree.flutterWidgetsSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetExpression(e)).toList(), prototypeItem: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverPrototypeExtentListNamedList.hasPrototypeItem() ? tree.flutterWidgetsSliverPrototypeExtentListNamedList.prototypeItem : missing('prototypeItem'))), addAutomaticKeepAlives: (tree.flutterWidgetsSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterWidgetsSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true), addRepaintBoundaries: (tree.flutterWidgetsSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterWidgetsSliverPrototypeExtentListNamedList.addRepaintBoundaries : true), addSemanticIndexes: (tree.flutterWidgetsSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterWidgetsSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case proto.WidgetExpression_Result.flutterWidgetsSliverSafeArea:
      return $l2.SliverSafeArea(left: (tree.flutterWidgetsSliverSafeArea.hasLeft() ? tree.flutterWidgetsSliverSafeArea.left : true), top: (tree.flutterWidgetsSliverSafeArea.hasTop() ? tree.flutterWidgetsSliverSafeArea.top : true), right: (tree.flutterWidgetsSliverSafeArea.hasRight() ? tree.flutterWidgetsSliverSafeArea.right : true), bottom: (tree.flutterWidgetsSliverSafeArea.hasBottom() ? tree.flutterWidgetsSliverSafeArea.bottom : true), sliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverSafeArea.hasSliver() ? tree.flutterWidgetsSliverSafeArea.sliver : missing('sliver'))));
    case proto.WidgetExpression_Result.flutterWidgetsSliverToBoxAdapter:
      return $l2.SliverToBoxAdapter(child: evaluateWidgetExpression((tree.flutterWidgetsSliverToBoxAdapter.hasChild() ? tree.flutterWidgetsSliverToBoxAdapter.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsSliverVisibility:
      return $l2.SliverVisibility(sliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverVisibility.hasSliver() ? tree.flutterWidgetsSliverVisibility.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverVisibility.hasReplacementSliver() ? tree.flutterWidgetsSliverVisibility.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterWidgetsSliverVisibility.hasVisible() ? tree.flutterWidgetsSliverVisibility.visible : true), maintainState: (tree.flutterWidgetsSliverVisibility.hasMaintainState() ? tree.flutterWidgetsSliverVisibility.maintainState : false), maintainAnimation: (tree.flutterWidgetsSliverVisibility.hasMaintainAnimation() ? tree.flutterWidgetsSliverVisibility.maintainAnimation : false), maintainSize: (tree.flutterWidgetsSliverVisibility.hasMaintainSize() ? tree.flutterWidgetsSliverVisibility.maintainSize : false), maintainSemantics: (tree.flutterWidgetsSliverVisibility.hasMaintainSemantics() ? tree.flutterWidgetsSliverVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterWidgetsSliverVisibility.hasMaintainInteractivity() ? tree.flutterWidgetsSliverVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterWidgetsSliverVisibilityNamedMaintain:
      return $l2.SliverVisibility.maintain(sliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverVisibilityNamedMaintain.hasSliver() ? tree.flutterWidgetsSliverVisibilityNamedMaintain.sliver : missing('sliver'))), replacementSliver: evaluateRequiredWidgetExpression((tree.flutterWidgetsSliverVisibilityNamedMaintain.hasReplacementSliver() ? tree.flutterWidgetsSliverVisibilityNamedMaintain.replacementSliver : missing('replacementSliver'))), visible: (tree.flutterWidgetsSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterWidgetsSliverVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterWidgetsSpacer:
      return $l2.Spacer(flex: (tree.flutterWidgetsSpacer.hasFlex() ? tree.flutterWidgetsSpacer.flex : 1));
    case proto.WidgetExpression_Result.flutterWidgetsStack:
      return $l2.Stack(children: tree.flutterWidgetsStack.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterWidgetsTable:
      return $l2.Table();
    case proto.WidgetExpression_Result.flutterWidgetsTableCell:
      return $l2.TableCell(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsTableCell.hasChild() ? tree.flutterWidgetsTableCell.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsTapRegion:
      return $l2.TapRegion(child: evaluateWidgetExpression((tree.flutterWidgetsTapRegion.hasChild() ? tree.flutterWidgetsTapRegion.child : null)), enabled: (tree.flutterWidgetsTapRegion.hasEnabled() ? tree.flutterWidgetsTapRegion.enabled : true), debugLabel: (tree.flutterWidgetsTapRegion.hasDebugLabel() ? tree.flutterWidgetsTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterWidgetsTapRegionSurface:
      return $l2.TapRegionSurface(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsTapRegionSurface.hasChild() ? tree.flutterWidgetsTapRegionSurface.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsText:
      return $l2.Text((tree.flutterWidgetsText.hasData() ? tree.flutterWidgetsText.data : missing('data')), softWrap: (tree.flutterWidgetsText.hasSoftWrap() ? tree.flutterWidgetsText.softWrap : null), textScaleFactor: (tree.flutterWidgetsText.hasTextScaleFactor() ? tree.flutterWidgetsText.textScaleFactor : null), maxLines: (tree.flutterWidgetsText.hasMaxLines() ? tree.flutterWidgetsText.maxLines : null), semanticsLabel: (tree.flutterWidgetsText.hasSemanticsLabel() ? tree.flutterWidgetsText.semanticsLabel : null));
    case proto.WidgetExpression_Result.flutterWidgetsTextFieldTapRegion:
      return $l2.TextFieldTapRegion(child: evaluateWidgetExpression((tree.flutterWidgetsTextFieldTapRegion.hasChild() ? tree.flutterWidgetsTextFieldTapRegion.child : null)), enabled: (tree.flutterWidgetsTextFieldTapRegion.hasEnabled() ? tree.flutterWidgetsTextFieldTapRegion.enabled : true), debugLabel: (tree.flutterWidgetsTextFieldTapRegion.hasDebugLabel() ? tree.flutterWidgetsTextFieldTapRegion.debugLabel : null));
    case proto.WidgetExpression_Result.flutterWidgetsTextSelectionGestureDetector:
      return $l2.TextSelectionGestureDetector(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsTextSelectionGestureDetector.hasChild() ? tree.flutterWidgetsTextSelectionGestureDetector.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsTexture:
      return $l2.Texture(textureId: (tree.flutterWidgetsTexture.hasTextureId() ? tree.flutterWidgetsTexture.textureId : missing('textureId')), freeze: (tree.flutterWidgetsTexture.hasFreeze_4() ? tree.flutterWidgetsTexture.freeze_4 : false));
    case proto.WidgetExpression_Result.flutterWidgetsTickerMode:
      return $l2.TickerMode(enabled: (tree.flutterWidgetsTickerMode.hasEnabled() ? tree.flutterWidgetsTickerMode.enabled : missing('enabled')), child: evaluateRequiredWidgetExpression((tree.flutterWidgetsTickerMode.hasChild() ? tree.flutterWidgetsTickerMode.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsTransformNamedFlip:
      return $l2.Transform.flip(flipX: (tree.flutterWidgetsTransformNamedFlip.hasFlipX() ? tree.flutterWidgetsTransformNamedFlip.flipX : false), flipY: (tree.flutterWidgetsTransformNamedFlip.hasFlipY() ? tree.flutterWidgetsTransformNamedFlip.flipY : false), transformHitTests: (tree.flutterWidgetsTransformNamedFlip.hasTransformHitTests() ? tree.flutterWidgetsTransformNamedFlip.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterWidgetsTransformNamedFlip.hasChild() ? tree.flutterWidgetsTransformNamedFlip.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsTransformNamedRotate:
      return $l2.Transform.rotate(angle: (tree.flutterWidgetsTransformNamedRotate.hasAngle() ? tree.flutterWidgetsTransformNamedRotate.angle : missing('angle')), transformHitTests: (tree.flutterWidgetsTransformNamedRotate.hasTransformHitTests() ? tree.flutterWidgetsTransformNamedRotate.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterWidgetsTransformNamedRotate.hasChild() ? tree.flutterWidgetsTransformNamedRotate.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsTransformNamedScale:
      return $l2.Transform.scale(scale: (tree.flutterWidgetsTransformNamedScale.hasScale() ? tree.flutterWidgetsTransformNamedScale.scale : null), scaleX: (tree.flutterWidgetsTransformNamedScale.hasScaleX() ? tree.flutterWidgetsTransformNamedScale.scaleX : null), scaleY: (tree.flutterWidgetsTransformNamedScale.hasScaleY() ? tree.flutterWidgetsTransformNamedScale.scaleY : null), transformHitTests: (tree.flutterWidgetsTransformNamedScale.hasTransformHitTests() ? tree.flutterWidgetsTransformNamedScale.transformHitTests : true), child: evaluateWidgetExpression((tree.flutterWidgetsTransformNamedScale.hasChild() ? tree.flutterWidgetsTransformNamedScale.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsUiKitView:
      return $l2.UiKitView(viewType: (tree.flutterWidgetsUiKitView.hasViewType() ? tree.flutterWidgetsUiKitView.viewType : missing('viewType')));
    case proto.WidgetExpression_Result.flutterWidgetsUnconstrainedBox:
      return $l2.UnconstrainedBox(child: evaluateWidgetExpression((tree.flutterWidgetsUnconstrainedBox.hasChild() ? tree.flutterWidgetsUnconstrainedBox.child : null)));
    case proto.WidgetExpression_Result.flutterWidgetsUnmanagedRestorationScope:
      return $l2.UnmanagedRestorationScope(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsUnmanagedRestorationScope.hasChild() ? tree.flutterWidgetsUnmanagedRestorationScope.child : missing('child'))));
    case proto.WidgetExpression_Result.flutterWidgetsVisibility:
      return $l2.Visibility(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsVisibility.hasChild() ? tree.flutterWidgetsVisibility.child : missing('child'))), replacement: evaluateRequiredWidgetExpression((tree.flutterWidgetsVisibility.hasReplacement() ? tree.flutterWidgetsVisibility.replacement : missing('replacement'))), visible: (tree.flutterWidgetsVisibility.hasVisible() ? tree.flutterWidgetsVisibility.visible : true), maintainState: (tree.flutterWidgetsVisibility.hasMaintainState() ? tree.flutterWidgetsVisibility.maintainState : false), maintainAnimation: (tree.flutterWidgetsVisibility.hasMaintainAnimation() ? tree.flutterWidgetsVisibility.maintainAnimation : false), maintainSize: (tree.flutterWidgetsVisibility.hasMaintainSize() ? tree.flutterWidgetsVisibility.maintainSize : false), maintainSemantics: (tree.flutterWidgetsVisibility.hasMaintainSemantics() ? tree.flutterWidgetsVisibility.maintainSemantics : false), maintainInteractivity: (tree.flutterWidgetsVisibility.hasMaintainInteractivity() ? tree.flutterWidgetsVisibility.maintainInteractivity : false));
    case proto.WidgetExpression_Result.flutterWidgetsVisibilityNamedMaintain:
      return $l2.Visibility.maintain(child: evaluateRequiredWidgetExpression((tree.flutterWidgetsVisibilityNamedMaintain.hasChild() ? tree.flutterWidgetsVisibilityNamedMaintain.child : missing('child'))), visible: (tree.flutterWidgetsVisibilityNamedMaintain.hasVisible() ? tree.flutterWidgetsVisibilityNamedMaintain.visible : true));
    case proto.WidgetExpression_Result.flutterWidgetsWrap:
      return $l2.Wrap(spacing: (tree.flutterWidgetsWrap.hasSpacing() ? tree.flutterWidgetsWrap.spacing : 0.0), runSpacing: (tree.flutterWidgetsWrap.hasRunSpacing() ? tree.flutterWidgetsWrap.runSpacing : 0.0), children: tree.flutterWidgetsWrap.children.map((e) => evaluateRequiredWidgetExpression(e)).toList());
    case proto.WidgetExpression_Result.flutterProjectMainMyApp:
      return $l3.MyApp();
    case proto.WidgetExpression_Result.flutterProjectMainMyHomePage:
      return $l3.MyHomePage(title: (tree.flutterProjectMainMyHomePage.hasTitle() ? tree.flutterProjectMainMyHomePage.title : missing('title')));
    default:
      return null;
  }
}
