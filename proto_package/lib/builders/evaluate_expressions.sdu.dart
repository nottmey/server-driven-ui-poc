//
//  Generated. Do not modify.
//

// ignore_for_file: unused_import

import 'dart:core' as core;

import 'package:proto_package/proto/messages.pb.dart' as messages;

import 'package:proto_package/builders/convert_enums.sdu.dart' as enums;

import 'dart:convert' as $dartConvert;
import 'dart:core' as $dartCore;
import 'dart:io' as $dartIo;
import 'dart:math' as $dartMath;
import 'dart:typed_data' as $dartTypedData;
import 'dart:ui' as $dartUi;
import 'package:flutter/src/animation/curves.dart' as $flutterSrcAnimationCurves;
import 'package:flutter/src/cupertino/activity_indicator.dart' as $flutterSrcCupertinoActivityIndicator;
import 'package:flutter/src/cupertino/adaptive_text_selection_toolbar.dart' as $flutterSrcCupertinoAdaptiveTextSelectionToolbar;
import 'package:flutter/src/cupertino/app.dart' as $flutterSrcCupertinoApp;
import 'package:flutter/src/cupertino/bottom_tab_bar.dart' as $flutterSrcCupertinoBottomTabBar;
import 'package:flutter/src/cupertino/button.dart' as $flutterSrcCupertinoButton;
import 'package:flutter/src/cupertino/checkbox.dart' as $flutterSrcCupertinoCheckbox;
import 'package:flutter/src/cupertino/colors.dart' as $flutterSrcCupertinoColors;
import 'package:flutter/src/cupertino/constants.dart' as $flutterSrcCupertinoConstants;
import 'package:flutter/src/cupertino/context_menu.dart' as $flutterSrcCupertinoContextMenu;
import 'package:flutter/src/cupertino/context_menu_action.dart' as $flutterSrcCupertinoContextMenuAction;
import 'package:flutter/src/cupertino/desktop_text_selection.dart' as $flutterSrcCupertinoDesktopTextSelection;
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar.dart' as $flutterSrcCupertinoDesktopTextSelectionToolbar;
import 'package:flutter/src/cupertino/desktop_text_selection_toolbar_button.dart' as $flutterSrcCupertinoDesktopTextSelectionToolbarButton;
import 'package:flutter/src/cupertino/dialog.dart' as $flutterSrcCupertinoDialog;
import 'package:flutter/src/cupertino/form_row.dart' as $flutterSrcCupertinoFormRow;
import 'package:flutter/src/cupertino/form_section.dart' as $flutterSrcCupertinoFormSection;
import 'package:flutter/src/cupertino/icon_theme_data.dart' as $flutterSrcCupertinoIconThemeData;
import 'package:flutter/src/cupertino/icons.dart' as $flutterSrcCupertinoIcons;
import 'package:flutter/src/cupertino/interface_level.dart' as $flutterSrcCupertinoInterfaceLevel;
import 'package:flutter/src/cupertino/list_section.dart' as $flutterSrcCupertinoListSection;
import 'package:flutter/src/cupertino/list_tile.dart' as $flutterSrcCupertinoListTile;
import 'package:flutter/src/cupertino/magnifier.dart' as $flutterSrcCupertinoMagnifier;
import 'package:flutter/src/cupertino/nav_bar.dart' as $flutterSrcCupertinoNavBar;
import 'package:flutter/src/cupertino/page_scaffold.dart' as $flutterSrcCupertinoPageScaffold;
import 'package:flutter/src/cupertino/picker.dart' as $flutterSrcCupertinoPicker;
import 'package:flutter/src/cupertino/refresh.dart' as $flutterSrcCupertinoRefresh;
import 'package:flutter/src/cupertino/scrollbar.dart' as $flutterSrcCupertinoScrollbar;
import 'package:flutter/src/cupertino/search_field.dart' as $flutterSrcCupertinoSearchField;
import 'package:flutter/src/cupertino/slider.dart' as $flutterSrcCupertinoSlider;
import 'package:flutter/src/cupertino/spell_check_suggestions_toolbar.dart' as $flutterSrcCupertinoSpellCheckSuggestionsToolbar;
import 'package:flutter/src/cupertino/switch.dart' as $flutterSrcCupertinoSwitch;
import 'package:flutter/src/cupertino/tab_view.dart' as $flutterSrcCupertinoTabView;
import 'package:flutter/src/cupertino/text_field.dart' as $flutterSrcCupertinoTextField;
import 'package:flutter/src/cupertino/text_form_field_row.dart' as $flutterSrcCupertinoTextFormFieldRow;
import 'package:flutter/src/cupertino/text_selection.dart' as $flutterSrcCupertinoTextSelection;
import 'package:flutter/src/cupertino/text_selection_toolbar.dart' as $flutterSrcCupertinoTextSelectionToolbar;
import 'package:flutter/src/cupertino/text_selection_toolbar_button.dart' as $flutterSrcCupertinoTextSelectionToolbarButton;
import 'package:flutter/src/cupertino/text_theme.dart' as $flutterSrcCupertinoTextTheme;
import 'package:flutter/src/cupertino/theme.dart' as $flutterSrcCupertinoTheme;
import 'package:flutter/src/foundation/assertions.dart' as $flutterSrcFoundationAssertions;
import 'package:flutter/src/foundation/diagnostics.dart' as $flutterSrcFoundationDiagnostics;
import 'package:flutter/src/foundation/key.dart' as $flutterSrcFoundationKey;
import 'package:flutter/src/foundation/platform.dart' as $flutterSrcFoundationPlatform;
import 'package:flutter/src/gestures/constants.dart' as $flutterSrcGesturesConstants;
import 'package:flutter/src/gestures/eager.dart' as $flutterSrcGesturesEager;
import 'package:flutter/src/gestures/force_press.dart' as $flutterSrcGesturesForcePress;
import 'package:flutter/src/gestures/gesture_settings.dart' as $flutterSrcGesturesGestureSettings;
import 'package:flutter/src/gestures/long_press.dart' as $flutterSrcGesturesLongPress;
import 'package:flutter/src/gestures/monodrag.dart' as $flutterSrcGesturesMonodrag;
import 'package:flutter/src/gestures/multidrag.dart' as $flutterSrcGesturesMultidrag;
import 'package:flutter/src/gestures/multitap.dart' as $flutterSrcGesturesMultitap;
import 'package:flutter/src/gestures/recognizer.dart' as $flutterSrcGesturesRecognizer;
import 'package:flutter/src/gestures/scale.dart' as $flutterSrcGesturesScale;
import 'package:flutter/src/gestures/tap.dart' as $flutterSrcGesturesTap;
import 'package:flutter/src/gestures/tap_and_drag.dart' as $flutterSrcGesturesTapAndDrag;
import 'package:flutter/src/material/about.dart' as $flutterSrcMaterialAbout;
import 'package:flutter/src/material/action_buttons.dart' as $flutterSrcMaterialActionButtons;
import 'package:flutter/src/material/action_chip.dart' as $flutterSrcMaterialActionChip;
import 'package:flutter/src/material/action_icons_theme.dart' as $flutterSrcMaterialActionIconsTheme;
import 'package:flutter/src/material/adaptive_text_selection_toolbar.dart' as $flutterSrcMaterialAdaptiveTextSelectionToolbar;
import 'package:flutter/src/material/app.dart' as $flutterSrcMaterialApp;
import 'package:flutter/src/material/app_bar.dart' as $flutterSrcMaterialAppBar;
import 'package:flutter/src/material/app_bar_theme.dart' as $flutterSrcMaterialAppBarTheme;
import 'package:flutter/src/material/badge.dart' as $flutterSrcMaterialBadge;
import 'package:flutter/src/material/badge_theme.dart' as $flutterSrcMaterialBadgeTheme;
import 'package:flutter/src/material/banner.dart' as $flutterSrcMaterialBanner;
import 'package:flutter/src/material/banner_theme.dart' as $flutterSrcMaterialBannerTheme;
import 'package:flutter/src/material/bottom_app_bar.dart' as $flutterSrcMaterialBottomAppBar;
import 'package:flutter/src/material/bottom_app_bar_theme.dart' as $flutterSrcMaterialBottomAppBarTheme;
import 'package:flutter/src/material/bottom_navigation_bar.dart' as $flutterSrcMaterialBottomNavigationBar;
import 'package:flutter/src/material/bottom_navigation_bar_theme.dart' as $flutterSrcMaterialBottomNavigationBarTheme;
import 'package:flutter/src/material/bottom_sheet_theme.dart' as $flutterSrcMaterialBottomSheetTheme;
import 'package:flutter/src/material/button.dart' as $flutterSrcMaterialButton;
import 'package:flutter/src/material/button_bar.dart' as $flutterSrcMaterialButtonBar;
import 'package:flutter/src/material/button_bar_theme.dart' as $flutterSrcMaterialButtonBarTheme;
import 'package:flutter/src/material/button_style.dart' as $flutterSrcMaterialButtonStyle;
import 'package:flutter/src/material/button_theme.dart' as $flutterSrcMaterialButtonTheme;
import 'package:flutter/src/material/card.dart' as $flutterSrcMaterialCard;
import 'package:flutter/src/material/card_theme.dart' as $flutterSrcMaterialCardTheme;
import 'package:flutter/src/material/checkbox.dart' as $flutterSrcMaterialCheckbox;
import 'package:flutter/src/material/checkbox_list_tile.dart' as $flutterSrcMaterialCheckboxListTile;
import 'package:flutter/src/material/checkbox_theme.dart' as $flutterSrcMaterialCheckboxTheme;
import 'package:flutter/src/material/chip.dart' as $flutterSrcMaterialChip;
import 'package:flutter/src/material/chip_theme.dart' as $flutterSrcMaterialChipTheme;
import 'package:flutter/src/material/choice_chip.dart' as $flutterSrcMaterialChoiceChip;
import 'package:flutter/src/material/circle_avatar.dart' as $flutterSrcMaterialCircleAvatar;
import 'package:flutter/src/material/color_scheme.dart' as $flutterSrcMaterialColorScheme;
import 'package:flutter/src/material/colors.dart' as $flutterSrcMaterialColors;
import 'package:flutter/src/material/constants.dart' as $flutterSrcMaterialConstants;
import 'package:flutter/src/material/data_table.dart' as $flutterSrcMaterialDataTable;
import 'package:flutter/src/material/data_table_source.dart' as $flutterSrcMaterialDataTableSource;
import 'package:flutter/src/material/data_table_theme.dart' as $flutterSrcMaterialDataTableTheme;
import 'package:flutter/src/material/date.dart' as $flutterSrcMaterialDate;
import 'package:flutter/src/material/date_picker.dart' as $flutterSrcMaterialDatePicker;
import 'package:flutter/src/material/date_picker_theme.dart' as $flutterSrcMaterialDatePickerTheme;
import 'package:flutter/src/material/desktop_text_selection.dart' as $flutterSrcMaterialDesktopTextSelection;
import 'package:flutter/src/material/desktop_text_selection_toolbar.dart' as $flutterSrcMaterialDesktopTextSelectionToolbar;
import 'package:flutter/src/material/desktop_text_selection_toolbar_button.dart' as $flutterSrcMaterialDesktopTextSelectionToolbarButton;
import 'package:flutter/src/material/dialog.dart' as $flutterSrcMaterialDialog;
import 'package:flutter/src/material/dialog_theme.dart' as $flutterSrcMaterialDialogTheme;
import 'package:flutter/src/material/divider.dart' as $flutterSrcMaterialDivider;
import 'package:flutter/src/material/divider_theme.dart' as $flutterSrcMaterialDividerTheme;
import 'package:flutter/src/material/drawer.dart' as $flutterSrcMaterialDrawer;
import 'package:flutter/src/material/drawer_header.dart' as $flutterSrcMaterialDrawerHeader;
import 'package:flutter/src/material/drawer_theme.dart' as $flutterSrcMaterialDrawerTheme;
import 'package:flutter/src/material/dropdown.dart' as $flutterSrcMaterialDropdown;
import 'package:flutter/src/material/dropdown_menu_theme.dart' as $flutterSrcMaterialDropdownMenuTheme;
import 'package:flutter/src/material/elevated_button.dart' as $flutterSrcMaterialElevatedButton;
import 'package:flutter/src/material/elevated_button_theme.dart' as $flutterSrcMaterialElevatedButtonTheme;
import 'package:flutter/src/material/expand_icon.dart' as $flutterSrcMaterialExpandIcon;
import 'package:flutter/src/material/expansion_panel.dart' as $flutterSrcMaterialExpansionPanel;
import 'package:flutter/src/material/expansion_tile.dart' as $flutterSrcMaterialExpansionTile;
import 'package:flutter/src/material/expansion_tile_theme.dart' as $flutterSrcMaterialExpansionTileTheme;
import 'package:flutter/src/material/filled_button.dart' as $flutterSrcMaterialFilledButton;
import 'package:flutter/src/material/filled_button_theme.dart' as $flutterSrcMaterialFilledButtonTheme;
import 'package:flutter/src/material/filter_chip.dart' as $flutterSrcMaterialFilterChip;
import 'package:flutter/src/material/flexible_space_bar.dart' as $flutterSrcMaterialFlexibleSpaceBar;
import 'package:flutter/src/material/floating_action_button.dart' as $flutterSrcMaterialFloatingActionButton;
import 'package:flutter/src/material/floating_action_button_location.dart' as $flutterSrcMaterialFloatingActionButtonLocation;
import 'package:flutter/src/material/floating_action_button_theme.dart' as $flutterSrcMaterialFloatingActionButtonTheme;
import 'package:flutter/src/material/flutter_logo.dart' as $flutterSrcMaterialFlutterLogo;
import 'package:flutter/src/material/grid_tile.dart' as $flutterSrcMaterialGridTile;
import 'package:flutter/src/material/grid_tile_bar.dart' as $flutterSrcMaterialGridTileBar;
import 'package:flutter/src/material/icon_button.dart' as $flutterSrcMaterialIconButton;
import 'package:flutter/src/material/icon_button_theme.dart' as $flutterSrcMaterialIconButtonTheme;
import 'package:flutter/src/material/ink_decoration.dart' as $flutterSrcMaterialInkDecoration;
import 'package:flutter/src/material/ink_well.dart' as $flutterSrcMaterialInkWell;
import 'package:flutter/src/material/input_border.dart' as $flutterSrcMaterialInputBorder;
import 'package:flutter/src/material/input_chip.dart' as $flutterSrcMaterialInputChip;
import 'package:flutter/src/material/input_date_picker_form_field.dart' as $flutterSrcMaterialInputDatePickerFormField;
import 'package:flutter/src/material/input_decorator.dart' as $flutterSrcMaterialInputDecorator;
import 'package:flutter/src/material/list_tile.dart' as $flutterSrcMaterialListTile;
import 'package:flutter/src/material/list_tile_theme.dart' as $flutterSrcMaterialListTileTheme;
import 'package:flutter/src/material/magnifier.dart' as $flutterSrcMaterialMagnifier;
import 'package:flutter/src/material/material.dart' as $flutterSrcMaterialMaterial;
import 'package:flutter/src/material/material_button.dart' as $flutterSrcMaterialMaterialButton;
import 'package:flutter/src/material/material_state.dart' as $flutterSrcMaterialMaterialState;
import 'package:flutter/src/material/menu_anchor.dart' as $flutterSrcMaterialMenuAnchor;
import 'package:flutter/src/material/menu_bar_theme.dart' as $flutterSrcMaterialMenuBarTheme;
import 'package:flutter/src/material/menu_button_theme.dart' as $flutterSrcMaterialMenuButtonTheme;
import 'package:flutter/src/material/menu_style.dart' as $flutterSrcMaterialMenuStyle;
import 'package:flutter/src/material/menu_theme.dart' as $flutterSrcMaterialMenuTheme;
import 'package:flutter/src/material/mergeable_material.dart' as $flutterSrcMaterialMergeableMaterial;
import 'package:flutter/src/material/navigation_bar.dart' as $flutterSrcMaterialNavigationBar;
import 'package:flutter/src/material/navigation_bar_theme.dart' as $flutterSrcMaterialNavigationBarTheme;
import 'package:flutter/src/material/navigation_drawer.dart' as $flutterSrcMaterialNavigationDrawer;
import 'package:flutter/src/material/navigation_drawer_theme.dart' as $flutterSrcMaterialNavigationDrawerTheme;
import 'package:flutter/src/material/navigation_rail.dart' as $flutterSrcMaterialNavigationRail;
import 'package:flutter/src/material/navigation_rail_theme.dart' as $flutterSrcMaterialNavigationRailTheme;
import 'package:flutter/src/material/outlined_button.dart' as $flutterSrcMaterialOutlinedButton;
import 'package:flutter/src/material/outlined_button_theme.dart' as $flutterSrcMaterialOutlinedButtonTheme;
import 'package:flutter/src/material/page_transitions_theme.dart' as $flutterSrcMaterialPageTransitionsTheme;
import 'package:flutter/src/material/paginated_data_table.dart' as $flutterSrcMaterialPaginatedDataTable;
import 'package:flutter/src/material/popup_menu.dart' as $flutterSrcMaterialPopupMenu;
import 'package:flutter/src/material/popup_menu_theme.dart' as $flutterSrcMaterialPopupMenuTheme;
import 'package:flutter/src/material/progress_indicator.dart' as $flutterSrcMaterialProgressIndicator;
import 'package:flutter/src/material/progress_indicator_theme.dart' as $flutterSrcMaterialProgressIndicatorTheme;
import 'package:flutter/src/material/radio_theme.dart' as $flutterSrcMaterialRadioTheme;
import 'package:flutter/src/material/range_slider.dart' as $flutterSrcMaterialRangeSlider;
import 'package:flutter/src/material/refresh_indicator.dart' as $flutterSrcMaterialRefreshIndicator;
import 'package:flutter/src/material/scaffold.dart' as $flutterSrcMaterialScaffold;
import 'package:flutter/src/material/scrollbar.dart' as $flutterSrcMaterialScrollbar;
import 'package:flutter/src/material/scrollbar_theme.dart' as $flutterSrcMaterialScrollbarTheme;
import 'package:flutter/src/material/search_anchor.dart' as $flutterSrcMaterialSearchAnchor;
import 'package:flutter/src/material/search_bar_theme.dart' as $flutterSrcMaterialSearchBarTheme;
import 'package:flutter/src/material/search_view_theme.dart' as $flutterSrcMaterialSearchViewTheme;
import 'package:flutter/src/material/segmented_button_theme.dart' as $flutterSrcMaterialSegmentedButtonTheme;
import 'package:flutter/src/material/selectable_text.dart' as $flutterSrcMaterialSelectableText;
import 'package:flutter/src/material/selection_area.dart' as $flutterSrcMaterialSelectionArea;
import 'package:flutter/src/material/slider.dart' as $flutterSrcMaterialSlider;
import 'package:flutter/src/material/slider_theme.dart' as $flutterSrcMaterialSliderTheme;
import 'package:flutter/src/material/snack_bar.dart' as $flutterSrcMaterialSnackBar;
import 'package:flutter/src/material/snack_bar_theme.dart' as $flutterSrcMaterialSnackBarTheme;
import 'package:flutter/src/material/spell_check_suggestions_toolbar.dart' as $flutterSrcMaterialSpellCheckSuggestionsToolbar;
import 'package:flutter/src/material/spell_check_suggestions_toolbar_layout_delegate.dart' as $flutterSrcMaterialSpellCheckSuggestionsToolbarLayoutDelegate;
import 'package:flutter/src/material/stepper.dart' as $flutterSrcMaterialStepper;
import 'package:flutter/src/material/switch.dart' as $flutterSrcMaterialSwitch;
import 'package:flutter/src/material/switch_list_tile.dart' as $flutterSrcMaterialSwitchListTile;
import 'package:flutter/src/material/switch_theme.dart' as $flutterSrcMaterialSwitchTheme;
import 'package:flutter/src/material/tab_bar_theme.dart' as $flutterSrcMaterialTabBarTheme;
import 'package:flutter/src/material/tab_controller.dart' as $flutterSrcMaterialTabController;
import 'package:flutter/src/material/tab_indicator.dart' as $flutterSrcMaterialTabIndicator;
import 'package:flutter/src/material/tabs.dart' as $flutterSrcMaterialTabs;
import 'package:flutter/src/material/text_button.dart' as $flutterSrcMaterialTextButton;
import 'package:flutter/src/material/text_button_theme.dart' as $flutterSrcMaterialTextButtonTheme;
import 'package:flutter/src/material/text_field.dart' as $flutterSrcMaterialTextField;
import 'package:flutter/src/material/text_form_field.dart' as $flutterSrcMaterialTextFormField;
import 'package:flutter/src/material/text_selection.dart' as $flutterSrcMaterialTextSelection;
import 'package:flutter/src/material/text_selection_theme.dart' as $flutterSrcMaterialTextSelectionTheme;
import 'package:flutter/src/material/text_selection_toolbar.dart' as $flutterSrcMaterialTextSelectionToolbar;
import 'package:flutter/src/material/text_selection_toolbar_text_button.dart' as $flutterSrcMaterialTextSelectionToolbarTextButton;
import 'package:flutter/src/material/text_theme.dart' as $flutterSrcMaterialTextTheme;
import 'package:flutter/src/material/theme.dart' as $flutterSrcMaterialTheme;
import 'package:flutter/src/material/theme_data.dart' as $flutterSrcMaterialThemeData;
import 'package:flutter/src/material/time.dart' as $flutterSrcMaterialTime;
import 'package:flutter/src/material/time_picker.dart' as $flutterSrcMaterialTimePicker;
import 'package:flutter/src/material/time_picker_theme.dart' as $flutterSrcMaterialTimePickerTheme;
import 'package:flutter/src/material/toggle_buttons.dart' as $flutterSrcMaterialToggleButtons;
import 'package:flutter/src/material/toggle_buttons_theme.dart' as $flutterSrcMaterialToggleButtonsTheme;
import 'package:flutter/src/material/tooltip.dart' as $flutterSrcMaterialTooltip;
import 'package:flutter/src/material/tooltip_theme.dart' as $flutterSrcMaterialTooltipTheme;
import 'package:flutter/src/material/tooltip_visibility.dart' as $flutterSrcMaterialTooltipVisibility;
import 'package:flutter/src/material/typography.dart' as $flutterSrcMaterialTypography;
import 'package:flutter/src/material/user_accounts_drawer_header.dart' as $flutterSrcMaterialUserAccountsDrawerHeader;
import 'package:flutter/src/painting/alignment.dart' as $flutterSrcPaintingAlignment;
import 'package:flutter/src/painting/basic_types.dart' as $flutterSrcPaintingBasicTypes;
import 'package:flutter/src/painting/beveled_rectangle_border.dart' as $flutterSrcPaintingBeveledRectangleBorder;
import 'package:flutter/src/painting/border_radius.dart' as $flutterSrcPaintingBorderRadius;
import 'package:flutter/src/painting/borders.dart' as $flutterSrcPaintingBorders;
import 'package:flutter/src/painting/box_border.dart' as $flutterSrcPaintingBoxBorder;
import 'package:flutter/src/painting/box_decoration.dart' as $flutterSrcPaintingBoxDecoration;
import 'package:flutter/src/painting/box_fit.dart' as $flutterSrcPaintingBoxFit;
import 'package:flutter/src/painting/box_shadow.dart' as $flutterSrcPaintingBoxShadow;
import 'package:flutter/src/painting/circle_border.dart' as $flutterSrcPaintingCircleBorder;
import 'package:flutter/src/painting/colors.dart' as $flutterSrcPaintingColors;
import 'package:flutter/src/painting/continuous_rectangle_border.dart' as $flutterSrcPaintingContinuousRectangleBorder;
import 'package:flutter/src/painting/decoration.dart' as $flutterSrcPaintingDecoration;
import 'package:flutter/src/painting/decoration_image.dart' as $flutterSrcPaintingDecorationImage;
import 'package:flutter/src/painting/edge_insets.dart' as $flutterSrcPaintingEdgeInsets;
import 'package:flutter/src/painting/flutter_logo.dart' as $flutterSrcPaintingFlutterLogo;
import 'package:flutter/src/painting/fractional_offset.dart' as $flutterSrcPaintingFractionalOffset;
import 'package:flutter/src/painting/gradient.dart' as $flutterSrcPaintingGradient;
import 'package:flutter/src/painting/image_provider.dart' as $flutterSrcPaintingImageProvider;
import 'package:flutter/src/painting/inline_span.dart' as $flutterSrcPaintingInlineSpan;
import 'package:flutter/src/painting/linear_border.dart' as $flutterSrcPaintingLinearBorder;
import 'package:flutter/src/painting/matrix_utils.dart' as $flutterSrcPaintingMatrixUtils;
import 'package:flutter/src/painting/notched_shapes.dart' as $flutterSrcPaintingNotchedShapes;
import 'package:flutter/src/painting/oval_border.dart' as $flutterSrcPaintingOvalBorder;
import 'package:flutter/src/painting/rounded_rectangle_border.dart' as $flutterSrcPaintingRoundedRectangleBorder;
import 'package:flutter/src/painting/shape_decoration.dart' as $flutterSrcPaintingShapeDecoration;
import 'package:flutter/src/painting/stadium_border.dart' as $flutterSrcPaintingStadiumBorder;
import 'package:flutter/src/painting/star_border.dart' as $flutterSrcPaintingStarBorder;
import 'package:flutter/src/painting/strut_style.dart' as $flutterSrcPaintingStrutStyle;
import 'package:flutter/src/painting/text_painter.dart' as $flutterSrcPaintingTextPainter;
import 'package:flutter/src/painting/text_scaler.dart' as $flutterSrcPaintingTextScaler;
import 'package:flutter/src/painting/text_span.dart' as $flutterSrcPaintingTextSpan;
import 'package:flutter/src/painting/text_style.dart' as $flutterSrcPaintingTextStyle;
import 'package:flutter/src/rendering/animated_size.dart' as $flutterSrcRenderingAnimatedSize;
import 'package:flutter/src/rendering/box.dart' as $flutterSrcRenderingBox;
import 'package:flutter/src/rendering/custom_layout.dart' as $flutterSrcRenderingCustomLayout;
import 'package:flutter/src/rendering/custom_paint.dart' as $flutterSrcRenderingCustomPaint;
import 'package:flutter/src/rendering/decorated_sliver.dart' as $flutterSrcRenderingDecoratedSliver;
import 'package:flutter/src/rendering/editable.dart' as $flutterSrcRenderingEditable;
import 'package:flutter/src/rendering/error.dart' as $flutterSrcRenderingError;
import 'package:flutter/src/rendering/flex.dart' as $flutterSrcRenderingFlex;
import 'package:flutter/src/rendering/flow.dart' as $flutterSrcRenderingFlow;
import 'package:flutter/src/rendering/image.dart' as $flutterSrcRenderingImage;
import 'package:flutter/src/rendering/layer.dart' as $flutterSrcRenderingLayer;
import 'package:flutter/src/rendering/list_body.dart' as $flutterSrcRenderingListBody;
import 'package:flutter/src/rendering/list_wheel_viewport.dart' as $flutterSrcRenderingListWheelViewport;
import 'package:flutter/src/rendering/object.dart' as $flutterSrcRenderingObject;
import 'package:flutter/src/rendering/paragraph.dart' as $flutterSrcRenderingParagraph;
import 'package:flutter/src/rendering/performance_overlay.dart' as $flutterSrcRenderingPerformanceOverlay;
import 'package:flutter/src/rendering/platform_view.dart' as $flutterSrcRenderingPlatformView;
import 'package:flutter/src/rendering/proxy_box.dart' as $flutterSrcRenderingProxyBox;
import 'package:flutter/src/rendering/proxy_sliver.dart' as $flutterSrcRenderingProxySliver;
import 'package:flutter/src/rendering/rotated_box.dart' as $flutterSrcRenderingRotatedBox;
import 'package:flutter/src/rendering/selection.dart' as $flutterSrcRenderingSelection;
import 'package:flutter/src/rendering/shifted_box.dart' as $flutterSrcRenderingShiftedBox;
import 'package:flutter/src/rendering/sliver.dart' as $flutterSrcRenderingSliver;
import 'package:flutter/src/rendering/sliver_fill.dart' as $flutterSrcRenderingSliverFill;
import 'package:flutter/src/rendering/sliver_fixed_extent_list.dart' as $flutterSrcRenderingSliverFixedExtentList;
import 'package:flutter/src/rendering/sliver_grid.dart' as $flutterSrcRenderingSliverGrid;
import 'package:flutter/src/rendering/sliver_group.dart' as $flutterSrcRenderingSliverGroup;
import 'package:flutter/src/rendering/sliver_list.dart' as $flutterSrcRenderingSliverList;
import 'package:flutter/src/rendering/sliver_multi_box_adaptor.dart' as $flutterSrcRenderingSliverMultiBoxAdaptor;
import 'package:flutter/src/rendering/sliver_padding.dart' as $flutterSrcRenderingSliverPadding;
import 'package:flutter/src/rendering/stack.dart' as $flutterSrcRenderingStack;
import 'package:flutter/src/rendering/table.dart' as $flutterSrcRenderingTable;
import 'package:flutter/src/rendering/table_border.dart' as $flutterSrcRenderingTableBorder;
import 'package:flutter/src/rendering/texture.dart' as $flutterSrcRenderingTexture;
import 'package:flutter/src/rendering/view.dart' as $flutterSrcRenderingView;
import 'package:flutter/src/rendering/viewport.dart' as $flutterSrcRenderingViewport;
import 'package:flutter/src/rendering/viewport_offset.dart' as $flutterSrcRenderingViewportOffset;
import 'package:flutter/src/rendering/wrap.dart' as $flutterSrcRenderingWrap;
import 'package:flutter/src/scheduler/ticker.dart' as $flutterSrcSchedulerTicker;
import 'package:flutter/src/semantics/semantics.dart' as $flutterSrcSemanticsSemantics;
import 'package:flutter/src/services/asset_bundle.dart' as $flutterSrcServicesAssetBundle;
import 'package:flutter/src/services/autofill.dart' as $flutterSrcServicesAutofill;
import 'package:flutter/src/services/mouse_cursor.dart' as $flutterSrcServicesMouseCursor;
import 'package:flutter/src/services/restoration.dart' as $flutterSrcServicesRestoration;
import 'package:flutter/src/services/spell_check.dart' as $flutterSrcServicesSpellCheck;
import 'package:flutter/src/services/system_chrome.dart' as $flutterSrcServicesSystemChrome;
import 'package:flutter/src/services/text_editing.dart' as $flutterSrcServicesTextEditing;
import 'package:flutter/src/services/text_formatter.dart' as $flutterSrcServicesTextFormatter;
import 'package:flutter/src/services/text_input.dart' as $flutterSrcServicesTextInput;
import 'package:flutter/src/widgets/_platform_selectable_region_context_menu_io.dart' as $flutterSrcWidgetsPlatformSelectableRegionContextMenuIo;
import 'package:flutter/src/widgets/actions.dart' as $flutterSrcWidgetsActions;
import 'package:flutter/src/widgets/animated_cross_fade.dart' as $flutterSrcWidgetsAnimatedCrossFade;
import 'package:flutter/src/widgets/animated_scroll_view.dart' as $flutterSrcWidgetsAnimatedScrollView;
import 'package:flutter/src/widgets/animated_size.dart' as $flutterSrcWidgetsAnimatedSize;
import 'package:flutter/src/widgets/animated_switcher.dart' as $flutterSrcWidgetsAnimatedSwitcher;
import 'package:flutter/src/widgets/app.dart' as $flutterSrcWidgetsApp;
import 'package:flutter/src/widgets/autocomplete.dart' as $flutterSrcWidgetsAutocomplete;
import 'package:flutter/src/widgets/autofill.dart' as $flutterSrcWidgetsAutofill;
import 'package:flutter/src/widgets/automatic_keep_alive.dart' as $flutterSrcWidgetsAutomaticKeepAlive;
import 'package:flutter/src/widgets/banner.dart' as $flutterSrcWidgetsBanner;
import 'package:flutter/src/widgets/basic.dart' as $flutterSrcWidgetsBasic;
import 'package:flutter/src/widgets/binding.dart' as $flutterSrcWidgetsBinding;
import 'package:flutter/src/widgets/bottom_navigation_bar_item.dart' as $flutterSrcWidgetsBottomNavigationBarItem;
import 'package:flutter/src/widgets/color_filter.dart' as $flutterSrcWidgetsColorFilter;
import 'package:flutter/src/widgets/container.dart' as $flutterSrcWidgetsContainer;
import 'package:flutter/src/widgets/context_menu_button_item.dart' as $flutterSrcWidgetsContextMenuButtonItem;
import 'package:flutter/src/widgets/decorated_sliver.dart' as $flutterSrcWidgetsDecoratedSliver;
import 'package:flutter/src/widgets/default_selection_style.dart' as $flutterSrcWidgetsDefaultSelectionStyle;
import 'package:flutter/src/widgets/default_text_editing_shortcuts.dart' as $flutterSrcWidgetsDefaultTextEditingShortcuts;
import 'package:flutter/src/widgets/desktop_text_selection_toolbar_layout_delegate.dart' as $flutterSrcWidgetsDesktopTextSelectionToolbarLayoutDelegate;
import 'package:flutter/src/widgets/dismissible.dart' as $flutterSrcWidgetsDismissible;
import 'package:flutter/src/widgets/display_feature_sub_screen.dart' as $flutterSrcWidgetsDisplayFeatureSubScreen;
import 'package:flutter/src/widgets/drag_target.dart' as $flutterSrcWidgetsDragTarget;
import 'package:flutter/src/widgets/draggable_scrollable_sheet.dart' as $flutterSrcWidgetsDraggableScrollableSheet;
import 'package:flutter/src/widgets/editable_text.dart' as $flutterSrcWidgetsEditableText;
import 'package:flutter/src/widgets/fade_in_image.dart' as $flutterSrcWidgetsFadeInImage;
import 'package:flutter/src/widgets/focus_manager.dart' as $flutterSrcWidgetsFocusManager;
import 'package:flutter/src/widgets/focus_scope.dart' as $flutterSrcWidgetsFocusScope;
import 'package:flutter/src/widgets/focus_traversal.dart' as $flutterSrcWidgetsFocusTraversal;
import 'package:flutter/src/widgets/form.dart' as $flutterSrcWidgetsForm;
import 'package:flutter/src/widgets/framework.dart' as $flutterSrcWidgetsFramework;
import 'package:flutter/src/widgets/gesture_detector.dart' as $flutterSrcWidgetsGestureDetector;
import 'package:flutter/src/widgets/grid_paper.dart' as $flutterSrcWidgetsGridPaper;
import 'package:flutter/src/widgets/heroes.dart' as $flutterSrcWidgetsHeroes;
import 'package:flutter/src/widgets/icon.dart' as $flutterSrcWidgetsIcon;
import 'package:flutter/src/widgets/icon_data.dart' as $flutterSrcWidgetsIconData;
import 'package:flutter/src/widgets/icon_theme.dart' as $flutterSrcWidgetsIconTheme;
import 'package:flutter/src/widgets/icon_theme_data.dart' as $flutterSrcWidgetsIconThemeData;
import 'package:flutter/src/widgets/image.dart' as $flutterSrcWidgetsImage;
import 'package:flutter/src/widgets/image_filter.dart' as $flutterSrcWidgetsImageFilter;
import 'package:flutter/src/widgets/image_icon.dart' as $flutterSrcWidgetsImageIcon;
import 'package:flutter/src/widgets/implicit_animations.dart' as $flutterSrcWidgetsImplicitAnimations;
import 'package:flutter/src/widgets/interactive_viewer.dart' as $flutterSrcWidgetsInteractiveViewer;
import 'package:flutter/src/widgets/keyboard_listener.dart' as $flutterSrcWidgetsKeyboardListener;
import 'package:flutter/src/widgets/list_wheel_scroll_view.dart' as $flutterSrcWidgetsListWheelScrollView;
import 'package:flutter/src/widgets/localizations.dart' as $flutterSrcWidgetsLocalizations;
import 'package:flutter/src/widgets/lookup_boundary.dart' as $flutterSrcWidgetsLookupBoundary;
import 'package:flutter/src/widgets/magnifier.dart' as $flutterSrcWidgetsMagnifier;
import 'package:flutter/src/widgets/media_query.dart' as $flutterSrcWidgetsMediaQuery;
import 'package:flutter/src/widgets/modal_barrier.dart' as $flutterSrcWidgetsModalBarrier;
import 'package:flutter/src/widgets/navigation_toolbar.dart' as $flutterSrcWidgetsNavigationToolbar;
import 'package:flutter/src/widgets/navigator.dart' as $flutterSrcWidgetsNavigator;
import 'package:flutter/src/widgets/navigator_pop_handler.dart' as $flutterSrcWidgetsNavigatorPopHandler;
import 'package:flutter/src/widgets/nested_scroll_view.dart' as $flutterSrcWidgetsNestedScrollView;
import 'package:flutter/src/widgets/notification_listener.dart' as $flutterSrcWidgetsNotificationListener;
import 'package:flutter/src/widgets/overflow_bar.dart' as $flutterSrcWidgetsOverflowBar;
import 'package:flutter/src/widgets/overlay.dart' as $flutterSrcWidgetsOverlay;
import 'package:flutter/src/widgets/overscroll_indicator.dart' as $flutterSrcWidgetsOverscrollIndicator;
import 'package:flutter/src/widgets/page_storage.dart' as $flutterSrcWidgetsPageStorage;
import 'package:flutter/src/widgets/page_view.dart' as $flutterSrcWidgetsPageView;
import 'package:flutter/src/widgets/performance_overlay.dart' as $flutterSrcWidgetsPerformanceOverlay;
import 'package:flutter/src/widgets/placeholder.dart' as $flutterSrcWidgetsPlaceholder;
import 'package:flutter/src/widgets/platform_menu_bar.dart' as $flutterSrcWidgetsPlatformMenuBar;
import 'package:flutter/src/widgets/platform_view.dart' as $flutterSrcWidgetsPlatformView;
import 'package:flutter/src/widgets/pop_scope.dart' as $flutterSrcWidgetsPopScope;
import 'package:flutter/src/widgets/preferred_size.dart' as $flutterSrcWidgetsPreferredSize;
import 'package:flutter/src/widgets/primary_scroll_controller.dart' as $flutterSrcWidgetsPrimaryScrollController;
import 'package:flutter/src/widgets/raw_keyboard_listener.dart' as $flutterSrcWidgetsRawKeyboardListener;
import 'package:flutter/src/widgets/reorderable_list.dart' as $flutterSrcWidgetsReorderableList;
import 'package:flutter/src/widgets/restoration.dart' as $flutterSrcWidgetsRestoration;
import 'package:flutter/src/widgets/router.dart' as $flutterSrcWidgetsRouter;
import 'package:flutter/src/widgets/routes.dart' as $flutterSrcWidgetsRoutes;
import 'package:flutter/src/widgets/safe_area.dart' as $flutterSrcWidgetsSafeArea;
import 'package:flutter/src/widgets/scroll_configuration.dart' as $flutterSrcWidgetsScrollConfiguration;
import 'package:flutter/src/widgets/scroll_context.dart' as $flutterSrcWidgetsScrollContext;
import 'package:flutter/src/widgets/scroll_controller.dart' as $flutterSrcWidgetsScrollController;
import 'package:flutter/src/widgets/scroll_delegate.dart' as $flutterSrcWidgetsScrollDelegate;
import 'package:flutter/src/widgets/scroll_notification_observer.dart' as $flutterSrcWidgetsScrollNotificationObserver;
import 'package:flutter/src/widgets/scroll_physics.dart' as $flutterSrcWidgetsScrollPhysics;
import 'package:flutter/src/widgets/scroll_position.dart' as $flutterSrcWidgetsScrollPosition;
import 'package:flutter/src/widgets/scroll_position_with_single_context.dart' as $flutterSrcWidgetsScrollPositionWithSingleContext;
import 'package:flutter/src/widgets/scroll_view.dart' as $flutterSrcWidgetsScrollView;
import 'package:flutter/src/widgets/scrollable.dart' as $flutterSrcWidgetsScrollable;
import 'package:flutter/src/widgets/scrollable_helpers.dart' as $flutterSrcWidgetsScrollableHelpers;
import 'package:flutter/src/widgets/scrollbar.dart' as $flutterSrcWidgetsScrollbar;
import 'package:flutter/src/widgets/selectable_region.dart' as $flutterSrcWidgetsSelectableRegion;
import 'package:flutter/src/widgets/selection_container.dart' as $flutterSrcWidgetsSelectionContainer;
import 'package:flutter/src/widgets/semantics_debugger.dart' as $flutterSrcWidgetsSemanticsDebugger;
import 'package:flutter/src/widgets/shared_app_data.dart' as $flutterSrcWidgetsSharedAppData;
import 'package:flutter/src/widgets/shortcuts.dart' as $flutterSrcWidgetsShortcuts;
import 'package:flutter/src/widgets/single_child_scroll_view.dart' as $flutterSrcWidgetsSingleChildScrollView;
import 'package:flutter/src/widgets/size_changed_layout_notifier.dart' as $flutterSrcWidgetsSizeChangedLayoutNotifier;
import 'package:flutter/src/widgets/sliver.dart' as $flutterSrcWidgetsSliver;
import 'package:flutter/src/widgets/sliver_fill.dart' as $flutterSrcWidgetsSliverFill;
import 'package:flutter/src/widgets/sliver_persistent_header.dart' as $flutterSrcWidgetsSliverPersistentHeader;
import 'package:flutter/src/widgets/sliver_prototype_extent_list.dart' as $flutterSrcWidgetsSliverPrototypeExtentList;
import 'package:flutter/src/widgets/snapshot_widget.dart' as $flutterSrcWidgetsSnapshotWidget;
import 'package:flutter/src/widgets/spacer.dart' as $flutterSrcWidgetsSpacer;
import 'package:flutter/src/widgets/spell_check.dart' as $flutterSrcWidgetsSpellCheck;
import 'package:flutter/src/widgets/table.dart' as $flutterSrcWidgetsTable;
import 'package:flutter/src/widgets/tap_region.dart' as $flutterSrcWidgetsTapRegion;
import 'package:flutter/src/widgets/text.dart' as $flutterSrcWidgetsText;
import 'package:flutter/src/widgets/text_editing_intents.dart' as $flutterSrcWidgetsTextEditingIntents;
import 'package:flutter/src/widgets/text_selection.dart' as $flutterSrcWidgetsTextSelection;
import 'package:flutter/src/widgets/text_selection_toolbar_anchors.dart' as $flutterSrcWidgetsTextSelectionToolbarAnchors;
import 'package:flutter/src/widgets/text_selection_toolbar_layout_delegate.dart' as $flutterSrcWidgetsTextSelectionToolbarLayoutDelegate;
import 'package:flutter/src/widgets/texture.dart' as $flutterSrcWidgetsTexture;
import 'package:flutter/src/widgets/ticker_provider.dart' as $flutterSrcWidgetsTickerProvider;
import 'package:flutter/src/widgets/title.dart' as $flutterSrcWidgetsTitle;
import 'package:flutter/src/widgets/undo_history.dart' as $flutterSrcWidgetsUndoHistory;
import 'package:flutter/src/widgets/view.dart' as $flutterSrcWidgetsView;
import 'package:flutter/src/widgets/viewport.dart' as $flutterSrcWidgetsViewport;
import 'package:flutter/src/widgets/visibility.dart' as $flutterSrcWidgetsVisibility;
import 'package:flutter/src/widgets/widget_inspector.dart' as $flutterSrcWidgetsWidgetInspector;
import 'package:flutter/src/widgets/widget_span.dart' as $flutterSrcWidgetsWidgetSpan;
import 'package:flutter_project/main.dart' as $flutterProjectMain;
import 'package:vector_math/vector_math_64.dart' as $vectorMathVectorMath64;

T missing<T>(core.String field) {
  throw core.AssertionError('required field $field is missing');
}

$flutterSrcCupertinoTextTheme.CupertinoTextThemeData evaluateRequiredCupertinoTextThemeDataType(messages.CupertinoTextThemeDataType tree) {
  final result = evaluateCupertinoTextThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcCupertinoTextTheme.CupertinoTextThemeData? evaluateCupertinoTextThemeDataType(messages.CupertinoTextThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.CupertinoTextThemeDataType_Constructor.cupertinoTextThemeData:
      return $flutterSrcCupertinoTextTheme.CupertinoTextThemeData(
          primaryColor: (tree.cupertinoTextThemeData.hasPrimaryColor() ? evaluateRequiredDartColorType(tree.cupertinoTextThemeData.primaryColor) : $flutterSrcCupertinoColors.CupertinoColors.systemBlue),
          textStyle: (tree.cupertinoTextThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.textStyle) : null),
          actionTextStyle: (tree.cupertinoTextThemeData.hasActionTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.actionTextStyle) : null),
          tabLabelTextStyle: (tree.cupertinoTextThemeData.hasTabLabelTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.tabLabelTextStyle) : null),
          navTitleTextStyle: (tree.cupertinoTextThemeData.hasNavTitleTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.navTitleTextStyle) : null),
          navLargeTitleTextStyle: (tree.cupertinoTextThemeData.hasNavLargeTitleTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.navLargeTitleTextStyle) : null),
          navActionTextStyle: (tree.cupertinoTextThemeData.hasNavActionTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.navActionTextStyle) : null),
          pickerTextStyle: (tree.cupertinoTextThemeData.hasPickerTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.pickerTextStyle) : null),
          dateTimePickerTextStyle: (tree.cupertinoTextThemeData.hasDateTimePickerTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextThemeData.dateTimePickerTextStyle) : null));
    default:
      return null;
  }
}

$flutterSrcCupertinoTheme.CupertinoThemeData evaluateRequiredCupertinoThemeDataType(messages.CupertinoThemeDataType tree) {
  final result = evaluateCupertinoThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcCupertinoTheme.CupertinoThemeData? evaluateCupertinoThemeDataType(messages.CupertinoThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.CupertinoThemeDataType_Constructor.cupertinoThemeData:
      return $flutterSrcCupertinoTheme.CupertinoThemeData(
          brightness: (tree.cupertinoThemeData.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoThemeData.brightness) : null),
          primaryColor: (tree.cupertinoThemeData.hasPrimaryColor() ? evaluateDartColorType(tree.cupertinoThemeData.primaryColor) : null),
          primaryContrastingColor: (tree.cupertinoThemeData.hasPrimaryContrastingColor() ? evaluateDartColorType(tree.cupertinoThemeData.primaryContrastingColor) : null),
          textTheme: (tree.cupertinoThemeData.hasTextTheme() ? evaluateCupertinoTextThemeDataType(tree.cupertinoThemeData.textTheme) : null),
          barBackgroundColor: (tree.cupertinoThemeData.hasBarBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeData.barBackgroundColor) : null),
          scaffoldBackgroundColor: (tree.cupertinoThemeData.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeData.scaffoldBackgroundColor) : null),
          applyThemeToAll: (tree.cupertinoThemeData.hasApplyThemeToAll() ? tree.cupertinoThemeData.applyThemeToAll : null));
    case messages.CupertinoThemeDataType_Constructor.cupertinoThemeDataNamedRaw:
      return $flutterSrcCupertinoTheme.CupertinoThemeData.raw(
          (tree.cupertinoThemeDataNamedRaw.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoThemeDataNamedRaw.brightness) : null),
          (tree.cupertinoThemeDataNamedRaw.hasPrimaryColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.primaryColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasPrimaryContrastingColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.primaryContrastingColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasTextTheme() ? evaluateCupertinoTextThemeDataType(tree.cupertinoThemeDataNamedRaw.textTheme) : null),
          (tree.cupertinoThemeDataNamedRaw.hasBarBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.barBackgroundColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.scaffoldBackgroundColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasApplyThemeToAll() ? tree.cupertinoThemeDataNamedRaw.applyThemeToAll : null));
    case messages.CupertinoThemeDataType_Constructor.materialMaterialBasedCupertinoThemeData:
      return $flutterSrcMaterialThemeData.MaterialBasedCupertinoThemeData(
          materialTheme: (tree.materialMaterialBasedCupertinoThemeData.hasMaterialTheme() ? evaluateRequiredMaterialThemeDataType(tree.materialMaterialBasedCupertinoThemeData.materialTheme) : missing('materialTheme')));
    default:
      return null;
  }
}

$dartUi.ColorFilter evaluateRequiredDartColorFilterType(messages.DartColorFilterType tree) {
  final result = evaluateDartColorFilterType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.ColorFilter? evaluateDartColorFilterType(messages.DartColorFilterType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartColorFilterType_Constructor.dartColorFilterNamedLinearToSrgbGamma:
      return $dartUi.ColorFilter.linearToSrgbGamma(
          );
    case messages.DartColorFilterType_Constructor.dartColorFilterNamedMatrix:
      return $dartUi.ColorFilter.matrix(
          tree.dartColorFilterNamedMatrix.matrix);
    case messages.DartColorFilterType_Constructor.dartColorFilterNamedMode:
      return $dartUi.ColorFilter.mode(
          (tree.dartColorFilterNamedMode.hasColor() ? evaluateRequiredDartColorType(tree.dartColorFilterNamedMode.color) : missing('color')),
          (tree.dartColorFilterNamedMode.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.dartColorFilterNamedMode.blendMode) : missing('blendMode')));
    case messages.DartColorFilterType_Constructor.dartColorFilterNamedSrgbToLinearGamma:
      return $dartUi.ColorFilter.srgbToLinearGamma(
          );
    default:
      return null;
  }
}

$dartUi.Color evaluateRequiredDartColorType(messages.DartColorType tree) {
  final result = evaluateDartColorType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Color? evaluateDartColorType(messages.DartColorType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartColorType_Constructor.cupertinoDynamicColor:
      return $flutterSrcCupertinoColors.CupertinoDynamicColor(
          debugLabel: (tree.cupertinoDynamicColor.hasDebugLabel() ? tree.cupertinoDynamicColor.debugLabel : null),
          color: (tree.cupertinoDynamicColor.hasColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.color) : missing('color')),
          darkColor: (tree.cupertinoDynamicColor.hasDarkColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.darkColor) : missing('darkColor')),
          highContrastColor: (tree.cupertinoDynamicColor.hasHighContrastColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.highContrastColor) : missing('highContrastColor')),
          darkHighContrastColor: (tree.cupertinoDynamicColor.hasDarkHighContrastColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.darkHighContrastColor) : missing('darkHighContrastColor')),
          elevatedColor: (tree.cupertinoDynamicColor.hasElevatedColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.elevatedColor) : missing('elevatedColor')),
          darkElevatedColor: (tree.cupertinoDynamicColor.hasDarkElevatedColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.darkElevatedColor) : missing('darkElevatedColor')),
          highContrastElevatedColor: (tree.cupertinoDynamicColor.hasHighContrastElevatedColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.highContrastElevatedColor) : missing('highContrastElevatedColor')),
          darkHighContrastElevatedColor: (tree.cupertinoDynamicColor.hasDarkHighContrastElevatedColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColor.darkHighContrastElevatedColor) : missing('darkHighContrastElevatedColor')));
    case messages.DartColorType_Constructor.cupertinoDynamicColorNamedWithBrightness:
      return $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(
          debugLabel: (tree.cupertinoDynamicColorNamedWithBrightness.hasDebugLabel() ? tree.cupertinoDynamicColorNamedWithBrightness.debugLabel : null),
          color: (tree.cupertinoDynamicColorNamedWithBrightness.hasColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightness.color) : missing('color')),
          darkColor: (tree.cupertinoDynamicColorNamedWithBrightness.hasDarkColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightness.darkColor) : missing('darkColor')));
    case messages.DartColorType_Constructor.cupertinoDynamicColorNamedWithBrightnessAndContrast:
      return $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightnessAndContrast(
          debugLabel: (tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.hasDebugLabel() ? tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.debugLabel : null),
          color: (tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.hasColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.color) : missing('color')),
          darkColor: (tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.hasDarkColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.darkColor) : missing('darkColor')),
          highContrastColor: (tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.hasHighContrastColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.highContrastColor) : missing('highContrastColor')),
          darkHighContrastColor: (tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.hasDarkHighContrastColor() ? evaluateRequiredDartColorType(tree.cupertinoDynamicColorNamedWithBrightnessAndContrast.darkHighContrastColor) : missing('darkHighContrastColor')));
    case messages.DartColorType_Constructor.dartColor:
      return $dartUi.Color(
          (tree.dartColor.hasValue() ? tree.dartColor.value : missing('value')));
    case messages.DartColorType_Constructor.dartColorNamedFromARGB:
      return $dartUi.Color.fromARGB(
          (tree.dartColorNamedFromARGB.hasA() ? tree.dartColorNamedFromARGB.a : missing('a')),
          (tree.dartColorNamedFromARGB.hasR() ? tree.dartColorNamedFromARGB.r : missing('r')),
          (tree.dartColorNamedFromARGB.hasG() ? tree.dartColorNamedFromARGB.g : missing('g')),
          (tree.dartColorNamedFromARGB.hasB() ? tree.dartColorNamedFromARGB.b : missing('b')));
    case messages.DartColorType_Constructor.dartColorNamedFromRGBO:
      return $dartUi.Color.fromRGBO(
          (tree.dartColorNamedFromRGBO.hasR() ? tree.dartColorNamedFromRGBO.r : missing('r')),
          (tree.dartColorNamedFromRGBO.hasG() ? tree.dartColorNamedFromRGBO.g : missing('g')),
          (tree.dartColorNamedFromRGBO.hasB() ? tree.dartColorNamedFromRGBO.b : missing('b')),
          (tree.dartColorNamedFromRGBO.hasOpacity() ? tree.dartColorNamedFromRGBO.opacity : missing('opacity')));
    default:
      return null;
  }
}

$dartCore.DateTime evaluateRequiredDartDateTimeType(messages.DartDateTimeType tree) {
  final result = evaluateDartDateTimeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartCore.DateTime? evaluateDartDateTimeType(messages.DartDateTimeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartDateTimeType_Constructor.dartDateTime:
      return $dartCore.DateTime(
          (tree.dartDateTime.hasYear() ? tree.dartDateTime.year : missing('year')),
          (tree.dartDateTime.hasMonth() ? tree.dartDateTime.month : 1),
          (tree.dartDateTime.hasDay() ? tree.dartDateTime.day : 1),
          (tree.dartDateTime.hasHour() ? tree.dartDateTime.hour : 0),
          (tree.dartDateTime.hasMinute() ? tree.dartDateTime.minute : 0),
          (tree.dartDateTime.hasSecond() ? tree.dartDateTime.second : 0),
          (tree.dartDateTime.hasMillisecond() ? tree.dartDateTime.millisecond : 0),
          (tree.dartDateTime.hasMicrosecond() ? tree.dartDateTime.microsecond : 0));
    case messages.DartDateTimeType_Constructor.dartDateTimeNamedFromMicrosecondsSinceEpoch:
      return $dartCore.DateTime.fromMicrosecondsSinceEpoch(
          (tree.dartDateTimeNamedFromMicrosecondsSinceEpoch.hasMicrosecondsSinceEpoch() ? tree.dartDateTimeNamedFromMicrosecondsSinceEpoch.microsecondsSinceEpoch : missing('microsecondsSinceEpoch')),
          isUtc: (tree.dartDateTimeNamedFromMicrosecondsSinceEpoch.hasIsUtc() ? tree.dartDateTimeNamedFromMicrosecondsSinceEpoch.isUtc : false));
    case messages.DartDateTimeType_Constructor.dartDateTimeNamedFromMillisecondsSinceEpoch:
      return $dartCore.DateTime.fromMillisecondsSinceEpoch(
          (tree.dartDateTimeNamedFromMillisecondsSinceEpoch.hasMillisecondsSinceEpoch() ? tree.dartDateTimeNamedFromMillisecondsSinceEpoch.millisecondsSinceEpoch : missing('millisecondsSinceEpoch')),
          isUtc: (tree.dartDateTimeNamedFromMillisecondsSinceEpoch.hasIsUtc() ? tree.dartDateTimeNamedFromMillisecondsSinceEpoch.isUtc : false));
    case messages.DartDateTimeType_Constructor.dartDateTimeNamedNow:
      return $dartCore.DateTime.now(
          );
    case messages.DartDateTimeType_Constructor.dartDateTimeNamedTimestamp:
      return $dartCore.DateTime.timestamp(
          );
    case messages.DartDateTimeType_Constructor.dartDateTimeNamedUtc:
      return $dartCore.DateTime.utc(
          (tree.dartDateTimeNamedUtc.hasYear() ? tree.dartDateTimeNamedUtc.year : missing('year')),
          (tree.dartDateTimeNamedUtc.hasMonth() ? tree.dartDateTimeNamedUtc.month : 1),
          (tree.dartDateTimeNamedUtc.hasDay() ? tree.dartDateTimeNamedUtc.day : 1),
          (tree.dartDateTimeNamedUtc.hasHour() ? tree.dartDateTimeNamedUtc.hour : 0),
          (tree.dartDateTimeNamedUtc.hasMinute() ? tree.dartDateTimeNamedUtc.minute : 0),
          (tree.dartDateTimeNamedUtc.hasSecond() ? tree.dartDateTimeNamedUtc.second : 0),
          (tree.dartDateTimeNamedUtc.hasMillisecond() ? tree.dartDateTimeNamedUtc.millisecond : 0),
          (tree.dartDateTimeNamedUtc.hasMicrosecond() ? tree.dartDateTimeNamedUtc.microsecond : 0));
    default:
      return null;
  }
}

$dartUi.DisplayFeature evaluateRequiredDartDisplayFeatureType(messages.DartDisplayFeatureType tree) {
  final result = evaluateDartDisplayFeatureType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.DisplayFeature? evaluateDartDisplayFeatureType(messages.DartDisplayFeatureType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartDisplayFeatureType_Constructor.dartDisplayFeature:
      return $dartUi.DisplayFeature(
          bounds: (tree.dartDisplayFeature.hasBounds() ? evaluateRequiredDartRectType(tree.dartDisplayFeature.bounds) : missing('bounds')),
          type: (tree.dartDisplayFeature.hasType() ? enums.convertRequiredDartDisplayFeatureTypeType(tree.dartDisplayFeature.type) : missing('type')),
          state: (tree.dartDisplayFeature.hasState() ? enums.convertRequiredDartDisplayFeatureStateType(tree.dartDisplayFeature.state) : missing('state')));
    default:
      return null;
  }
}

$dartCore.Duration evaluateRequiredDartDurationType(messages.DartDurationType tree) {
  final result = evaluateDartDurationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartCore.Duration? evaluateDartDurationType(messages.DartDurationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartDurationType_Constructor.dartDuration:
      return $dartCore.Duration(
          days: (tree.dartDuration.hasDays() ? tree.dartDuration.days : 0),
          hours: (tree.dartDuration.hasHours() ? tree.dartDuration.hours : 0),
          minutes: (tree.dartDuration.hasMinutes() ? tree.dartDuration.minutes : 0),
          seconds: (tree.dartDuration.hasSeconds() ? tree.dartDuration.seconds : 0),
          milliseconds: (tree.dartDuration.hasMilliseconds() ? tree.dartDuration.milliseconds : 0),
          microseconds: (tree.dartDuration.hasMicroseconds() ? tree.dartDuration.microseconds : 0));
    default:
      return null;
  }
}

$dartIo.File evaluateRequiredDartFileType(messages.DartFileType tree) {
  final result = evaluateDartFileType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartIo.File? evaluateDartFileType(messages.DartFileType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartFileType_Constructor.dartFile:
      return $dartIo.File(
          (tree.dartFile.hasPath() ? tree.dartFile.path : missing('path')));
    case messages.DartFileType_Constructor.dartFileNamedFromRawPath:
      return $dartIo.File.fromRawPath(
          (tree.dartFileNamedFromRawPath.hasRawPath() ? evaluateRequiredDartUint8ListType(tree.dartFileNamedFromRawPath.rawPath) : missing('rawPath')));
    case messages.DartFileType_Constructor.dartFileNamedFromUri:
      return $dartIo.File.fromUri(
          (tree.dartFileNamedFromUri.hasUri() ? evaluateRequiredDartUriType(tree.dartFileNamedFromUri.uri) : missing('uri')));
    default:
      return null;
  }
}

$dartTypedData.Float64List evaluateRequiredDartFloat64ListType(messages.DartFloat64ListType tree) {
  final result = evaluateDartFloat64ListType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartTypedData.Float64List? evaluateDartFloat64ListType(messages.DartFloat64ListType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartFloat64ListType_Constructor.dartFloat64List:
      return $dartTypedData.Float64List(
          (tree.dartFloat64List.hasLength() ? tree.dartFloat64List.length : missing('length')));
    case messages.DartFloat64ListType_Constructor.dartFloat64ListNamedFromList:
      return $dartTypedData.Float64List.fromList(
          tree.dartFloat64ListNamedFromList.elements);
    case messages.DartFloat64ListType_Constructor.dartFloat64ListNamedSublistView:
      return $dartTypedData.Float64List.sublistView(
          (tree.dartFloat64ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartFloat64ListNamedSublistView.data) : missing('data')),
          (tree.dartFloat64ListNamedSublistView.hasStart() ? tree.dartFloat64ListNamedSublistView.start : 0),
          (tree.dartFloat64ListNamedSublistView.hasEnd() ? tree.dartFloat64ListNamedSublistView.end : null));
    case messages.DartFloat64ListType_Constructor.dartFloat64ListNamedView:
      return $dartTypedData.Float64List.view(
          missing('buffer'),
          (tree.dartFloat64ListNamedView.hasOffsetInBytes() ? tree.dartFloat64ListNamedView.offsetInBytes : 0),
          (tree.dartFloat64ListNamedView.hasLength() ? tree.dartFloat64ListNamedView.length : null));
    default:
      return null;
  }
}

$dartUi.FontFeature evaluateRequiredDartFontFeatureType(messages.DartFontFeatureType tree) {
  final result = evaluateDartFontFeatureType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.FontFeature? evaluateDartFontFeatureType(messages.DartFontFeatureType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartFontFeatureType_Constructor.dartFontFeature:
      return $dartUi.FontFeature(
          (tree.dartFontFeature.hasFeature() ? tree.dartFontFeature.feature : missing('feature')),
          (tree.dartFontFeature.hasValue() ? tree.dartFontFeature.value : 1));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedAlternative:
      return $dartUi.FontFeature.alternative(
          (tree.dartFontFeatureNamedAlternative.hasValue() ? tree.dartFontFeatureNamedAlternative.value : missing('value')));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedAlternativeFractions:
      return $dartUi.FontFeature.alternativeFractions(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedCaseSensitiveForms:
      return $dartUi.FontFeature.caseSensitiveForms(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedCharacterVariant:
      return $dartUi.FontFeature.characterVariant(
          (tree.dartFontFeatureNamedCharacterVariant.hasValue() ? tree.dartFontFeatureNamedCharacterVariant.value : missing('value')));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedContextualAlternates:
      return $dartUi.FontFeature.contextualAlternates(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedDenominator:
      return $dartUi.FontFeature.denominator(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedDisable:
      return $dartUi.FontFeature.disable(
          (tree.dartFontFeatureNamedDisable.hasFeature() ? tree.dartFontFeatureNamedDisable.feature : missing('feature')));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedEnable:
      return $dartUi.FontFeature.enable(
          (tree.dartFontFeatureNamedEnable.hasFeature() ? tree.dartFontFeatureNamedEnable.feature : missing('feature')));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedFractions:
      return $dartUi.FontFeature.fractions(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedHistoricalForms:
      return $dartUi.FontFeature.historicalForms(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedHistoricalLigatures:
      return $dartUi.FontFeature.historicalLigatures(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedLiningFigures:
      return $dartUi.FontFeature.liningFigures(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedLocaleAware:
      return $dartUi.FontFeature.localeAware(
          enable: (tree.dartFontFeatureNamedLocaleAware.hasEnable() ? tree.dartFontFeatureNamedLocaleAware.enable : true));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedNotationalForms:
      return $dartUi.FontFeature.notationalForms(
          (tree.dartFontFeatureNamedNotationalForms.hasValue() ? tree.dartFontFeatureNamedNotationalForms.value : 1));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedNumerators:
      return $dartUi.FontFeature.numerators(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedOldstyleFigures:
      return $dartUi.FontFeature.oldstyleFigures(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedOrdinalForms:
      return $dartUi.FontFeature.ordinalForms(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedProportionalFigures:
      return $dartUi.FontFeature.proportionalFigures(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedRandomize:
      return $dartUi.FontFeature.randomize(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedScientificInferiors:
      return $dartUi.FontFeature.scientificInferiors(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedSlashedZero:
      return $dartUi.FontFeature.slashedZero(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedStylisticAlternates:
      return $dartUi.FontFeature.stylisticAlternates(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedStylisticSet:
      return $dartUi.FontFeature.stylisticSet(
          (tree.dartFontFeatureNamedStylisticSet.hasValue() ? tree.dartFontFeatureNamedStylisticSet.value : missing('value')));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedSubscripts:
      return $dartUi.FontFeature.subscripts(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedSuperscripts:
      return $dartUi.FontFeature.superscripts(
          );
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedSwash:
      return $dartUi.FontFeature.swash(
          (tree.dartFontFeatureNamedSwash.hasValue() ? tree.dartFontFeatureNamedSwash.value : 1));
    case messages.DartFontFeatureType_Constructor.dartFontFeatureNamedTabularFigures:
      return $dartUi.FontFeature.tabularFigures(
          );
    default:
      return null;
  }
}

$dartUi.FontVariation evaluateRequiredDartFontVariationType(messages.DartFontVariationType tree) {
  final result = evaluateDartFontVariationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.FontVariation? evaluateDartFontVariationType(messages.DartFontVariationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartFontVariationType_Constructor.dartFontVariation:
      return $dartUi.FontVariation(
          (tree.dartFontVariation.hasAxis() ? tree.dartFontVariation.axis : missing('axis')),
          (tree.dartFontVariation.hasValue() ? tree.dartFontVariation.value : missing('value')));
    case messages.DartFontVariationType_Constructor.dartFontVariationNamedItalic:
      return $dartUi.FontVariation.italic(
          (tree.dartFontVariationNamedItalic.hasValue() ? tree.dartFontVariationNamedItalic.value : missing('value')));
    case messages.DartFontVariationType_Constructor.dartFontVariationNamedOpticalSize:
      return $dartUi.FontVariation.opticalSize(
          (tree.dartFontVariationNamedOpticalSize.hasValue() ? tree.dartFontVariationNamedOpticalSize.value : missing('value')));
    case messages.DartFontVariationType_Constructor.dartFontVariationNamedSlant:
      return $dartUi.FontVariation.slant(
          (tree.dartFontVariationNamedSlant.hasValue() ? tree.dartFontVariationNamedSlant.value : missing('value')));
    case messages.DartFontVariationType_Constructor.dartFontVariationNamedWeight:
      return $dartUi.FontVariation.weight(
          (tree.dartFontVariationNamedWeight.hasValue() ? tree.dartFontVariationNamedWeight.value : missing('value')));
    case messages.DartFontVariationType_Constructor.dartFontVariationNamedWidth:
      return $dartUi.FontVariation.width(
          (tree.dartFontVariationNamedWidth.hasValue() ? tree.dartFontVariationNamedWidth.value : missing('value')));
    default:
      return null;
  }
}

$dartUi.ImageFilter evaluateRequiredDartImageFilterType(messages.DartImageFilterType tree) {
  final result = evaluateDartImageFilterType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.ImageFilter? evaluateDartImageFilterType(messages.DartImageFilterType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartImageFilterType_Constructor.dartColorFilterNamedLinearToSrgbGamma:
      return $dartUi.ColorFilter.linearToSrgbGamma(
          );
    case messages.DartImageFilterType_Constructor.dartColorFilterNamedMatrix:
      return $dartUi.ColorFilter.matrix(
          tree.dartColorFilterNamedMatrix.matrix);
    case messages.DartImageFilterType_Constructor.dartColorFilterNamedMode:
      return $dartUi.ColorFilter.mode(
          (tree.dartColorFilterNamedMode.hasColor() ? evaluateRequiredDartColorType(tree.dartColorFilterNamedMode.color) : missing('color')),
          (tree.dartColorFilterNamedMode.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.dartColorFilterNamedMode.blendMode) : missing('blendMode')));
    case messages.DartImageFilterType_Constructor.dartColorFilterNamedSrgbToLinearGamma:
      return $dartUi.ColorFilter.srgbToLinearGamma(
          );
    case messages.DartImageFilterType_Constructor.dartImageFilterNamedBlur:
      return $dartUi.ImageFilter.blur(
          sigmaX: (tree.dartImageFilterNamedBlur.hasSigmaX() ? tree.dartImageFilterNamedBlur.sigmaX : 0.0),
          sigmaY: (tree.dartImageFilterNamedBlur.hasSigmaY() ? tree.dartImageFilterNamedBlur.sigmaY : 0.0),
          tileMode: (tree.dartImageFilterNamedBlur.hasTileMode() ? enums.convertRequiredDartTileModeType(tree.dartImageFilterNamedBlur.tileMode) : $dartUi.TileMode.clamp));
    case messages.DartImageFilterType_Constructor.dartImageFilterNamedCompose:
      return $dartUi.ImageFilter.compose(
          outer: (tree.dartImageFilterNamedCompose.hasOuter() ? evaluateRequiredDartImageFilterType(tree.dartImageFilterNamedCompose.outer) : missing('outer')),
          inner: (tree.dartImageFilterNamedCompose.hasInner() ? evaluateRequiredDartImageFilterType(tree.dartImageFilterNamedCompose.inner) : missing('inner')));
    case messages.DartImageFilterType_Constructor.dartImageFilterNamedDilate:
      return $dartUi.ImageFilter.dilate(
          radiusX: (tree.dartImageFilterNamedDilate.hasRadiusX() ? tree.dartImageFilterNamedDilate.radiusX : 0.0),
          radiusY: (tree.dartImageFilterNamedDilate.hasRadiusY() ? tree.dartImageFilterNamedDilate.radiusY : 0.0));
    case messages.DartImageFilterType_Constructor.dartImageFilterNamedErode:
      return $dartUi.ImageFilter.erode(
          radiusX: (tree.dartImageFilterNamedErode.hasRadiusX() ? tree.dartImageFilterNamedErode.radiusX : 0.0),
          radiusY: (tree.dartImageFilterNamedErode.hasRadiusY() ? tree.dartImageFilterNamedErode.radiusY : 0.0));
    case messages.DartImageFilterType_Constructor.dartImageFilterNamedMatrix:
      return $dartUi.ImageFilter.matrix(
          (tree.dartImageFilterNamedMatrix.hasMatrix4() ? evaluateRequiredDartFloat64ListType(tree.dartImageFilterNamedMatrix.matrix4) : missing('matrix4')),
          filterQuality: (tree.dartImageFilterNamedMatrix.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.dartImageFilterNamedMatrix.filterQuality) : $dartUi.FilterQuality.low));
    default:
      return null;
  }
}

$dartUi.Locale evaluateRequiredDartLocaleType(messages.DartLocaleType tree) {
  final result = evaluateDartLocaleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Locale? evaluateDartLocaleType(messages.DartLocaleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartLocaleType_Constructor.dartLocale:
      return $dartUi.Locale(
          (tree.dartLocale.hasLanguageCode() ? tree.dartLocale.languageCode : missing('languageCode')),
          (tree.dartLocale.hasCountryCode() ? tree.dartLocale.countryCode : null));
    case messages.DartLocaleType_Constructor.dartLocaleNamedFromSubtags:
      return $dartUi.Locale.fromSubtags(
          languageCode: (tree.dartLocaleNamedFromSubtags.hasLanguageCode() ? tree.dartLocaleNamedFromSubtags.languageCode : 'und'),
          scriptCode: (tree.dartLocaleNamedFromSubtags.hasScriptCode() ? tree.dartLocaleNamedFromSubtags.scriptCode : null),
          countryCode: (tree.dartLocaleNamedFromSubtags.hasCountryCode() ? tree.dartLocaleNamedFromSubtags.countryCode : null));
    default:
      return null;
  }
}

$dartUi.Offset evaluateRequiredDartOffsetType(messages.DartOffsetType tree) {
  final result = evaluateDartOffsetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Offset? evaluateDartOffsetType(messages.DartOffsetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartOffsetType_Constructor.dartOffset:
      return $dartUi.Offset(
          (tree.dartOffset.hasDx() ? tree.dartOffset.dx : missing('dx')),
          (tree.dartOffset.hasDy() ? tree.dartOffset.dy : missing('dy')));
    case messages.DartOffsetType_Constructor.dartOffsetNamedFromDirection:
      return $dartUi.Offset.fromDirection(
          (tree.dartOffsetNamedFromDirection.hasDirection() ? tree.dartOffsetNamedFromDirection.direction : missing('direction')),
          (tree.dartOffsetNamedFromDirection.hasDistance() ? tree.dartOffsetNamedFromDirection.distance : 1.0));
    default:
      return null;
  }
}

$dartUi.Paint evaluateRequiredDartPaintType(messages.DartPaintType tree) {
  final result = evaluateDartPaintType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Paint? evaluateDartPaintType(messages.DartPaintType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartPaintType_Constructor.dartPaint:
      return $dartUi.Paint(
          );
    default:
      return null;
  }
}

$dartUi.Path evaluateRequiredDartPathType(messages.DartPathType tree) {
  final result = evaluateDartPathType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Path? evaluateDartPathType(messages.DartPathType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartPathType_Constructor.dartPath:
      return $dartUi.Path(
          );
    case messages.DartPathType_Constructor.dartPathNamedFrom:
      return $dartUi.Path.from(
          (tree.dartPathNamedFrom.hasSource() ? evaluateRequiredDartPathType(tree.dartPathNamedFrom.source) : missing('source')));
    default:
      return null;
  }
}

$dartUi.RRect evaluateRequiredDartRRectType(messages.DartRRectType tree) {
  final result = evaluateDartRRectType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.RRect? evaluateDartRRectType(messages.DartRRectType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartRRectType_Constructor.dartRRectNamedFromLTRBAndCorners:
      return $dartUi.RRect.fromLTRBAndCorners(
          (tree.dartRRectNamedFromLTRBAndCorners.hasLeft() ? tree.dartRRectNamedFromLTRBAndCorners.left : missing('left')),
          (tree.dartRRectNamedFromLTRBAndCorners.hasTop() ? tree.dartRRectNamedFromLTRBAndCorners.top : missing('top')),
          (tree.dartRRectNamedFromLTRBAndCorners.hasRight() ? tree.dartRRectNamedFromLTRBAndCorners.right : missing('right')),
          (tree.dartRRectNamedFromLTRBAndCorners.hasBottom() ? tree.dartRRectNamedFromLTRBAndCorners.bottom : missing('bottom')),
          topLeft: (tree.dartRRectNamedFromLTRBAndCorners.hasTopLeft() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromLTRBAndCorners.topLeft) : $dartUi.Radius.zero),
          topRight: (tree.dartRRectNamedFromLTRBAndCorners.hasTopRight() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromLTRBAndCorners.topRight) : $dartUi.Radius.zero),
          bottomRight: (tree.dartRRectNamedFromLTRBAndCorners.hasBottomRight() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromLTRBAndCorners.bottomRight) : $dartUi.Radius.zero),
          bottomLeft: (tree.dartRRectNamedFromLTRBAndCorners.hasBottomLeft() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromLTRBAndCorners.bottomLeft) : $dartUi.Radius.zero));
    case messages.DartRRectType_Constructor.dartRRectNamedFromLTRBR:
      return $dartUi.RRect.fromLTRBR(
          (tree.dartRRectNamedFromLTRBR.hasLeft() ? tree.dartRRectNamedFromLTRBR.left : missing('left')),
          (tree.dartRRectNamedFromLTRBR.hasTop() ? tree.dartRRectNamedFromLTRBR.top : missing('top')),
          (tree.dartRRectNamedFromLTRBR.hasRight() ? tree.dartRRectNamedFromLTRBR.right : missing('right')),
          (tree.dartRRectNamedFromLTRBR.hasBottom() ? tree.dartRRectNamedFromLTRBR.bottom : missing('bottom')),
          (tree.dartRRectNamedFromLTRBR.hasRadius() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromLTRBR.radius) : missing('radius')));
    case messages.DartRRectType_Constructor.dartRRectNamedFromLTRBXY:
      return $dartUi.RRect.fromLTRBXY(
          (tree.dartRRectNamedFromLTRBXY.hasLeft() ? tree.dartRRectNamedFromLTRBXY.left : missing('left')),
          (tree.dartRRectNamedFromLTRBXY.hasTop() ? tree.dartRRectNamedFromLTRBXY.top : missing('top')),
          (tree.dartRRectNamedFromLTRBXY.hasRight() ? tree.dartRRectNamedFromLTRBXY.right : missing('right')),
          (tree.dartRRectNamedFromLTRBXY.hasBottom() ? tree.dartRRectNamedFromLTRBXY.bottom : missing('bottom')),
          (tree.dartRRectNamedFromLTRBXY.hasRadiusX() ? tree.dartRRectNamedFromLTRBXY.radiusX : missing('radiusX')),
          (tree.dartRRectNamedFromLTRBXY.hasRadiusY() ? tree.dartRRectNamedFromLTRBXY.radiusY : missing('radiusY')));
    case messages.DartRRectType_Constructor.dartRRectNamedFromRectAndCorners:
      return $dartUi.RRect.fromRectAndCorners(
          (tree.dartRRectNamedFromRectAndCorners.hasRect() ? evaluateRequiredDartRectType(tree.dartRRectNamedFromRectAndCorners.rect) : missing('rect')),
          topLeft: (tree.dartRRectNamedFromRectAndCorners.hasTopLeft() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromRectAndCorners.topLeft) : $dartUi.Radius.zero),
          topRight: (tree.dartRRectNamedFromRectAndCorners.hasTopRight() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromRectAndCorners.topRight) : $dartUi.Radius.zero),
          bottomRight: (tree.dartRRectNamedFromRectAndCorners.hasBottomRight() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromRectAndCorners.bottomRight) : $dartUi.Radius.zero),
          bottomLeft: (tree.dartRRectNamedFromRectAndCorners.hasBottomLeft() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromRectAndCorners.bottomLeft) : $dartUi.Radius.zero));
    case messages.DartRRectType_Constructor.dartRRectNamedFromRectAndRadius:
      return $dartUi.RRect.fromRectAndRadius(
          (tree.dartRRectNamedFromRectAndRadius.hasRect() ? evaluateRequiredDartRectType(tree.dartRRectNamedFromRectAndRadius.rect) : missing('rect')),
          (tree.dartRRectNamedFromRectAndRadius.hasRadius() ? evaluateRequiredDartRadiusType(tree.dartRRectNamedFromRectAndRadius.radius) : missing('radius')));
    case messages.DartRRectType_Constructor.dartRRectNamedFromRectXY:
      return $dartUi.RRect.fromRectXY(
          (tree.dartRRectNamedFromRectXY.hasRect() ? evaluateRequiredDartRectType(tree.dartRRectNamedFromRectXY.rect) : missing('rect')),
          (tree.dartRRectNamedFromRectXY.hasRadiusX() ? tree.dartRRectNamedFromRectXY.radiusX : missing('radiusX')),
          (tree.dartRRectNamedFromRectXY.hasRadiusY() ? tree.dartRRectNamedFromRectXY.radiusY : missing('radiusY')));
    default:
      return null;
  }
}

$dartUi.Radius evaluateRequiredDartRadiusType(messages.DartRadiusType tree) {
  final result = evaluateDartRadiusType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Radius? evaluateDartRadiusType(messages.DartRadiusType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartRadiusType_Constructor.dartRadiusNamedCircular:
      return $dartUi.Radius.circular(
          (tree.dartRadiusNamedCircular.hasRadius() ? tree.dartRadiusNamedCircular.radius : missing('radius')));
    case messages.DartRadiusType_Constructor.dartRadiusNamedElliptical:
      return $dartUi.Radius.elliptical(
          (tree.dartRadiusNamedElliptical.hasX() ? tree.dartRadiusNamedElliptical.x : missing('x')),
          (tree.dartRadiusNamedElliptical.hasY() ? tree.dartRadiusNamedElliptical.y : missing('y')));
    default:
      return null;
  }
}

$dartMath.Random evaluateRequiredDartRandomType(messages.DartRandomType tree) {
  final result = evaluateDartRandomType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartMath.Random? evaluateDartRandomType(messages.DartRandomType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartRandomType_Constructor.dartRandom:
      return $dartMath.Random(
          (tree.dartRandom.hasSeed() ? tree.dartRandom.seed : null));
    case messages.DartRandomType_Constructor.dartRandomNamedSecure:
      return $dartMath.Random.secure(
          );
    default:
      return null;
  }
}

$dartUi.Rect evaluateRequiredDartRectType(messages.DartRectType tree) {
  final result = evaluateDartRectType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Rect? evaluateDartRectType(messages.DartRectType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartRectType_Constructor.dartRectNamedFromCenter:
      return $dartUi.Rect.fromCenter(
          center: (tree.dartRectNamedFromCenter.hasCenter() ? evaluateRequiredDartOffsetType(tree.dartRectNamedFromCenter.center) : missing('center')),
          width: (tree.dartRectNamedFromCenter.hasWidth() ? tree.dartRectNamedFromCenter.width : missing('width')),
          height: (tree.dartRectNamedFromCenter.hasHeight() ? tree.dartRectNamedFromCenter.height : missing('height')));
    case messages.DartRectType_Constructor.dartRectNamedFromCircle:
      return $dartUi.Rect.fromCircle(
          center: (tree.dartRectNamedFromCircle.hasCenter() ? evaluateRequiredDartOffsetType(tree.dartRectNamedFromCircle.center) : missing('center')),
          radius: (tree.dartRectNamedFromCircle.hasRadius() ? tree.dartRectNamedFromCircle.radius : missing('radius')));
    case messages.DartRectType_Constructor.dartRectNamedFromLTRB:
      return $dartUi.Rect.fromLTRB(
          (tree.dartRectNamedFromLTRB.hasLeft() ? tree.dartRectNamedFromLTRB.left : missing('left')),
          (tree.dartRectNamedFromLTRB.hasTop() ? tree.dartRectNamedFromLTRB.top : missing('top')),
          (tree.dartRectNamedFromLTRB.hasRight() ? tree.dartRectNamedFromLTRB.right : missing('right')),
          (tree.dartRectNamedFromLTRB.hasBottom() ? tree.dartRectNamedFromLTRB.bottom : missing('bottom')));
    case messages.DartRectType_Constructor.dartRectNamedFromLTWH:
      return $dartUi.Rect.fromLTWH(
          (tree.dartRectNamedFromLTWH.hasLeft() ? tree.dartRectNamedFromLTWH.left : missing('left')),
          (tree.dartRectNamedFromLTWH.hasTop() ? tree.dartRectNamedFromLTWH.top : missing('top')),
          (tree.dartRectNamedFromLTWH.hasWidth() ? tree.dartRectNamedFromLTWH.width : missing('width')),
          (tree.dartRectNamedFromLTWH.hasHeight() ? tree.dartRectNamedFromLTWH.height : missing('height')));
    case messages.DartRectType_Constructor.dartRectNamedFromPoints:
      return $dartUi.Rect.fromPoints(
          (tree.dartRectNamedFromPoints.hasA() ? evaluateRequiredDartOffsetType(tree.dartRectNamedFromPoints.a) : missing('a')),
          (tree.dartRectNamedFromPoints.hasB() ? evaluateRequiredDartOffsetType(tree.dartRectNamedFromPoints.b) : missing('b')));
    default:
      return null;
  }
}

$dartUi.Shader evaluateRequiredDartShaderType(messages.DartShaderType tree) {
  final result = evaluateDartShaderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Shader? evaluateDartShaderType(messages.DartShaderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartShaderType_Constructor.dartImageShader:
      return $dartUi.ImageShader(
          missing('image'),
          (tree.dartImageShader.hasTmx() ? enums.convertRequiredDartTileModeType(tree.dartImageShader.tmx) : missing('tmx')),
          (tree.dartImageShader.hasTmy() ? enums.convertRequiredDartTileModeType(tree.dartImageShader.tmy) : missing('tmy')),
          (tree.dartImageShader.hasMatrix4() ? evaluateRequiredDartFloat64ListType(tree.dartImageShader.matrix4) : missing('matrix4')),
          filterQuality: (tree.dartImageShader.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.dartImageShader.filterQuality) : null));
    default:
      return null;
  }
}

$dartUi.Shadow evaluateRequiredDartShadowType(messages.DartShadowType tree) {
  final result = evaluateDartShadowType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Shadow? evaluateDartShadowType(messages.DartShadowType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartShadowType_Constructor.dartShadow:
      return $dartUi.Shadow(
          color: (tree.dartShadow.hasColor() ? evaluateRequiredDartColorType(tree.dartShadow.color) : $dartUi.Color(0xFF000000)),
          offset: (tree.dartShadow.hasOffset() ? evaluateRequiredDartOffsetType(tree.dartShadow.offset) : $dartUi.Offset.zero),
          blurRadius: (tree.dartShadow.hasBlurRadius() ? tree.dartShadow.blurRadius : 0.0));
    case messages.DartShadowType_Constructor.flutterBoxShadow:
      return $flutterSrcPaintingBoxShadow.BoxShadow(
          color: (tree.flutterBoxShadow.hasColor() ? evaluateRequiredDartColorType(tree.flutterBoxShadow.color) : $dartUi.Color(0xFF000000)),
          offset: (tree.flutterBoxShadow.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterBoxShadow.offset) : $dartUi.Offset.zero),
          blurRadius: (tree.flutterBoxShadow.hasBlurRadius() ? tree.flutterBoxShadow.blurRadius : 0.0),
          spreadRadius: (tree.flutterBoxShadow.hasSpreadRadius() ? tree.flutterBoxShadow.spreadRadius : 0.0),
          blurStyle: (tree.flutterBoxShadow.hasBlurStyle() ? enums.convertRequiredDartBlurStyleType(tree.flutterBoxShadow.blurStyle) : $dartUi.BlurStyle.normal));
    default:
      return null;
  }
}

$dartUi.Size evaluateRequiredDartSizeType(messages.DartSizeType tree) {
  final result = evaluateDartSizeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.Size? evaluateDartSizeType(messages.DartSizeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartSizeType_Constructor.dartSize:
      return $dartUi.Size(
          (tree.dartSize.hasWidth() ? tree.dartSize.width : missing('width')),
          (tree.dartSize.hasHeight() ? tree.dartSize.height : missing('height')));
    case messages.DartSizeType_Constructor.dartSizeNamedCopy:
      return $dartUi.Size.copy(
          (tree.dartSizeNamedCopy.hasSource() ? evaluateRequiredDartSizeType(tree.dartSizeNamedCopy.source) : missing('source')));
    case messages.DartSizeType_Constructor.dartSizeNamedFromHeight:
      return $dartUi.Size.fromHeight(
          (tree.dartSizeNamedFromHeight.hasHeight() ? tree.dartSizeNamedFromHeight.height : missing('height')));
    case messages.DartSizeType_Constructor.dartSizeNamedFromRadius:
      return $dartUi.Size.fromRadius(
          (tree.dartSizeNamedFromRadius.hasRadius() ? tree.dartSizeNamedFromRadius.radius : missing('radius')));
    case messages.DartSizeType_Constructor.dartSizeNamedFromWidth:
      return $dartUi.Size.fromWidth(
          (tree.dartSizeNamedFromWidth.hasWidth() ? tree.dartSizeNamedFromWidth.width : missing('width')));
    case messages.DartSizeType_Constructor.dartSizeNamedSquare:
      return $dartUi.Size.square(
          (tree.dartSizeNamedSquare.hasDimension() ? tree.dartSizeNamedSquare.dimension : missing('dimension')));
    default:
      return null;
  }
}

$dartCore.StackTrace evaluateRequiredDartStackTraceType(messages.DartStackTraceType tree) {
  final result = evaluateDartStackTraceType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartCore.StackTrace? evaluateDartStackTraceType(messages.DartStackTraceType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartStackTraceType_Constructor.dartStackTraceNamedFromString:
      return $dartCore.StackTrace.fromString(
          (tree.dartStackTraceNamedFromString.hasStackTraceString() ? tree.dartStackTraceNamedFromString.stackTraceString : missing('stackTraceString')));
    default:
      return null;
  }
}

$dartUi.StringAttribute evaluateRequiredDartStringAttributeType(messages.DartStringAttributeType tree) {
  final result = evaluateDartStringAttributeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.StringAttribute? evaluateDartStringAttributeType(messages.DartStringAttributeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartStringAttributeType_Constructor.dartLocaleStringAttribute:
      return $dartUi.LocaleStringAttribute(
          range: (tree.dartLocaleStringAttribute.hasRange() ? evaluateRequiredDartTextRangeType(tree.dartLocaleStringAttribute.range) : missing('range')),
          locale: (tree.dartLocaleStringAttribute.hasLocale() ? evaluateRequiredDartLocaleType(tree.dartLocaleStringAttribute.locale) : missing('locale')));
    case messages.DartStringAttributeType_Constructor.dartSpellOutStringAttribute:
      return $dartUi.SpellOutStringAttribute(
          range: (tree.dartSpellOutStringAttribute.hasRange() ? evaluateRequiredDartTextRangeType(tree.dartSpellOutStringAttribute.range) : missing('range')));
    default:
      return null;
  }
}

$dartUi.TextDecoration evaluateRequiredDartTextDecorationType(messages.DartTextDecorationType tree) {
  final result = evaluateDartTextDecorationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.TextDecoration? evaluateDartTextDecorationType(messages.DartTextDecorationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartTextDecorationType_Constructor.dartTextDecorationNamedCombine:
      return $dartUi.TextDecoration.combine(
          tree.dartTextDecorationNamedCombine.decorations.map((e) => evaluateRequiredDartTextDecorationType(e)).toList());
    default:
      return null;
  }
}

$dartUi.TextHeightBehavior evaluateRequiredDartTextHeightBehaviorType(messages.DartTextHeightBehaviorType tree) {
  final result = evaluateDartTextHeightBehaviorType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.TextHeightBehavior? evaluateDartTextHeightBehaviorType(messages.DartTextHeightBehaviorType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartTextHeightBehaviorType_Constructor.dartTextHeightBehavior:
      return $dartUi.TextHeightBehavior(
          applyHeightToFirstAscent: (tree.dartTextHeightBehavior.hasApplyHeightToFirstAscent() ? tree.dartTextHeightBehavior.applyHeightToFirstAscent : true),
          applyHeightToLastDescent: (tree.dartTextHeightBehavior.hasApplyHeightToLastDescent() ? tree.dartTextHeightBehavior.applyHeightToLastDescent : true),
          leadingDistribution: (tree.dartTextHeightBehavior.hasLeadingDistribution() ? enums.convertRequiredDartTextLeadingDistributionType(tree.dartTextHeightBehavior.leadingDistribution) : $dartUi.TextLeadingDistribution.proportional));
    default:
      return null;
  }
}

$dartUi.TextPosition evaluateRequiredDartTextPositionType(messages.DartTextPositionType tree) {
  final result = evaluateDartTextPositionType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.TextPosition? evaluateDartTextPositionType(messages.DartTextPositionType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartTextPositionType_Constructor.dartTextPosition:
      return $dartUi.TextPosition(
          offset: (tree.dartTextPosition.hasOffset() ? tree.dartTextPosition.offset : missing('offset')),
          affinity: (tree.dartTextPosition.hasAffinity() ? enums.convertRequiredDartTextAffinityType(tree.dartTextPosition.affinity) : $dartUi.TextAffinity.downstream));
    default:
      return null;
  }
}

$dartUi.TextRange evaluateRequiredDartTextRangeType(messages.DartTextRangeType tree) {
  final result = evaluateDartTextRangeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartUi.TextRange? evaluateDartTextRangeType(messages.DartTextRangeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartTextRangeType_Constructor.dartTextRange:
      return $dartUi.TextRange(
          start: (tree.dartTextRange.hasStart() ? tree.dartTextRange.start : missing('start')),
          end: (tree.dartTextRange.hasEnd() ? tree.dartTextRange.end : missing('end')));
    case messages.DartTextRangeType_Constructor.dartTextRangeNamedCollapsed:
      return $dartUi.TextRange.collapsed(
          (tree.dartTextRangeNamedCollapsed.hasOffset() ? tree.dartTextRangeNamedCollapsed.offset : missing('offset')));
    case messages.DartTextRangeType_Constructor.flutterTextSelection:
      return $flutterSrcServicesTextEditing.TextSelection(
          baseOffset: (tree.flutterTextSelection.hasBaseOffset() ? tree.flutterTextSelection.baseOffset : missing('baseOffset')),
          extentOffset: (tree.flutterTextSelection.hasExtentOffset() ? tree.flutterTextSelection.extentOffset : missing('extentOffset')),
          affinity: (tree.flutterTextSelection.hasAffinity() ? enums.convertRequiredDartTextAffinityType(tree.flutterTextSelection.affinity) : $dartUi.TextAffinity.downstream),
          isDirectional: (tree.flutterTextSelection.hasIsDirectional() ? tree.flutterTextSelection.isDirectional : false));
    case messages.DartTextRangeType_Constructor.flutterTextSelectionNamedCollapsed:
      return $flutterSrcServicesTextEditing.TextSelection.collapsed(
          offset: (tree.flutterTextSelectionNamedCollapsed.hasOffset() ? tree.flutterTextSelectionNamedCollapsed.offset : missing('offset')),
          affinity: (tree.flutterTextSelectionNamedCollapsed.hasAffinity() ? enums.convertRequiredDartTextAffinityType(tree.flutterTextSelectionNamedCollapsed.affinity) : $dartUi.TextAffinity.downstream));
    case messages.DartTextRangeType_Constructor.flutterTextSelectionNamedFromPosition:
      return $flutterSrcServicesTextEditing.TextSelection.fromPosition(
          (tree.flutterTextSelectionNamedFromPosition.hasPosition() ? evaluateRequiredDartTextPositionType(tree.flutterTextSelectionNamedFromPosition.position) : missing('position')));
    default:
      return null;
  }
}

$dartTypedData.TypedData evaluateRequiredDartTypedDataType(messages.DartTypedDataType tree) {
  final result = evaluateDartTypedDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartTypedData.TypedData? evaluateDartTypedDataType(messages.DartTypedDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartTypedDataType_Constructor.dartByteData:
      return $dartTypedData.ByteData(
          (tree.dartByteData.hasLength() ? tree.dartByteData.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartByteDataNamedSublistView:
      return $dartTypedData.ByteData.sublistView(
          (tree.dartByteDataNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartByteDataNamedSublistView.data) : missing('data')),
          (tree.dartByteDataNamedSublistView.hasStart() ? tree.dartByteDataNamedSublistView.start : 0),
          (tree.dartByteDataNamedSublistView.hasEnd() ? tree.dartByteDataNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartByteDataNamedView:
      return $dartTypedData.ByteData.view(
          missing('buffer'),
          (tree.dartByteDataNamedView.hasOffsetInBytes() ? tree.dartByteDataNamedView.offsetInBytes : 0),
          (tree.dartByteDataNamedView.hasLength() ? tree.dartByteDataNamedView.length : null));
    case messages.DartTypedDataType_Constructor.dartFloat32List:
      return $dartTypedData.Float32List(
          (tree.dartFloat32List.hasLength() ? tree.dartFloat32List.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartFloat32ListNamedFromList:
      return $dartTypedData.Float32List.fromList(
          tree.dartFloat32ListNamedFromList.elements);
    case messages.DartTypedDataType_Constructor.dartFloat32ListNamedSublistView:
      return $dartTypedData.Float32List.sublistView(
          (tree.dartFloat32ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartFloat32ListNamedSublistView.data) : missing('data')),
          (tree.dartFloat32ListNamedSublistView.hasStart() ? tree.dartFloat32ListNamedSublistView.start : 0),
          (tree.dartFloat32ListNamedSublistView.hasEnd() ? tree.dartFloat32ListNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartFloat32ListNamedView:
      return $dartTypedData.Float32List.view(
          missing('buffer'),
          (tree.dartFloat32ListNamedView.hasOffsetInBytes() ? tree.dartFloat32ListNamedView.offsetInBytes : 0),
          (tree.dartFloat32ListNamedView.hasLength() ? tree.dartFloat32ListNamedView.length : null));
    case messages.DartTypedDataType_Constructor.dartFloat64List:
      return $dartTypedData.Float64List(
          (tree.dartFloat64List.hasLength() ? tree.dartFloat64List.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartFloat64ListNamedFromList:
      return $dartTypedData.Float64List.fromList(
          tree.dartFloat64ListNamedFromList.elements);
    case messages.DartTypedDataType_Constructor.dartFloat64ListNamedSublistView:
      return $dartTypedData.Float64List.sublistView(
          (tree.dartFloat64ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartFloat64ListNamedSublistView.data) : missing('data')),
          (tree.dartFloat64ListNamedSublistView.hasStart() ? tree.dartFloat64ListNamedSublistView.start : 0),
          (tree.dartFloat64ListNamedSublistView.hasEnd() ? tree.dartFloat64ListNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartFloat64ListNamedView:
      return $dartTypedData.Float64List.view(
          missing('buffer'),
          (tree.dartFloat64ListNamedView.hasOffsetInBytes() ? tree.dartFloat64ListNamedView.offsetInBytes : 0),
          (tree.dartFloat64ListNamedView.hasLength() ? tree.dartFloat64ListNamedView.length : null));
    case messages.DartTypedDataType_Constructor.dartInt32List:
      return $dartTypedData.Int32List(
          (tree.dartInt32List.hasLength() ? tree.dartInt32List.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartInt32ListNamedFromList:
      return $dartTypedData.Int32List.fromList(
          tree.dartInt32ListNamedFromList.elements);
    case messages.DartTypedDataType_Constructor.dartInt32ListNamedSublistView:
      return $dartTypedData.Int32List.sublistView(
          (tree.dartInt32ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartInt32ListNamedSublistView.data) : missing('data')),
          (tree.dartInt32ListNamedSublistView.hasStart() ? tree.dartInt32ListNamedSublistView.start : 0),
          (tree.dartInt32ListNamedSublistView.hasEnd() ? tree.dartInt32ListNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartInt32ListNamedView:
      return $dartTypedData.Int32List.view(
          missing('buffer'),
          (tree.dartInt32ListNamedView.hasOffsetInBytes() ? tree.dartInt32ListNamedView.offsetInBytes : 0),
          (tree.dartInt32ListNamedView.hasLength() ? tree.dartInt32ListNamedView.length : null));
    case messages.DartTypedDataType_Constructor.dartInt64List:
      return $dartTypedData.Int64List(
          (tree.dartInt64List.hasLength() ? tree.dartInt64List.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartInt64ListNamedFromList:
      return $dartTypedData.Int64List.fromList(
          tree.dartInt64ListNamedFromList.elements);
    case messages.DartTypedDataType_Constructor.dartInt64ListNamedSublistView:
      return $dartTypedData.Int64List.sublistView(
          (tree.dartInt64ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartInt64ListNamedSublistView.data) : missing('data')),
          (tree.dartInt64ListNamedSublistView.hasStart() ? tree.dartInt64ListNamedSublistView.start : 0),
          (tree.dartInt64ListNamedSublistView.hasEnd() ? tree.dartInt64ListNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartInt64ListNamedView:
      return $dartTypedData.Int64List.view(
          missing('buffer'),
          (tree.dartInt64ListNamedView.hasOffsetInBytes() ? tree.dartInt64ListNamedView.offsetInBytes : 0),
          (tree.dartInt64ListNamedView.hasLength() ? tree.dartInt64ListNamedView.length : null));
    case messages.DartTypedDataType_Constructor.dartUint8List:
      return $dartTypedData.Uint8List(
          (tree.dartUint8List.hasLength() ? tree.dartUint8List.length : missing('length')));
    case messages.DartTypedDataType_Constructor.dartUint8ListNamedFromList:
      return $dartTypedData.Uint8List.fromList(
          tree.dartUint8ListNamedFromList.elements);
    case messages.DartTypedDataType_Constructor.dartUint8ListNamedSublistView:
      return $dartTypedData.Uint8List.sublistView(
          (tree.dartUint8ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartUint8ListNamedSublistView.data) : missing('data')),
          (tree.dartUint8ListNamedSublistView.hasStart() ? tree.dartUint8ListNamedSublistView.start : 0),
          (tree.dartUint8ListNamedSublistView.hasEnd() ? tree.dartUint8ListNamedSublistView.end : null));
    case messages.DartTypedDataType_Constructor.dartUint8ListNamedView:
      return $dartTypedData.Uint8List.view(
          missing('buffer'),
          (tree.dartUint8ListNamedView.hasOffsetInBytes() ? tree.dartUint8ListNamedView.offsetInBytes : 0),
          (tree.dartUint8ListNamedView.hasLength() ? tree.dartUint8ListNamedView.length : null));
    default:
      return null;
  }
}

$dartTypedData.Uint8List evaluateRequiredDartUint8ListType(messages.DartUint8ListType tree) {
  final result = evaluateDartUint8ListType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartTypedData.Uint8List? evaluateDartUint8ListType(messages.DartUint8ListType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartUint8ListType_Constructor.dartUint8List:
      return $dartTypedData.Uint8List(
          (tree.dartUint8List.hasLength() ? tree.dartUint8List.length : missing('length')));
    case messages.DartUint8ListType_Constructor.dartUint8ListNamedFromList:
      return $dartTypedData.Uint8List.fromList(
          tree.dartUint8ListNamedFromList.elements);
    case messages.DartUint8ListType_Constructor.dartUint8ListNamedSublistView:
      return $dartTypedData.Uint8List.sublistView(
          (tree.dartUint8ListNamedSublistView.hasData() ? evaluateRequiredDartTypedDataType(tree.dartUint8ListNamedSublistView.data) : missing('data')),
          (tree.dartUint8ListNamedSublistView.hasStart() ? tree.dartUint8ListNamedSublistView.start : 0),
          (tree.dartUint8ListNamedSublistView.hasEnd() ? tree.dartUint8ListNamedSublistView.end : null));
    case messages.DartUint8ListType_Constructor.dartUint8ListNamedView:
      return $dartTypedData.Uint8List.view(
          missing('buffer'),
          (tree.dartUint8ListNamedView.hasOffsetInBytes() ? tree.dartUint8ListNamedView.offsetInBytes : 0),
          (tree.dartUint8ListNamedView.hasLength() ? tree.dartUint8ListNamedView.length : null));
    default:
      return null;
  }
}

$dartCore.Uri evaluateRequiredDartUriType(messages.DartUriType tree) {
  final result = evaluateDartUriType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$dartCore.Uri? evaluateDartUriType(messages.DartUriType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.DartUriType_Constructor.dartUri:
      return $dartCore.Uri(
          scheme: (tree.dartUri.hasScheme() ? tree.dartUri.scheme : null),
          userInfo: (tree.dartUri.hasUserInfo() ? tree.dartUri.userInfo : null),
          host: (tree.dartUri.hasHost() ? tree.dartUri.host : null),
          port: (tree.dartUri.hasPort() ? tree.dartUri.port : null),
          path: (tree.dartUri.hasPath() ? tree.dartUri.path : null),
          pathSegments: tree.dartUri.pathSegments,
          query: (tree.dartUri.hasQuery() ? tree.dartUri.query : null),
          queryParameters: null,
          fragment: (tree.dartUri.hasFragment() ? tree.dartUri.fragment : null));
    case messages.DartUriType_Constructor.dartUriNamedDataFromBytes:
      return $dartCore.Uri.dataFromBytes(
          tree.dartUriNamedDataFromBytes.bytes,
          mimeType: (tree.dartUriNamedDataFromBytes.hasMimeType() ? tree.dartUriNamedDataFromBytes.mimeType : "application/octet-stream"),
          parameters: null,
          percentEncoded: (tree.dartUriNamedDataFromBytes.hasPercentEncoded() ? tree.dartUriNamedDataFromBytes.percentEncoded : false));
    case messages.DartUriType_Constructor.dartUriNamedDataFromString:
      return $dartCore.Uri.dataFromString(
          (tree.dartUriNamedDataFromString.hasContent() ? tree.dartUriNamedDataFromString.content : missing('content')),
          mimeType: (tree.dartUriNamedDataFromString.hasMimeType() ? tree.dartUriNamedDataFromString.mimeType : null),
          encoding: null,
          parameters: null,
          base64: (tree.dartUriNamedDataFromString.hasBase64() ? tree.dartUriNamedDataFromString.base64 : false));
    case messages.DartUriType_Constructor.dartUriNamedDirectory:
      return $dartCore.Uri.directory(
          (tree.dartUriNamedDirectory.hasPath() ? tree.dartUriNamedDirectory.path : missing('path')),
          windows: (tree.dartUriNamedDirectory.hasWindows() ? tree.dartUriNamedDirectory.windows : null));
    case messages.DartUriType_Constructor.dartUriNamedFile:
      return $dartCore.Uri.file(
          (tree.dartUriNamedFile.hasPath() ? tree.dartUriNamedFile.path : missing('path')),
          windows: (tree.dartUriNamedFile.hasWindows() ? tree.dartUriNamedFile.windows : null));
    case messages.DartUriType_Constructor.dartUriNamedHttp:
      return $dartCore.Uri.http(
          (tree.dartUriNamedHttp.hasAuthority() ? tree.dartUriNamedHttp.authority : missing('authority')),
          (tree.dartUriNamedHttp.hasUnencodedPath() ? tree.dartUriNamedHttp.unencodedPath : missing('unencodedPath')),
          null);
    case messages.DartUriType_Constructor.dartUriNamedHttps:
      return $dartCore.Uri.https(
          (tree.dartUriNamedHttps.hasAuthority() ? tree.dartUriNamedHttps.authority : missing('authority')),
          (tree.dartUriNamedHttps.hasUnencodedPath() ? tree.dartUriNamedHttps.unencodedPath : missing('unencodedPath')),
          null);
    default:
      return null;
  }
}

$flutterSrcPaintingAlignment.AlignmentDirectional evaluateRequiredFlutterAlignmentDirectionalType(messages.FlutterAlignmentDirectionalType tree) {
  final result = evaluateFlutterAlignmentDirectionalType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingAlignment.AlignmentDirectional? evaluateFlutterAlignmentDirectionalType(messages.FlutterAlignmentDirectionalType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterAlignmentDirectionalType_Constructor.flutterAlignmentDirectional:
      return $flutterSrcPaintingAlignment.AlignmentDirectional(
          (tree.flutterAlignmentDirectional.hasStart() ? tree.flutterAlignmentDirectional.start : missing('start')),
          (tree.flutterAlignmentDirectional.hasY() ? tree.flutterAlignmentDirectional.y : missing('y')));
    default:
      return null;
  }
}

$flutterSrcPaintingAlignment.AlignmentGeometry evaluateRequiredFlutterAlignmentGeometryType(messages.FlutterAlignmentGeometryType tree) {
  final result = evaluateFlutterAlignmentGeometryType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingAlignment.AlignmentGeometry? evaluateFlutterAlignmentGeometryType(messages.FlutterAlignmentGeometryType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterAlignmentGeometryType_Constructor.flutterAlignment:
      return $flutterSrcPaintingAlignment.Alignment(
          (tree.flutterAlignment.hasX() ? tree.flutterAlignment.x : missing('x')),
          (tree.flutterAlignment.hasY() ? tree.flutterAlignment.y : missing('y')));
    case messages.FlutterAlignmentGeometryType_Constructor.flutterAlignmentDirectional:
      return $flutterSrcPaintingAlignment.AlignmentDirectional(
          (tree.flutterAlignmentDirectional.hasStart() ? tree.flutterAlignmentDirectional.start : missing('start')),
          (tree.flutterAlignmentDirectional.hasY() ? tree.flutterAlignmentDirectional.y : missing('y')));
    case messages.FlutterAlignmentGeometryType_Constructor.flutterFractionalOffset:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset(
          (tree.flutterFractionalOffset.hasDx() ? tree.flutterFractionalOffset.dx : missing('dx')),
          (tree.flutterFractionalOffset.hasDy() ? tree.flutterFractionalOffset.dy : missing('dy')));
    case messages.FlutterAlignmentGeometryType_Constructor.flutterFractionalOffsetNamedFromOffsetAndRect:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset.fromOffsetAndRect(
          (tree.flutterFractionalOffsetNamedFromOffsetAndRect.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterFractionalOffsetNamedFromOffsetAndRect.offset) : missing('offset')),
          (tree.flutterFractionalOffsetNamedFromOffsetAndRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterFractionalOffsetNamedFromOffsetAndRect.rect) : missing('rect')));
    case messages.FlutterAlignmentGeometryType_Constructor.flutterFractionalOffsetNamedFromOffsetAndSize:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset.fromOffsetAndSize(
          (tree.flutterFractionalOffsetNamedFromOffsetAndSize.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterFractionalOffsetNamedFromOffsetAndSize.offset) : missing('offset')),
          (tree.flutterFractionalOffsetNamedFromOffsetAndSize.hasSize() ? evaluateRequiredDartSizeType(tree.flutterFractionalOffsetNamedFromOffsetAndSize.size) : missing('size')));
    default:
      return null;
  }
}

$flutterSrcPaintingAlignment.Alignment evaluateRequiredFlutterAlignmentType(messages.FlutterAlignmentType tree) {
  final result = evaluateFlutterAlignmentType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingAlignment.Alignment? evaluateFlutterAlignmentType(messages.FlutterAlignmentType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterAlignmentType_Constructor.flutterAlignment:
      return $flutterSrcPaintingAlignment.Alignment(
          (tree.flutterAlignment.hasX() ? tree.flutterAlignment.x : missing('x')),
          (tree.flutterAlignment.hasY() ? tree.flutterAlignment.y : missing('y')));
    case messages.FlutterAlignmentType_Constructor.flutterFractionalOffset:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset(
          (tree.flutterFractionalOffset.hasDx() ? tree.flutterFractionalOffset.dx : missing('dx')),
          (tree.flutterFractionalOffset.hasDy() ? tree.flutterFractionalOffset.dy : missing('dy')));
    case messages.FlutterAlignmentType_Constructor.flutterFractionalOffsetNamedFromOffsetAndRect:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset.fromOffsetAndRect(
          (tree.flutterFractionalOffsetNamedFromOffsetAndRect.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterFractionalOffsetNamedFromOffsetAndRect.offset) : missing('offset')),
          (tree.flutterFractionalOffsetNamedFromOffsetAndRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterFractionalOffsetNamedFromOffsetAndRect.rect) : missing('rect')));
    case messages.FlutterAlignmentType_Constructor.flutterFractionalOffsetNamedFromOffsetAndSize:
      return $flutterSrcPaintingFractionalOffset.FractionalOffset.fromOffsetAndSize(
          (tree.flutterFractionalOffsetNamedFromOffsetAndSize.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterFractionalOffsetNamedFromOffsetAndSize.offset) : missing('offset')),
          (tree.flutterFractionalOffsetNamedFromOffsetAndSize.hasSize() ? evaluateRequiredDartSizeType(tree.flutterFractionalOffsetNamedFromOffsetAndSize.size) : missing('size')));
    default:
      return null;
  }
}

$flutterSrcServicesAssetBundle.AssetBundle evaluateRequiredFlutterAssetBundleType(messages.FlutterAssetBundleType tree) {
  final result = evaluateFlutterAssetBundleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesAssetBundle.AssetBundle? evaluateFlutterAssetBundleType(messages.FlutterAssetBundleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterAssetBundleType_Constructor.flutterNetworkAssetBundle:
      return $flutterSrcServicesAssetBundle.NetworkAssetBundle(
          (tree.flutterNetworkAssetBundle.hasBaseUrl() ? evaluateRequiredDartUriType(tree.flutterNetworkAssetBundle.baseUrl) : missing('baseUrl')));
    case messages.FlutterAssetBundleType_Constructor.flutterPlatformAssetBundle:
      return $flutterSrcServicesAssetBundle.PlatformAssetBundle(
          );
    default:
      return null;
  }
}

$flutterSrcServicesAutofill.AutofillClient evaluateRequiredFlutterAutofillClientType(messages.FlutterAutofillClientType tree) {
  final result = evaluateFlutterAutofillClientType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesAutofill.AutofillClient? evaluateFlutterAutofillClientType(messages.FlutterAutofillClientType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterAutofillClientType_Constructor.flutterEditableTextState:
      return $flutterSrcWidgetsEditableText.EditableTextState(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsRouter.BackButtonDispatcher evaluateRequiredFlutterBackButtonDispatcherType(messages.FlutterBackButtonDispatcherType tree) {
  final result = evaluateFlutterBackButtonDispatcherType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsRouter.BackButtonDispatcher? evaluateFlutterBackButtonDispatcherType(messages.FlutterBackButtonDispatcherType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBackButtonDispatcherType_Constructor.flutterChildBackButtonDispatcher:
      return $flutterSrcWidgetsRouter.ChildBackButtonDispatcher(
          (tree.flutterChildBackButtonDispatcher.hasParent() ? evaluateRequiredFlutterBackButtonDispatcherType(tree.flutterChildBackButtonDispatcher.parent) : missing('parent')));
    case messages.FlutterBackButtonDispatcherType_Constructor.flutterRootBackButtonDispatcher:
      return $flutterSrcWidgetsRouter.RootBackButtonDispatcher(
          );
    default:
      return null;
  }
}

$flutterSrcPaintingBorderRadius.BorderRadiusGeometry evaluateRequiredFlutterBorderRadiusGeometryType(messages.FlutterBorderRadiusGeometryType tree) {
  final result = evaluateFlutterBorderRadiusGeometryType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBorderRadius.BorderRadiusGeometry? evaluateFlutterBorderRadiusGeometryType(messages.FlutterBorderRadiusGeometryType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusDirectionalNamedAll:
      return $flutterSrcPaintingBorderRadius.BorderRadiusDirectional.all(
          (tree.flutterBorderRadiusDirectionalNamedAll.hasRadius() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedAll.radius) : missing('radius')));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusDirectionalNamedCircular:
      return $flutterSrcPaintingBorderRadius.BorderRadiusDirectional.circular(
          (tree.flutterBorderRadiusDirectionalNamedCircular.hasRadius() ? tree.flutterBorderRadiusDirectionalNamedCircular.radius : missing('radius')));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusDirectionalNamedHorizontal:
      return $flutterSrcPaintingBorderRadius.BorderRadiusDirectional.horizontal(
          start: (tree.flutterBorderRadiusDirectionalNamedHorizontal.hasStart() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedHorizontal.start) : $dartUi.Radius.zero),
          end: (tree.flutterBorderRadiusDirectionalNamedHorizontal.hasEnd() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedHorizontal.end) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusDirectionalNamedOnly:
      return $flutterSrcPaintingBorderRadius.BorderRadiusDirectional.only(
          topStart: (tree.flutterBorderRadiusDirectionalNamedOnly.hasTopStart() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedOnly.topStart) : $dartUi.Radius.zero),
          topEnd: (tree.flutterBorderRadiusDirectionalNamedOnly.hasTopEnd() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedOnly.topEnd) : $dartUi.Radius.zero),
          bottomStart: (tree.flutterBorderRadiusDirectionalNamedOnly.hasBottomStart() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedOnly.bottomStart) : $dartUi.Radius.zero),
          bottomEnd: (tree.flutterBorderRadiusDirectionalNamedOnly.hasBottomEnd() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedOnly.bottomEnd) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusDirectionalNamedVertical:
      return $flutterSrcPaintingBorderRadius.BorderRadiusDirectional.vertical(
          top: (tree.flutterBorderRadiusDirectionalNamedVertical.hasTop() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedVertical.top) : $dartUi.Radius.zero),
          bottom: (tree.flutterBorderRadiusDirectionalNamedVertical.hasBottom() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusDirectionalNamedVertical.bottom) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusNamedAll:
      return $flutterSrcPaintingBorderRadius.BorderRadius.all(
          (tree.flutterBorderRadiusNamedAll.hasRadius() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedAll.radius) : missing('radius')));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusNamedCircular:
      return $flutterSrcPaintingBorderRadius.BorderRadius.circular(
          (tree.flutterBorderRadiusNamedCircular.hasRadius() ? tree.flutterBorderRadiusNamedCircular.radius : missing('radius')));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusNamedHorizontal:
      return $flutterSrcPaintingBorderRadius.BorderRadius.horizontal(
          left: (tree.flutterBorderRadiusNamedHorizontal.hasLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedHorizontal.left) : $dartUi.Radius.zero),
          right: (tree.flutterBorderRadiusNamedHorizontal.hasRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedHorizontal.right) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusNamedOnly:
      return $flutterSrcPaintingBorderRadius.BorderRadius.only(
          topLeft: (tree.flutterBorderRadiusNamedOnly.hasTopLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.topLeft) : $dartUi.Radius.zero),
          topRight: (tree.flutterBorderRadiusNamedOnly.hasTopRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.topRight) : $dartUi.Radius.zero),
          bottomLeft: (tree.flutterBorderRadiusNamedOnly.hasBottomLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.bottomLeft) : $dartUi.Radius.zero),
          bottomRight: (tree.flutterBorderRadiusNamedOnly.hasBottomRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.bottomRight) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusGeometryType_Constructor.flutterBorderRadiusNamedVertical:
      return $flutterSrcPaintingBorderRadius.BorderRadius.vertical(
          top: (tree.flutterBorderRadiusNamedVertical.hasTop() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedVertical.top) : $dartUi.Radius.zero),
          bottom: (tree.flutterBorderRadiusNamedVertical.hasBottom() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedVertical.bottom) : $dartUi.Radius.zero));
    default:
      return null;
  }
}

$flutterSrcPaintingBorderRadius.BorderRadius evaluateRequiredFlutterBorderRadiusType(messages.FlutterBorderRadiusType tree) {
  final result = evaluateFlutterBorderRadiusType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBorderRadius.BorderRadius? evaluateFlutterBorderRadiusType(messages.FlutterBorderRadiusType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBorderRadiusType_Constructor.flutterBorderRadiusNamedAll:
      return $flutterSrcPaintingBorderRadius.BorderRadius.all(
          (tree.flutterBorderRadiusNamedAll.hasRadius() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedAll.radius) : missing('radius')));
    case messages.FlutterBorderRadiusType_Constructor.flutterBorderRadiusNamedCircular:
      return $flutterSrcPaintingBorderRadius.BorderRadius.circular(
          (tree.flutterBorderRadiusNamedCircular.hasRadius() ? tree.flutterBorderRadiusNamedCircular.radius : missing('radius')));
    case messages.FlutterBorderRadiusType_Constructor.flutterBorderRadiusNamedHorizontal:
      return $flutterSrcPaintingBorderRadius.BorderRadius.horizontal(
          left: (tree.flutterBorderRadiusNamedHorizontal.hasLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedHorizontal.left) : $dartUi.Radius.zero),
          right: (tree.flutterBorderRadiusNamedHorizontal.hasRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedHorizontal.right) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusType_Constructor.flutterBorderRadiusNamedOnly:
      return $flutterSrcPaintingBorderRadius.BorderRadius.only(
          topLeft: (tree.flutterBorderRadiusNamedOnly.hasTopLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.topLeft) : $dartUi.Radius.zero),
          topRight: (tree.flutterBorderRadiusNamedOnly.hasTopRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.topRight) : $dartUi.Radius.zero),
          bottomLeft: (tree.flutterBorderRadiusNamedOnly.hasBottomLeft() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.bottomLeft) : $dartUi.Radius.zero),
          bottomRight: (tree.flutterBorderRadiusNamedOnly.hasBottomRight() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedOnly.bottomRight) : $dartUi.Radius.zero));
    case messages.FlutterBorderRadiusType_Constructor.flutterBorderRadiusNamedVertical:
      return $flutterSrcPaintingBorderRadius.BorderRadius.vertical(
          top: (tree.flutterBorderRadiusNamedVertical.hasTop() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedVertical.top) : $dartUi.Radius.zero),
          bottom: (tree.flutterBorderRadiusNamedVertical.hasBottom() ? evaluateRequiredDartRadiusType(tree.flutterBorderRadiusNamedVertical.bottom) : $dartUi.Radius.zero));
    default:
      return null;
  }
}

$flutterSrcPaintingBorders.BorderSide evaluateRequiredFlutterBorderSideType(messages.FlutterBorderSideType tree) {
  final result = evaluateFlutterBorderSideType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBorders.BorderSide? evaluateFlutterBorderSideType(messages.FlutterBorderSideType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBorderSideType_Constructor.flutterBorderSide:
      return $flutterSrcPaintingBorders.BorderSide(
          color: (tree.flutterBorderSide.hasColor() ? evaluateRequiredDartColorType(tree.flutterBorderSide.color) : $dartUi.Color(0xFF000000)),
          width: (tree.flutterBorderSide.hasWidth() ? tree.flutterBorderSide.width : 1.0),
          style: (tree.flutterBorderSide.hasStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.flutterBorderSide.style) : $flutterSrcPaintingBorders.BorderStyle.solid),
          strokeAlign: (tree.flutterBorderSide.hasStrokeAlign() ? tree.flutterBorderSide.strokeAlign : $flutterSrcPaintingBorders.BorderSide.strokeAlignInside));
    default:
      return null;
  }
}

$flutterSrcPaintingBoxBorder.Border evaluateRequiredFlutterBorderType(messages.FlutterBorderType tree) {
  final result = evaluateFlutterBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBoxBorder.Border? evaluateFlutterBorderType(messages.FlutterBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBorderType_Constructor.flutterBorder:
      return $flutterSrcPaintingBoxBorder.Border(
          top: (tree.flutterBorder.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.top) : $flutterSrcPaintingBorders.BorderSide.none),
          right: (tree.flutterBorder.hasRight() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.right) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterBorder.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.bottom) : $flutterSrcPaintingBorders.BorderSide.none),
          left: (tree.flutterBorder.hasLeft() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.left) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterBorderType_Constructor.flutterBorderNamedAll:
      return $flutterSrcPaintingBoxBorder.Border.all(
          color: (tree.flutterBorderNamedAll.hasColor() ? evaluateRequiredDartColorType(tree.flutterBorderNamedAll.color) : $dartUi.Color(0xFF000000)),
          width: (tree.flutterBorderNamedAll.hasWidth() ? tree.flutterBorderNamedAll.width : 1.0),
          style: (tree.flutterBorderNamedAll.hasStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.flutterBorderNamedAll.style) : $flutterSrcPaintingBorders.BorderStyle.solid),
          strokeAlign: (tree.flutterBorderNamedAll.hasStrokeAlign() ? tree.flutterBorderNamedAll.strokeAlign : $flutterSrcPaintingBorders.BorderSide.strokeAlignInside));
    case messages.FlutterBorderType_Constructor.flutterBorderNamedFromBorderSide:
      return $flutterSrcPaintingBoxBorder.Border.fromBorderSide(
          (tree.flutterBorderNamedFromBorderSide.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedFromBorderSide.side) : missing('side')));
    case messages.FlutterBorderType_Constructor.flutterBorderNamedSymmetric:
      return $flutterSrcPaintingBoxBorder.Border.symmetric(
          vertical: (tree.flutterBorderNamedSymmetric.hasVertical() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.vertical) : $flutterSrcPaintingBorders.BorderSide.none),
          horizontal: (tree.flutterBorderNamedSymmetric.hasHorizontal() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.horizontal) : $flutterSrcPaintingBorders.BorderSide.none));
    default:
      return null;
  }
}

$flutterSrcWidgetsBottomNavigationBarItem.BottomNavigationBarItem evaluateRequiredFlutterBottomNavigationBarItemType(messages.FlutterBottomNavigationBarItemType tree) {
  final result = evaluateFlutterBottomNavigationBarItemType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsBottomNavigationBarItem.BottomNavigationBarItem? evaluateFlutterBottomNavigationBarItemType(messages.FlutterBottomNavigationBarItemType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBottomNavigationBarItemType_Constructor.flutterBottomNavigationBarItem:
      return $flutterSrcWidgetsBottomNavigationBarItem.BottomNavigationBarItem(
          icon: (tree.flutterBottomNavigationBarItem.hasIcon() ? evaluateRequiredWidgetType(tree.flutterBottomNavigationBarItem.icon) : missing('icon')),
          label: (tree.flutterBottomNavigationBarItem.hasLabel() ? tree.flutterBottomNavigationBarItem.label : null),
          activeIcon: (tree.flutterBottomNavigationBarItem.hasActiveIcon() ? evaluateWidgetType(tree.flutterBottomNavigationBarItem.activeIcon) : null),
          backgroundColor: (tree.flutterBottomNavigationBarItem.hasBackgroundColor() ? evaluateDartColorType(tree.flutterBottomNavigationBarItem.backgroundColor) : null),
          tooltip: (tree.flutterBottomNavigationBarItem.hasTooltip() ? tree.flutterBottomNavigationBarItem.tooltip : null));
    default:
      return null;
  }
}

$flutterSrcPaintingBoxBorder.BoxBorder evaluateRequiredFlutterBoxBorderType(messages.FlutterBoxBorderType tree) {
  final result = evaluateFlutterBoxBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBoxBorder.BoxBorder? evaluateFlutterBoxBorderType(messages.FlutterBoxBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBoxBorderType_Constructor.flutterBorder:
      return $flutterSrcPaintingBoxBorder.Border(
          top: (tree.flutterBorder.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.top) : $flutterSrcPaintingBorders.BorderSide.none),
          right: (tree.flutterBorder.hasRight() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.right) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterBorder.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.bottom) : $flutterSrcPaintingBorders.BorderSide.none),
          left: (tree.flutterBorder.hasLeft() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.left) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterBoxBorderType_Constructor.flutterBorderDirectional:
      return $flutterSrcPaintingBoxBorder.BorderDirectional(
          top: (tree.flutterBorderDirectional.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.top) : $flutterSrcPaintingBorders.BorderSide.none),
          start: (tree.flutterBorderDirectional.hasStart() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.start) : $flutterSrcPaintingBorders.BorderSide.none),
          end: (tree.flutterBorderDirectional.hasEnd() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.end) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterBorderDirectional.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.bottom) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterBoxBorderType_Constructor.flutterBorderNamedAll:
      return $flutterSrcPaintingBoxBorder.Border.all(
          color: (tree.flutterBorderNamedAll.hasColor() ? evaluateRequiredDartColorType(tree.flutterBorderNamedAll.color) : $dartUi.Color(0xFF000000)),
          width: (tree.flutterBorderNamedAll.hasWidth() ? tree.flutterBorderNamedAll.width : 1.0),
          style: (tree.flutterBorderNamedAll.hasStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.flutterBorderNamedAll.style) : $flutterSrcPaintingBorders.BorderStyle.solid),
          strokeAlign: (tree.flutterBorderNamedAll.hasStrokeAlign() ? tree.flutterBorderNamedAll.strokeAlign : $flutterSrcPaintingBorders.BorderSide.strokeAlignInside));
    case messages.FlutterBoxBorderType_Constructor.flutterBorderNamedFromBorderSide:
      return $flutterSrcPaintingBoxBorder.Border.fromBorderSide(
          (tree.flutterBorderNamedFromBorderSide.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedFromBorderSide.side) : missing('side')));
    case messages.FlutterBoxBorderType_Constructor.flutterBorderNamedSymmetric:
      return $flutterSrcPaintingBoxBorder.Border.symmetric(
          vertical: (tree.flutterBorderNamedSymmetric.hasVertical() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.vertical) : $flutterSrcPaintingBorders.BorderSide.none),
          horizontal: (tree.flutterBorderNamedSymmetric.hasHorizontal() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.horizontal) : $flutterSrcPaintingBorders.BorderSide.none));
    default:
      return null;
  }
}

$flutterSrcRenderingBox.BoxConstraints evaluateRequiredFlutterBoxConstraintsType(messages.FlutterBoxConstraintsType tree) {
  final result = evaluateFlutterBoxConstraintsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingBox.BoxConstraints? evaluateFlutterBoxConstraintsType(messages.FlutterBoxConstraintsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraints:
      return $flutterSrcRenderingBox.BoxConstraints(
          minWidth: (tree.flutterBoxConstraints.hasMinWidth() ? tree.flutterBoxConstraints.minWidth : 0.0),
          maxWidth: (tree.flutterBoxConstraints.hasMaxWidth() ? tree.flutterBoxConstraints.maxWidth : $dartCore.double.infinity),
          minHeight: (tree.flutterBoxConstraints.hasMinHeight() ? tree.flutterBoxConstraints.minHeight : 0.0),
          maxHeight: (tree.flutterBoxConstraints.hasMaxHeight() ? tree.flutterBoxConstraints.maxHeight : $dartCore.double.infinity));
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraintsNamedExpand:
      return $flutterSrcRenderingBox.BoxConstraints.expand(
          width: (tree.flutterBoxConstraintsNamedExpand.hasWidth() ? tree.flutterBoxConstraintsNamedExpand.width : null),
          height: (tree.flutterBoxConstraintsNamedExpand.hasHeight() ? tree.flutterBoxConstraintsNamedExpand.height : null));
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraintsNamedLoose:
      return $flutterSrcRenderingBox.BoxConstraints.loose(
          (tree.flutterBoxConstraintsNamedLoose.hasSize() ? evaluateRequiredDartSizeType(tree.flutterBoxConstraintsNamedLoose.size) : missing('size')));
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraintsNamedTight:
      return $flutterSrcRenderingBox.BoxConstraints.tight(
          (tree.flutterBoxConstraintsNamedTight.hasSize() ? evaluateRequiredDartSizeType(tree.flutterBoxConstraintsNamedTight.size) : missing('size')));
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraintsNamedTightFor:
      return $flutterSrcRenderingBox.BoxConstraints.tightFor(
          width: (tree.flutterBoxConstraintsNamedTightFor.hasWidth() ? tree.flutterBoxConstraintsNamedTightFor.width : null),
          height: (tree.flutterBoxConstraintsNamedTightFor.hasHeight() ? tree.flutterBoxConstraintsNamedTightFor.height : null));
    case messages.FlutterBoxConstraintsType_Constructor.flutterBoxConstraintsNamedTightForFinite:
      return $flutterSrcRenderingBox.BoxConstraints.tightForFinite(
          width: (tree.flutterBoxConstraintsNamedTightForFinite.hasWidth() ? tree.flutterBoxConstraintsNamedTightForFinite.width : $dartCore.double.infinity),
          height: (tree.flutterBoxConstraintsNamedTightForFinite.hasHeight() ? tree.flutterBoxConstraintsNamedTightForFinite.height : $dartCore.double.infinity));
    default:
      return null;
  }
}

$flutterSrcPaintingBoxDecoration.BoxDecoration evaluateRequiredFlutterBoxDecorationType(messages.FlutterBoxDecorationType tree) {
  final result = evaluateFlutterBoxDecorationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBoxDecoration.BoxDecoration? evaluateFlutterBoxDecorationType(messages.FlutterBoxDecorationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBoxDecorationType_Constructor.flutterBoxDecoration:
      return $flutterSrcPaintingBoxDecoration.BoxDecoration(
          color: (tree.flutterBoxDecoration.hasColor() ? evaluateDartColorType(tree.flutterBoxDecoration.color) : null),
          image: null,
          border: (tree.flutterBoxDecoration.hasBorder() ? evaluateFlutterBoxBorderType(tree.flutterBoxDecoration.border) : null),
          borderRadius: (tree.flutterBoxDecoration.hasBorderRadius() ? evaluateFlutterBorderRadiusGeometryType(tree.flutterBoxDecoration.borderRadius) : null),
          boxShadow: tree.flutterBoxDecoration.boxShadow.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          gradient: (tree.flutterBoxDecoration.hasGradient() ? evaluateFlutterGradientType(tree.flutterBoxDecoration.gradient) : null),
          backgroundBlendMode: (tree.flutterBoxDecoration.hasBackgroundBlendMode() ? enums.convertDartBlendModeType(tree.flutterBoxDecoration.backgroundBlendMode) : null),
          shape: (tree.flutterBoxDecoration.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterBoxDecoration.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle));
    default:
      return null;
  }
}

$flutterSrcPaintingBoxShadow.BoxShadow evaluateRequiredFlutterBoxShadowType(messages.FlutterBoxShadowType tree) {
  final result = evaluateFlutterBoxShadowType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBoxShadow.BoxShadow? evaluateFlutterBoxShadowType(messages.FlutterBoxShadowType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBoxShadowType_Constructor.flutterBoxShadow:
      return $flutterSrcPaintingBoxShadow.BoxShadow(
          color: (tree.flutterBoxShadow.hasColor() ? evaluateRequiredDartColorType(tree.flutterBoxShadow.color) : $dartUi.Color(0xFF000000)),
          offset: (tree.flutterBoxShadow.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterBoxShadow.offset) : $dartUi.Offset.zero),
          blurRadius: (tree.flutterBoxShadow.hasBlurRadius() ? tree.flutterBoxShadow.blurRadius : 0.0),
          spreadRadius: (tree.flutterBoxShadow.hasSpreadRadius() ? tree.flutterBoxShadow.spreadRadius : 0.0),
          blurStyle: (tree.flutterBoxShadow.hasBlurStyle() ? enums.convertRequiredDartBlurStyleType(tree.flutterBoxShadow.blurStyle) : $dartUi.BlurStyle.normal));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.BuildContext evaluateRequiredFlutterBuildContextType(messages.FlutterBuildContextType tree) {
  final result = evaluateFlutterBuildContextType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.BuildContext? evaluateFlutterBuildContextType(messages.FlutterBuildContextType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterBuildContextType_Constructor.flutterInheritedElement:
      return $flutterSrcWidgetsFramework.InheritedElement(
          (tree.flutterInheritedElement.hasWidget() ? evaluateRequiredFlutterInheritedWidgetType(tree.flutterInheritedElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterLeafRenderObjectElement:
      return $flutterSrcWidgetsFramework.LeafRenderObjectElement(
          (tree.flutterLeafRenderObjectElement.hasWidget() ? evaluateRequiredFlutterLeafRenderObjectWidgetType(tree.flutterLeafRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterListWheelElement:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelElement(
          (tree.flutterListWheelElement.hasWidget() ? evaluateRequiredFlutterListWheelViewportType(tree.flutterListWheelElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterMultiChildRenderObjectElement:
      return $flutterSrcWidgetsFramework.MultiChildRenderObjectElement(
          (tree.flutterMultiChildRenderObjectElement.hasWidget() ? evaluateRequiredFlutterMultiChildRenderObjectWidgetType(tree.flutterMultiChildRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterRootElement:
      return $flutterSrcWidgetsBinding.RootElement(
          (tree.flutterRootElement.hasWidget() ? evaluateRequiredFlutterRootWidgetType(tree.flutterRootElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterSingleChildRenderObjectElement:
      return $flutterSrcWidgetsFramework.SingleChildRenderObjectElement(
          (tree.flutterSingleChildRenderObjectElement.hasWidget() ? evaluateRequiredFlutterSingleChildRenderObjectWidgetType(tree.flutterSingleChildRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterSliverMultiBoxAdaptorElement:
      return $flutterSrcWidgetsSliver.SliverMultiBoxAdaptorElement(
          (tree.flutterSliverMultiBoxAdaptorElement.hasWidget() ? evaluateRequiredFlutterSliverMultiBoxAdaptorWidgetType(tree.flutterSliverMultiBoxAdaptorElement.widget) : missing('widget')),
          replaceMovedChildren: (tree.flutterSliverMultiBoxAdaptorElement.hasReplaceMovedChildren() ? tree.flutterSliverMultiBoxAdaptorElement.replaceMovedChildren : false));
    case messages.FlutterBuildContextType_Constructor.flutterStatefulElement:
      return $flutterSrcWidgetsFramework.StatefulElement(
          (tree.flutterStatefulElement.hasWidget() ? evaluateRequiredFlutterStatefulWidgetType(tree.flutterStatefulElement.widget) : missing('widget')));
    case messages.FlutterBuildContextType_Constructor.flutterStatelessElement:
      return $flutterSrcWidgetsFramework.StatelessElement(
          (tree.flutterStatelessElement.hasWidget() ? evaluateRequiredFlutterStatelessWidgetType(tree.flutterStatelessElement.widget) : missing('widget')));
    default:
      return null;
  }
}

$flutterSrcWidgetsContextMenuButtonItem.ContextMenuButtonItem evaluateRequiredFlutterContextMenuButtonItemType(messages.FlutterContextMenuButtonItemType tree) {
  final result = evaluateFlutterContextMenuButtonItemType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsContextMenuButtonItem.ContextMenuButtonItem? evaluateFlutterContextMenuButtonItemType(messages.FlutterContextMenuButtonItemType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterContextMenuButtonItemType_Constructor.flutterContextMenuButtonItem:
      return $flutterSrcWidgetsContextMenuButtonItem.ContextMenuButtonItem(
          onPressed: null,
          type: (tree.flutterContextMenuButtonItem.hasType() ? enums.convertRequiredFlutterContextMenuButtonTypeType(tree.flutterContextMenuButtonItem.type) : $flutterSrcWidgetsContextMenuButtonItem.ContextMenuButtonType.custom),
          label: (tree.flutterContextMenuButtonItem.hasLabel() ? tree.flutterContextMenuButtonItem.label : null));
    default:
      return null;
  }
}

$flutterSrcRenderingCustomPaint.CustomPainter evaluateRequiredFlutterCustomPainterType(messages.FlutterCustomPainterType tree) {
  final result = evaluateFlutterCustomPainterType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingCustomPaint.CustomPainter? evaluateFlutterCustomPainterType(messages.FlutterCustomPainterType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterCustomPainterType_Constructor.flutterBannerPainter:
      return $flutterSrcWidgetsBanner.BannerPainter(
          message: (tree.flutterBannerPainter.hasMessage() ? tree.flutterBannerPainter.message : missing('message')),
          textDirection: (tree.flutterBannerPainter.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterBannerPainter.textDirection) : missing('textDirection')),
          location: (tree.flutterBannerPainter.hasLocation() ? enums.convertRequiredFlutterBannerLocationType(tree.flutterBannerPainter.location) : missing('location')),
          layoutDirection: (tree.flutterBannerPainter.hasLayoutDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterBannerPainter.layoutDirection) : missing('layoutDirection')),
          color: (tree.flutterBannerPainter.hasColor() ? evaluateRequiredDartColorType(tree.flutterBannerPainter.color) : $dartUi.Color(0xA0B71C1C)),
          textStyle: (tree.flutterBannerPainter.hasTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterBannerPainter.textStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFFFFFFFF), fontSize: 12.0 * 0.85, fontWeight: $dartUi.FontWeight.w900, height: 1.0)));
    default:
      return null;
  }
}

$flutterSrcPaintingDecoration.Decoration evaluateRequiredFlutterDecorationType(messages.FlutterDecorationType tree) {
  final result = evaluateFlutterDecorationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingDecoration.Decoration? evaluateFlutterDecorationType(messages.FlutterDecorationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterDecorationType_Constructor.flutterBoxDecoration:
      return $flutterSrcPaintingBoxDecoration.BoxDecoration(
          color: (tree.flutterBoxDecoration.hasColor() ? evaluateDartColorType(tree.flutterBoxDecoration.color) : null),
          image: null,
          border: (tree.flutterBoxDecoration.hasBorder() ? evaluateFlutterBoxBorderType(tree.flutterBoxDecoration.border) : null),
          borderRadius: (tree.flutterBoxDecoration.hasBorderRadius() ? evaluateFlutterBorderRadiusGeometryType(tree.flutterBoxDecoration.borderRadius) : null),
          boxShadow: tree.flutterBoxDecoration.boxShadow.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          gradient: (tree.flutterBoxDecoration.hasGradient() ? evaluateFlutterGradientType(tree.flutterBoxDecoration.gradient) : null),
          backgroundBlendMode: (tree.flutterBoxDecoration.hasBackgroundBlendMode() ? enums.convertDartBlendModeType(tree.flutterBoxDecoration.backgroundBlendMode) : null),
          shape: (tree.flutterBoxDecoration.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterBoxDecoration.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle));
    case messages.FlutterDecorationType_Constructor.flutterFlutterLogoDecoration:
      return $flutterSrcPaintingFlutterLogo.FlutterLogoDecoration(
          textColor: (tree.flutterFlutterLogoDecoration.hasTextColor() ? evaluateRequiredDartColorType(tree.flutterFlutterLogoDecoration.textColor) : $dartUi.Color(0xFF757575)),
          style: (tree.flutterFlutterLogoDecoration.hasStyle() ? enums.convertRequiredFlutterFlutterLogoStyleType(tree.flutterFlutterLogoDecoration.style) : $flutterSrcPaintingFlutterLogo.FlutterLogoStyle.markOnly),
          margin: (tree.flutterFlutterLogoDecoration.hasMargin() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterFlutterLogoDecoration.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero));
    case messages.FlutterDecorationType_Constructor.flutterMagnifierDecoration:
      return $flutterSrcWidgetsMagnifier.MagnifierDecoration(
          opacity: (tree.flutterMagnifierDecoration.hasOpacity() ? tree.flutterMagnifierDecoration.opacity : 1),
          shadows: tree.flutterMagnifierDecoration.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          shape: (tree.flutterMagnifierDecoration.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.flutterMagnifierDecoration.shape) : missing('shape')));
    case messages.FlutterDecorationType_Constructor.flutterShapeDecoration:
      return $flutterSrcPaintingShapeDecoration.ShapeDecoration(
          color: (tree.flutterShapeDecoration.hasColor() ? evaluateDartColorType(tree.flutterShapeDecoration.color) : null),
          image: null,
          gradient: (tree.flutterShapeDecoration.hasGradient() ? evaluateFlutterGradientType(tree.flutterShapeDecoration.gradient) : null),
          shadows: tree.flutterShapeDecoration.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          shape: (tree.flutterShapeDecoration.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.flutterShapeDecoration.shape) : missing('shape')));
    case messages.FlutterDecorationType_Constructor.flutterShapeDecorationNamedFromBoxDecoration:
      return $flutterSrcPaintingShapeDecoration.ShapeDecoration.fromBoxDecoration(
          (tree.flutterShapeDecorationNamedFromBoxDecoration.hasSource() ? evaluateRequiredFlutterBoxDecorationType(tree.flutterShapeDecorationNamedFromBoxDecoration.source) : missing('source')));
    case messages.FlutterDecorationType_Constructor.materialUnderlineTabIndicator:
      return $flutterSrcMaterialTabIndicator.UnderlineTabIndicator(
          borderRadius: (tree.materialUnderlineTabIndicator.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialUnderlineTabIndicator.borderRadius) : null),
          borderSide: (tree.materialUnderlineTabIndicator.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.materialUnderlineTabIndicator.borderSide) : $flutterSrcPaintingBorders.BorderSide(width: 2.0, color: $flutterSrcMaterialColors.Colors.white)),
          insets: (tree.materialUnderlineTabIndicator.hasInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialUnderlineTabIndicator.insets) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero));
    default:
      return null;
  }
}

$flutterSrcGesturesGestureSettings.DeviceGestureSettings evaluateRequiredFlutterDeviceGestureSettingsType(messages.FlutterDeviceGestureSettingsType tree) {
  final result = evaluateFlutterDeviceGestureSettingsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcGesturesGestureSettings.DeviceGestureSettings? evaluateFlutterDeviceGestureSettingsType(messages.FlutterDeviceGestureSettingsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterDeviceGestureSettingsType_Constructor.flutterDeviceGestureSettings:
      return $flutterSrcGesturesGestureSettings.DeviceGestureSettings(
          touchSlop: (tree.flutterDeviceGestureSettings.hasTouchSlop() ? tree.flutterDeviceGestureSettings.touchSlop : null));
    case messages.FlutterDeviceGestureSettingsType_Constructor.flutterDeviceGestureSettingsNamedFromView:
      return $flutterSrcGesturesGestureSettings.DeviceGestureSettings.fromView(
          missing('view'));
    default:
      return null;
  }
}

$flutterSrcFoundationDiagnostics.DiagnosticableTree evaluateRequiredFlutterDiagnosticableTreeType(messages.FlutterDiagnosticableTreeType tree) {
  final result = evaluateFlutterDiagnosticableTreeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcFoundationDiagnostics.DiagnosticableTree? evaluateFlutterDiagnosticableTreeType(messages.FlutterDiagnosticableTreeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoActionSheet:
      return $flutterSrcCupertinoDialog.CupertinoActionSheet(
          key: (tree.cupertinoActionSheet.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActionSheet.key) : null),
          title: (tree.cupertinoActionSheet.hasTitle() ? evaluateWidgetType(tree.cupertinoActionSheet.title) : null),
          message: (tree.cupertinoActionSheet.hasMessage() ? evaluateWidgetType(tree.cupertinoActionSheet.message) : null),
          actions: tree.cupertinoActionSheet.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          messageScrollController: (tree.cupertinoActionSheet.hasMessageScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.messageScrollController) : null),
          actionScrollController: (tree.cupertinoActionSheet.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.actionScrollController) : null),
          cancelButton: (tree.cupertinoActionSheet.hasCancelButton() ? evaluateWidgetType(tree.cupertinoActionSheet.cancelButton) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoActivityIndicator:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator(
          key: (tree.cupertinoActivityIndicator.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicator.key) : null),
          color: (tree.cupertinoActivityIndicator.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicator.color) : null),
          animating: (tree.cupertinoActivityIndicator.hasAnimating() ? tree.cupertinoActivityIndicator.animating : true),
          radius: (tree.cupertinoActivityIndicator.hasRadius() ? tree.cupertinoActivityIndicator.radius : 10.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoActivityIndicatorNamedPartiallyRevealed:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator.partiallyRevealed(
          key: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.key) : null),
          color: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.color) : null),
          radius: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasRadius() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.radius : 10.0),
          progress: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasProgress() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.progress : 1.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAdaptiveTextSelectionToolbar:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar(
          key: (tree.cupertinoAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbar.key) : null),
          children: tree.cupertinoAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editable(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editableText(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAlertDialog:
      return $flutterSrcCupertinoDialog.CupertinoAlertDialog(
          key: (tree.cupertinoAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAlertDialog.key) : null),
          title: (tree.cupertinoAlertDialog.hasTitle() ? evaluateWidgetType(tree.cupertinoAlertDialog.title) : null),
          content: (tree.cupertinoAlertDialog.hasContent() ? evaluateWidgetType(tree.cupertinoAlertDialog.content) : null),
          actions: tree.cupertinoAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          scrollController: (tree.cupertinoAlertDialog.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.scrollController) : null),
          actionScrollController: (tree.cupertinoAlertDialog.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.actionScrollController) : null),
          insetAnimationDuration: (tree.cupertinoAlertDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.cupertinoAlertDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.cupertinoAlertDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.cupertinoAlertDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoApp:
      return $flutterSrcCupertinoApp.CupertinoApp(
          key: (tree.cupertinoApp.hasKey() ? evaluateFlutterKeyType(tree.cupertinoApp.key) : null),
          navigatorKey: null,
          home: (tree.cupertinoApp.hasHome() ? evaluateWidgetType(tree.cupertinoApp.home) : null),
          theme: (tree.cupertinoApp.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoApp.theme) : null),
          initialRoute: (tree.cupertinoApp.hasInitialRoute() ? tree.cupertinoApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.cupertinoApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.cupertinoApp.hasTitle() ? tree.cupertinoApp.title : ''),
          onGenerateTitle: null,
          color: (tree.cupertinoApp.hasColor() ? evaluateDartColorType(tree.cupertinoApp.color) : null),
          locale: (tree.cupertinoApp.hasLocale() ? evaluateDartLocaleType(tree.cupertinoApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoApp.hasShowPerformanceOverlay() ? tree.cupertinoApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoApp.hasCheckerboardRasterCacheImages() ? tree.cupertinoApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoApp.hasCheckerboardOffscreenLayers() ? tree.cupertinoApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoApp.hasShowSemanticsDebugger() ? tree.cupertinoApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoApp.hasDebugShowCheckedModeBanner() ? tree.cupertinoApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoApp.hasRestorationScopeId() ? tree.cupertinoApp.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoApp.scrollBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoAppNamedRouter:
      return $flutterSrcCupertinoApp.CupertinoApp.router(
          key: (tree.cupertinoAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAppNamedRouter.key) : null),
          routeInformationProvider: (tree.cupertinoAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.cupertinoAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          backButtonDispatcher: (tree.cupertinoAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.cupertinoAppNamedRouter.backButtonDispatcher) : null),
          routerConfig: null,
          theme: (tree.cupertinoAppNamedRouter.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoAppNamedRouter.theme) : null),
          builder: null,
          title: (tree.cupertinoAppNamedRouter.hasTitle() ? tree.cupertinoAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.cupertinoAppNamedRouter.hasColor() ? evaluateDartColorType(tree.cupertinoAppNamedRouter.color) : null),
          locale: (tree.cupertinoAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.cupertinoAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoAppNamedRouter.hasShowPerformanceOverlay() ? tree.cupertinoAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.cupertinoAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.cupertinoAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoAppNamedRouter.hasShowSemanticsDebugger() ? tree.cupertinoAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.cupertinoAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoAppNamedRouter.hasRestorationScopeId() ? tree.cupertinoAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoAppNamedRouter.scrollBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoButton:
      return $flutterSrcCupertinoButton.CupertinoButton(
          key: (tree.cupertinoButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButton.key) : null),
          child: (tree.cupertinoButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButton.child) : missing('child')),
          padding: (tree.cupertinoButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButton.padding) : null),
          color: (tree.cupertinoButton.hasColor() ? evaluateDartColorType(tree.cupertinoButton.color) : null),
          disabledColor: (tree.cupertinoButton.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButton.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButton.hasMinSize() ? tree.cupertinoButton.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButton.hasPressedOpacity() ? tree.cupertinoButton.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButton.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButton.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoButtonNamedFilled:
      return $flutterSrcCupertinoButton.CupertinoButton.filled(
          key: (tree.cupertinoButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButtonNamedFilled.key) : null),
          child: (tree.cupertinoButtonNamedFilled.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButtonNamedFilled.child) : missing('child')),
          padding: (tree.cupertinoButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButtonNamedFilled.padding) : null),
          disabledColor: (tree.cupertinoButtonNamedFilled.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButtonNamedFilled.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButtonNamedFilled.hasMinSize() ? tree.cupertinoButtonNamedFilled.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButtonNamedFilled.hasPressedOpacity() ? tree.cupertinoButtonNamedFilled.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButtonNamedFilled.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButtonNamedFilled.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButtonNamedFilled.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButtonNamedFilled.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoCheckbox:
      return $flutterSrcCupertinoCheckbox.CupertinoCheckbox(
          key: (tree.cupertinoCheckbox.hasKey() ? evaluateFlutterKeyType(tree.cupertinoCheckbox.key) : null),
          value: (tree.cupertinoCheckbox.hasValue() ? tree.cupertinoCheckbox.value : null),
          tristate: (tree.cupertinoCheckbox.hasTristate() ? tree.cupertinoCheckbox.tristate : false),
          onChanged: null,
          activeColor: (tree.cupertinoCheckbox.hasActiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.activeColor) : null),
          inactiveColor: (tree.cupertinoCheckbox.hasInactiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.inactiveColor) : null),
          checkColor: (tree.cupertinoCheckbox.hasCheckColor() ? evaluateDartColorType(tree.cupertinoCheckbox.checkColor) : null),
          focusColor: (tree.cupertinoCheckbox.hasFocusColor() ? evaluateDartColorType(tree.cupertinoCheckbox.focusColor) : null),
          focusNode: (tree.cupertinoCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoCheckbox.focusNode) : null),
          autofocus: (tree.cupertinoCheckbox.hasAutofocus() ? tree.cupertinoCheckbox.autofocus : false),
          side: (tree.cupertinoCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.cupertinoCheckbox.side) : null),
          shape: (tree.cupertinoCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.cupertinoCheckbox.shape) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoContextMenu:
      return $flutterSrcCupertinoContextMenu.CupertinoContextMenu(
          key: (tree.cupertinoContextMenu.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenu.key) : null),
          actions: tree.cupertinoContextMenu.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.cupertinoContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenu.child) : missing('child')),
          enableHapticFeedback: (tree.cupertinoContextMenu.hasEnableHapticFeedback() ? tree.cupertinoContextMenu.enableHapticFeedback : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoContextMenuAction:
      return $flutterSrcCupertinoContextMenuAction.CupertinoContextMenuAction(
          key: (tree.cupertinoContextMenuAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenuAction.key) : null),
          child: (tree.cupertinoContextMenuAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenuAction.child) : missing('child')),
          isDefaultAction: (tree.cupertinoContextMenuAction.hasIsDefaultAction() ? tree.cupertinoContextMenuAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoContextMenuAction.hasIsDestructiveAction() ? tree.cupertinoContextMenuAction.isDestructiveAction : false),
          onPressed: null,
          trailingIcon: (tree.cupertinoContextMenuAction.hasTrailingIcon() ? evaluateFlutterIconDataType(tree.cupertinoContextMenuAction.trailingIcon) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoDesktopTextSelectionToolbar:
      return $flutterSrcCupertinoDesktopTextSelectionToolbar.CupertinoDesktopTextSelectionToolbar(
          key: (tree.cupertinoDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.cupertinoDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.cupertinoDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.cupertinoDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoDesktopTextSelectionToolbarButton:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton(
          key: (tree.cupertinoDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.text(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.text : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoDialogAction:
      return $flutterSrcCupertinoDialog.CupertinoDialogAction(
          key: (tree.cupertinoDialogAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDialogAction.key) : null),
          onPressed: null,
          isDefaultAction: (tree.cupertinoDialogAction.hasIsDefaultAction() ? tree.cupertinoDialogAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoDialogAction.hasIsDestructiveAction() ? tree.cupertinoDialogAction.isDestructiveAction : false),
          textStyle: (tree.cupertinoDialogAction.hasTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoDialogAction.textStyle) : null),
          child: (tree.cupertinoDialogAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDialogAction.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoFormRow:
      return $flutterSrcCupertinoFormRow.CupertinoFormRow(
          key: (tree.cupertinoFormRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormRow.key) : null),
          child: (tree.cupertinoFormRow.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoFormRow.child) : missing('child')),
          prefix: (tree.cupertinoFormRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoFormRow.prefix) : null),
          padding: (tree.cupertinoFormRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoFormRow.padding) : null),
          helper: (tree.cupertinoFormRow.hasHelper() ? evaluateWidgetType(tree.cupertinoFormRow.helper) : null),
          error: (tree.cupertinoFormRow.hasError() ? evaluateWidgetType(tree.cupertinoFormRow.error) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoFormSection:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection(
          key: (tree.cupertinoFormSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSection.key) : null),
          children: tree.cupertinoFormSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSection.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSection.header) : null),
          footer: (tree.cupertinoFormSection.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSection.footer) : null),
          margin: (tree.cupertinoFormSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          backgroundColor: (tree.cupertinoFormSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSection.decoration) : null),
          clipBehavior: (tree.cupertinoFormSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSection.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoFormSectionNamedInsetGrouped:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection.insetGrouped(
          key: (tree.cupertinoFormSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoFormSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoFormSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoFormSectionNamedInsetGrouped.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSectionNamedInsetGrouped.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(20.0, 0.0, 20.0, 10.0)),
          backgroundColor: (tree.cupertinoFormSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoFormSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoListSection:
      return $flutterSrcCupertinoListSection.CupertinoListSection(
          key: (tree.cupertinoListSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSection.key) : null),
          children: tree.cupertinoListSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSection.hasHeader() ? evaluateWidgetType(tree.cupertinoListSection.header) : null),
          footer: (tree.cupertinoListSection.hasFooter() ? evaluateWidgetType(tree.cupertinoListSection.footer) : null),
          margin: (tree.cupertinoListSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoListSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          backgroundColor: (tree.cupertinoListSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSection.decoration) : null),
          clipBehavior: (tree.cupertinoListSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSection.clipBehavior) : $dartUi.Clip.none),
          dividerMargin: (tree.cupertinoListSection.hasDividerMargin() ? tree.cupertinoListSection.dividerMargin : 20.0),
          additionalDividerMargin: (tree.cupertinoListSection.hasAdditionalDividerMargin() ? tree.cupertinoListSection.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSection.hasTopMargin() ? tree.cupertinoListSection.topMargin : 22.0),
          hasLeading: (tree.cupertinoListSection.hasHasLeading() ? tree.cupertinoListSection.hasLeading : true),
          separatorColor: (tree.cupertinoListSection.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSection.separatorColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoListSectionNamedInsetGrouped:
      return $flutterSrcCupertinoListSection.CupertinoListSection.insetGrouped(
          key: (tree.cupertinoListSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoListSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoListSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoListSectionNamedInsetGrouped.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListSectionNamedInsetGrouped.margin) : null),
          backgroundColor: (tree.cupertinoListSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoListSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.hardEdge),
          dividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.dividerMargin : 14.0),
          additionalDividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasAdditionalDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasTopMargin() ? tree.cupertinoListSectionNamedInsetGrouped.topMargin : null),
          hasLeading: (tree.cupertinoListSectionNamedInsetGrouped.hasHasLeading() ? tree.cupertinoListSectionNamedInsetGrouped.hasLeading : true),
          separatorColor: (tree.cupertinoListSectionNamedInsetGrouped.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSectionNamedInsetGrouped.separatorColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoListTile:
      return $flutterSrcCupertinoListTile.CupertinoListTile(
          key: (tree.cupertinoListTile.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTile.key) : null),
          title: (tree.cupertinoListTile.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTile.title) : missing('title')),
          subtitle: (tree.cupertinoListTile.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTile.subtitle) : null),
          additionalInfo: (tree.cupertinoListTile.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTile.additionalInfo) : null),
          leading: (tree.cupertinoListTile.hasLeading() ? evaluateWidgetType(tree.cupertinoListTile.leading) : null),
          trailing: (tree.cupertinoListTile.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTile.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTile.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTile.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTile.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTile.padding) : null),
          leadingSize: (tree.cupertinoListTile.hasLeadingSize() ? tree.cupertinoListTile.leadingSize : 28.0),
          leadingToTitle: (tree.cupertinoListTile.hasLeadingToTitle() ? tree.cupertinoListTile.leadingToTitle : 16.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoListTileChevron:
      return $flutterSrcCupertinoListTile.CupertinoListTileChevron(
          key: (tree.cupertinoListTileChevron.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileChevron.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoListTileNamedNotched:
      return $flutterSrcCupertinoListTile.CupertinoListTile.notched(
          key: (tree.cupertinoListTileNamedNotched.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileNamedNotched.key) : null),
          title: (tree.cupertinoListTileNamedNotched.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTileNamedNotched.title) : missing('title')),
          subtitle: (tree.cupertinoListTileNamedNotched.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.subtitle) : null),
          additionalInfo: (tree.cupertinoListTileNamedNotched.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.additionalInfo) : null),
          leading: (tree.cupertinoListTileNamedNotched.hasLeading() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.leading) : null),
          trailing: (tree.cupertinoListTileNamedNotched.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTileNamedNotched.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTileNamedNotched.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTileNamedNotched.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTileNamedNotched.padding) : null),
          leadingSize: (tree.cupertinoListTileNamedNotched.hasLeadingSize() ? tree.cupertinoListTileNamedNotched.leadingSize : 30.0),
          leadingToTitle: (tree.cupertinoListTileNamedNotched.hasLeadingToTitle() ? tree.cupertinoListTileNamedNotched.leadingToTitle : 12.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoMagnifier:
      return $flutterSrcCupertinoMagnifier.CupertinoMagnifier(
          key: (tree.cupertinoMagnifier.hasKey() ? evaluateFlutterKeyType(tree.cupertinoMagnifier.key) : null),
          size: (tree.cupertinoMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.cupertinoMagnifier.size) : $dartUi.Size(80, 47.5)),
          borderRadius: (tree.cupertinoMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.cupertinoMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.elliptical(60, 50))),
          additionalFocalPointOffset: (tree.cupertinoMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.cupertinoMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          shadows: tree.cupertinoMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          borderSide: (tree.cupertinoMagnifier.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.cupertinoMagnifier.borderSide) : $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color.fromARGB(255, 232, 232, 232))),
          inOutAnimation: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBar(
          key: (tree.cupertinoNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBar.key) : null),
          leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true),
          previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoNavigationBar.middle) : null),
          trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoNavigationBar.trailing) : null),
          border: (tree.cupertinoNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoNavigationBar.brightness) : null),
          padding: (tree.cupertinoNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoNavigationBarBackButton:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBarBackButton(
          key: (tree.cupertinoNavigationBarBackButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBarBackButton.key) : null),
          color: (tree.cupertinoNavigationBarBackButton.hasColor() ? evaluateDartColorType(tree.cupertinoNavigationBarBackButton.color) : null),
          previousPageTitle: (tree.cupertinoNavigationBarBackButton.hasPreviousPageTitle() ? tree.cupertinoNavigationBarBackButton.previousPageTitle : null),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoPageScaffold:
      return $flutterSrcCupertinoPageScaffold.CupertinoPageScaffold(
          key: (tree.cupertinoPageScaffold.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPageScaffold.key) : null),
          navigationBar: (tree.cupertinoPageScaffold.hasNavigationBar() ? evaluateObstructingPreferredSizeWidgetType(tree.cupertinoPageScaffold.navigationBar) : null),
          backgroundColor: (tree.cupertinoPageScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPageScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.cupertinoPageScaffold.hasResizeToAvoidBottomInset() ? tree.cupertinoPageScaffold.resizeToAvoidBottomInset : true),
          child: (tree.cupertinoPageScaffold.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoPageScaffold.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoPicker:
      return $flutterSrcCupertinoPicker.CupertinoPicker(
          key: (tree.cupertinoPicker.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPicker.key) : null),
          diameterRatio: (tree.cupertinoPicker.hasDiameterRatio() ? tree.cupertinoPicker.diameterRatio : 1.07),
          backgroundColor: (tree.cupertinoPicker.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPicker.backgroundColor) : null),
          offAxisFraction: (tree.cupertinoPicker.hasOffAxisFraction() ? tree.cupertinoPicker.offAxisFraction : 0.0),
          useMagnifier: (tree.cupertinoPicker.hasUseMagnifier() ? tree.cupertinoPicker.useMagnifier : false),
          magnification: (tree.cupertinoPicker.hasMagnification() ? tree.cupertinoPicker.magnification : 1.0),
          scrollController: (tree.cupertinoPicker.hasScrollController() ? evaluateFlutterFixedExtentScrollControllerType(tree.cupertinoPicker.scrollController) : null),
          squeeze: (tree.cupertinoPicker.hasSqueeze() ? tree.cupertinoPicker.squeeze : 1.45),
          itemExtent: (tree.cupertinoPicker.hasItemExtent() ? tree.cupertinoPicker.itemExtent : missing('itemExtent')),
          onSelectedItemChanged: null,
          children: tree.cupertinoPicker.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          selectionOverlay: (tree.cupertinoPicker.hasSelectionOverlay() ? evaluateWidgetType(tree.cupertinoPicker.selectionOverlay) : $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay()),
          looping: (tree.cupertinoPicker.hasLooping() ? tree.cupertinoPicker.looping : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoPickerDefaultSelectionOverlay:
      return $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay(
          key: (tree.cupertinoPickerDefaultSelectionOverlay.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPickerDefaultSelectionOverlay.key) : null),
          background: (tree.cupertinoPickerDefaultSelectionOverlay.hasBackground() ? evaluateRequiredDartColorType(tree.cupertinoPickerDefaultSelectionOverlay.background) : $flutterSrcCupertinoColors.CupertinoColors.tertiarySystemFill),
          capStartEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapStartEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capStartEdge : true),
          capEndEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapEndEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capEndEdge : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoPopupSurface:
      return $flutterSrcCupertinoDialog.CupertinoPopupSurface(
          key: (tree.cupertinoPopupSurface.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPopupSurface.key) : null),
          isSurfacePainted: (tree.cupertinoPopupSurface.hasIsSurfacePainted() ? tree.cupertinoPopupSurface.isSurfacePainted : true),
          child: (tree.cupertinoPopupSurface.hasChild() ? evaluateWidgetType(tree.cupertinoPopupSurface.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoScrollbar:
      return $flutterSrcCupertinoScrollbar.CupertinoScrollbar(
          key: (tree.cupertinoScrollbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoScrollbar.key) : null),
          child: (tree.cupertinoScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoScrollbar.child) : missing('child')),
          controller: (tree.cupertinoScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.cupertinoScrollbar.controller) : null),
          thumbVisibility: (tree.cupertinoScrollbar.hasThumbVisibility() ? tree.cupertinoScrollbar.thumbVisibility : null),
          thickness: (tree.cupertinoScrollbar.hasThickness() ? tree.cupertinoScrollbar.thickness : missing('thickness')),
          thicknessWhileDragging: (tree.cupertinoScrollbar.hasThicknessWhileDragging() ? tree.cupertinoScrollbar.thicknessWhileDragging : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultThicknessWhileDragging),
          radius: (tree.cupertinoScrollbar.hasRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radius) : missing('radius')),
          radiusWhileDragging: (tree.cupertinoScrollbar.hasRadiusWhileDragging() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radiusWhileDragging) : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultRadiusWhileDragging),
          notificationPredicate: null,
          scrollbarOrientation: (tree.cupertinoScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.cupertinoScrollbar.scrollbarOrientation) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSearchTextField:
      return $flutterSrcCupertinoSearchField.CupertinoSearchTextField(
          key: (tree.cupertinoSearchTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSearchTextField.key) : null),
          controller: (tree.cupertinoSearchTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoSearchTextField.controller) : null),
          onChanged: null,
          onSubmitted: null,
          style: (tree.cupertinoSearchTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.style) : null),
          placeholder: (tree.cupertinoSearchTextField.hasPlaceholder() ? tree.cupertinoSearchTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoSearchTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.placeholderStyle) : null),
          decoration: (tree.cupertinoSearchTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoSearchTextField.decoration) : null),
          backgroundColor: (tree.cupertinoSearchTextField.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSearchTextField.backgroundColor) : null),
          borderRadius: (tree.cupertinoSearchTextField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoSearchTextField.borderRadius) : null),
          keyboardType: (tree.cupertinoSearchTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoSearchTextField.keyboardType) : $flutterSrcServicesTextInput.TextInputType.text),
          padding: (tree.cupertinoSearchTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(5.5, 8, 5.5, 8)),
          itemColor: (tree.cupertinoSearchTextField.hasItemColor() ? evaluateRequiredDartColorType(tree.cupertinoSearchTextField.itemColor) : $flutterSrcCupertinoColors.CupertinoColors.secondaryLabel),
          itemSize: (tree.cupertinoSearchTextField.hasItemSize() ? tree.cupertinoSearchTextField.itemSize : 20.0),
          prefixInsets: (tree.cupertinoSearchTextField.hasPrefixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.prefixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(6, 0, 0, 3)),
          prefixIcon: (tree.cupertinoSearchTextField.hasPrefixIcon() ? evaluateRequiredWidgetType(tree.cupertinoSearchTextField.prefixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.search)),
          suffixInsets: (tree.cupertinoSearchTextField.hasSuffixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.suffixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(0, 0, 5, 2)),
          suffixIcon: (tree.cupertinoSearchTextField.hasSuffixIcon() ? evaluateRequiredFlutterIconType(tree.cupertinoSearchTextField.suffixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.xmark_circle_fill)),
          suffixMode: (tree.cupertinoSearchTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoSearchTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.editing),
          onSuffixTap: null,
          restorationId: (tree.cupertinoSearchTextField.hasRestorationId() ? tree.cupertinoSearchTextField.restorationId : null),
          focusNode: (tree.cupertinoSearchTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSearchTextField.focusNode) : null),
          smartQuotesType: (tree.cupertinoSearchTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoSearchTextField.smartQuotesType) : null),
          smartDashesType: (tree.cupertinoSearchTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoSearchTextField.smartDashesType) : null),
          enableIMEPersonalizedLearning: (tree.cupertinoSearchTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoSearchTextField.enableIMEPersonalizedLearning : true),
          autofocus: (tree.cupertinoSearchTextField.hasAutofocus() ? tree.cupertinoSearchTextField.autofocus : false),
          onTap: null,
          autocorrect: (tree.cupertinoSearchTextField.hasAutocorrect() ? tree.cupertinoSearchTextField.autocorrect : true),
          enabled: (tree.cupertinoSearchTextField.hasEnabled() ? tree.cupertinoSearchTextField.enabled : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSlider:
      return $flutterSrcCupertinoSlider.CupertinoSlider(
          key: (tree.cupertinoSlider.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSlider.key) : null),
          value: (tree.cupertinoSlider.hasValue() ? tree.cupertinoSlider.value : missing('value')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.cupertinoSlider.hasMin() ? tree.cupertinoSlider.min : 0.0),
          max: (tree.cupertinoSlider.hasMax() ? tree.cupertinoSlider.max : 1.0),
          divisions: (tree.cupertinoSlider.hasDivisions() ? tree.cupertinoSlider.divisions : null),
          activeColor: (tree.cupertinoSlider.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSlider.activeColor) : null),
          thumbColor: (tree.cupertinoSlider.hasThumbColor() ? evaluateRequiredDartColorType(tree.cupertinoSlider.thumbColor) : $flutterSrcCupertinoColors.CupertinoColors.white));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSliverNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoSliverNavigationBar(
          key: (tree.cupertinoSliverNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverNavigationBar.key) : null),
          largeTitle: (tree.cupertinoSliverNavigationBar.hasLargeTitle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.largeTitle) : null),
          leading: (tree.cupertinoSliverNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoSliverNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyTitle: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyTitle() ? tree.cupertinoSliverNavigationBar.automaticallyImplyTitle : true),
          alwaysShowMiddle: (tree.cupertinoSliverNavigationBar.hasAlwaysShowMiddle() ? tree.cupertinoSliverNavigationBar.alwaysShowMiddle : true),
          previousPageTitle: (tree.cupertinoSliverNavigationBar.hasPreviousPageTitle() ? tree.cupertinoSliverNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoSliverNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.middle) : null),
          trailing: (tree.cupertinoSliverNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.trailing) : null),
          border: (tree.cupertinoSliverNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoSliverNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoSliverNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSliverNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoSliverNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoSliverNavigationBar.brightness) : null),
          padding: (tree.cupertinoSliverNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoSliverNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoSliverNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoSliverNavigationBar.transitionBetweenRoutes : true),
          stretch: (tree.cupertinoSliverNavigationBar.hasStretch() ? tree.cupertinoSliverNavigationBar.stretch : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSliverRefreshControl:
      return $flutterSrcCupertinoRefresh.CupertinoSliverRefreshControl(
          key: (tree.cupertinoSliverRefreshControl.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverRefreshControl.key) : null),
          refreshTriggerPullDistance: (tree.cupertinoSliverRefreshControl.hasRefreshTriggerPullDistance() ? tree.cupertinoSliverRefreshControl.refreshTriggerPullDistance : 100.0),
          refreshIndicatorExtent: (tree.cupertinoSliverRefreshControl.hasRefreshIndicatorExtent() ? tree.cupertinoSliverRefreshControl.refreshIndicatorExtent : 60.0),
          builder: null,
          onRefresh: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSpellCheckSuggestionsToolbar:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar(
          key: (tree.cupertinoSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbar.key) : null),
          anchors: (tree.cupertinoSpellCheckSuggestionsToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoSpellCheckSuggestionsToolbar.anchors) : missing('anchors')),
          buttonItems: tree.cupertinoSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar.editableText(
          key: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoSwitch:
      return $flutterSrcCupertinoSwitch.CupertinoSwitch(
          key: (tree.cupertinoSwitch.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSwitch.key) : null),
          value: (tree.cupertinoSwitch.hasValue() ? tree.cupertinoSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.cupertinoSwitch.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSwitch.activeColor) : null),
          trackColor: (tree.cupertinoSwitch.hasTrackColor() ? evaluateDartColorType(tree.cupertinoSwitch.trackColor) : null),
          thumbColor: (tree.cupertinoSwitch.hasThumbColor() ? evaluateDartColorType(tree.cupertinoSwitch.thumbColor) : null),
          applyTheme: (tree.cupertinoSwitch.hasApplyTheme() ? tree.cupertinoSwitch.applyTheme : null),
          focusColor: (tree.cupertinoSwitch.hasFocusColor() ? evaluateDartColorType(tree.cupertinoSwitch.focusColor) : null),
          onLabelColor: (tree.cupertinoSwitch.hasOnLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.onLabelColor) : null),
          offLabelColor: (tree.cupertinoSwitch.hasOffLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.offLabelColor) : null),
          focusNode: (tree.cupertinoSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.cupertinoSwitch.hasAutofocus() ? tree.cupertinoSwitch.autofocus : false),
          dragStartBehavior: (tree.cupertinoSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTabBar:
      return $flutterSrcCupertinoBottomTabBar.CupertinoTabBar(
          key: (tree.cupertinoTabBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabBar.key) : null),
          items: tree.cupertinoTabBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.cupertinoTabBar.hasCurrentIndex() ? tree.cupertinoTabBar.currentIndex : 0),
          backgroundColor: (tree.cupertinoTabBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoTabBar.backgroundColor) : null),
          activeColor: (tree.cupertinoTabBar.hasActiveColor() ? evaluateDartColorType(tree.cupertinoTabBar.activeColor) : null),
          inactiveColor: (tree.cupertinoTabBar.hasInactiveColor() ? evaluateRequiredDartColorType(tree.cupertinoTabBar.inactiveColor) : $flutterSrcCupertinoColors.CupertinoColors.inactiveGray),
          iconSize: (tree.cupertinoTabBar.hasIconSize() ? tree.cupertinoTabBar.iconSize : 30.0),
          height: (tree.cupertinoTabBar.hasHeight() ? tree.cupertinoTabBar.height : 50.0),
          border: (tree.cupertinoTabBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoTabBar.border) : $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x4D000000), darkColor: $dartUi.Color(0x29000000)), width: 0.0))));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTabView:
      return $flutterSrcCupertinoTabView.CupertinoTabView(
          key: (tree.cupertinoTabView.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabView.key) : null),
          builder: null,
          navigatorKey: null,
          defaultTitle: (tree.cupertinoTabView.hasDefaultTitle() ? tree.cupertinoTabView.defaultTitle : null),
          routes: null,
          onGenerateRoute: null,
          onUnknownRoute: null,
          navigatorObservers: tree.cupertinoTabView.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          restorationScopeId: (tree.cupertinoTabView.hasRestorationScopeId() ? tree.cupertinoTabView.restorationScopeId : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextField:
      return $flutterSrcCupertinoTextField.CupertinoTextField(
          key: (tree.cupertinoTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextField.key) : null),
          controller: (tree.cupertinoTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextField.controller) : null),
          focusNode: (tree.cupertinoTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextField.focusNode) : null),
          undoController: (tree.cupertinoTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextField.undoController) : null),
          decoration: (tree.cupertinoTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextField.decoration) : $flutterSrcPaintingBoxDecoration.BoxDecoration(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $flutterSrcCupertinoColors.CupertinoColors.white, darkColor: $flutterSrcCupertinoColors.CupertinoColors.black), border: $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), bottom: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), left: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), right: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0)), borderRadius: $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(5.0)))),
          padding: (tree.cupertinoTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextField.hasPlaceholder() ? tree.cupertinoTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextField.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextField.prefix) : null),
          prefixMode: (tree.cupertinoTextField.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextField.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextField.suffix) : null),
          suffixMode: (tree.cupertinoTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextField.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextField.keyboardType) : null),
          textInputAction: (tree.cupertinoTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextField.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.style) : null),
          strutStyle: (tree.cupertinoTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextField.strutStyle) : null),
          textAlign: (tree.cupertinoTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextField.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextField.textDirection) : null),
          readOnly: (tree.cupertinoTextField.hasReadOnly() ? tree.cupertinoTextField.readOnly : false),
          showCursor: (tree.cupertinoTextField.hasShowCursor() ? tree.cupertinoTextField.showCursor : null),
          autofocus: (tree.cupertinoTextField.hasAutofocus() ? tree.cupertinoTextField.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextField.hasObscuringCharacter() ? tree.cupertinoTextField.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextField.hasObscureText() ? tree.cupertinoTextField.obscureText : false),
          autocorrect: (tree.cupertinoTextField.hasAutocorrect() ? tree.cupertinoTextField.autocorrect : true),
          smartDashesType: (tree.cupertinoTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextField.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextField.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextField.hasEnableSuggestions() ? tree.cupertinoTextField.enableSuggestions : true),
          maxLines: (tree.cupertinoTextField.hasMaxLines() ? tree.cupertinoTextField.maxLines : 1),
          minLines: (tree.cupertinoTextField.hasMinLines() ? tree.cupertinoTextField.minLines : null),
          expands: (tree.cupertinoTextField.hasExpands() ? tree.cupertinoTextField.expands : false),
          maxLength: (tree.cupertinoTextField.hasMaxLength() ? tree.cupertinoTextField.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextField.hasEnabled() ? tree.cupertinoTextField.enabled : true),
          cursorWidth: (tree.cupertinoTextField.hasCursorWidth() ? tree.cupertinoTextField.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextField.hasCursorHeight() ? tree.cupertinoTextField.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextField.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextField.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextField.hasCursorOpacityAnimates() ? tree.cupertinoTextField.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextField.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextField.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextField.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextField.hasEnableInteractiveSelection() ? tree.cupertinoTextField.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextField.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextField.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextField.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextField.hasRestorationId() ? tree.cupertinoTextField.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextField.hasScribbleEnabled() ? tree.cupertinoTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextField.magnifierConfiguration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextFieldNamedBorderless:
      return $flutterSrcCupertinoTextField.CupertinoTextField.borderless(
          key: (tree.cupertinoTextFieldNamedBorderless.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFieldNamedBorderless.key) : null),
          controller: (tree.cupertinoTextFieldNamedBorderless.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFieldNamedBorderless.controller) : null),
          focusNode: (tree.cupertinoTextFieldNamedBorderless.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFieldNamedBorderless.focusNode) : null),
          undoController: (tree.cupertinoTextFieldNamedBorderless.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextFieldNamedBorderless.undoController) : null),
          decoration: (tree.cupertinoTextFieldNamedBorderless.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFieldNamedBorderless.decoration) : null),
          padding: (tree.cupertinoTextFieldNamedBorderless.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextFieldNamedBorderless.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholder() ? tree.cupertinoTextFieldNamedBorderless.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextFieldNamedBorderless.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.prefix) : null),
          prefixMode: (tree.cupertinoTextFieldNamedBorderless.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextFieldNamedBorderless.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.suffix) : null),
          suffixMode: (tree.cupertinoTextFieldNamedBorderless.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextFieldNamedBorderless.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFieldNamedBorderless.keyboardType) : null),
          textInputAction: (tree.cupertinoTextFieldNamedBorderless.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFieldNamedBorderless.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextFieldNamedBorderless.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFieldNamedBorderless.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextFieldNamedBorderless.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.style) : null),
          strutStyle: (tree.cupertinoTextFieldNamedBorderless.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFieldNamedBorderless.strutStyle) : null),
          textAlign: (tree.cupertinoTextFieldNamedBorderless.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFieldNamedBorderless.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFieldNamedBorderless.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFieldNamedBorderless.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextFieldNamedBorderless.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFieldNamedBorderless.textDirection) : null),
          readOnly: (tree.cupertinoTextFieldNamedBorderless.hasReadOnly() ? tree.cupertinoTextFieldNamedBorderless.readOnly : false),
          showCursor: (tree.cupertinoTextFieldNamedBorderless.hasShowCursor() ? tree.cupertinoTextFieldNamedBorderless.showCursor : null),
          autofocus: (tree.cupertinoTextFieldNamedBorderless.hasAutofocus() ? tree.cupertinoTextFieldNamedBorderless.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextFieldNamedBorderless.hasObscuringCharacter() ? tree.cupertinoTextFieldNamedBorderless.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFieldNamedBorderless.hasObscureText() ? tree.cupertinoTextFieldNamedBorderless.obscureText : false),
          autocorrect: (tree.cupertinoTextFieldNamedBorderless.hasAutocorrect() ? tree.cupertinoTextFieldNamedBorderless.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFieldNamedBorderless.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFieldNamedBorderless.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFieldNamedBorderless.hasEnableSuggestions() ? tree.cupertinoTextFieldNamedBorderless.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFieldNamedBorderless.hasMaxLines() ? tree.cupertinoTextFieldNamedBorderless.maxLines : 1),
          minLines: (tree.cupertinoTextFieldNamedBorderless.hasMinLines() ? tree.cupertinoTextFieldNamedBorderless.minLines : null),
          expands: (tree.cupertinoTextFieldNamedBorderless.hasExpands() ? tree.cupertinoTextFieldNamedBorderless.expands : false),
          maxLength: (tree.cupertinoTextFieldNamedBorderless.hasMaxLength() ? tree.cupertinoTextFieldNamedBorderless.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextFieldNamedBorderless.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextFieldNamedBorderless.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextFieldNamedBorderless.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFieldNamedBorderless.hasEnabled() ? tree.cupertinoTextFieldNamedBorderless.enabled : true),
          cursorWidth: (tree.cupertinoTextFieldNamedBorderless.hasCursorWidth() ? tree.cupertinoTextFieldNamedBorderless.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFieldNamedBorderless.hasCursorHeight() ? tree.cupertinoTextFieldNamedBorderless.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextFieldNamedBorderless.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextFieldNamedBorderless.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextFieldNamedBorderless.hasCursorOpacityAnimates() ? tree.cupertinoTextFieldNamedBorderless.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextFieldNamedBorderless.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFieldNamedBorderless.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextFieldNamedBorderless.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextFieldNamedBorderless.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFieldNamedBorderless.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFieldNamedBorderless.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFieldNamedBorderless.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextFieldNamedBorderless.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextFieldNamedBorderless.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextFieldNamedBorderless.hasEnableInteractiveSelection() ? tree.cupertinoTextFieldNamedBorderless.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextFieldNamedBorderless.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFieldNamedBorderless.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextFieldNamedBorderless.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextFieldNamedBorderless.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextFieldNamedBorderless.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFieldNamedBorderless.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFieldNamedBorderless.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextFieldNamedBorderless.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextFieldNamedBorderless.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextFieldNamedBorderless.hasRestorationId() ? tree.cupertinoTextFieldNamedBorderless.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextFieldNamedBorderless.hasScribbleEnabled() ? tree.cupertinoTextFieldNamedBorderless.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextFieldNamedBorderless.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextFieldNamedBorderless.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextFieldNamedBorderless.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextFieldNamedBorderless.magnifierConfiguration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextFormFieldRow:
      return $flutterSrcCupertinoTextFormFieldRow.CupertinoTextFormFieldRow(
          key: (tree.cupertinoTextFormFieldRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFormFieldRow.key) : null),
          prefix: (tree.cupertinoTextFormFieldRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFormFieldRow.prefix) : null),
          padding: (tree.cupertinoTextFormFieldRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoTextFormFieldRow.padding) : null),
          controller: (tree.cupertinoTextFormFieldRow.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFormFieldRow.controller) : null),
          initialValue: (tree.cupertinoTextFormFieldRow.hasInitialValue() ? tree.cupertinoTextFormFieldRow.initialValue : null),
          focusNode: (tree.cupertinoTextFormFieldRow.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFormFieldRow.focusNode) : null),
          decoration: (tree.cupertinoTextFormFieldRow.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFormFieldRow.decoration) : null),
          keyboardType: (tree.cupertinoTextFormFieldRow.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFormFieldRow.keyboardType) : null),
          textCapitalization: (tree.cupertinoTextFormFieldRow.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFormFieldRow.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.cupertinoTextFormFieldRow.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFormFieldRow.textInputAction) : null),
          style: (tree.cupertinoTextFormFieldRow.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.style) : null),
          strutStyle: (tree.cupertinoTextFormFieldRow.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFormFieldRow.strutStyle) : null),
          textDirection: (tree.cupertinoTextFormFieldRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFormFieldRow.textDirection) : null),
          textAlign: (tree.cupertinoTextFormFieldRow.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFormFieldRow.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFormFieldRow.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFormFieldRow.textAlignVertical) : null),
          autofocus: (tree.cupertinoTextFormFieldRow.hasAutofocus() ? tree.cupertinoTextFormFieldRow.autofocus : false),
          readOnly: (tree.cupertinoTextFormFieldRow.hasReadOnly() ? tree.cupertinoTextFormFieldRow.readOnly : false),
          showCursor: (tree.cupertinoTextFormFieldRow.hasShowCursor() ? tree.cupertinoTextFormFieldRow.showCursor : null),
          obscuringCharacter: (tree.cupertinoTextFormFieldRow.hasObscuringCharacter() ? tree.cupertinoTextFormFieldRow.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFormFieldRow.hasObscureText() ? tree.cupertinoTextFormFieldRow.obscureText : false),
          autocorrect: (tree.cupertinoTextFormFieldRow.hasAutocorrect() ? tree.cupertinoTextFormFieldRow.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFormFieldRow.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFormFieldRow.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFormFieldRow.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFormFieldRow.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFormFieldRow.hasEnableSuggestions() ? tree.cupertinoTextFormFieldRow.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFormFieldRow.hasMaxLines() ? tree.cupertinoTextFormFieldRow.maxLines : 1),
          minLines: (tree.cupertinoTextFormFieldRow.hasMinLines() ? tree.cupertinoTextFormFieldRow.minLines : null),
          expands: (tree.cupertinoTextFormFieldRow.hasExpands() ? tree.cupertinoTextFormFieldRow.expands : false),
          maxLength: (tree.cupertinoTextFormFieldRow.hasMaxLength() ? tree.cupertinoTextFormFieldRow.maxLength : null),
          onChanged: null,
          onTap: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.cupertinoTextFormFieldRow.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFormFieldRow.hasEnabled() ? tree.cupertinoTextFormFieldRow.enabled : null),
          cursorWidth: (tree.cupertinoTextFormFieldRow.hasCursorWidth() ? tree.cupertinoTextFormFieldRow.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFormFieldRow.hasCursorHeight() ? tree.cupertinoTextFormFieldRow.cursorHeight : null),
          cursorColor: (tree.cupertinoTextFormFieldRow.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFormFieldRow.cursorColor) : null),
          keyboardAppearance: (tree.cupertinoTextFormFieldRow.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFormFieldRow.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFormFieldRow.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFormFieldRow.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.cupertinoTextFormFieldRow.hasEnableInteractiveSelection() ? tree.cupertinoTextFormFieldRow.enableInteractiveSelection : true),
          selectionControls: (tree.cupertinoTextFormFieldRow.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFormFieldRow.selectionControls) : null),
          scrollPhysics: (tree.cupertinoTextFormFieldRow.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFormFieldRow.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFormFieldRow.autofillHints,
          autovalidateMode: (tree.cupertinoTextFormFieldRow.hasAutovalidateMode() ? enums.convertRequiredFlutterAutovalidateModeType(tree.cupertinoTextFormFieldRow.autovalidateMode) : missing('autovalidateMode')),
          placeholder: (tree.cupertinoTextFormFieldRow.hasPlaceholder() ? tree.cupertinoTextFormFieldRow.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFormFieldRow.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          contextMenuBuilder: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextSelectionToolbar:
      return $flutterSrcCupertinoTextSelectionToolbar.CupertinoTextSelectionToolbar(
          key: (tree.cupertinoTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbar.key) : null),
          anchorAbove: (tree.cupertinoTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.cupertinoTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.cupertinoTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextSelectionToolbarButton:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton(
          key: (tree.cupertinoTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.text(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoTextSelectionToolbarButtonNamedText.text : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoTheme:
      return $flutterSrcCupertinoTheme.CupertinoTheme(
          key: (tree.cupertinoTheme.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTheme.key) : null),
          data: (tree.cupertinoTheme.hasData() ? evaluateRequiredCupertinoThemeDataType(tree.cupertinoTheme.data) : missing('data')),
          child: (tree.cupertinoTheme.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.cupertinoUserInterfaceLevel:
      return $flutterSrcCupertinoInterfaceLevel.CupertinoUserInterfaceLevel(
          key: (tree.cupertinoUserInterfaceLevel.hasKey() ? evaluateFlutterKeyType(tree.cupertinoUserInterfaceLevel.key) : null),
          data: (tree.cupertinoUserInterfaceLevel.hasData() ? enums.convertRequiredCupertinoUserInterfaceLevelDataType(tree.cupertinoUserInterfaceLevel.data) : missing('data')),
          child: (tree.cupertinoUserInterfaceLevel.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoUserInterfaceLevel.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAbsorbPointer:
      return $flutterSrcWidgetsBasic.AbsorbPointer(
          key: (tree.flutterAbsorbPointer.hasKey() ? evaluateFlutterKeyType(tree.flutterAbsorbPointer.key) : null),
          absorbing: (tree.flutterAbsorbPointer.hasAbsorbing() ? tree.flutterAbsorbPointer.absorbing : true),
          child: (tree.flutterAbsorbPointer.hasChild() ? evaluateWidgetType(tree.flutterAbsorbPointer.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAlign:
      return $flutterSrcWidgetsBasic.Align(
          key: (tree.flutterAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAlign.key) : null),
          alignment: (tree.flutterAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAlign.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterAlign.hasWidthFactor() ? tree.flutterAlign.widthFactor : null),
          heightFactor: (tree.flutterAlign.hasHeightFactor() ? tree.flutterAlign.heightFactor : null),
          child: (tree.flutterAlign.hasChild() ? evaluateWidgetType(tree.flutterAlign.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAndroidView:
      return $flutterSrcWidgetsPlatformView.AndroidView(
          key: (tree.flutterAndroidView.hasKey() ? evaluateFlutterKeyType(tree.flutterAndroidView.key) : null),
          viewType: (tree.flutterAndroidView.hasViewType() ? tree.flutterAndroidView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAndroidView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAndroidView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAndroidView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAndroidView.layoutDirection) : null),
          gestureRecognizers: null,
          creationParamsCodec: null,
          clipBehavior: (tree.flutterAndroidView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAndroidView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedAlign:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedAlign(
          key: (tree.flutterAnimatedAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedAlign.key) : null),
          alignment: (tree.flutterAnimatedAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedAlign.alignment) : missing('alignment')),
          child: (tree.flutterAnimatedAlign.hasChild() ? evaluateWidgetType(tree.flutterAnimatedAlign.child) : null),
          heightFactor: (tree.flutterAnimatedAlign.hasHeightFactor() ? tree.flutterAnimatedAlign.heightFactor : null),
          widthFactor: (tree.flutterAnimatedAlign.hasWidthFactor() ? tree.flutterAnimatedAlign.widthFactor : null),
          curve: (tree.flutterAnimatedAlign.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedAlign.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedAlign.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedAlign.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedContainer:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedContainer(
          key: (tree.flutterAnimatedContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedContainer.key) : null),
          alignment: (tree.flutterAnimatedContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.alignment) : null),
          padding: (tree.flutterAnimatedContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.padding) : null),
          color: (tree.flutterAnimatedContainer.hasColor() ? evaluateDartColorType(tree.flutterAnimatedContainer.color) : null),
          decoration: (tree.flutterAnimatedContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.decoration) : null),
          foregroundDecoration: (tree.flutterAnimatedContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.foregroundDecoration) : null),
          width: (tree.flutterAnimatedContainer.hasWidth() ? tree.flutterAnimatedContainer.width : null),
          height: (tree.flutterAnimatedContainer.hasHeight() ? tree.flutterAnimatedContainer.height : null),
          constraints: (tree.flutterAnimatedContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterAnimatedContainer.constraints) : null),
          margin: (tree.flutterAnimatedContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.margin) : null),
          transform: (tree.flutterAnimatedContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterAnimatedContainer.transform) : null),
          transformAlignment: (tree.flutterAnimatedContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.transformAlignment) : null),
          child: (tree.flutterAnimatedContainer.hasChild() ? evaluateWidgetType(tree.flutterAnimatedContainer.child) : null),
          clipBehavior: (tree.flutterAnimatedContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedContainer.clipBehavior) : $dartUi.Clip.none),
          curve: (tree.flutterAnimatedContainer.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedContainer.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedContainer.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedContainer.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedCrossFade:
      return $flutterSrcWidgetsAnimatedCrossFade.AnimatedCrossFade(
          key: (tree.flutterAnimatedCrossFade.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedCrossFade.key) : null),
          firstChild: (tree.flutterAnimatedCrossFade.hasFirstChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.firstChild) : missing('firstChild')),
          secondChild: (tree.flutterAnimatedCrossFade.hasSecondChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.secondChild) : missing('secondChild')),
          firstCurve: (tree.flutterAnimatedCrossFade.hasFirstCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.firstCurve) : $flutterSrcAnimationCurves.Curves.linear),
          secondCurve: (tree.flutterAnimatedCrossFade.hasSecondCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.secondCurve) : $flutterSrcAnimationCurves.Curves.linear),
          sizeCurve: (tree.flutterAnimatedCrossFade.hasSizeCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.sizeCurve) : $flutterSrcAnimationCurves.Curves.linear),
          alignment: (tree.flutterAnimatedCrossFade.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedCrossFade.alignment) : $flutterSrcPaintingAlignment.Alignment.topCenter),
          crossFadeState: (tree.flutterAnimatedCrossFade.hasCrossFadeState() ? enums.convertRequiredFlutterCrossFadeStateType(tree.flutterAnimatedCrossFade.crossFadeState) : missing('crossFadeState')),
          duration: (tree.flutterAnimatedCrossFade.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedCrossFade.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedCrossFade.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedCrossFade.reverseDuration) : null),
          excludeBottomFocus: (tree.flutterAnimatedCrossFade.hasExcludeBottomFocus() ? tree.flutterAnimatedCrossFade.excludeBottomFocus : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedDefaultTextStyle:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedDefaultTextStyle(
          key: (tree.flutterAnimatedDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedDefaultTextStyle.key) : null),
          child: (tree.flutterAnimatedDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedDefaultTextStyle.child) : missing('child')),
          style: (tree.flutterAnimatedDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterAnimatedDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterAnimatedDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterAnimatedDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterAnimatedDefaultTextStyle.hasSoftWrap() ? tree.flutterAnimatedDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterAnimatedDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterAnimatedDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterAnimatedDefaultTextStyle.hasMaxLines() ? tree.flutterAnimatedDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterAnimatedDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterAnimatedDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterAnimatedDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterAnimatedDefaultTextStyle.textHeightBehavior) : null),
          curve: (tree.flutterAnimatedDefaultTextStyle.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedDefaultTextStyle.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedDefaultTextStyle.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedDefaultTextStyle.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedFractionallySizedBox:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedFractionallySizedBox(
          key: (tree.flutterAnimatedFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedFractionallySizedBox.key) : null),
          alignment: (tree.flutterAnimatedFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterAnimatedFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterAnimatedFractionallySizedBox.child) : null),
          heightFactor: (tree.flutterAnimatedFractionallySizedBox.hasHeightFactor() ? tree.flutterAnimatedFractionallySizedBox.heightFactor : null),
          widthFactor: (tree.flutterAnimatedFractionallySizedBox.hasWidthFactor() ? tree.flutterAnimatedFractionallySizedBox.widthFactor : null),
          curve: (tree.flutterAnimatedFractionallySizedBox.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedFractionallySizedBox.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedFractionallySizedBox.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedFractionallySizedBox.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedOpacity(
          key: (tree.flutterAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedOpacity.key) : null),
          child: (tree.flutterAnimatedOpacity.hasChild() ? evaluateWidgetType(tree.flutterAnimatedOpacity.child) : null),
          opacity: (tree.flutterAnimatedOpacity.hasOpacity() ? tree.flutterAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedPadding:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPadding(
          key: (tree.flutterAnimatedPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPadding.key) : null),
          padding: (tree.flutterAnimatedPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterAnimatedPadding.padding) : missing('padding')),
          child: (tree.flutterAnimatedPadding.hasChild() ? evaluateWidgetType(tree.flutterAnimatedPadding.child) : null),
          curve: (tree.flutterAnimatedPadding.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPadding.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPadding.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPadding.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedPhysicalModel:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPhysicalModel(
          key: (tree.flutterAnimatedPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPhysicalModel.key) : null),
          child: (tree.flutterAnimatedPhysicalModel.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPhysicalModel.child) : missing('child')),
          shape: (tree.flutterAnimatedPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterAnimatedPhysicalModel.shape) : missing('shape')),
          clipBehavior: (tree.flutterAnimatedPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterAnimatedPhysicalModel.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.flutterAnimatedPhysicalModel.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          elevation: (tree.flutterAnimatedPhysicalModel.hasElevation() ? tree.flutterAnimatedPhysicalModel.elevation : missing('elevation')),
          color: (tree.flutterAnimatedPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.color) : missing('color')),
          animateColor: (tree.flutterAnimatedPhysicalModel.hasAnimateColor() ? tree.flutterAnimatedPhysicalModel.animateColor : true),
          shadowColor: (tree.flutterAnimatedPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.shadowColor) : missing('shadowColor')),
          animateShadowColor: (tree.flutterAnimatedPhysicalModel.hasAnimateShadowColor() ? tree.flutterAnimatedPhysicalModel.animateShadowColor : true),
          curve: (tree.flutterAnimatedPhysicalModel.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPhysicalModel.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPhysicalModel.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPhysicalModel.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedPositioned:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned(
          key: (tree.flutterAnimatedPositioned.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositioned.key) : null),
          child: (tree.flutterAnimatedPositioned.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositioned.child) : missing('child')),
          left: (tree.flutterAnimatedPositioned.hasLeft() ? tree.flutterAnimatedPositioned.left : null),
          top: (tree.flutterAnimatedPositioned.hasTop() ? tree.flutterAnimatedPositioned.top : null),
          right: (tree.flutterAnimatedPositioned.hasRight() ? tree.flutterAnimatedPositioned.right : null),
          bottom: (tree.flutterAnimatedPositioned.hasBottom() ? tree.flutterAnimatedPositioned.bottom : null),
          width: (tree.flutterAnimatedPositioned.hasWidth() ? tree.flutterAnimatedPositioned.width : null),
          height: (tree.flutterAnimatedPositioned.hasHeight() ? tree.flutterAnimatedPositioned.height : null),
          curve: (tree.flutterAnimatedPositioned.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositioned.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositioned.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositioned.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedPositionedDirectional:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositionedDirectional(
          key: (tree.flutterAnimatedPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedDirectional.key) : null),
          child: (tree.flutterAnimatedPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedDirectional.child) : missing('child')),
          start: (tree.flutterAnimatedPositionedDirectional.hasStart() ? tree.flutterAnimatedPositionedDirectional.start : null),
          top: (tree.flutterAnimatedPositionedDirectional.hasTop() ? tree.flutterAnimatedPositionedDirectional.top : null),
          end: (tree.flutterAnimatedPositionedDirectional.hasEnd() ? tree.flutterAnimatedPositionedDirectional.end : null),
          bottom: (tree.flutterAnimatedPositionedDirectional.hasBottom() ? tree.flutterAnimatedPositionedDirectional.bottom : null),
          width: (tree.flutterAnimatedPositionedDirectional.hasWidth() ? tree.flutterAnimatedPositionedDirectional.width : null),
          height: (tree.flutterAnimatedPositionedDirectional.hasHeight() ? tree.flutterAnimatedPositionedDirectional.height : null),
          curve: (tree.flutterAnimatedPositionedDirectional.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedDirectional.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedDirectional.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedDirectional.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedPositionedNamedFromRect:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned.fromRect(
          key: (tree.flutterAnimatedPositionedNamedFromRect.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedNamedFromRect.key) : null),
          child: (tree.flutterAnimatedPositionedNamedFromRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedNamedFromRect.child) : missing('child')),
          rect: (tree.flutterAnimatedPositionedNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterAnimatedPositionedNamedFromRect.rect) : missing('rect')),
          curve: (tree.flutterAnimatedPositionedNamedFromRect.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedNamedFromRect.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedNamedFromRect.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedNamedFromRect.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedRotation:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedRotation(
          key: (tree.flutterAnimatedRotation.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedRotation.key) : null),
          child: (tree.flutterAnimatedRotation.hasChild() ? evaluateWidgetType(tree.flutterAnimatedRotation.child) : null),
          turns: (tree.flutterAnimatedRotation.hasTurns() ? tree.flutterAnimatedRotation.turns : missing('turns')),
          alignment: (tree.flutterAnimatedRotation.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedRotation.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedRotation.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedRotation.filterQuality) : null),
          curve: (tree.flutterAnimatedRotation.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedRotation.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedRotation.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedRotation.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedScale:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedScale(
          key: (tree.flutterAnimatedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedScale.key) : null),
          child: (tree.flutterAnimatedScale.hasChild() ? evaluateWidgetType(tree.flutterAnimatedScale.child) : null),
          scale: (tree.flutterAnimatedScale.hasScale() ? tree.flutterAnimatedScale.scale : missing('scale')),
          alignment: (tree.flutterAnimatedScale.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedScale.filterQuality) : null),
          curve: (tree.flutterAnimatedScale.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedScale.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedScale.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedScale.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedSize:
      return $flutterSrcWidgetsAnimatedSize.AnimatedSize(
          key: (tree.flutterAnimatedSize.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSize.key) : null),
          child: (tree.flutterAnimatedSize.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSize.child) : null),
          alignment: (tree.flutterAnimatedSize.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedSize.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          curve: (tree.flutterAnimatedSize.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSize.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSize.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSize.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSize.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSize.reverseDuration) : null),
          clipBehavior: (tree.flutterAnimatedSize.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedSize.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedSlide:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedSlide(
          key: (tree.flutterAnimatedSlide.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSlide.key) : null),
          child: (tree.flutterAnimatedSlide.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSlide.child) : null),
          offset: (tree.flutterAnimatedSlide.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterAnimatedSlide.offset) : missing('offset')),
          curve: (tree.flutterAnimatedSlide.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSlide.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSlide.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSlide.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAnimatedSwitcher:
      return $flutterSrcWidgetsAnimatedSwitcher.AnimatedSwitcher(
          key: (tree.flutterAnimatedSwitcher.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSwitcher.key) : null),
          child: (tree.flutterAnimatedSwitcher.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSwitcher.child) : null),
          duration: (tree.flutterAnimatedSwitcher.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSwitcher.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSwitcher.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSwitcher.reverseDuration) : null),
          switchInCurve: (tree.flutterAnimatedSwitcher.hasSwitchInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchInCurve) : $flutterSrcAnimationCurves.Curves.linear),
          switchOutCurve: (tree.flutterAnimatedSwitcher.hasSwitchOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchOutCurve) : $flutterSrcAnimationCurves.Curves.linear));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAppKitView:
      return $flutterSrcWidgetsPlatformView.AppKitView(
          key: (tree.flutterAppKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterAppKitView.key) : null),
          viewType: (tree.flutterAppKitView.hasViewType() ? tree.flutterAppKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAppKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAppKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAppKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAppKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAspectRatio:
      return $flutterSrcWidgetsBasic.AspectRatio(
          key: (tree.flutterAspectRatio.hasKey() ? evaluateFlutterKeyType(tree.flutterAspectRatio.key) : null),
          aspectRatio: (tree.flutterAspectRatio.hasAspectRatio() ? tree.flutterAspectRatio.aspectRatio : missing('aspectRatio')),
          child: (tree.flutterAspectRatio.hasChild() ? evaluateWidgetType(tree.flutterAspectRatio.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAutofillGroup:
      return $flutterSrcWidgetsAutofill.AutofillGroup(
          key: (tree.flutterAutofillGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterAutofillGroup.key) : null),
          child: (tree.flutterAutofillGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutofillGroup.child) : missing('child')),
          onDisposeAction: (tree.flutterAutofillGroup.hasOnDisposeAction() ? enums.convertRequiredFlutterAutofillContextActionType(tree.flutterAutofillGroup.onDisposeAction) : $flutterSrcWidgetsAutofill.AutofillContextAction.commit));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterAutomaticKeepAlive:
      return $flutterSrcWidgetsAutomaticKeepAlive.AutomaticKeepAlive(
          key: (tree.flutterAutomaticKeepAlive.hasKey() ? evaluateFlutterKeyType(tree.flutterAutomaticKeepAlive.key) : null),
          child: (tree.flutterAutomaticKeepAlive.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutomaticKeepAlive.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterBackdropFilter:
      return $flutterSrcWidgetsBasic.BackdropFilter(
          key: (tree.flutterBackdropFilter.hasKey() ? evaluateFlutterKeyType(tree.flutterBackdropFilter.key) : null),
          filter: (tree.flutterBackdropFilter.hasFilter() ? evaluateRequiredDartImageFilterType(tree.flutterBackdropFilter.filter) : missing('filter')),
          child: (tree.flutterBackdropFilter.hasChild() ? evaluateWidgetType(tree.flutterBackdropFilter.child) : null),
          blendMode: (tree.flutterBackdropFilter.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterBackdropFilter.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterBackdropFilterLayer:
      return $flutterSrcRenderingLayer.BackdropFilterLayer(
          filter: (tree.flutterBackdropFilterLayer.hasFilter() ? evaluateDartImageFilterType(tree.flutterBackdropFilterLayer.filter) : null),
          blendMode: (tree.flutterBackdropFilterLayer.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterBackdropFilterLayer.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterBanner:
      return $flutterSrcWidgetsBanner.Banner(
          key: (tree.flutterBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterBanner.key) : null),
          child: (tree.flutterBanner.hasChild() ? evaluateWidgetType(tree.flutterBanner.child) : null),
          message: (tree.flutterBanner.hasMessage() ? tree.flutterBanner.message : missing('message')),
          textDirection: (tree.flutterBanner.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.textDirection) : null),
          location: (tree.flutterBanner.hasLocation() ? enums.convertRequiredFlutterBannerLocationType(tree.flutterBanner.location) : missing('location')),
          layoutDirection: (tree.flutterBanner.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.layoutDirection) : null),
          color: (tree.flutterBanner.hasColor() ? evaluateRequiredDartColorType(tree.flutterBanner.color) : $dartUi.Color(0xA0B71C1C)),
          textStyle: (tree.flutterBanner.hasTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterBanner.textStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFFFFFFFF), fontSize: 12.0 * 0.85, fontWeight: $dartUi.FontWeight.w900, height: 1.0)));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterBaseline:
      return $flutterSrcWidgetsBasic.Baseline(
          key: (tree.flutterBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterBaseline.key) : null),
          baseline: (tree.flutterBaseline.hasBaseline() ? tree.flutterBaseline.baseline : missing('baseline')),
          baselineType: (tree.flutterBaseline.hasBaselineType() ? enums.convertRequiredDartTextBaselineType(tree.flutterBaseline.baselineType) : missing('baselineType')),
          child: (tree.flutterBaseline.hasChild() ? evaluateWidgetType(tree.flutterBaseline.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterBlockSemantics:
      return $flutterSrcWidgetsBasic.BlockSemantics(
          key: (tree.flutterBlockSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterBlockSemantics.key) : null),
          blocking: (tree.flutterBlockSemantics.hasBlocking() ? tree.flutterBlockSemantics.blocking : true),
          child: (tree.flutterBlockSemantics.hasChild() ? evaluateWidgetType(tree.flutterBlockSemantics.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCenter:
      return $flutterSrcWidgetsBasic.Center(
          key: (tree.flutterCenter.hasKey() ? evaluateFlutterKeyType(tree.flutterCenter.key) : null),
          widthFactor: (tree.flutterCenter.hasWidthFactor() ? tree.flutterCenter.widthFactor : null),
          heightFactor: (tree.flutterCenter.hasHeightFactor() ? tree.flutterCenter.heightFactor : null),
          child: (tree.flutterCenter.hasChild() ? evaluateWidgetType(tree.flutterCenter.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCheckedModeBanner:
      return $flutterSrcWidgetsBanner.CheckedModeBanner(
          key: (tree.flutterCheckedModeBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterCheckedModeBanner.key) : null),
          child: (tree.flutterCheckedModeBanner.hasChild() ? evaluateRequiredWidgetType(tree.flutterCheckedModeBanner.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipOval:
      return $flutterSrcWidgetsBasic.ClipOval(
          key: (tree.flutterClipOval.hasKey() ? evaluateFlutterKeyType(tree.flutterClipOval.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipOval.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipOval.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipOval.hasChild() ? evaluateWidgetType(tree.flutterClipOval.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipPath:
      return $flutterSrcWidgetsBasic.ClipPath(
          key: (tree.flutterClipPath.hasKey() ? evaluateFlutterKeyType(tree.flutterClipPath.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipPath.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipPath.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipPath.hasChild() ? evaluateWidgetType(tree.flutterClipPath.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipPathLayer:
      return $flutterSrcRenderingLayer.ClipPathLayer(
          clipPath: (tree.flutterClipPathLayer.hasClipPath() ? evaluateDartPathType(tree.flutterClipPathLayer.clipPath) : null),
          clipBehavior: (tree.flutterClipPathLayer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipPathLayer.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipRRect:
      return $flutterSrcWidgetsBasic.ClipRRect(
          key: (tree.flutterClipRRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRRect.key) : null),
          borderRadius: (tree.flutterClipRRect.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterClipRRect.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          clipper: null,
          clipBehavior: (tree.flutterClipRRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRRect.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipRRect.hasChild() ? evaluateWidgetType(tree.flutterClipRRect.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipRRectLayer:
      return $flutterSrcRenderingLayer.ClipRRectLayer(
          clipRRect: (tree.flutterClipRRectLayer.hasClipRRect() ? evaluateDartRRectType(tree.flutterClipRRectLayer.clipRRect) : null),
          clipBehavior: (tree.flutterClipRRectLayer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRRectLayer.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipRect:
      return $flutterSrcWidgetsBasic.ClipRect(
          key: (tree.flutterClipRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRect.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRect.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterClipRect.hasChild() ? evaluateWidgetType(tree.flutterClipRect.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterClipRectLayer:
      return $flutterSrcRenderingLayer.ClipRectLayer(
          clipRect: (tree.flutterClipRectLayer.hasClipRect() ? evaluateDartRectType(tree.flutterClipRectLayer.clipRect) : null),
          clipBehavior: (tree.flutterClipRectLayer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRectLayer.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterColorFilterLayer:
      return $flutterSrcRenderingLayer.ColorFilterLayer(
          colorFilter: (tree.flutterColorFilterLayer.hasColorFilter() ? evaluateDartColorFilterType(tree.flutterColorFilterLayer.colorFilter) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterColorFiltered:
      return $flutterSrcWidgetsColorFilter.ColorFiltered(
          colorFilter: (tree.flutterColorFiltered.hasColorFilter() ? evaluateRequiredDartColorFilterType(tree.flutterColorFiltered.colorFilter) : missing('colorFilter')),
          child: (tree.flutterColorFiltered.hasChild() ? evaluateWidgetType(tree.flutterColorFiltered.child) : null),
          key: (tree.flutterColorFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterColorFiltered.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterColoredBox:
      return $flutterSrcWidgetsBasic.ColoredBox(
          color: (tree.flutterColoredBox.hasColor() ? evaluateRequiredDartColorType(tree.flutterColoredBox.color) : missing('color')),
          child: (tree.flutterColoredBox.hasChild() ? evaluateWidgetType(tree.flutterColoredBox.child) : null),
          key: (tree.flutterColoredBox.hasKey() ? evaluateFlutterKeyType(tree.flutterColoredBox.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterColumn:
      return $flutterSrcWidgetsBasic.Column(
          key: (tree.flutterColumn.hasKey() ? evaluateFlutterKeyType(tree.flutterColumn.key) : null),
          mainAxisAlignment: (tree.flutterColumn.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterColumn.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterColumn.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterColumn.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterColumn.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterColumn.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterColumn.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterColumn.textDirection) : null),
          verticalDirection: (tree.flutterColumn.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterColumn.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterColumn.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterColumn.textBaseline) : null),
          children: tree.flutterColumn.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCompositedTransformFollower:
      return $flutterSrcWidgetsBasic.CompositedTransformFollower(
          key: (tree.flutterCompositedTransformFollower.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformFollower.key) : null),
          link: (tree.flutterCompositedTransformFollower.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformFollower.link) : missing('link')),
          showWhenUnlinked: (tree.flutterCompositedTransformFollower.hasShowWhenUnlinked() ? tree.flutterCompositedTransformFollower.showWhenUnlinked : true),
          offset: (tree.flutterCompositedTransformFollower.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterCompositedTransformFollower.offset) : $dartUi.Offset.zero),
          targetAnchor: (tree.flutterCompositedTransformFollower.hasTargetAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.targetAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          followerAnchor: (tree.flutterCompositedTransformFollower.hasFollowerAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.followerAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          child: (tree.flutterCompositedTransformFollower.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformFollower.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCompositedTransformTarget:
      return $flutterSrcWidgetsBasic.CompositedTransformTarget(
          key: (tree.flutterCompositedTransformTarget.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformTarget.key) : null),
          link: (tree.flutterCompositedTransformTarget.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformTarget.link) : missing('link')),
          child: (tree.flutterCompositedTransformTarget.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformTarget.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterConstrainedBox:
      return $flutterSrcWidgetsBasic.ConstrainedBox(
          key: (tree.flutterConstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterConstrainedBox.key) : null),
          constraints: (tree.flutterConstrainedBox.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.flutterConstrainedBox.constraints) : missing('constraints')),
          child: (tree.flutterConstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterConstrainedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterContainer:
      return $flutterSrcWidgetsContainer.Container(
          key: (tree.flutterContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterContainer.key) : null),
          alignment: (tree.flutterContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.alignment) : null),
          padding: (tree.flutterContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.padding) : null),
          color: (tree.flutterContainer.hasColor() ? evaluateDartColorType(tree.flutterContainer.color) : null),
          decoration: (tree.flutterContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.decoration) : null),
          foregroundDecoration: (tree.flutterContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.foregroundDecoration) : null),
          width: (tree.flutterContainer.hasWidth() ? tree.flutterContainer.width : null),
          height: (tree.flutterContainer.hasHeight() ? tree.flutterContainer.height : null),
          constraints: (tree.flutterContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterContainer.constraints) : null),
          margin: (tree.flutterContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.margin) : null),
          transform: (tree.flutterContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterContainer.transform) : null),
          transformAlignment: (tree.flutterContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.transformAlignment) : null),
          child: (tree.flutterContainer.hasChild() ? evaluateWidgetType(tree.flutterContainer.child) : null),
          clipBehavior: (tree.flutterContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterContainer.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterContainerLayer:
      return $flutterSrcRenderingLayer.ContainerLayer(
          );
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCustomMultiChildLayout:
      return $flutterSrcWidgetsBasic.CustomMultiChildLayout(
          key: (tree.flutterCustomMultiChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomMultiChildLayout.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterCustomMultiChildLayout.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCustomPaint:
      return $flutterSrcWidgetsBasic.CustomPaint(
          key: (tree.flutterCustomPaint.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomPaint.key) : null),
          painter: (tree.flutterCustomPaint.hasPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.painter) : null),
          foregroundPainter: (tree.flutterCustomPaint.hasForegroundPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.foregroundPainter) : null),
          size: (tree.flutterCustomPaint.hasSize() ? evaluateRequiredDartSizeType(tree.flutterCustomPaint.size) : $dartUi.Size.zero),
          isComplex: (tree.flutterCustomPaint.hasIsComplex() ? tree.flutterCustomPaint.isComplex : false),
          willChange: (tree.flutterCustomPaint.hasWillChange() ? tree.flutterCustomPaint.willChange : false),
          child: (tree.flutterCustomPaint.hasChild() ? evaluateWidgetType(tree.flutterCustomPaint.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCustomScrollView:
      return $flutterSrcWidgetsScrollView.CustomScrollView(
          key: (tree.flutterCustomScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.key) : null),
          scrollDirection: (tree.flutterCustomScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterCustomScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterCustomScrollView.hasReverse() ? tree.flutterCustomScrollView.reverse : false),
          controller: (tree.flutterCustomScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterCustomScrollView.controller) : null),
          primary: (tree.flutterCustomScrollView.hasPrimary() ? tree.flutterCustomScrollView.primary : null),
          physics: (tree.flutterCustomScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterCustomScrollView.physics) : null),
          scrollBehavior: (tree.flutterCustomScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterCustomScrollView.scrollBehavior) : null),
          shrinkWrap: (tree.flutterCustomScrollView.hasShrinkWrap() ? tree.flutterCustomScrollView.shrinkWrap : false),
          center: (tree.flutterCustomScrollView.hasCenter() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.center) : null),
          anchor: (tree.flutterCustomScrollView.hasAnchor() ? tree.flutterCustomScrollView.anchor : 0.0),
          cacheExtent: (tree.flutterCustomScrollView.hasCacheExtent() ? tree.flutterCustomScrollView.cacheExtent : null),
          slivers: tree.flutterCustomScrollView.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterCustomScrollView.hasSemanticChildCount() ? tree.flutterCustomScrollView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterCustomScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterCustomScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterCustomScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterCustomScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterCustomScrollView.hasRestorationId() ? tree.flutterCustomScrollView.restorationId : null),
          clipBehavior: (tree.flutterCustomScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterCustomScrollView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterCustomSingleChildLayout:
      return $flutterSrcWidgetsBasic.CustomSingleChildLayout(
          key: (tree.flutterCustomSingleChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomSingleChildLayout.key) : null),
          delegate: (tree.flutterCustomSingleChildLayout.hasDelegate() ? evaluateRequiredFlutterSingleChildLayoutDelegateType(tree.flutterCustomSingleChildLayout.delegate) : missing('delegate')),
          child: (tree.flutterCustomSingleChildLayout.hasChild() ? evaluateWidgetType(tree.flutterCustomSingleChildLayout.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDecoratedBox:
      return $flutterSrcWidgetsContainer.DecoratedBox(
          key: (tree.flutterDecoratedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedBox.key) : null),
          decoration: (tree.flutterDecoratedBox.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedBox.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedBox.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedBox.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          child: (tree.flutterDecoratedBox.hasChild() ? evaluateWidgetType(tree.flutterDecoratedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDecoratedSliver:
      return $flutterSrcWidgetsDecoratedSliver.DecoratedSliver(
          key: (tree.flutterDecoratedSliver.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedSliver.key) : null),
          decoration: (tree.flutterDecoratedSliver.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedSliver.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedSliver.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedSliver.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          sliver: (tree.flutterDecoratedSliver.hasSliver() ? evaluateWidgetType(tree.flutterDecoratedSliver.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultAssetBundle:
      return $flutterSrcWidgetsBasic.DefaultAssetBundle(
          key: (tree.flutterDefaultAssetBundle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultAssetBundle.key) : null),
          bundle: (tree.flutterDefaultAssetBundle.hasBundle() ? evaluateRequiredFlutterAssetBundleType(tree.flutterDefaultAssetBundle.bundle) : missing('bundle')),
          child: (tree.flutterDefaultAssetBundle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultAssetBundle.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultSelectionStyle:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle(
          key: (tree.flutterDefaultSelectionStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyle.key) : null),
          cursorColor: (tree.flutterDefaultSelectionStyle.hasCursorColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.cursorColor) : null),
          selectionColor: (tree.flutterDefaultSelectionStyle.hasSelectionColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.selectionColor) : null),
          mouseCursor: null,
          child: (tree.flutterDefaultSelectionStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultSelectionStyle.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultSelectionStyleNamedFallback:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle.fallback(
          key: (tree.flutterDefaultSelectionStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyleNamedFallback.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultTextEditingShortcuts:
      return $flutterSrcWidgetsDefaultTextEditingShortcuts.DefaultTextEditingShortcuts(
          key: (tree.flutterDefaultTextEditingShortcuts.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextEditingShortcuts.key) : null),
          child: (tree.flutterDefaultTextEditingShortcuts.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextEditingShortcuts.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultTextHeightBehavior:
      return $flutterSrcWidgetsText.DefaultTextHeightBehavior(
          key: (tree.flutterDefaultTextHeightBehavior.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextHeightBehavior.key) : null),
          textHeightBehavior: (tree.flutterDefaultTextHeightBehavior.hasTextHeightBehavior() ? evaluateRequiredDartTextHeightBehaviorType(tree.flutterDefaultTextHeightBehavior.textHeightBehavior) : missing('textHeightBehavior')),
          child: (tree.flutterDefaultTextHeightBehavior.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextHeightBehavior.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultTextStyle:
      return $flutterSrcWidgetsText.DefaultTextStyle(
          key: (tree.flutterDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyle.key) : null),
          style: (tree.flutterDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterDefaultTextStyle.hasSoftWrap() ? tree.flutterDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterDefaultTextStyle.hasMaxLines() ? tree.flutterDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterDefaultTextStyle.textHeightBehavior) : null),
          child: (tree.flutterDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextStyle.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDefaultTextStyleNamedFallback:
      return $flutterSrcWidgetsText.DefaultTextStyle.fallback(
          key: (tree.flutterDefaultTextStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyleNamedFallback.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDelayedMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.DelayedMultiDragGestureRecognizer(
          delay: (tree.flutterDelayedMultiDragGestureRecognizer.hasDelay() ? evaluateRequiredDartDurationType(tree.flutterDelayedMultiDragGestureRecognizer.delay) : $flutterSrcGesturesConstants.kLongPressTimeout),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDirectionality:
      return $flutterSrcWidgetsBasic.Directionality(
          key: (tree.flutterDirectionality.hasKey() ? evaluateFlutterKeyType(tree.flutterDirectionality.key) : null),
          textDirection: (tree.flutterDirectionality.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterDirectionality.textDirection) : missing('textDirection')),
          child: (tree.flutterDirectionality.hasChild() ? evaluateRequiredWidgetType(tree.flutterDirectionality.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDismissible:
      return $flutterSrcWidgetsDismissible.Dismissible(
          key: (tree.flutterDismissible.hasKey() ? evaluateRequiredFlutterKeyType(tree.flutterDismissible.key) : missing('key')),
          child: (tree.flutterDismissible.hasChild() ? evaluateRequiredWidgetType(tree.flutterDismissible.child) : missing('child')),
          background: (tree.flutterDismissible.hasBackground() ? evaluateWidgetType(tree.flutterDismissible.background) : null),
          secondaryBackground: (tree.flutterDismissible.hasSecondaryBackground() ? evaluateWidgetType(tree.flutterDismissible.secondaryBackground) : null),
          confirmDismiss: null,
          onResize: null,
          onUpdate: null,
          onDismissed: null,
          direction: (tree.flutterDismissible.hasDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.flutterDismissible.direction) : $flutterSrcWidgetsDismissible.DismissDirection.horizontal),
          resizeDuration: (tree.flutterDismissible.hasResizeDuration() ? evaluateDartDurationType(tree.flutterDismissible.resizeDuration) : $dartCore.Duration(milliseconds: 300)),
          movementDuration: (tree.flutterDismissible.hasMovementDuration() ? evaluateRequiredDartDurationType(tree.flutterDismissible.movementDuration) : $dartCore.Duration(milliseconds: 200)),
          crossAxisEndOffset: (tree.flutterDismissible.hasCrossAxisEndOffset() ? tree.flutterDismissible.crossAxisEndOffset : 0.0),
          dragStartBehavior: (tree.flutterDismissible.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterDismissible.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          behavior: (tree.flutterDismissible.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDismissible.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.opaque));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDisplayFeatureSubScreen:
      return $flutterSrcWidgetsDisplayFeatureSubScreen.DisplayFeatureSubScreen(
          key: (tree.flutterDisplayFeatureSubScreen.hasKey() ? evaluateFlutterKeyType(tree.flutterDisplayFeatureSubScreen.key) : null),
          anchorPoint: (tree.flutterDisplayFeatureSubScreen.hasAnchorPoint() ? evaluateDartOffsetType(tree.flutterDisplayFeatureSubScreen.anchorPoint) : null),
          child: (tree.flutterDisplayFeatureSubScreen.hasChild() ? evaluateRequiredWidgetType(tree.flutterDisplayFeatureSubScreen.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDoubleTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.DoubleTapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDraggable:
      return $flutterSrcWidgetsDragTarget.Draggable(
          key: (tree.flutterDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggable.key) : null),
          child: (tree.flutterDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggable.child) : missing('child')),
          feedback: (tree.flutterDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterDraggable.axis) : null),
          childWhenDragging: (tree.flutterDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterDraggable.feedbackOffset) : $dartUi.Offset.zero),
          affinity: (tree.flutterDraggable.hasAffinity() ? enums.convertFlutterAxisType(tree.flutterDraggable.affinity) : null),
          maxSimultaneousDrags: (tree.flutterDraggable.hasMaxSimultaneousDrags() ? tree.flutterDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          ignoringFeedbackSemantics: (tree.flutterDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterDraggable.hasIgnoringFeedbackPointer() ? tree.flutterDraggable.ignoringFeedbackPointer : true),
          rootOverlay: (tree.flutterDraggable.hasRootOverlay() ? tree.flutterDraggable.rootOverlay : false),
          hitTestBehavior: (tree.flutterDraggable.hasHitTestBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDraggable.hitTestBehavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterDraggableScrollableActuator:
      return $flutterSrcWidgetsDraggableScrollableSheet.DraggableScrollableActuator(
          key: (tree.flutterDraggableScrollableActuator.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggableScrollableActuator.key) : null),
          child: (tree.flutterDraggableScrollableActuator.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggableScrollableActuator.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterEagerGestureRecognizer:
      return $flutterSrcGesturesEager.EagerGestureRecognizer(
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterEditableText:
      return $flutterSrcWidgetsEditableText.EditableText(
          key: (tree.flutterEditableText.hasKey() ? evaluateFlutterKeyType(tree.flutterEditableText.key) : null),
          controller: (tree.flutterEditableText.hasController() ? evaluateRequiredFlutterTextEditingControllerType(tree.flutterEditableText.controller) : missing('controller')),
          focusNode: (tree.flutterEditableText.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterEditableText.focusNode) : missing('focusNode')),
          readOnly: (tree.flutterEditableText.hasReadOnly() ? tree.flutterEditableText.readOnly : false),
          obscuringCharacter: (tree.flutterEditableText.hasObscuringCharacter() ? tree.flutterEditableText.obscuringCharacter : '•'),
          obscureText: (tree.flutterEditableText.hasObscureText() ? tree.flutterEditableText.obscureText : false),
          autocorrect: (tree.flutterEditableText.hasAutocorrect() ? tree.flutterEditableText.autocorrect : true),
          smartDashesType: (tree.flutterEditableText.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.flutterEditableText.smartDashesType) : null),
          smartQuotesType: (tree.flutterEditableText.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.flutterEditableText.smartQuotesType) : null),
          enableSuggestions: (tree.flutterEditableText.hasEnableSuggestions() ? tree.flutterEditableText.enableSuggestions : true),
          style: (tree.flutterEditableText.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterEditableText.style) : missing('style')),
          strutStyle: (tree.flutterEditableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterEditableText.strutStyle) : null),
          cursorColor: (tree.flutterEditableText.hasCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.cursorColor) : missing('cursorColor')),
          backgroundCursorColor: (tree.flutterEditableText.hasBackgroundCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.backgroundCursorColor) : missing('backgroundCursorColor')),
          textAlign: (tree.flutterEditableText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterEditableText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterEditableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterEditableText.textDirection) : null),
          locale: (tree.flutterEditableText.hasLocale() ? evaluateDartLocaleType(tree.flutterEditableText.locale) : null),
          textScaler: (tree.flutterEditableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterEditableText.textScaler) : null),
          maxLines: (tree.flutterEditableText.hasMaxLines() ? tree.flutterEditableText.maxLines : 1),
          minLines: (tree.flutterEditableText.hasMinLines() ? tree.flutterEditableText.minLines : null),
          expands: (tree.flutterEditableText.hasExpands() ? tree.flutterEditableText.expands : false),
          forceLine: (tree.flutterEditableText.hasForceLine() ? tree.flutterEditableText.forceLine : true),
          textHeightBehavior: (tree.flutterEditableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterEditableText.textHeightBehavior) : null),
          textWidthBasis: (tree.flutterEditableText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterEditableText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          autofocus: (tree.flutterEditableText.hasAutofocus() ? tree.flutterEditableText.autofocus : false),
          showCursor: (tree.flutterEditableText.hasShowCursor() ? tree.flutterEditableText.showCursor : null),
          showSelectionHandles: (tree.flutterEditableText.hasShowSelectionHandles() ? tree.flutterEditableText.showSelectionHandles : false),
          selectionColor: (tree.flutterEditableText.hasSelectionColor() ? evaluateDartColorType(tree.flutterEditableText.selectionColor) : null),
          selectionControls: (tree.flutterEditableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.flutterEditableText.selectionControls) : null),
          keyboardType: (tree.flutterEditableText.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.flutterEditableText.keyboardType) : null),
          textInputAction: (tree.flutterEditableText.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.flutterEditableText.textInputAction) : null),
          textCapitalization: (tree.flutterEditableText.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.flutterEditableText.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          onSelectionChanged: null,
          onSelectionHandleTapped: null,
          onTapOutside: null,
          inputFormatters: tree.flutterEditableText.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          mouseCursor: null,
          rendererIgnoresPointer: (tree.flutterEditableText.hasRendererIgnoresPointer() ? tree.flutterEditableText.rendererIgnoresPointer : false),
          cursorWidth: (tree.flutterEditableText.hasCursorWidth() ? tree.flutterEditableText.cursorWidth : 2.0),
          cursorHeight: (tree.flutterEditableText.hasCursorHeight() ? tree.flutterEditableText.cursorHeight : null),
          cursorRadius: (tree.flutterEditableText.hasCursorRadius() ? evaluateDartRadiusType(tree.flutterEditableText.cursorRadius) : null),
          cursorOpacityAnimates: (tree.flutterEditableText.hasCursorOpacityAnimates() ? tree.flutterEditableText.cursorOpacityAnimates : false),
          cursorOffset: (tree.flutterEditableText.hasCursorOffset() ? evaluateDartOffsetType(tree.flutterEditableText.cursorOffset) : null),
          paintCursorAboveText: (tree.flutterEditableText.hasPaintCursorAboveText() ? tree.flutterEditableText.paintCursorAboveText : false),
          selectionHeightStyle: (tree.flutterEditableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.flutterEditableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.flutterEditableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.flutterEditableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          scrollPadding: (tree.flutterEditableText.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterEditableText.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          keyboardAppearance: (tree.flutterEditableText.hasKeyboardAppearance() ? enums.convertRequiredDartBrightnessType(tree.flutterEditableText.keyboardAppearance) : $dartUi.Brightness.light),
          dragStartBehavior: (tree.flutterEditableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterEditableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.flutterEditableText.hasEnableInteractiveSelection() ? tree.flutterEditableText.enableInteractiveSelection : null),
          scrollController: (tree.flutterEditableText.hasScrollController() ? evaluateFlutterScrollControllerType(tree.flutterEditableText.scrollController) : null),
          scrollPhysics: (tree.flutterEditableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterEditableText.scrollPhysics) : null),
          autocorrectionTextRectColor: (tree.flutterEditableText.hasAutocorrectionTextRectColor() ? evaluateDartColorType(tree.flutterEditableText.autocorrectionTextRectColor) : null),
          autofillHints: tree.flutterEditableText.autofillHints,
          autofillClient: (tree.flutterEditableText.hasAutofillClient() ? evaluateFlutterAutofillClientType(tree.flutterEditableText.autofillClient) : null),
          clipBehavior: (tree.flutterEditableText.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterEditableText.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterEditableText.hasRestorationId() ? tree.flutterEditableText.restorationId : null),
          scrollBehavior: (tree.flutterEditableText.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterEditableText.scrollBehavior) : null),
          scribbleEnabled: (tree.flutterEditableText.hasScribbleEnabled() ? tree.flutterEditableText.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.flutterEditableText.hasEnableIMEPersonalizedLearning() ? tree.flutterEditableText.enableIMEPersonalizedLearning : true),
          contentInsertionConfiguration: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.flutterEditableText.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.flutterEditableText.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.flutterEditableText.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterEditableText.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          undoController: (tree.flutterEditableText.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.flutterEditableText.undoController) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterErrorWidgetNamedWithDetails:
      return $flutterSrcWidgetsFramework.ErrorWidget.withDetails(
          message: (tree.flutterErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterErrorWidgetNamedWithDetails.message : ''),
          error: (tree.flutterErrorWidgetNamedWithDetails.hasError() ? evaluateFlutterFlutterErrorType(tree.flutterErrorWidgetNamedWithDetails.error) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterExcludeFocus:
      return $flutterSrcWidgetsFocusScope.ExcludeFocus(
          key: (tree.flutterExcludeFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocus.key) : null),
          excluding: (tree.flutterExcludeFocus.hasExcluding() ? tree.flutterExcludeFocus.excluding : true),
          child: (tree.flutterExcludeFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocus.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterExcludeFocusTraversal:
      return $flutterSrcWidgetsFocusTraversal.ExcludeFocusTraversal(
          key: (tree.flutterExcludeFocusTraversal.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocusTraversal.key) : null),
          excluding: (tree.flutterExcludeFocusTraversal.hasExcluding() ? tree.flutterExcludeFocusTraversal.excluding : true),
          child: (tree.flutterExcludeFocusTraversal.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocusTraversal.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterExcludeSemantics:
      return $flutterSrcWidgetsBasic.ExcludeSemantics(
          key: (tree.flutterExcludeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeSemantics.key) : null),
          excluding: (tree.flutterExcludeSemantics.hasExcluding() ? tree.flutterExcludeSemantics.excluding : true),
          child: (tree.flutterExcludeSemantics.hasChild() ? evaluateWidgetType(tree.flutterExcludeSemantics.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterExpanded:
      return $flutterSrcWidgetsBasic.Expanded(
          key: (tree.flutterExpanded.hasKey() ? evaluateFlutterKeyType(tree.flutterExpanded.key) : null),
          flex: (tree.flutterExpanded.hasFlex() ? tree.flutterExpanded.flex : 1),
          child: (tree.flutterExpanded.hasChild() ? evaluateRequiredWidgetType(tree.flutterExpanded.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFadeInImageNamedAssetNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.assetNetwork(
          key: (tree.flutterFadeInImageNamedAssetNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedAssetNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterFadeInImageNamedAssetNetwork.image : missing('image')),
          imageErrorBuilder: null,
          bundle: (tree.flutterFadeInImageNamedAssetNetwork.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterFadeInImageNamedAssetNetwork.bundle) : null),
          placeholderScale: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderScale : null),
          imageScale: (tree.flutterFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterFadeInImageNamedAssetNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedAssetNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedAssetNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterFadeInImageNamedAssetNetwork.width : null),
          height: (tree.flutterFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterFadeInImageNamedAssetNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedAssetNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedAssetNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedAssetNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedAssetNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedAssetNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedAssetNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFadeInImageNamedMemoryNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.memoryNetwork(
          key: (tree.flutterFadeInImageNamedMemoryNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedMemoryNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholder() ? evaluateRequiredDartUint8ListType(tree.flutterFadeInImageNamedMemoryNetwork.placeholder) : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedMemoryNetwork.hasImage() ? tree.flutterFadeInImageNamedMemoryNetwork.image : missing('image')),
          imageErrorBuilder: null,
          placeholderScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderScale : 1.0),
          imageScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageScale() ? tree.flutterFadeInImageNamedMemoryNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedMemoryNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedMemoryNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedMemoryNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedMemoryNetwork.hasWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.width : null),
          height: (tree.flutterFadeInImageNamedMemoryNetwork.hasHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedMemoryNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedMemoryNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedMemoryNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedMemoryNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedMemoryNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedMemoryNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedMemoryNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFittedBox:
      return $flutterSrcWidgetsBasic.FittedBox(
          key: (tree.flutterFittedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFittedBox.key) : null),
          fit: (tree.flutterFittedBox.hasFit() ? enums.convertRequiredFlutterBoxFitType(tree.flutterFittedBox.fit) : $flutterSrcPaintingBoxFit.BoxFit.contain),
          alignment: (tree.flutterFittedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFittedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          clipBehavior: (tree.flutterFittedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFittedBox.clipBehavior) : $dartUi.Clip.none),
          child: (tree.flutterFittedBox.hasChild() ? evaluateWidgetType(tree.flutterFittedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlex:
      return $flutterSrcWidgetsBasic.Flex(
          key: (tree.flutterFlex.hasKey() ? evaluateFlutterKeyType(tree.flutterFlex.key) : null),
          direction: (tree.flutterFlex.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterFlex.direction) : missing('direction')),
          mainAxisAlignment: (tree.flutterFlex.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterFlex.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterFlex.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterFlex.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterFlex.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterFlex.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterFlex.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterFlex.textDirection) : null),
          verticalDirection: (tree.flutterFlex.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterFlex.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterFlex.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterFlex.textBaseline) : null),
          clipBehavior: (tree.flutterFlex.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlex.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterFlex.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlexible:
      return $flutterSrcWidgetsBasic.Flexible(
          key: (tree.flutterFlexible.hasKey() ? evaluateFlutterKeyType(tree.flutterFlexible.key) : null),
          flex: (tree.flutterFlexible.hasFlex() ? tree.flutterFlexible.flex : 1),
          fit: (tree.flutterFlexible.hasFit() ? enums.convertRequiredFlutterFlexFitType(tree.flutterFlexible.fit) : $flutterSrcRenderingFlex.FlexFit.loose),
          child: (tree.flutterFlexible.hasChild() ? evaluateRequiredWidgetType(tree.flutterFlexible.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlow:
      return $flutterSrcWidgetsBasic.Flow(
          key: (tree.flutterFlow.hasKey() ? evaluateFlutterKeyType(tree.flutterFlow.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlow.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlow.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlow.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlowNamedUnwrapped:
      return $flutterSrcWidgetsBasic.Flow.unwrapped(
          key: (tree.flutterFlowNamedUnwrapped.hasKey() ? evaluateFlutterKeyType(tree.flutterFlowNamedUnwrapped.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlowNamedUnwrapped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlowNamedUnwrapped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlowNamedUnwrapped.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlutterError:
      return $flutterSrcFoundationAssertions.FlutterError(
          (tree.flutterFlutterError.hasMessage() ? tree.flutterFlutterError.message : missing('message')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFlutterErrorNamedFromParts:
      return $flutterSrcFoundationAssertions.FlutterError.fromParts(
          tree.flutterFlutterErrorNamedFromParts.diagnostics.map((e) => evaluateRequiredFlutterDiagnosticsNodeType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocus:
      return $flutterSrcWidgetsFocusScope.Focus(
          key: (tree.flutterFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterFocus.key) : null),
          child: (tree.flutterFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocus.child) : missing('child')),
          focusNode: (tree.flutterFocus.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.focusNode) : null),
          parentNode: (tree.flutterFocus.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.parentNode) : null),
          autofocus: (tree.flutterFocus.hasAutofocus() ? tree.flutterFocus.autofocus : false),
          onFocusChange: null,
          onKeyEvent: null,
          onKey: null,
          canRequestFocus: (tree.flutterFocus.hasCanRequestFocus() ? tree.flutterFocus.canRequestFocus : null),
          skipTraversal: (tree.flutterFocus.hasSkipTraversal() ? tree.flutterFocus.skipTraversal : null),
          descendantsAreFocusable: (tree.flutterFocus.hasDescendantsAreFocusable() ? tree.flutterFocus.descendantsAreFocusable : null),
          descendantsAreTraversable: (tree.flutterFocus.hasDescendantsAreTraversable() ? tree.flutterFocus.descendantsAreTraversable : null),
          includeSemantics: (tree.flutterFocus.hasIncludeSemantics() ? tree.flutterFocus.includeSemantics : true),
          debugLabel: (tree.flutterFocus.hasDebugLabel() ? tree.flutterFocus.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusManager:
      return $flutterSrcWidgetsFocusManager.FocusManager(
          );
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.Focus.withExternalFocusNode(
          key: (tree.flutterFocusNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusNamedWithExternalFocusNode.child) : missing('child')),
          focusNode: (tree.flutterFocusNamedWithExternalFocusNode.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.focusNode) : missing('focusNode')),
          parentNode: (tree.flutterFocusNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null,
          includeSemantics: (tree.flutterFocusNamedWithExternalFocusNode.hasIncludeSemantics() ? tree.flutterFocusNamedWithExternalFocusNode.includeSemantics : missing('includeSemantics')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusNode:
      return $flutterSrcWidgetsFocusManager.FocusNode(
          debugLabel: (tree.flutterFocusNode.hasDebugLabel() ? tree.flutterFocusNode.debugLabel : null),
          onKey: null,
          onKeyEvent: null,
          skipTraversal: (tree.flutterFocusNode.hasSkipTraversal() ? tree.flutterFocusNode.skipTraversal : false),
          canRequestFocus: (tree.flutterFocusNode.hasCanRequestFocus() ? tree.flutterFocusNode.canRequestFocus : true),
          descendantsAreFocusable: (tree.flutterFocusNode.hasDescendantsAreFocusable() ? tree.flutterFocusNode.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusNode.hasDescendantsAreTraversable() ? tree.flutterFocusNode.descendantsAreTraversable : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusScope:
      return $flutterSrcWidgetsFocusScope.FocusScope(
          key: (tree.flutterFocusScope.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScope.key) : null),
          node: (tree.flutterFocusScope.hasNode() ? evaluateFlutterFocusScopeNodeType(tree.flutterFocusScope.node) : null),
          parentNode: (tree.flutterFocusScope.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScope.parentNode) : null),
          child: (tree.flutterFocusScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScope.child) : missing('child')),
          autofocus: (tree.flutterFocusScope.hasAutofocus() ? tree.flutterFocusScope.autofocus : false),
          onFocusChange: null,
          canRequestFocus: (tree.flutterFocusScope.hasCanRequestFocus() ? tree.flutterFocusScope.canRequestFocus : null),
          skipTraversal: (tree.flutterFocusScope.hasSkipTraversal() ? tree.flutterFocusScope.skipTraversal : null),
          onKeyEvent: null,
          onKey: null,
          debugLabel: (tree.flutterFocusScope.hasDebugLabel() ? tree.flutterFocusScope.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusScopeNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.FocusScope.withExternalFocusNode(
          key: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScopeNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScopeNamedWithExternalFocusNode.child) : missing('child')),
          focusScopeNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasFocusScopeNode() ? evaluateRequiredFlutterFocusScopeNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.focusScopeNode) : missing('focusScopeNode')),
          parentNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusScopeNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusScopeNode:
      return $flutterSrcWidgetsFocusManager.FocusScopeNode(
          debugLabel: (tree.flutterFocusScopeNode.hasDebugLabel() ? tree.flutterFocusScopeNode.debugLabel : null),
          onKeyEvent: null,
          onKey: null,
          skipTraversal: (tree.flutterFocusScopeNode.hasSkipTraversal() ? tree.flutterFocusScopeNode.skipTraversal : false),
          canRequestFocus: (tree.flutterFocusScopeNode.hasCanRequestFocus() ? tree.flutterFocusScopeNode.canRequestFocus : true),
          traversalEdgeBehavior: (tree.flutterFocusScopeNode.hasTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterFocusScopeNode.traversalEdgeBehavior) : $flutterSrcWidgetsFocusTraversal.TraversalEdgeBehavior.closedLoop));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusTraversalGroup:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalGroup(
          key: (tree.flutterFocusTraversalGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalGroup.key) : null),
          policy: (tree.flutterFocusTraversalGroup.hasPolicy() ? evaluateFlutterFocusTraversalPolicyType(tree.flutterFocusTraversalGroup.policy) : null),
          descendantsAreFocusable: (tree.flutterFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterFocusTraversalGroup.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterFocusTraversalGroup.descendantsAreTraversable : true),
          child: (tree.flutterFocusTraversalGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalGroup.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusTraversalOrder:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalOrder(
          key: (tree.flutterFocusTraversalOrder.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalOrder.key) : null),
          order: (tree.flutterFocusTraversalOrder.hasOrder() ? evaluateRequiredFlutterFocusOrderType(tree.flutterFocusTraversalOrder.order) : missing('order')),
          child: (tree.flutterFocusTraversalOrder.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalOrder.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFocusableActionDetector:
      return $flutterSrcWidgetsActions.FocusableActionDetector(
          key: (tree.flutterFocusableActionDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusableActionDetector.key) : null),
          enabled: (tree.flutterFocusableActionDetector.hasEnabled() ? tree.flutterFocusableActionDetector.enabled : true),
          focusNode: (tree.flutterFocusableActionDetector.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusableActionDetector.focusNode) : null),
          autofocus: (tree.flutterFocusableActionDetector.hasAutofocus() ? tree.flutterFocusableActionDetector.autofocus : false),
          descendantsAreFocusable: (tree.flutterFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterFocusableActionDetector.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterFocusableActionDetector.descendantsAreTraversable : true),
          shortcuts: null,
          actions: null,
          onShowFocusHighlight: null,
          onShowHoverHighlight: null,
          onFocusChange: null,
          includeFocusSemantics: (tree.flutterFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterFocusableActionDetector.includeFocusSemantics : true),
          child: (tree.flutterFocusableActionDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusableActionDetector.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFollowerLayer:
      return $flutterSrcRenderingLayer.FollowerLayer(
          link: (tree.flutterFollowerLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterFollowerLayer.link) : missing('link')),
          showWhenUnlinked: (tree.flutterFollowerLayer.hasShowWhenUnlinked() ? tree.flutterFollowerLayer.showWhenUnlinked : true),
          unlinkedOffset: (tree.flutterFollowerLayer.hasUnlinkedOffset() ? evaluateDartOffsetType(tree.flutterFollowerLayer.unlinkedOffset) : $dartUi.Offset.zero),
          linkedOffset: (tree.flutterFollowerLayer.hasLinkedOffset() ? evaluateDartOffsetType(tree.flutterFollowerLayer.linkedOffset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterForcePressGestureRecognizer:
      return $flutterSrcGesturesForcePress.ForcePressGestureRecognizer(
          startPressure: (tree.flutterForcePressGestureRecognizer.hasStartPressure() ? tree.flutterForcePressGestureRecognizer.startPressure : 0.4),
          peakPressure: (tree.flutterForcePressGestureRecognizer.hasPeakPressure() ? tree.flutterForcePressGestureRecognizer.peakPressure : 0.85),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterForm:
      return $flutterSrcWidgetsForm.Form(
          key: (tree.flutterForm.hasKey() ? evaluateFlutterKeyType(tree.flutterForm.key) : null),
          child: (tree.flutterForm.hasChild() ? evaluateRequiredWidgetType(tree.flutterForm.child) : missing('child')),
          canPop: (tree.flutterForm.hasCanPop() ? tree.flutterForm.canPop : null),
          onPopInvoked: null,
          onChanged: null,
          autovalidateMode: (tree.flutterForm.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.flutterForm.autovalidateMode) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFractionalTranslation:
      return $flutterSrcWidgetsBasic.FractionalTranslation(
          key: (tree.flutterFractionalTranslation.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionalTranslation.key) : null),
          translation: (tree.flutterFractionalTranslation.hasTranslation() ? evaluateRequiredDartOffsetType(tree.flutterFractionalTranslation.translation) : missing('translation')),
          transformHitTests: (tree.flutterFractionalTranslation.hasTransformHitTests() ? tree.flutterFractionalTranslation.transformHitTests : true),
          child: (tree.flutterFractionalTranslation.hasChild() ? evaluateWidgetType(tree.flutterFractionalTranslation.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterFractionallySizedBox:
      return $flutterSrcWidgetsBasic.FractionallySizedBox(
          key: (tree.flutterFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionallySizedBox.key) : null),
          alignment: (tree.flutterFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterFractionallySizedBox.hasWidthFactor() ? tree.flutterFractionallySizedBox.widthFactor : null),
          heightFactor: (tree.flutterFractionallySizedBox.hasHeightFactor() ? tree.flutterFractionallySizedBox.heightFactor : null),
          child: (tree.flutterFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterFractionallySizedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGestureDetector:
      return $flutterSrcWidgetsGestureDetector.GestureDetector(
          key: (tree.flutterGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterGestureDetector.key) : null),
          child: (tree.flutterGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterGestureDetector.child) : null),
          onTapDown: null,
          onTapUp: null,
          onTap: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSecondaryTapUp: null,
          onSecondaryTapCancel: null,
          onTertiaryTapDown: null,
          onTertiaryTapUp: null,
          onTertiaryTapCancel: null,
          onDoubleTapDown: null,
          onDoubleTap: null,
          onDoubleTapCancel: null,
          onLongPressDown: null,
          onLongPressCancel: null,
          onLongPress: null,
          onLongPressStart: null,
          onLongPressMoveUpdate: null,
          onLongPressUp: null,
          onLongPressEnd: null,
          onSecondaryLongPressDown: null,
          onSecondaryLongPressCancel: null,
          onSecondaryLongPress: null,
          onSecondaryLongPressStart: null,
          onSecondaryLongPressMoveUpdate: null,
          onSecondaryLongPressUp: null,
          onSecondaryLongPressEnd: null,
          onTertiaryLongPressDown: null,
          onTertiaryLongPressCancel: null,
          onTertiaryLongPress: null,
          onTertiaryLongPressStart: null,
          onTertiaryLongPressMoveUpdate: null,
          onTertiaryLongPressUp: null,
          onTertiaryLongPressEnd: null,
          onVerticalDragDown: null,
          onVerticalDragStart: null,
          onVerticalDragUpdate: null,
          onVerticalDragEnd: null,
          onVerticalDragCancel: null,
          onHorizontalDragDown: null,
          onHorizontalDragStart: null,
          onHorizontalDragUpdate: null,
          onHorizontalDragEnd: null,
          onHorizontalDragCancel: null,
          onForcePressStart: null,
          onForcePressPeak: null,
          onForcePressUpdate: null,
          onForcePressEnd: null,
          onPanDown: null,
          onPanStart: null,
          onPanUpdate: null,
          onPanEnd: null,
          onPanCancel: null,
          onScaleStart: null,
          onScaleUpdate: null,
          onScaleEnd: null,
          behavior: (tree.flutterGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterGestureDetector.hasExcludeFromSemantics() ? tree.flutterGestureDetector.excludeFromSemantics : false),
          dragStartBehavior: (tree.flutterGestureDetector.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGestureDetector.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          trackpadScrollCausesScale: (tree.flutterGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterGestureDetector.trackpadScrollCausesScale : false),
          trackpadScrollToScaleFactor: (tree.flutterGestureDetector.hasTrackpadScrollToScaleFactor() ? evaluateRequiredDartOffsetType(tree.flutterGestureDetector.trackpadScrollToScaleFactor) : $flutterSrcGesturesScale.kDefaultTrackpadScrollToScaleFactor),
          supportedDevices: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGlowingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.GlowingOverscrollIndicator(
          key: (tree.flutterGlowingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterGlowingOverscrollIndicator.key) : null),
          showLeading: (tree.flutterGlowingOverscrollIndicator.hasShowLeading() ? tree.flutterGlowingOverscrollIndicator.showLeading : true),
          showTrailing: (tree.flutterGlowingOverscrollIndicator.hasShowTrailing() ? tree.flutterGlowingOverscrollIndicator.showTrailing : true),
          axisDirection: (tree.flutterGlowingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterGlowingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          color: (tree.flutterGlowingOverscrollIndicator.hasColor() ? evaluateRequiredDartColorType(tree.flutterGlowingOverscrollIndicator.color) : missing('color')),
          child: (tree.flutterGlowingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterGlowingOverscrollIndicator.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGridPaper:
      return $flutterSrcWidgetsGridPaper.GridPaper(
          key: (tree.flutterGridPaper.hasKey() ? evaluateFlutterKeyType(tree.flutterGridPaper.key) : null),
          color: (tree.flutterGridPaper.hasColor() ? evaluateRequiredDartColorType(tree.flutterGridPaper.color) : $dartUi.Color(0x7FC3E8F3)),
          interval: (tree.flutterGridPaper.hasInterval() ? tree.flutterGridPaper.interval : 100.0),
          divisions: (tree.flutterGridPaper.hasDivisions() ? tree.flutterGridPaper.divisions : 2),
          subdivisions: (tree.flutterGridPaper.hasSubdivisions() ? tree.flutterGridPaper.subdivisions : 5),
          child: (tree.flutterGridPaper.hasChild() ? evaluateWidgetType(tree.flutterGridPaper.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGridView:
      return $flutterSrcWidgetsScrollView.GridView(
          key: (tree.flutterGridView.hasKey() ? evaluateFlutterKeyType(tree.flutterGridView.key) : null),
          scrollDirection: (tree.flutterGridView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridView.hasReverse() ? tree.flutterGridView.reverse : false),
          controller: (tree.flutterGridView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridView.controller) : null),
          primary: (tree.flutterGridView.hasPrimary() ? tree.flutterGridView.primary : null),
          physics: (tree.flutterGridView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridView.physics) : null),
          shrinkWrap: (tree.flutterGridView.hasShrinkWrap() ? tree.flutterGridView.shrinkWrap : false),
          padding: (tree.flutterGridView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridView.padding) : null),
          gridDelegate: (tree.flutterGridView.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridView.gridDelegate) : missing('gridDelegate')),
          addAutomaticKeepAlives: (tree.flutterGridView.hasAddAutomaticKeepAlives() ? tree.flutterGridView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridView.hasAddRepaintBoundaries() ? tree.flutterGridView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridView.hasAddSemanticIndexes() ? tree.flutterGridView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridView.hasCacheExtent() ? tree.flutterGridView.cacheExtent : null),
          children: tree.flutterGridView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridView.hasSemanticChildCount() ? tree.flutterGridView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterGridView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridView.clipBehavior) : $dartUi.Clip.hardEdge),
          keyboardDismissBehavior: (tree.flutterGridView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridView.hasRestorationId() ? tree.flutterGridView.restorationId : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGridViewNamedCount:
      return $flutterSrcWidgetsScrollView.GridView.count(
          key: (tree.flutterGridViewNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCount.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCount.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCount.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCount.hasReverse() ? tree.flutterGridViewNamedCount.reverse : false),
          controller: (tree.flutterGridViewNamedCount.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCount.controller) : null),
          primary: (tree.flutterGridViewNamedCount.hasPrimary() ? tree.flutterGridViewNamedCount.primary : null),
          physics: (tree.flutterGridViewNamedCount.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCount.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCount.hasShrinkWrap() ? tree.flutterGridViewNamedCount.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCount.padding) : null),
          crossAxisCount: (tree.flutterGridViewNamedCount.hasCrossAxisCount() ? tree.flutterGridViewNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterGridViewNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterGridViewNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedCount.hasChildAspectRatio() ? tree.flutterGridViewNamedCount.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedCount.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedCount.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterGridViewNamedCount.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedCount.hasCacheExtent() ? tree.flutterGridViewNamedCount.cacheExtent : null),
          children: tree.flutterGridViewNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedCount.hasSemanticChildCount() ? tree.flutterGridViewNamedCount.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCount.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCount.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCount.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCount.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCount.hasRestorationId() ? tree.flutterGridViewNamedCount.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCount.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCount.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGridViewNamedCustom:
      return $flutterSrcWidgetsScrollView.GridView.custom(
          key: (tree.flutterGridViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCustom.hasReverse() ? tree.flutterGridViewNamedCustom.reverse : false),
          controller: (tree.flutterGridViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCustom.controller) : null),
          primary: (tree.flutterGridViewNamedCustom.hasPrimary() ? tree.flutterGridViewNamedCustom.primary : null),
          physics: (tree.flutterGridViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCustom.hasShrinkWrap() ? tree.flutterGridViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCustom.padding) : null),
          gridDelegate: (tree.flutterGridViewNamedCustom.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridViewNamedCustom.gridDelegate) : missing('gridDelegate')),
          childrenDelegate: (tree.flutterGridViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterGridViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterGridViewNamedCustom.hasCacheExtent() ? tree.flutterGridViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterGridViewNamedCustom.hasSemanticChildCount() ? tree.flutterGridViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCustom.hasRestorationId() ? tree.flutterGridViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterGridViewNamedExtent:
      return $flutterSrcWidgetsScrollView.GridView.extent(
          key: (tree.flutterGridViewNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedExtent.key) : null),
          scrollDirection: (tree.flutterGridViewNamedExtent.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedExtent.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedExtent.hasReverse() ? tree.flutterGridViewNamedExtent.reverse : false),
          controller: (tree.flutterGridViewNamedExtent.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedExtent.controller) : null),
          primary: (tree.flutterGridViewNamedExtent.hasPrimary() ? tree.flutterGridViewNamedExtent.primary : null),
          physics: (tree.flutterGridViewNamedExtent.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedExtent.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedExtent.hasShrinkWrap() ? tree.flutterGridViewNamedExtent.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedExtent.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedExtent.padding) : null),
          maxCrossAxisExtent: (tree.flutterGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterGridViewNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterGridViewNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterGridViewNamedExtent.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedExtent.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedExtent.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterGridViewNamedExtent.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedExtent.hasCacheExtent() ? tree.flutterGridViewNamedExtent.cacheExtent : null),
          children: tree.flutterGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterGridViewNamedExtent.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedExtent.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedExtent.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedExtent.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedExtent.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedExtent.hasRestorationId() ? tree.flutterGridViewNamedExtent.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedExtent.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedExtent.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHeroControllerScope:
      return $flutterSrcWidgetsNavigator.HeroControllerScope(
          key: (tree.flutterHeroControllerScope.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScope.key) : null),
          controller: (tree.flutterHeroControllerScope.hasController() ? evaluateRequiredFlutterHeroControllerType(tree.flutterHeroControllerScope.controller) : missing('controller')),
          child: (tree.flutterHeroControllerScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScope.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHeroControllerScopeNamedNone:
      return $flutterSrcWidgetsNavigator.HeroControllerScope.none(
          key: (tree.flutterHeroControllerScopeNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScopeNamedNone.key) : null),
          child: (tree.flutterHeroControllerScopeNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScopeNamedNone.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHeroMode:
      return $flutterSrcWidgetsHeroes.HeroMode(
          key: (tree.flutterHeroMode.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroMode.key) : null),
          child: (tree.flutterHeroMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroMode.child) : missing('child')),
          enabled: (tree.flutterHeroMode.hasEnabled() ? tree.flutterHeroMode.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHorizontalDragGestureRecognizer:
      return $flutterSrcGesturesMonodrag.HorizontalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHorizontalMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.HorizontalMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHtmlElementView:
      return $flutterSrcWidgetsPlatformView.HtmlElementView(
          key: (tree.flutterHtmlElementView.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementView.key) : null),
          viewType: (tree.flutterHtmlElementView.hasViewType() ? tree.flutterHtmlElementView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          creationParams: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterHtmlElementViewNamedFromTagName:
      return $flutterSrcWidgetsPlatformView.HtmlElementView.fromTagName(
          key: (tree.flutterHtmlElementViewNamedFromTagName.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementViewNamedFromTagName.key) : null),
          tagName: (tree.flutterHtmlElementViewNamedFromTagName.hasTagName() ? tree.flutterHtmlElementViewNamedFromTagName.tagName : missing('tagName')),
          isVisible: (tree.flutterHtmlElementViewNamedFromTagName.hasIsVisible() ? tree.flutterHtmlElementViewNamedFromTagName.isVisible : true),
          onElementCreated: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIcon:
      return $flutterSrcWidgetsIcon.Icon(
          (tree.flutterIcon.hasIcon() ? evaluateFlutterIconDataType(tree.flutterIcon.icon) : null),
          key: (tree.flutterIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterIcon.key) : null),
          size: (tree.flutterIcon.hasSize() ? tree.flutterIcon.size : null),
          fill: (tree.flutterIcon.hasFill() ? tree.flutterIcon.fill : null),
          weight: (tree.flutterIcon.hasWeight() ? tree.flutterIcon.weight : null),
          grade: (tree.flutterIcon.hasGrade() ? tree.flutterIcon.grade : null),
          opticalSize: (tree.flutterIcon.hasOpticalSize() ? tree.flutterIcon.opticalSize : null),
          color: (tree.flutterIcon.hasColor() ? evaluateDartColorType(tree.flutterIcon.color) : null),
          shadows: tree.flutterIcon.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList(),
          semanticLabel: (tree.flutterIcon.hasSemanticLabel() ? tree.flutterIcon.semanticLabel : null),
          textDirection: (tree.flutterIcon.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIcon.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIconTheme:
      return $flutterSrcWidgetsIconTheme.IconTheme(
          key: (tree.flutterIconTheme.hasKey() ? evaluateFlutterKeyType(tree.flutterIconTheme.key) : null),
          data: (tree.flutterIconTheme.hasData() ? evaluateRequiredFlutterIconThemeDataType(tree.flutterIconTheme.data) : missing('data')),
          child: (tree.flutterIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.flutterIconTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIgnoreBaseline:
      return $flutterSrcWidgetsBasic.IgnoreBaseline(
          key: (tree.flutterIgnoreBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnoreBaseline.key) : null),
          child: (tree.flutterIgnoreBaseline.hasChild() ? evaluateWidgetType(tree.flutterIgnoreBaseline.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIgnorePointer:
      return $flutterSrcWidgetsBasic.IgnorePointer(
          key: (tree.flutterIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnorePointer.key) : null),
          ignoring: (tree.flutterIgnorePointer.hasIgnoring() ? tree.flutterIgnorePointer.ignoring : true),
          child: (tree.flutterIgnorePointer.hasChild() ? evaluateWidgetType(tree.flutterIgnorePointer.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageFilterLayer:
      return $flutterSrcRenderingLayer.ImageFilterLayer(
          imageFilter: (tree.flutterImageFilterLayer.hasImageFilter() ? evaluateDartImageFilterType(tree.flutterImageFilterLayer.imageFilter) : null),
          offset: (tree.flutterImageFilterLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterImageFilterLayer.offset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageFiltered:
      return $flutterSrcWidgetsImageFilter.ImageFiltered(
          key: (tree.flutterImageFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterImageFiltered.key) : null),
          imageFilter: (tree.flutterImageFiltered.hasImageFilter() ? evaluateRequiredDartImageFilterType(tree.flutterImageFiltered.imageFilter) : missing('imageFilter')),
          child: (tree.flutterImageFiltered.hasChild() ? evaluateWidgetType(tree.flutterImageFiltered.child) : null),
          enabled: (tree.flutterImageFiltered.hasEnabled() ? tree.flutterImageFiltered.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageIcon:
      return $flutterSrcWidgetsImageIcon.ImageIcon(
          null,
          key: (tree.flutterImageIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterImageIcon.key) : null),
          size: (tree.flutterImageIcon.hasSize() ? tree.flutterImageIcon.size : null),
          color: (tree.flutterImageIcon.hasColor() ? evaluateDartColorType(tree.flutterImageIcon.color) : null),
          semanticLabel: (tree.flutterImageIcon.hasSemanticLabel() ? tree.flutterImageIcon.semanticLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageNamedAsset:
      return $flutterSrcWidgetsImage.Image.asset(
          (tree.flutterImageNamedAsset.hasName() ? tree.flutterImageNamedAsset.name : missing('name')),
          key: (tree.flutterImageNamedAsset.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedAsset.key) : null),
          bundle: (tree.flutterImageNamedAsset.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterImageNamedAsset.bundle) : null),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedAsset.hasSemanticLabel() ? tree.flutterImageNamedAsset.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterImageNamedAsset.excludeFromSemantics : false),
          scale: (tree.flutterImageNamedAsset.hasScale() ? tree.flutterImageNamedAsset.scale : null),
          width: (tree.flutterImageNamedAsset.hasWidth() ? tree.flutterImageNamedAsset.width : null),
          height: (tree.flutterImageNamedAsset.hasHeight() ? tree.flutterImageNamedAsset.height : null),
          color: (tree.flutterImageNamedAsset.hasColor() ? evaluateDartColorType(tree.flutterImageNamedAsset.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedAsset.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedAsset.colorBlendMode) : null),
          fit: (tree.flutterImageNamedAsset.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedAsset.fit) : null),
          alignment: (tree.flutterImageNamedAsset.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedAsset.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedAsset.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedAsset.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedAsset.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedAsset.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedAsset.hasMatchTextDirection() ? tree.flutterImageNamedAsset.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedAsset.hasGaplessPlayback() ? tree.flutterImageNamedAsset.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedAsset.hasIsAntiAlias() ? tree.flutterImageNamedAsset.isAntiAlias : false),
          package: (tree.flutterImageNamedAsset.hasPackage() ? tree.flutterImageNamedAsset.package : null),
          filterQuality: (tree.flutterImageNamedAsset.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedAsset.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedAsset.hasCacheWidth() ? tree.flutterImageNamedAsset.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedAsset.hasCacheHeight() ? tree.flutterImageNamedAsset.cacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageNamedFile:
      return $flutterSrcWidgetsImage.Image.file(
          (tree.flutterImageNamedFile.hasFile() ? evaluateRequiredDartFileType(tree.flutterImageNamedFile.file) : missing('file')),
          key: (tree.flutterImageNamedFile.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedFile.key) : null),
          scale: (tree.flutterImageNamedFile.hasScale() ? tree.flutterImageNamedFile.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedFile.hasSemanticLabel() ? tree.flutterImageNamedFile.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedFile.hasExcludeFromSemantics() ? tree.flutterImageNamedFile.excludeFromSemantics : false),
          width: (tree.flutterImageNamedFile.hasWidth() ? tree.flutterImageNamedFile.width : null),
          height: (tree.flutterImageNamedFile.hasHeight() ? tree.flutterImageNamedFile.height : null),
          color: (tree.flutterImageNamedFile.hasColor() ? evaluateDartColorType(tree.flutterImageNamedFile.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedFile.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedFile.colorBlendMode) : null),
          fit: (tree.flutterImageNamedFile.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedFile.fit) : null),
          alignment: (tree.flutterImageNamedFile.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedFile.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedFile.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedFile.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedFile.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedFile.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedFile.hasMatchTextDirection() ? tree.flutterImageNamedFile.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedFile.hasGaplessPlayback() ? tree.flutterImageNamedFile.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedFile.hasIsAntiAlias() ? tree.flutterImageNamedFile.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedFile.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedFile.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedFile.hasCacheWidth() ? tree.flutterImageNamedFile.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedFile.hasCacheHeight() ? tree.flutterImageNamedFile.cacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageNamedMemory:
      return $flutterSrcWidgetsImage.Image.memory(
          (tree.flutterImageNamedMemory.hasBytes() ? evaluateRequiredDartUint8ListType(tree.flutterImageNamedMemory.bytes) : missing('bytes')),
          key: (tree.flutterImageNamedMemory.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedMemory.key) : null),
          scale: (tree.flutterImageNamedMemory.hasScale() ? tree.flutterImageNamedMemory.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedMemory.hasSemanticLabel() ? tree.flutterImageNamedMemory.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedMemory.hasExcludeFromSemantics() ? tree.flutterImageNamedMemory.excludeFromSemantics : false),
          width: (tree.flutterImageNamedMemory.hasWidth() ? tree.flutterImageNamedMemory.width : null),
          height: (tree.flutterImageNamedMemory.hasHeight() ? tree.flutterImageNamedMemory.height : null),
          color: (tree.flutterImageNamedMemory.hasColor() ? evaluateDartColorType(tree.flutterImageNamedMemory.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedMemory.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedMemory.colorBlendMode) : null),
          fit: (tree.flutterImageNamedMemory.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedMemory.fit) : null),
          alignment: (tree.flutterImageNamedMemory.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedMemory.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedMemory.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedMemory.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedMemory.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedMemory.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedMemory.hasMatchTextDirection() ? tree.flutterImageNamedMemory.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedMemory.hasGaplessPlayback() ? tree.flutterImageNamedMemory.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedMemory.hasIsAntiAlias() ? tree.flutterImageNamedMemory.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedMemory.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedMemory.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedMemory.hasCacheWidth() ? tree.flutterImageNamedMemory.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedMemory.hasCacheHeight() ? tree.flutterImageNamedMemory.cacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImageNamedNetwork:
      return $flutterSrcWidgetsImage.Image.network(
          (tree.flutterImageNamedNetwork.hasSrc() ? tree.flutterImageNamedNetwork.src : missing('src')),
          key: (tree.flutterImageNamedNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedNetwork.key) : null),
          scale: (tree.flutterImageNamedNetwork.hasScale() ? tree.flutterImageNamedNetwork.scale : 1.0),
          frameBuilder: null,
          loadingBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedNetwork.hasSemanticLabel() ? tree.flutterImageNamedNetwork.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterImageNamedNetwork.excludeFromSemantics : false),
          width: (tree.flutterImageNamedNetwork.hasWidth() ? tree.flutterImageNamedNetwork.width : null),
          height: (tree.flutterImageNamedNetwork.hasHeight() ? tree.flutterImageNamedNetwork.height : null),
          color: (tree.flutterImageNamedNetwork.hasColor() ? evaluateDartColorType(tree.flutterImageNamedNetwork.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedNetwork.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedNetwork.colorBlendMode) : null),
          fit: (tree.flutterImageNamedNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedNetwork.fit) : null),
          alignment: (tree.flutterImageNamedNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedNetwork.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedNetwork.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedNetwork.hasMatchTextDirection() ? tree.flutterImageNamedNetwork.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedNetwork.hasGaplessPlayback() ? tree.flutterImageNamedNetwork.gaplessPlayback : false),
          filterQuality: (tree.flutterImageNamedNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedNetwork.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterImageNamedNetwork.hasIsAntiAlias() ? tree.flutterImageNamedNetwork.isAntiAlias : false),
          headers: null,
          cacheWidth: (tree.flutterImageNamedNetwork.hasCacheWidth() ? tree.flutterImageNamedNetwork.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedNetwork.hasCacheHeight() ? tree.flutterImageNamedNetwork.cacheHeight : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterImmediateMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.ImmediateMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIndexedSemantics:
      return $flutterSrcWidgetsBasic.IndexedSemantics(
          key: (tree.flutterIndexedSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedSemantics.key) : null),
          index: (tree.flutterIndexedSemantics.hasIndex() ? tree.flutterIndexedSemantics.index : missing('index')),
          child: (tree.flutterIndexedSemantics.hasChild() ? evaluateWidgetType(tree.flutterIndexedSemantics.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIndexedStack:
      return $flutterSrcWidgetsBasic.IndexedStack(
          key: (tree.flutterIndexedStack.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedStack.key) : null),
          alignment: (tree.flutterIndexedStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterIndexedStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterIndexedStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIndexedStack.textDirection) : null),
          clipBehavior: (tree.flutterIndexedStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterIndexedStack.clipBehavior) : $dartUi.Clip.hardEdge),
          sizing: (tree.flutterIndexedStack.hasSizing() ? enums.convertRequiredFlutterStackFitType(tree.flutterIndexedStack.sizing) : $flutterSrcRenderingStack.StackFit.loose),
          index: (tree.flutterIndexedStack.hasIndex() ? tree.flutterIndexedStack.index : 0),
          children: tree.flutterIndexedStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterInheritedElement:
      return $flutterSrcWidgetsFramework.InheritedElement(
          (tree.flutterInheritedElement.hasWidget() ? evaluateRequiredFlutterInheritedWidgetType(tree.flutterInheritedElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterInteractiveViewer:
      return $flutterSrcWidgetsInteractiveViewer.InteractiveViewer(
          key: (tree.flutterInteractiveViewer.hasKey() ? evaluateFlutterKeyType(tree.flutterInteractiveViewer.key) : null),
          clipBehavior: (tree.flutterInteractiveViewer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterInteractiveViewer.clipBehavior) : $dartUi.Clip.hardEdge),
          panAxis: (tree.flutterInteractiveViewer.hasPanAxis() ? enums.convertRequiredFlutterPanAxisType(tree.flutterInteractiveViewer.panAxis) : $flutterSrcWidgetsInteractiveViewer.PanAxis.free),
          boundaryMargin: (tree.flutterInteractiveViewer.hasBoundaryMargin() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterInteractiveViewer.boundaryMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          constrained: (tree.flutterInteractiveViewer.hasConstrained() ? tree.flutterInteractiveViewer.constrained : true),
          maxScale: (tree.flutterInteractiveViewer.hasMaxScale() ? tree.flutterInteractiveViewer.maxScale : 2.5),
          minScale: (tree.flutterInteractiveViewer.hasMinScale() ? tree.flutterInteractiveViewer.minScale : 0.8),
          interactionEndFrictionCoefficient: (tree.flutterInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterInteractiveViewer.interactionEndFrictionCoefficient : 0.0000135),
          onInteractionEnd: null,
          onInteractionStart: null,
          onInteractionUpdate: null,
          panEnabled: (tree.flutterInteractiveViewer.hasPanEnabled() ? tree.flutterInteractiveViewer.panEnabled : true),
          scaleEnabled: (tree.flutterInteractiveViewer.hasScaleEnabled() ? tree.flutterInteractiveViewer.scaleEnabled : true),
          scaleFactor: (tree.flutterInteractiveViewer.hasScaleFactor() ? tree.flutterInteractiveViewer.scaleFactor : $flutterSrcGesturesScale.kDefaultMouseScrollToScaleFactor),
          transformationController: (tree.flutterInteractiveViewer.hasTransformationController() ? evaluateFlutterTransformationControllerType(tree.flutterInteractiveViewer.transformationController) : null),
          alignment: (tree.flutterInteractiveViewer.hasAlignment() ? evaluateFlutterAlignmentType(tree.flutterInteractiveViewer.alignment) : null),
          trackpadScrollCausesScale: (tree.flutterInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterInteractiveViewer.trackpadScrollCausesScale : false),
          child: (tree.flutterInteractiveViewer.hasChild() ? evaluateRequiredWidgetType(tree.flutterInteractiveViewer.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIntrinsicHeight:
      return $flutterSrcWidgetsBasic.IntrinsicHeight(
          key: (tree.flutterIntrinsicHeight.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicHeight.key) : null),
          child: (tree.flutterIntrinsicHeight.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicHeight.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterIntrinsicWidth:
      return $flutterSrcWidgetsBasic.IntrinsicWidth(
          key: (tree.flutterIntrinsicWidth.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicWidth.key) : null),
          stepWidth: (tree.flutterIntrinsicWidth.hasStepWidth() ? tree.flutterIntrinsicWidth.stepWidth : null),
          stepHeight: (tree.flutterIntrinsicWidth.hasStepHeight() ? tree.flutterIntrinsicWidth.stepHeight : null),
          child: (tree.flutterIntrinsicWidth.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicWidth.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterKeepAlive:
      return $flutterSrcWidgetsSliver.KeepAlive(
          key: (tree.flutterKeepAlive.hasKey() ? evaluateFlutterKeyType(tree.flutterKeepAlive.key) : null),
          keepAlive: (tree.flutterKeepAlive.hasKeepAlive() ? tree.flutterKeepAlive.keepAlive : missing('keepAlive')),
          child: (tree.flutterKeepAlive.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeepAlive.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterKeyboardListener:
      return $flutterSrcWidgetsKeyboardListener.KeyboardListener(
          key: (tree.flutterKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyboardListener.key) : null),
          focusNode: (tree.flutterKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterKeyboardListener.hasAutofocus() ? tree.flutterKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterKeyboardListener.hasIncludeSemantics() ? tree.flutterKeyboardListener.includeSemantics : true),
          onKeyEvent: null,
          child: (tree.flutterKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyboardListener.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterKeyedSubtree:
      return $flutterSrcWidgetsBasic.KeyedSubtree(
          key: (tree.flutterKeyedSubtree.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyedSubtree.key) : null),
          child: (tree.flutterKeyedSubtree.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtree.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterKeyedSubtreeNamedWrap:
      return $flutterSrcWidgetsBasic.KeyedSubtree.wrap(
          (tree.flutterKeyedSubtreeNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtreeNamedWrap.child) : missing('child')),
          (tree.flutterKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLeaderLayer:
      return $flutterSrcRenderingLayer.LeaderLayer(
          link: (tree.flutterLeaderLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterLeaderLayer.link) : missing('link')),
          offset: (tree.flutterLeaderLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterLeaderLayer.offset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLeafRenderObjectElement:
      return $flutterSrcWidgetsFramework.LeafRenderObjectElement(
          (tree.flutterLeafRenderObjectElement.hasWidget() ? evaluateRequiredFlutterLeafRenderObjectWidgetType(tree.flutterLeafRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLimitedBox:
      return $flutterSrcWidgetsBasic.LimitedBox(
          key: (tree.flutterLimitedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterLimitedBox.key) : null),
          maxWidth: (tree.flutterLimitedBox.hasMaxWidth() ? tree.flutterLimitedBox.maxWidth : $dartCore.double.infinity),
          maxHeight: (tree.flutterLimitedBox.hasMaxHeight() ? tree.flutterLimitedBox.maxHeight : $dartCore.double.infinity),
          child: (tree.flutterLimitedBox.hasChild() ? evaluateWidgetType(tree.flutterLimitedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListBody:
      return $flutterSrcWidgetsBasic.ListBody(
          key: (tree.flutterListBody.hasKey() ? evaluateFlutterKeyType(tree.flutterListBody.key) : null),
          mainAxis: (tree.flutterListBody.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.flutterListBody.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListBody.hasReverse() ? tree.flutterListBody.reverse : false),
          children: tree.flutterListBody.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListView:
      return $flutterSrcWidgetsScrollView.ListView(
          key: (tree.flutterListView.hasKey() ? evaluateFlutterKeyType(tree.flutterListView.key) : null),
          scrollDirection: (tree.flutterListView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListView.hasReverse() ? tree.flutterListView.reverse : false),
          controller: (tree.flutterListView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListView.controller) : null),
          primary: (tree.flutterListView.hasPrimary() ? tree.flutterListView.primary : null),
          physics: (tree.flutterListView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListView.physics) : null),
          shrinkWrap: (tree.flutterListView.hasShrinkWrap() ? tree.flutterListView.shrinkWrap : false),
          padding: (tree.flutterListView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListView.padding) : null),
          itemExtent: (tree.flutterListView.hasItemExtent() ? tree.flutterListView.itemExtent : null),
          itemExtentBuilder: null,
          prototypeItem: (tree.flutterListView.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListView.prototypeItem) : null),
          addAutomaticKeepAlives: (tree.flutterListView.hasAddAutomaticKeepAlives() ? tree.flutterListView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterListView.hasAddRepaintBoundaries() ? tree.flutterListView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterListView.hasAddSemanticIndexes() ? tree.flutterListView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterListView.hasCacheExtent() ? tree.flutterListView.cacheExtent : null),
          children: tree.flutterListView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterListView.hasSemanticChildCount() ? tree.flutterListView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListView.hasRestorationId() ? tree.flutterListView.restorationId : null),
          clipBehavior: (tree.flutterListView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListViewNamedCustom:
      return $flutterSrcWidgetsScrollView.ListView.custom(
          key: (tree.flutterListViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterListViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterListViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListViewNamedCustom.hasReverse() ? tree.flutterListViewNamedCustom.reverse : false),
          controller: (tree.flutterListViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListViewNamedCustom.controller) : null),
          primary: (tree.flutterListViewNamedCustom.hasPrimary() ? tree.flutterListViewNamedCustom.primary : null),
          physics: (tree.flutterListViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterListViewNamedCustom.hasShrinkWrap() ? tree.flutterListViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterListViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListViewNamedCustom.padding) : null),
          itemExtent: (tree.flutterListViewNamedCustom.hasItemExtent() ? tree.flutterListViewNamedCustom.itemExtent : null),
          prototypeItem: (tree.flutterListViewNamedCustom.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListViewNamedCustom.prototypeItem) : null),
          itemExtentBuilder: null,
          childrenDelegate: (tree.flutterListViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterListViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterListViewNamedCustom.hasCacheExtent() ? tree.flutterListViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterListViewNamedCustom.hasSemanticChildCount() ? tree.flutterListViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListViewNamedCustom.hasRestorationId() ? tree.flutterListViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterListViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListWheelElement:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelElement(
          (tree.flutterListWheelElement.hasWidget() ? evaluateRequiredFlutterListWheelViewportType(tree.flutterListWheelElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListWheelScrollView:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView(
          key: (tree.flutterListWheelScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollView.key) : null),
          controller: (tree.flutterListWheelScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollView.controller) : null),
          physics: (tree.flutterListWheelScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollView.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollView.hasDiameterRatio() ? tree.flutterListWheelScrollView.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollView.hasPerspective() ? tree.flutterListWheelScrollView.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollView.hasOffAxisFraction() ? tree.flutterListWheelScrollView.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollView.hasUseMagnifier() ? tree.flutterListWheelScrollView.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollView.hasMagnification() ? tree.flutterListWheelScrollView.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollView.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollView.hasItemExtent() ? tree.flutterListWheelScrollView.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollView.hasSqueeze() ? tree.flutterListWheelScrollView.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollView.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollView.hasRestorationId() ? tree.flutterListWheelScrollView.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollView.scrollBehavior) : null),
          children: tree.flutterListWheelScrollView.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListWheelScrollViewNamedUseDelegate:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView.useDelegate(
          key: (tree.flutterListWheelScrollViewNamedUseDelegate.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollViewNamedUseDelegate.key) : null),
          controller: (tree.flutterListWheelScrollViewNamedUseDelegate.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollViewNamedUseDelegate.controller) : null),
          physics: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollViewNamedUseDelegate.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollViewNamedUseDelegate.hasDiameterRatio() ? tree.flutterListWheelScrollViewNamedUseDelegate.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPerspective() ? tree.flutterListWheelScrollViewNamedUseDelegate.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOffAxisFraction() ? tree.flutterListWheelScrollViewNamedUseDelegate.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollViewNamedUseDelegate.hasUseMagnifier() ? tree.flutterListWheelScrollViewNamedUseDelegate.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollViewNamedUseDelegate.hasMagnification() ? tree.flutterListWheelScrollViewNamedUseDelegate.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollViewNamedUseDelegate.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollViewNamedUseDelegate.hasItemExtent() ? tree.flutterListWheelScrollViewNamedUseDelegate.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollViewNamedUseDelegate.hasSqueeze() ? tree.flutterListWheelScrollViewNamedUseDelegate.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollViewNamedUseDelegate.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollViewNamedUseDelegate.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRestorationId() ? tree.flutterListWheelScrollViewNamedUseDelegate.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollViewNamedUseDelegate.scrollBehavior) : null),
          childDelegate: (tree.flutterListWheelScrollViewNamedUseDelegate.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelScrollViewNamedUseDelegate.childDelegate) : missing('childDelegate')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListWheelViewport:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelViewport(
          key: (tree.flutterListWheelViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelViewport.key) : null),
          diameterRatio: (tree.flutterListWheelViewport.hasDiameterRatio() ? tree.flutterListWheelViewport.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelViewport.hasPerspective() ? tree.flutterListWheelViewport.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelViewport.hasOffAxisFraction() ? tree.flutterListWheelViewport.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelViewport.hasUseMagnifier() ? tree.flutterListWheelViewport.useMagnifier : false),
          magnification: (tree.flutterListWheelViewport.hasMagnification() ? tree.flutterListWheelViewport.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelViewport.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelViewport.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelViewport.hasItemExtent() ? tree.flutterListWheelViewport.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelViewport.hasSqueeze() ? tree.flutterListWheelViewport.squeeze : 1.0),
          renderChildrenOutsideViewport: (tree.flutterListWheelViewport.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelViewport.renderChildrenOutsideViewport : false),
          offset: (tree.flutterListWheelViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterListWheelViewport.offset) : missing('offset')),
          childDelegate: (tree.flutterListWheelViewport.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelViewport.childDelegate) : missing('childDelegate')),
          clipBehavior: (tree.flutterListWheelViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterListener:
      return $flutterSrcWidgetsBasic.Listener(
          key: (tree.flutterListener.hasKey() ? evaluateFlutterKeyType(tree.flutterListener.key) : null),
          onPointerDown: null,
          onPointerMove: null,
          onPointerUp: null,
          onPointerHover: null,
          onPointerCancel: null,
          onPointerPanZoomStart: null,
          onPointerPanZoomUpdate: null,
          onPointerPanZoomEnd: null,
          onPointerSignal: null,
          behavior: (tree.flutterListener.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterListener.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterListener.hasChild() ? evaluateWidgetType(tree.flutterListener.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLocalizationsNamedOverride:
      return $flutterSrcWidgetsLocalizations.Localizations.override(
          key: (tree.flutterLocalizationsNamedOverride.hasKey() ? evaluateFlutterKeyType(tree.flutterLocalizationsNamedOverride.key) : null),
          context: (tree.flutterLocalizationsNamedOverride.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterLocalizationsNamedOverride.context) : missing('context')),
          locale: (tree.flutterLocalizationsNamedOverride.hasLocale() ? evaluateDartLocaleType(tree.flutterLocalizationsNamedOverride.locale) : null),
          delegates: null,
          child: (tree.flutterLocalizationsNamedOverride.hasChild() ? evaluateWidgetType(tree.flutterLocalizationsNamedOverride.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLongPressDraggable:
      return $flutterSrcWidgetsDragTarget.LongPressDraggable(
          key: (tree.flutterLongPressDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterLongPressDraggable.key) : null),
          child: (tree.flutterLongPressDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.child) : missing('child')),
          feedback: (tree.flutterLongPressDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterLongPressDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterLongPressDraggable.axis) : null),
          childWhenDragging: (tree.flutterLongPressDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterLongPressDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterLongPressDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterLongPressDraggable.feedbackOffset) : $dartUi.Offset.zero),
          maxSimultaneousDrags: (tree.flutterLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterLongPressDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          hapticFeedbackOnStart: (tree.flutterLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterLongPressDraggable.hapticFeedbackOnStart : true),
          ignoringFeedbackSemantics: (tree.flutterLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterLongPressDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterLongPressDraggable.ignoringFeedbackPointer : true),
          delay: (tree.flutterLongPressDraggable.hasDelay() ? evaluateRequiredDartDurationType(tree.flutterLongPressDraggable.delay) : $flutterSrcGesturesConstants.kLongPressTimeout),
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLongPressGestureRecognizer:
      return $flutterSrcGesturesLongPress.LongPressGestureRecognizer(
          duration: (tree.flutterLongPressGestureRecognizer.hasDuration() ? evaluateDartDurationType(tree.flutterLongPressGestureRecognizer.duration) : null),
          postAcceptSlopTolerance: (tree.flutterLongPressGestureRecognizer.hasPostAcceptSlopTolerance() ? tree.flutterLongPressGestureRecognizer.postAcceptSlopTolerance : $flutterSrcGesturesConstants.kTouchSlop),
          supportedDevices: null,
          debugOwner: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterLookupBoundary:
      return $flutterSrcWidgetsLookupBoundary.LookupBoundary(
          key: (tree.flutterLookupBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterLookupBoundary.key) : null),
          child: (tree.flutterLookupBoundary.hasChild() ? evaluateRequiredWidgetType(tree.flutterLookupBoundary.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMediaQuery:
      return $flutterSrcWidgetsMediaQuery.MediaQuery(
          key: (tree.flutterMediaQuery.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQuery.key) : null),
          data: (tree.flutterMediaQuery.hasData() ? evaluateRequiredFlutterMediaQueryDataType(tree.flutterMediaQuery.data) : missing('data')),
          child: (tree.flutterMediaQuery.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQuery.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMediaQueryNamedRemovePadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removePadding(
          key: (tree.flutterMediaQueryNamedRemovePadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemovePadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemovePadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemovePadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemovePadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemovePadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemovePadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemovePadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemovePadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemovePadding.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMediaQueryNamedRemoveViewInsets:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewInsets(
          key: (tree.flutterMediaQueryNamedRemoveViewInsets.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewInsets.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewInsets.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewInsets.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewInsets.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewInsets.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMediaQueryNamedRemoveViewPadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewPadding(
          key: (tree.flutterMediaQueryNamedRemoveViewPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewPadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewPadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewPadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewPadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewPadding.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMergeSemantics:
      return $flutterSrcWidgetsBasic.MergeSemantics(
          key: (tree.flutterMergeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterMergeSemantics.key) : null),
          child: (tree.flutterMergeSemantics.hasChild() ? evaluateWidgetType(tree.flutterMergeSemantics.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMetaData:
      return $flutterSrcWidgetsBasic.MetaData(
          key: (tree.flutterMetaData.hasKey() ? evaluateFlutterKeyType(tree.flutterMetaData.key) : null),
          behavior: (tree.flutterMetaData.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterMetaData.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterMetaData.hasChild() ? evaluateWidgetType(tree.flutterMetaData.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterModalBarrier:
      return $flutterSrcWidgetsModalBarrier.ModalBarrier(
          key: (tree.flutterModalBarrier.hasKey() ? evaluateFlutterKeyType(tree.flutterModalBarrier.key) : null),
          color: (tree.flutterModalBarrier.hasColor() ? evaluateDartColorType(tree.flutterModalBarrier.color) : null),
          dismissible: (tree.flutterModalBarrier.hasDismissible() ? tree.flutterModalBarrier.dismissible : true),
          onDismiss: null,
          semanticsLabel: (tree.flutterModalBarrier.hasSemanticsLabel() ? tree.flutterModalBarrier.semanticsLabel : null),
          barrierSemanticsDismissible: (tree.flutterModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterModalBarrier.barrierSemanticsDismissible : true),
          clipDetailsNotifier: null,
          semanticsOnTapHint: (tree.flutterModalBarrier.hasSemanticsOnTapHint() ? tree.flutterModalBarrier.semanticsOnTapHint : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMouseRegion:
      return $flutterSrcWidgetsBasic.MouseRegion(
          key: (tree.flutterMouseRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterMouseRegion.key) : null),
          onEnter: null,
          onExit: null,
          onHover: null,
          opaque: (tree.flutterMouseRegion.hasOpaque() ? tree.flutterMouseRegion.opaque : true),
          hitTestBehavior: (tree.flutterMouseRegion.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterMouseRegion.hitTestBehavior) : null),
          child: (tree.flutterMouseRegion.hasChild() ? evaluateWidgetType(tree.flutterMouseRegion.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMultiChildRenderObjectElement:
      return $flutterSrcWidgetsFramework.MultiChildRenderObjectElement(
          (tree.flutterMultiChildRenderObjectElement.hasWidget() ? evaluateRequiredFlutterMultiChildRenderObjectWidgetType(tree.flutterMultiChildRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterMultiTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.MultiTapGestureRecognizer(
          longTapDelay: (tree.flutterMultiTapGestureRecognizer.hasLongTapDelay() ? evaluateRequiredDartDurationType(tree.flutterMultiTapGestureRecognizer.longTapDelay) : $dartCore.Duration.zero),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterNavigationToolbar:
      return $flutterSrcWidgetsNavigationToolbar.NavigationToolbar(
          key: (tree.flutterNavigationToolbar.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigationToolbar.key) : null),
          leading: (tree.flutterNavigationToolbar.hasLeading() ? evaluateWidgetType(tree.flutterNavigationToolbar.leading) : null),
          middle: (tree.flutterNavigationToolbar.hasMiddle() ? evaluateWidgetType(tree.flutterNavigationToolbar.middle) : null),
          trailing: (tree.flutterNavigationToolbar.hasTrailing() ? evaluateWidgetType(tree.flutterNavigationToolbar.trailing) : null),
          centerMiddle: (tree.flutterNavigationToolbar.hasCenterMiddle() ? tree.flutterNavigationToolbar.centerMiddle : true),
          middleSpacing: (tree.flutterNavigationToolbar.hasMiddleSpacing() ? tree.flutterNavigationToolbar.middleSpacing : $flutterSrcWidgetsNavigationToolbar.NavigationToolbar.kMiddleSpacing));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterNavigator:
      return $flutterSrcWidgetsNavigator.Navigator(
          key: (tree.flutterNavigator.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigator.key) : null),
          onPopPage: null,
          initialRoute: (tree.flutterNavigator.hasInitialRoute() ? tree.flutterNavigator.initialRoute : null),
          onGenerateRoute: null,
          onUnknownRoute: null,
          reportsRouteUpdateToEngine: (tree.flutterNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterNavigator.reportsRouteUpdateToEngine : false),
          clipBehavior: (tree.flutterNavigator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNavigator.clipBehavior) : $dartUi.Clip.hardEdge),
          observers: tree.flutterNavigator.observers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          requestFocus: (tree.flutterNavigator.hasRequestFocus() ? tree.flutterNavigator.requestFocus : true),
          restorationScopeId: (tree.flutterNavigator.hasRestorationScopeId() ? tree.flutterNavigator.restorationScopeId : null),
          routeTraversalEdgeBehavior: (tree.flutterNavigator.hasRouteTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterNavigator.routeTraversalEdgeBehavior) : $flutterSrcWidgetsNavigator.kDefaultRouteTraversalEdgeBehavior));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterNavigatorPopHandler:
      return $flutterSrcWidgetsNavigatorPopHandler.NavigatorPopHandler(
          key: (tree.flutterNavigatorPopHandler.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigatorPopHandler.key) : null),
          onPop: null,
          enabled: (tree.flutterNavigatorPopHandler.hasEnabled() ? tree.flutterNavigatorPopHandler.enabled : true),
          child: (tree.flutterNavigatorPopHandler.hasChild() ? evaluateRequiredWidgetType(tree.flutterNavigatorPopHandler.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterNestedScrollViewViewport:
      return $flutterSrcWidgetsNestedScrollView.NestedScrollViewViewport(
          key: (tree.flutterNestedScrollViewViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.key) : null),
          axisDirection: (tree.flutterNestedScrollViewViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterNestedScrollViewViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.crossAxisDirection) : null),
          anchor: (tree.flutterNestedScrollViewViewport.hasAnchor() ? tree.flutterNestedScrollViewViewport.anchor : 0.0),
          offset: (tree.flutterNestedScrollViewViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterNestedScrollViewViewport.offset) : missing('offset')),
          center: (tree.flutterNestedScrollViewViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.center) : null),
          slivers: tree.flutterNestedScrollViewViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          handle: (tree.flutterNestedScrollViewViewport.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterNestedScrollViewViewport.handle) : missing('handle')),
          clipBehavior: (tree.flutterNestedScrollViewViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNestedScrollViewViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterNotificationListener:
      return $flutterSrcWidgetsNotificationListener.NotificationListener(
          key: (tree.flutterNotificationListener.hasKey() ? evaluateFlutterKeyType(tree.flutterNotificationListener.key) : null),
          child: (tree.flutterNotificationListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterNotificationListener.child) : missing('child')),
          onNotification: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOffsetLayer:
      return $flutterSrcRenderingLayer.OffsetLayer(
          offset: (tree.flutterOffsetLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterOffsetLayer.offset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOffstage:
      return $flutterSrcWidgetsBasic.Offstage(
          key: (tree.flutterOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterOffstage.key) : null),
          offstage: (tree.flutterOffstage.hasOffstage() ? tree.flutterOffstage.offstage : true),
          child: (tree.flutterOffstage.hasChild() ? evaluateWidgetType(tree.flutterOffstage.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOpacity:
      return $flutterSrcWidgetsBasic.Opacity(
          key: (tree.flutterOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterOpacity.key) : null),
          opacity: (tree.flutterOpacity.hasOpacity() ? tree.flutterOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterOpacity.hasAlwaysIncludeSemantics() ? tree.flutterOpacity.alwaysIncludeSemantics : false),
          child: (tree.flutterOpacity.hasChild() ? evaluateWidgetType(tree.flutterOpacity.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOpacityLayer:
      return $flutterSrcRenderingLayer.OpacityLayer(
          alpha: (tree.flutterOpacityLayer.hasAlpha() ? tree.flutterOpacityLayer.alpha : null),
          offset: (tree.flutterOpacityLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterOpacityLayer.offset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOverflowBar:
      return $flutterSrcWidgetsOverflowBar.OverflowBar(
          key: (tree.flutterOverflowBar.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBar.key) : null),
          spacing: (tree.flutterOverflowBar.hasSpacing() ? tree.flutterOverflowBar.spacing : 0.0),
          alignment: (tree.flutterOverflowBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.flutterOverflowBar.alignment) : null),
          overflowSpacing: (tree.flutterOverflowBar.hasOverflowSpacing() ? tree.flutterOverflowBar.overflowSpacing : 0.0),
          overflowAlignment: (tree.flutterOverflowBar.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.flutterOverflowBar.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.start),
          overflowDirection: (tree.flutterOverflowBar.hasOverflowDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterOverflowBar.overflowDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textDirection: (tree.flutterOverflowBar.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterOverflowBar.textDirection) : null),
          clipBehavior: (tree.flutterOverflowBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverflowBar.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterOverflowBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOverflowBox:
      return $flutterSrcWidgetsBasic.OverflowBox(
          key: (tree.flutterOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBox.key) : null),
          alignment: (tree.flutterOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          minWidth: (tree.flutterOverflowBox.hasMinWidth() ? tree.flutterOverflowBox.minWidth : null),
          maxWidth: (tree.flutterOverflowBox.hasMaxWidth() ? tree.flutterOverflowBox.maxWidth : null),
          minHeight: (tree.flutterOverflowBox.hasMinHeight() ? tree.flutterOverflowBox.minHeight : null),
          maxHeight: (tree.flutterOverflowBox.hasMaxHeight() ? tree.flutterOverflowBox.maxHeight : null),
          child: (tree.flutterOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterOverflowBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterOverlay:
      return $flutterSrcWidgetsOverlay.Overlay(
          key: (tree.flutterOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterOverlay.key) : null),
          clipBehavior: (tree.flutterOverlay.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverlay.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPadding:
      return $flutterSrcWidgetsBasic.Padding(
          key: (tree.flutterPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterPadding.key) : null),
          padding: (tree.flutterPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterPadding.padding) : missing('padding')),
          child: (tree.flutterPadding.hasChild() ? evaluateWidgetType(tree.flutterPadding.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPageStorage:
      return $flutterSrcWidgetsPageStorage.PageStorage(
          key: (tree.flutterPageStorage.hasKey() ? evaluateFlutterKeyType(tree.flutterPageStorage.key) : null),
          bucket: (tree.flutterPageStorage.hasBucket() ? evaluateRequiredFlutterPageStorageBucketType(tree.flutterPageStorage.bucket) : missing('bucket')),
          child: (tree.flutterPageStorage.hasChild() ? evaluateRequiredWidgetType(tree.flutterPageStorage.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPageView:
      return $flutterSrcWidgetsPageView.PageView(
          key: (tree.flutterPageView.hasKey() ? evaluateFlutterKeyType(tree.flutterPageView.key) : null),
          scrollDirection: (tree.flutterPageView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageView.hasReverse() ? tree.flutterPageView.reverse : false),
          controller: (tree.flutterPageView.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageView.controller) : null),
          physics: (tree.flutterPageView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageView.physics) : null),
          pageSnapping: (tree.flutterPageView.hasPageSnapping() ? tree.flutterPageView.pageSnapping : true),
          onPageChanged: null,
          children: tree.flutterPageView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dragStartBehavior: (tree.flutterPageView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageView.hasAllowImplicitScrolling() ? tree.flutterPageView.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageView.hasRestorationId() ? tree.flutterPageView.restorationId : null),
          clipBehavior: (tree.flutterPageView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageView.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageView.scrollBehavior) : null),
          padEnds: (tree.flutterPageView.hasPadEnds() ? tree.flutterPageView.padEnds : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPageViewNamedCustom:
      return $flutterSrcWidgetsPageView.PageView.custom(
          key: (tree.flutterPageViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterPageViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterPageViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageViewNamedCustom.hasReverse() ? tree.flutterPageViewNamedCustom.reverse : false),
          controller: (tree.flutterPageViewNamedCustom.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageViewNamedCustom.controller) : null),
          physics: (tree.flutterPageViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageViewNamedCustom.physics) : null),
          pageSnapping: (tree.flutterPageViewNamedCustom.hasPageSnapping() ? tree.flutterPageViewNamedCustom.pageSnapping : true),
          onPageChanged: null,
          childrenDelegate: (tree.flutterPageViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterPageViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          dragStartBehavior: (tree.flutterPageViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageViewNamedCustom.hasAllowImplicitScrolling() ? tree.flutterPageViewNamedCustom.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageViewNamedCustom.hasRestorationId() ? tree.flutterPageViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterPageViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageViewNamedCustom.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageViewNamedCustom.scrollBehavior) : null),
          padEnds: (tree.flutterPageViewNamedCustom.hasPadEnds() ? tree.flutterPageViewNamedCustom.padEnds : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPanGestureRecognizer:
      return $flutterSrcGesturesMonodrag.PanGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPerformanceOverlay:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay(
          key: (tree.flutterPerformanceOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlay.key) : null),
          optionsMask: (tree.flutterPerformanceOverlay.hasOptionsMask() ? tree.flutterPerformanceOverlay.optionsMask : 0),
          rasterizerThreshold: (tree.flutterPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterPerformanceOverlay.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlay.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlay.checkerboardOffscreenLayers : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPerformanceOverlayLayer:
      return $flutterSrcRenderingLayer.PerformanceOverlayLayer(
          overlayRect: (tree.flutterPerformanceOverlayLayer.hasOverlayRect() ? evaluateRequiredDartRectType(tree.flutterPerformanceOverlayLayer.overlayRect) : missing('overlayRect')),
          optionsMask: (tree.flutterPerformanceOverlayLayer.hasOptionsMask() ? tree.flutterPerformanceOverlayLayer.optionsMask : missing('optionsMask')),
          rasterizerThreshold: (tree.flutterPerformanceOverlayLayer.hasRasterizerThreshold() ? tree.flutterPerformanceOverlayLayer.rasterizerThreshold : missing('rasterizerThreshold')),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlayLayer.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlayLayer.checkerboardRasterCacheImages : missing('checkerboardRasterCacheImages')),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlayLayer.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlayLayer.checkerboardOffscreenLayers : missing('checkerboardOffscreenLayers')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPerformanceOverlayNamedAllEnabled:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay.allEnabled(
          key: (tree.flutterPerformanceOverlayNamedAllEnabled.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlayNamedAllEnabled.key) : null),
          rasterizerThreshold: (tree.flutterPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPhysicalModel:
      return $flutterSrcWidgetsBasic.PhysicalModel(
          key: (tree.flutterPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterPhysicalModel.key) : null),
          shape: (tree.flutterPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterPhysicalModel.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle),
          clipBehavior: (tree.flutterPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterPhysicalModel.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.flutterPhysicalModel.borderRadius) : null),
          elevation: (tree.flutterPhysicalModel.hasElevation() ? tree.flutterPhysicalModel.elevation : 0.0),
          color: (tree.flutterPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.color) : missing('color')),
          shadowColor: (tree.flutterPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.shadowColor) : $dartUi.Color(0xFF000000)),
          child: (tree.flutterPhysicalModel.hasChild() ? evaluateWidgetType(tree.flutterPhysicalModel.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPictureLayer:
      return $flutterSrcRenderingLayer.PictureLayer(
          (tree.flutterPictureLayer.hasCanvasBounds() ? evaluateRequiredDartRectType(tree.flutterPictureLayer.canvasBounds) : missing('canvasBounds')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPipelineOwner:
      return $flutterSrcRenderingObject.PipelineOwner(
          onNeedVisualUpdate: null,
          onSemanticsOwnerCreated: null,
          onSemanticsUpdate: null,
          onSemanticsOwnerDisposed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPlaceholder:
      return $flutterSrcWidgetsPlaceholder.Placeholder(
          key: (tree.flutterPlaceholder.hasKey() ? evaluateFlutterKeyType(tree.flutterPlaceholder.key) : null),
          color: (tree.flutterPlaceholder.hasColor() ? evaluateRequiredDartColorType(tree.flutterPlaceholder.color) : $dartUi.Color(0xFF455A64)),
          strokeWidth: (tree.flutterPlaceholder.hasStrokeWidth() ? tree.flutterPlaceholder.strokeWidth : 2.0),
          fallbackWidth: (tree.flutterPlaceholder.hasFallbackWidth() ? tree.flutterPlaceholder.fallbackWidth : 400.0),
          fallbackHeight: (tree.flutterPlaceholder.hasFallbackHeight() ? tree.flutterPlaceholder.fallbackHeight : 400.0),
          child: (tree.flutterPlaceholder.hasChild() ? evaluateWidgetType(tree.flutterPlaceholder.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPlatformMenu:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenu(
          label: (tree.flutterPlatformMenu.hasLabel() ? tree.flutterPlatformMenu.label : missing('label')),
          onOpen: null,
          onClose: null,
          menus: tree.flutterPlatformMenu.menus.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPlatformMenuBar:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenuBar(
          key: (tree.flutterPlatformMenuBar.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformMenuBar.key) : null),
          menus: tree.flutterPlatformMenuBar.menus.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList(),
          child: (tree.flutterPlatformMenuBar.hasChild() ? evaluateWidgetType(tree.flutterPlatformMenuBar.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPlatformSelectableRegionContextMenu:
      return $flutterSrcWidgetsPlatformSelectableRegionContextMenuIo.PlatformSelectableRegionContextMenu(
          child: (tree.flutterPlatformSelectableRegionContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.flutterPlatformSelectableRegionContextMenu.child) : missing('child')),
          key: (tree.flutterPlatformSelectableRegionContextMenu.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformSelectableRegionContextMenu.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPlatformViewLayer:
      return $flutterSrcRenderingLayer.PlatformViewLayer(
          rect: (tree.flutterPlatformViewLayer.hasRect() ? evaluateRequiredDartRectType(tree.flutterPlatformViewLayer.rect) : missing('rect')),
          viewId: (tree.flutterPlatformViewLayer.hasViewId() ? tree.flutterPlatformViewLayer.viewId : missing('viewId')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPopScope:
      return $flutterSrcWidgetsPopScope.PopScope(
          key: (tree.flutterPopScope.hasKey() ? evaluateFlutterKeyType(tree.flutterPopScope.key) : null),
          child: (tree.flutterPopScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterPopScope.child) : missing('child')),
          canPop: (tree.flutterPopScope.hasCanPop() ? tree.flutterPopScope.canPop : true),
          onPopInvoked: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositioned:
      return $flutterSrcWidgetsBasic.Positioned(
          key: (tree.flutterPositioned.hasKey() ? evaluateFlutterKeyType(tree.flutterPositioned.key) : null),
          left: (tree.flutterPositioned.hasLeft() ? tree.flutterPositioned.left : null),
          top: (tree.flutterPositioned.hasTop() ? tree.flutterPositioned.top : null),
          right: (tree.flutterPositioned.hasRight() ? tree.flutterPositioned.right : null),
          bottom: (tree.flutterPositioned.hasBottom() ? tree.flutterPositioned.bottom : null),
          width: (tree.flutterPositioned.hasWidth() ? tree.flutterPositioned.width : null),
          height: (tree.flutterPositioned.hasHeight() ? tree.flutterPositioned.height : null),
          child: (tree.flutterPositioned.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositioned.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositionedDirectional:
      return $flutterSrcWidgetsBasic.PositionedDirectional(
          key: (tree.flutterPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedDirectional.key) : null),
          start: (tree.flutterPositionedDirectional.hasStart() ? tree.flutterPositionedDirectional.start : null),
          top: (tree.flutterPositionedDirectional.hasTop() ? tree.flutterPositionedDirectional.top : null),
          end: (tree.flutterPositionedDirectional.hasEnd() ? tree.flutterPositionedDirectional.end : null),
          bottom: (tree.flutterPositionedDirectional.hasBottom() ? tree.flutterPositionedDirectional.bottom : null),
          width: (tree.flutterPositionedDirectional.hasWidth() ? tree.flutterPositionedDirectional.width : null),
          height: (tree.flutterPositionedDirectional.hasHeight() ? tree.flutterPositionedDirectional.height : null),
          child: (tree.flutterPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedDirectional.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositionedNamedDirectional:
      return $flutterSrcWidgetsBasic.Positioned.directional(
          key: (tree.flutterPositionedNamedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedDirectional.key) : null),
          textDirection: (tree.flutterPositionedNamedDirectional.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterPositionedNamedDirectional.textDirection) : missing('textDirection')),
          start: (tree.flutterPositionedNamedDirectional.hasStart() ? tree.flutterPositionedNamedDirectional.start : null),
          top: (tree.flutterPositionedNamedDirectional.hasTop() ? tree.flutterPositionedNamedDirectional.top : null),
          end: (tree.flutterPositionedNamedDirectional.hasEnd() ? tree.flutterPositionedNamedDirectional.end : null),
          bottom: (tree.flutterPositionedNamedDirectional.hasBottom() ? tree.flutterPositionedNamedDirectional.bottom : null),
          width: (tree.flutterPositionedNamedDirectional.hasWidth() ? tree.flutterPositionedNamedDirectional.width : null),
          height: (tree.flutterPositionedNamedDirectional.hasHeight() ? tree.flutterPositionedNamedDirectional.height : null),
          child: (tree.flutterPositionedNamedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedDirectional.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositionedNamedFill:
      return $flutterSrcWidgetsBasic.Positioned.fill(
          key: (tree.flutterPositionedNamedFill.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFill.key) : null),
          left: (tree.flutterPositionedNamedFill.hasLeft() ? tree.flutterPositionedNamedFill.left : 0.0),
          top: (tree.flutterPositionedNamedFill.hasTop() ? tree.flutterPositionedNamedFill.top : 0.0),
          right: (tree.flutterPositionedNamedFill.hasRight() ? tree.flutterPositionedNamedFill.right : 0.0),
          bottom: (tree.flutterPositionedNamedFill.hasBottom() ? tree.flutterPositionedNamedFill.bottom : 0.0),
          child: (tree.flutterPositionedNamedFill.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFill.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositionedNamedFromRect:
      return $flutterSrcWidgetsBasic.Positioned.fromRect(
          key: (tree.flutterPositionedNamedFromRect.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFromRect.key) : null),
          rect: (tree.flutterPositionedNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterPositionedNamedFromRect.rect) : missing('rect')),
          child: (tree.flutterPositionedNamedFromRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFromRect.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPositionedNamedFromRelativeRect:
      return $flutterSrcWidgetsBasic.Positioned.fromRelativeRect(
          key: (tree.flutterPositionedNamedFromRelativeRect.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFromRelativeRect.key) : null),
          rect: (tree.flutterPositionedNamedFromRelativeRect.hasRect() ? evaluateRequiredFlutterRelativeRectType(tree.flutterPositionedNamedFromRelativeRect.rect) : missing('rect')),
          child: (tree.flutterPositionedNamedFromRelativeRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFromRelativeRect.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPreferredSize:
      return $flutterSrcWidgetsPreferredSize.PreferredSize(
          key: (tree.flutterPreferredSize.hasKey() ? evaluateFlutterKeyType(tree.flutterPreferredSize.key) : null),
          preferredSize: (tree.flutterPreferredSize.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterPreferredSize.preferredSize) : missing('preferredSize')),
          child: (tree.flutterPreferredSize.hasChild() ? evaluateRequiredWidgetType(tree.flutterPreferredSize.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPrimaryScrollController:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController(
          key: (tree.flutterPrimaryScrollController.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollController.key) : null),
          controller: (tree.flutterPrimaryScrollController.hasController() ? evaluateRequiredFlutterScrollControllerType(tree.flutterPrimaryScrollController.controller) : missing('controller')),
          scrollDirection: (tree.flutterPrimaryScrollController.hasScrollDirection() ? enums.convertFlutterAxisType(tree.flutterPrimaryScrollController.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          child: (tree.flutterPrimaryScrollController.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollController.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterPrimaryScrollControllerNamedNone:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController.none(
          key: (tree.flutterPrimaryScrollControllerNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollControllerNamedNone.key) : null),
          child: (tree.flutterPrimaryScrollControllerNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollControllerNamedNone.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterProjectMyApp:
      return $flutterProjectMain.MyApp(
          key: (tree.flutterProjectMyApp.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyApp.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterProjectMyHomePage:
      return $flutterProjectMain.MyHomePage(
          key: (tree.flutterProjectMyHomePage.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyHomePage.key) : null),
          title: (tree.flutterProjectMyHomePage.hasTitle() ? tree.flutterProjectMyHomePage.title : missing('title')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRawGestureDetector:
      return $flutterSrcWidgetsGestureDetector.RawGestureDetector(
          key: (tree.flutterRawGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterRawGestureDetector.key) : null),
          child: (tree.flutterRawGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterRawGestureDetector.child) : null),
          behavior: (tree.flutterRawGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterRawGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterRawGestureDetector.excludeFromSemantics : false),
          semantics: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRawImage:
      return $flutterSrcWidgetsBasic.RawImage(
          key: (tree.flutterRawImage.hasKey() ? evaluateFlutterKeyType(tree.flutterRawImage.key) : null),
          image: null,
          debugImageLabel: (tree.flutterRawImage.hasDebugImageLabel() ? tree.flutterRawImage.debugImageLabel : null),
          width: (tree.flutterRawImage.hasWidth() ? tree.flutterRawImage.width : null),
          height: (tree.flutterRawImage.hasHeight() ? tree.flutterRawImage.height : null),
          scale: (tree.flutterRawImage.hasScale() ? tree.flutterRawImage.scale : 1.0),
          color: (tree.flutterRawImage.hasColor() ? evaluateDartColorType(tree.flutterRawImage.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterRawImage.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterRawImage.colorBlendMode) : null),
          fit: (tree.flutterRawImage.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterRawImage.fit) : null),
          alignment: (tree.flutterRawImage.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRawImage.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterRawImage.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterRawImage.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterRawImage.hasCenterSlice() ? evaluateDartRectType(tree.flutterRawImage.centerSlice) : null),
          matchTextDirection: (tree.flutterRawImage.hasMatchTextDirection() ? tree.flutterRawImage.matchTextDirection : false),
          invertColors: (tree.flutterRawImage.hasInvertColors() ? tree.flutterRawImage.invertColors : false),
          filterQuality: (tree.flutterRawImage.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterRawImage.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterRawImage.hasIsAntiAlias() ? tree.flutterRawImage.isAntiAlias : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRawKeyboardListener:
      return $flutterSrcWidgetsRawKeyboardListener.RawKeyboardListener(
          key: (tree.flutterRawKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterRawKeyboardListener.key) : null),
          focusNode: (tree.flutterRawKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterRawKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterRawKeyboardListener.hasAutofocus() ? tree.flutterRawKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterRawKeyboardListener.hasIncludeSemantics() ? tree.flutterRawKeyboardListener.includeSemantics : true),
          onKey: null,
          child: (tree.flutterRawKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawKeyboardListener.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRawMagnifier:
      return $flutterSrcWidgetsMagnifier.RawMagnifier(
          key: (tree.flutterRawMagnifier.hasKey() ? evaluateFlutterKeyType(tree.flutterRawMagnifier.key) : null),
          child: (tree.flutterRawMagnifier.hasChild() ? evaluateWidgetType(tree.flutterRawMagnifier.child) : null),
          decoration: (tree.flutterRawMagnifier.hasDecoration() ? evaluateRequiredFlutterMagnifierDecorationType(tree.flutterRawMagnifier.decoration) : $flutterSrcWidgetsMagnifier.MagnifierDecoration()),
          focalPointOffset: (tree.flutterRawMagnifier.hasFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.flutterRawMagnifier.focalPointOffset) : $dartUi.Offset.zero),
          magnificationScale: (tree.flutterRawMagnifier.hasMagnificationScale() ? tree.flutterRawMagnifier.magnificationScale : 1),
          size: (tree.flutterRawMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.flutterRawMagnifier.size) : missing('size')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRawScrollbar:
      return $flutterSrcWidgetsScrollbar.RawScrollbar(
          key: (tree.flutterRawScrollbar.hasKey() ? evaluateFlutterKeyType(tree.flutterRawScrollbar.key) : null),
          child: (tree.flutterRawScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawScrollbar.child) : missing('child')),
          controller: (tree.flutterRawScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.flutterRawScrollbar.controller) : null),
          thumbVisibility: (tree.flutterRawScrollbar.hasThumbVisibility() ? tree.flutterRawScrollbar.thumbVisibility : null),
          shape: (tree.flutterRawScrollbar.hasShape() ? evaluateFlutterOutlinedBorderType(tree.flutterRawScrollbar.shape) : null),
          radius: (tree.flutterRawScrollbar.hasRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.radius) : null),
          thickness: (tree.flutterRawScrollbar.hasThickness() ? tree.flutterRawScrollbar.thickness : null),
          thumbColor: (tree.flutterRawScrollbar.hasThumbColor() ? evaluateDartColorType(tree.flutterRawScrollbar.thumbColor) : null),
          minThumbLength: (tree.flutterRawScrollbar.hasMinThumbLength() ? tree.flutterRawScrollbar.minThumbLength : 18.0),
          minOverscrollLength: (tree.flutterRawScrollbar.hasMinOverscrollLength() ? tree.flutterRawScrollbar.minOverscrollLength : null),
          trackVisibility: (tree.flutterRawScrollbar.hasTrackVisibility() ? tree.flutterRawScrollbar.trackVisibility : null),
          trackRadius: (tree.flutterRawScrollbar.hasTrackRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.trackRadius) : null),
          trackColor: (tree.flutterRawScrollbar.hasTrackColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackColor) : null),
          trackBorderColor: (tree.flutterRawScrollbar.hasTrackBorderColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackBorderColor) : null),
          fadeDuration: (tree.flutterRawScrollbar.hasFadeDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.fadeDuration) : $dartCore.Duration(milliseconds: 300)),
          timeToFade: (tree.flutterRawScrollbar.hasTimeToFade() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.timeToFade) : $dartCore.Duration(milliseconds: 600)),
          pressDuration: (tree.flutterRawScrollbar.hasPressDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.pressDuration) : $dartCore.Duration.zero),
          interactive: (tree.flutterRawScrollbar.hasInteractive() ? tree.flutterRawScrollbar.interactive : null),
          scrollbarOrientation: (tree.flutterRawScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.flutterRawScrollbar.scrollbarOrientation) : null),
          mainAxisMargin: (tree.flutterRawScrollbar.hasMainAxisMargin() ? tree.flutterRawScrollbar.mainAxisMargin : 0.0),
          crossAxisMargin: (tree.flutterRawScrollbar.hasCrossAxisMargin() ? tree.flutterRawScrollbar.crossAxisMargin : 0.0),
          padding: (tree.flutterRawScrollbar.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.flutterRawScrollbar.padding) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderAbsorbPointer:
      return $flutterSrcRenderingProxyBox.RenderAbsorbPointer(
          child: (tree.flutterRenderAbsorbPointer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAbsorbPointer.child) : null),
          absorbing: (tree.flutterRenderAbsorbPointer.hasAbsorbing() ? tree.flutterRenderAbsorbPointer.absorbing : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderAnimatedSize:
      return $flutterSrcRenderingAnimatedSize.RenderAnimatedSize(
          vsync: (tree.flutterRenderAnimatedSize.hasVsync() ? evaluateRequiredFlutterSrcSchedulerTickerProviderType(tree.flutterRenderAnimatedSize.vsync) : missing('vsync')),
          duration: (tree.flutterRenderAnimatedSize.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterRenderAnimatedSize.duration) : missing('duration')),
          reverseDuration: (tree.flutterRenderAnimatedSize.hasReverseDuration() ? evaluateDartDurationType(tree.flutterRenderAnimatedSize.reverseDuration) : null),
          curve: (tree.flutterRenderAnimatedSize.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterRenderAnimatedSize.curve) : $flutterSrcAnimationCurves.Curves.linear),
          alignment: (tree.flutterRenderAnimatedSize.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderAnimatedSize.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderAnimatedSize.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderAnimatedSize.textDirection) : null),
          child: (tree.flutterRenderAnimatedSize.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAnimatedSize.child) : null),
          clipBehavior: (tree.flutterRenderAnimatedSize.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderAnimatedSize.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderAspectRatio:
      return $flutterSrcRenderingProxyBox.RenderAspectRatio(
          child: (tree.flutterRenderAspectRatio.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAspectRatio.child) : null),
          aspectRatio: (tree.flutterRenderAspectRatio.hasAspectRatio() ? tree.flutterRenderAspectRatio.aspectRatio : missing('aspectRatio')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderBackdropFilter:
      return $flutterSrcRenderingProxyBox.RenderBackdropFilter(
          child: (tree.flutterRenderBackdropFilter.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBackdropFilter.child) : null),
          filter: (tree.flutterRenderBackdropFilter.hasFilter() ? evaluateRequiredDartImageFilterType(tree.flutterRenderBackdropFilter.filter) : missing('filter')),
          blendMode: (tree.flutterRenderBackdropFilter.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterRenderBackdropFilter.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderBaseline:
      return $flutterSrcRenderingShiftedBox.RenderBaseline(
          child: (tree.flutterRenderBaseline.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBaseline.child) : null),
          baseline: (tree.flutterRenderBaseline.hasBaseline() ? tree.flutterRenderBaseline.baseline : missing('baseline')),
          baselineType: (tree.flutterRenderBaseline.hasBaselineType() ? enums.convertRequiredDartTextBaselineType(tree.flutterRenderBaseline.baselineType) : missing('baselineType')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderBlockSemantics:
      return $flutterSrcRenderingProxyBox.RenderBlockSemantics(
          child: (tree.flutterRenderBlockSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBlockSemantics.child) : null),
          blocking: (tree.flutterRenderBlockSemantics.hasBlocking() ? tree.flutterRenderBlockSemantics.blocking : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderClipOval:
      return $flutterSrcRenderingProxyBox.RenderClipOval(
          child: (tree.flutterRenderClipOval.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipOval.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipOval.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipOval.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderClipPath:
      return $flutterSrcRenderingProxyBox.RenderClipPath(
          child: (tree.flutterRenderClipPath.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipPath.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipPath.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipPath.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderClipRRect:
      return $flutterSrcRenderingProxyBox.RenderClipRRect(
          child: (tree.flutterRenderClipRRect.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipRRect.child) : null),
          borderRadius: (tree.flutterRenderClipRRect.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterRenderClipRRect.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipRRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipRRect.clipBehavior) : $dartUi.Clip.antiAlias),
          textDirection: (tree.flutterRenderClipRRect.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderClipRRect.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderClipRect:
      return $flutterSrcRenderingProxyBox.RenderClipRect(
          child: (tree.flutterRenderClipRect.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipRect.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipRect.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderConstrainedBox:
      return $flutterSrcRenderingProxyBox.RenderConstrainedBox(
          child: (tree.flutterRenderConstrainedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderConstrainedBox.child) : null),
          additionalConstraints: (tree.flutterRenderConstrainedBox.hasAdditionalConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.flutterRenderConstrainedBox.additionalConstraints) : missing('additionalConstraints')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderConstrainedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderConstrainedOverflowBox(
          child: (tree.flutterRenderConstrainedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderConstrainedOverflowBox.child) : null),
          minWidth: (tree.flutterRenderConstrainedOverflowBox.hasMinWidth() ? tree.flutterRenderConstrainedOverflowBox.minWidth : null),
          maxWidth: (tree.flutterRenderConstrainedOverflowBox.hasMaxWidth() ? tree.flutterRenderConstrainedOverflowBox.maxWidth : null),
          minHeight: (tree.flutterRenderConstrainedOverflowBox.hasMinHeight() ? tree.flutterRenderConstrainedOverflowBox.minHeight : null),
          maxHeight: (tree.flutterRenderConstrainedOverflowBox.hasMaxHeight() ? tree.flutterRenderConstrainedOverflowBox.maxHeight : null),
          alignment: (tree.flutterRenderConstrainedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderConstrainedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderConstrainedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderConstrainedOverflowBox.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderCustomMultiChildLayoutBox:
      return $flutterSrcRenderingCustomLayout.RenderCustomMultiChildLayoutBox(
          children: tree.flutterRenderCustomMultiChildLayoutBox.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          delegate: missing('delegate'));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderCustomPaint:
      return $flutterSrcRenderingCustomPaint.RenderCustomPaint(
          painter: (tree.flutterRenderCustomPaint.hasPainter() ? evaluateFlutterCustomPainterType(tree.flutterRenderCustomPaint.painter) : null),
          foregroundPainter: (tree.flutterRenderCustomPaint.hasForegroundPainter() ? evaluateFlutterCustomPainterType(tree.flutterRenderCustomPaint.foregroundPainter) : null),
          preferredSize: (tree.flutterRenderCustomPaint.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterRenderCustomPaint.preferredSize) : $dartUi.Size.zero),
          isComplex: (tree.flutterRenderCustomPaint.hasIsComplex() ? tree.flutterRenderCustomPaint.isComplex : false),
          willChange: (tree.flutterRenderCustomPaint.hasWillChange() ? tree.flutterRenderCustomPaint.willChange : false),
          child: (tree.flutterRenderCustomPaint.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderCustomPaint.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderCustomSingleChildLayoutBox:
      return $flutterSrcRenderingShiftedBox.RenderCustomSingleChildLayoutBox(
          child: (tree.flutterRenderCustomSingleChildLayoutBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderCustomSingleChildLayoutBox.child) : null),
          delegate: (tree.flutterRenderCustomSingleChildLayoutBox.hasDelegate() ? evaluateRequiredFlutterSingleChildLayoutDelegateType(tree.flutterRenderCustomSingleChildLayoutBox.delegate) : missing('delegate')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderDecoratedBox:
      return $flutterSrcRenderingProxyBox.RenderDecoratedBox(
          decoration: (tree.flutterRenderDecoratedBox.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterRenderDecoratedBox.decoration) : missing('decoration')),
          position: (tree.flutterRenderDecoratedBox.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterRenderDecoratedBox.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          configuration: (tree.flutterRenderDecoratedBox.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderDecoratedBox.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty),
          child: (tree.flutterRenderDecoratedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderDecoratedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderDecoratedSliver:
      return $flutterSrcRenderingDecoratedSliver.RenderDecoratedSliver(
          decoration: (tree.flutterRenderDecoratedSliver.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterRenderDecoratedSliver.decoration) : missing('decoration')),
          position: (tree.flutterRenderDecoratedSliver.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterRenderDecoratedSliver.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          configuration: (tree.flutterRenderDecoratedSliver.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderDecoratedSliver.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderErrorBox:
      return $flutterSrcRenderingError.RenderErrorBox(
          (tree.flutterRenderErrorBox.hasMessage() ? tree.flutterRenderErrorBox.message : ''));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderExcludeSemantics:
      return $flutterSrcRenderingProxyBox.RenderExcludeSemantics(
          child: (tree.flutterRenderExcludeSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderExcludeSemantics.child) : null),
          excluding: (tree.flutterRenderExcludeSemantics.hasExcluding() ? tree.flutterRenderExcludeSemantics.excluding : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFittedBox:
      return $flutterSrcRenderingProxyBox.RenderFittedBox(
          fit: (tree.flutterRenderFittedBox.hasFit() ? enums.convertRequiredFlutterBoxFitType(tree.flutterRenderFittedBox.fit) : $flutterSrcPaintingBoxFit.BoxFit.contain),
          alignment: (tree.flutterRenderFittedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderFittedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderFittedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFittedBox.textDirection) : null),
          child: (tree.flutterRenderFittedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFittedBox.child) : null),
          clipBehavior: (tree.flutterRenderFittedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFittedBox.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFlex:
      return $flutterSrcRenderingFlex.RenderFlex(
          children: tree.flutterRenderFlex.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          direction: (tree.flutterRenderFlex.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterRenderFlex.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          mainAxisSize: (tree.flutterRenderFlex.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterRenderFlex.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          mainAxisAlignment: (tree.flutterRenderFlex.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterRenderFlex.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          crossAxisAlignment: (tree.flutterRenderFlex.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterRenderFlex.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterRenderFlex.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFlex.textDirection) : null),
          verticalDirection: (tree.flutterRenderFlex.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRenderFlex.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterRenderFlex.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRenderFlex.textBaseline) : null),
          clipBehavior: (tree.flutterRenderFlex.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFlex.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFlow:
      return $flutterSrcRenderingFlow.RenderFlow(
          children: tree.flutterRenderFlow.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          delegate: missing('delegate'),
          clipBehavior: (tree.flutterRenderFlow.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFlow.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFollowerLayer:
      return $flutterSrcRenderingProxyBox.RenderFollowerLayer(
          link: (tree.flutterRenderFollowerLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterRenderFollowerLayer.link) : missing('link')),
          showWhenUnlinked: (tree.flutterRenderFollowerLayer.hasShowWhenUnlinked() ? tree.flutterRenderFollowerLayer.showWhenUnlinked : true),
          offset: (tree.flutterRenderFollowerLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterRenderFollowerLayer.offset) : $dartUi.Offset.zero),
          leaderAnchor: (tree.flutterRenderFollowerLayer.hasLeaderAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterRenderFollowerLayer.leaderAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          followerAnchor: (tree.flutterRenderFollowerLayer.hasFollowerAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterRenderFollowerLayer.followerAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          child: (tree.flutterRenderFollowerLayer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFollowerLayer.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFractionalTranslation:
      return $flutterSrcRenderingProxyBox.RenderFractionalTranslation(
          translation: (tree.flutterRenderFractionalTranslation.hasTranslation() ? evaluateRequiredDartOffsetType(tree.flutterRenderFractionalTranslation.translation) : missing('translation')),
          transformHitTests: (tree.flutterRenderFractionalTranslation.hasTransformHitTests() ? tree.flutterRenderFractionalTranslation.transformHitTests : true),
          child: (tree.flutterRenderFractionalTranslation.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFractionalTranslation.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderFractionallySizedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderFractionallySizedOverflowBox(
          child: (tree.flutterRenderFractionallySizedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFractionallySizedOverflowBox.child) : null),
          widthFactor: (tree.flutterRenderFractionallySizedOverflowBox.hasWidthFactor() ? tree.flutterRenderFractionallySizedOverflowBox.widthFactor : null),
          heightFactor: (tree.flutterRenderFractionallySizedOverflowBox.hasHeightFactor() ? tree.flutterRenderFractionallySizedOverflowBox.heightFactor : null),
          alignment: (tree.flutterRenderFractionallySizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderFractionallySizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderFractionallySizedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFractionallySizedOverflowBox.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIgnoreBaseline:
      return $flutterSrcRenderingProxyBox.RenderIgnoreBaseline(
          child: (tree.flutterRenderIgnoreBaseline.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIgnoreBaseline.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIgnorePointer:
      return $flutterSrcRenderingProxyBox.RenderIgnorePointer(
          child: (tree.flutterRenderIgnorePointer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIgnorePointer.child) : null),
          ignoring: (tree.flutterRenderIgnorePointer.hasIgnoring() ? tree.flutterRenderIgnorePointer.ignoring : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderImage:
      return $flutterSrcRenderingImage.RenderImage(
          image: null,
          debugImageLabel: (tree.flutterRenderImage.hasDebugImageLabel() ? tree.flutterRenderImage.debugImageLabel : null),
          width: (tree.flutterRenderImage.hasWidth() ? tree.flutterRenderImage.width : null),
          height: (tree.flutterRenderImage.hasHeight() ? tree.flutterRenderImage.height : null),
          scale: (tree.flutterRenderImage.hasScale() ? tree.flutterRenderImage.scale : 1.0),
          color: (tree.flutterRenderImage.hasColor() ? evaluateDartColorType(tree.flutterRenderImage.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterRenderImage.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterRenderImage.colorBlendMode) : null),
          fit: (tree.flutterRenderImage.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterRenderImage.fit) : null),
          alignment: (tree.flutterRenderImage.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderImage.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterRenderImage.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterRenderImage.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterRenderImage.hasCenterSlice() ? evaluateDartRectType(tree.flutterRenderImage.centerSlice) : null),
          matchTextDirection: (tree.flutterRenderImage.hasMatchTextDirection() ? tree.flutterRenderImage.matchTextDirection : false),
          textDirection: (tree.flutterRenderImage.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderImage.textDirection) : null),
          invertColors: (tree.flutterRenderImage.hasInvertColors() ? tree.flutterRenderImage.invertColors : false),
          isAntiAlias: (tree.flutterRenderImage.hasIsAntiAlias() ? tree.flutterRenderImage.isAntiAlias : false),
          filterQuality: (tree.flutterRenderImage.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterRenderImage.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIndexedSemantics:
      return $flutterSrcRenderingProxyBox.RenderIndexedSemantics(
          child: (tree.flutterRenderIndexedSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIndexedSemantics.child) : null),
          index: (tree.flutterRenderIndexedSemantics.hasIndex() ? tree.flutterRenderIndexedSemantics.index : missing('index')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIndexedStack:
      return $flutterSrcRenderingStack.RenderIndexedStack(
          children: tree.flutterRenderIndexedStack.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          alignment: (tree.flutterRenderIndexedStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderIndexedStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterRenderIndexedStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderIndexedStack.textDirection) : null),
          fit: (tree.flutterRenderIndexedStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterRenderIndexedStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterRenderIndexedStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderIndexedStack.clipBehavior) : $dartUi.Clip.hardEdge),
          index: (tree.flutterRenderIndexedStack.hasIndex() ? tree.flutterRenderIndexedStack.index : 0));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIntrinsicHeight:
      return $flutterSrcRenderingProxyBox.RenderIntrinsicHeight(
          child: (tree.flutterRenderIntrinsicHeight.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIntrinsicHeight.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderIntrinsicWidth:
      return $flutterSrcRenderingProxyBox.RenderIntrinsicWidth(
          stepWidth: (tree.flutterRenderIntrinsicWidth.hasStepWidth() ? tree.flutterRenderIntrinsicWidth.stepWidth : null),
          stepHeight: (tree.flutterRenderIntrinsicWidth.hasStepHeight() ? tree.flutterRenderIntrinsicWidth.stepHeight : null),
          child: (tree.flutterRenderIntrinsicWidth.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIntrinsicWidth.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderLeaderLayer:
      return $flutterSrcRenderingProxyBox.RenderLeaderLayer(
          link: (tree.flutterRenderLeaderLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterRenderLeaderLayer.link) : missing('link')),
          child: (tree.flutterRenderLeaderLayer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderLeaderLayer.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderLimitedBox:
      return $flutterSrcRenderingProxyBox.RenderLimitedBox(
          child: (tree.flutterRenderLimitedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderLimitedBox.child) : null),
          maxWidth: (tree.flutterRenderLimitedBox.hasMaxWidth() ? tree.flutterRenderLimitedBox.maxWidth : $dartCore.double.infinity),
          maxHeight: (tree.flutterRenderLimitedBox.hasMaxHeight() ? tree.flutterRenderLimitedBox.maxHeight : $dartCore.double.infinity));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderListBody:
      return $flutterSrcRenderingListBody.RenderListBody(
          children: tree.flutterRenderListBody.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          axisDirection: (tree.flutterRenderListBody.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderListBody.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderListWheelViewport:
      return $flutterSrcRenderingListWheelViewport.RenderListWheelViewport(
          childManager: (tree.flutterRenderListWheelViewport.hasChildManager() ? evaluateRequiredFlutterListWheelChildManagerType(tree.flutterRenderListWheelViewport.childManager) : missing('childManager')),
          offset: (tree.flutterRenderListWheelViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderListWheelViewport.offset) : missing('offset')),
          diameterRatio: (tree.flutterRenderListWheelViewport.hasDiameterRatio() ? tree.flutterRenderListWheelViewport.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterRenderListWheelViewport.hasPerspective() ? tree.flutterRenderListWheelViewport.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterRenderListWheelViewport.hasOffAxisFraction() ? tree.flutterRenderListWheelViewport.offAxisFraction : 0),
          useMagnifier: (tree.flutterRenderListWheelViewport.hasUseMagnifier() ? tree.flutterRenderListWheelViewport.useMagnifier : false),
          magnification: (tree.flutterRenderListWheelViewport.hasMagnification() ? tree.flutterRenderListWheelViewport.magnification : 1),
          overAndUnderCenterOpacity: (tree.flutterRenderListWheelViewport.hasOverAndUnderCenterOpacity() ? tree.flutterRenderListWheelViewport.overAndUnderCenterOpacity : 1),
          itemExtent: (tree.flutterRenderListWheelViewport.hasItemExtent() ? tree.flutterRenderListWheelViewport.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterRenderListWheelViewport.hasSqueeze() ? tree.flutterRenderListWheelViewport.squeeze : 1),
          renderChildrenOutsideViewport: (tree.flutterRenderListWheelViewport.hasRenderChildrenOutsideViewport() ? tree.flutterRenderListWheelViewport.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterRenderListWheelViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderListWheelViewport.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterRenderListWheelViewport.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderMergeSemantics:
      return $flutterSrcRenderingProxyBox.RenderMergeSemantics(
          child: (tree.flutterRenderMergeSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMergeSemantics.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderMetaData:
      return $flutterSrcRenderingProxyBox.RenderMetaData(
          behavior: (tree.flutterRenderMetaData.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderMetaData.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterRenderMetaData.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMetaData.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderMouseRegion:
      return $flutterSrcRenderingProxyBox.RenderMouseRegion(
          onEnter: null,
          onHover: null,
          onExit: null,
          validForMouseTracker: (tree.flutterRenderMouseRegion.hasValidForMouseTracker() ? tree.flutterRenderMouseRegion.validForMouseTracker : true),
          opaque: (tree.flutterRenderMouseRegion.hasOpaque() ? tree.flutterRenderMouseRegion.opaque : true),
          child: (tree.flutterRenderMouseRegion.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMouseRegion.child) : null),
          hitTestBehavior: (tree.flutterRenderMouseRegion.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterRenderMouseRegion.hitTestBehavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.opaque));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderNestedScrollViewViewport:
      return $flutterSrcWidgetsNestedScrollView.RenderNestedScrollViewViewport(
          axisDirection: (tree.flutterRenderNestedScrollViewViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderNestedScrollViewViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderNestedScrollViewViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderNestedScrollViewViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderNestedScrollViewViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderNestedScrollViewViewport.offset) : missing('offset')),
          anchor: (tree.flutterRenderNestedScrollViewViewport.hasAnchor() ? tree.flutterRenderNestedScrollViewViewport.anchor : 0.0),
          children: tree.flutterRenderNestedScrollViewViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList(),
          center: (tree.flutterRenderNestedScrollViewViewport.hasCenter() ? evaluateFlutterRenderSliverType(tree.flutterRenderNestedScrollViewViewport.center) : null),
          handle: (tree.flutterRenderNestedScrollViewViewport.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderNestedScrollViewViewport.handle) : missing('handle')),
          clipBehavior: (tree.flutterRenderNestedScrollViewViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderNestedScrollViewViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderOffstage:
      return $flutterSrcRenderingProxyBox.RenderOffstage(
          offstage: (tree.flutterRenderOffstage.hasOffstage() ? tree.flutterRenderOffstage.offstage : true),
          child: (tree.flutterRenderOffstage.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderOffstage.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderOpacity:
      return $flutterSrcRenderingProxyBox.RenderOpacity(
          opacity: (tree.flutterRenderOpacity.hasOpacity() ? tree.flutterRenderOpacity.opacity : 1.0),
          alwaysIncludeSemantics: (tree.flutterRenderOpacity.hasAlwaysIncludeSemantics() ? tree.flutterRenderOpacity.alwaysIncludeSemantics : false),
          child: (tree.flutterRenderOpacity.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderOpacity.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderPadding:
      return $flutterSrcRenderingShiftedBox.RenderPadding(
          padding: (tree.flutterRenderPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterRenderPadding.padding) : missing('padding')),
          textDirection: (tree.flutterRenderPadding.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderPadding.textDirection) : null),
          child: (tree.flutterRenderPadding.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPadding.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderParagraph:
      return $flutterSrcRenderingParagraph.RenderParagraph(
          (tree.flutterRenderParagraph.hasText() ? evaluateRequiredFlutterInlineSpanType(tree.flutterRenderParagraph.text) : missing('text')),
          textAlign: (tree.flutterRenderParagraph.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterRenderParagraph.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterRenderParagraph.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterRenderParagraph.textDirection) : missing('textDirection')),
          softWrap: (tree.flutterRenderParagraph.hasSoftWrap() ? tree.flutterRenderParagraph.softWrap : true),
          overflow: (tree.flutterRenderParagraph.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterRenderParagraph.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          textScaler: (tree.flutterRenderParagraph.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterRenderParagraph.textScaler) : $flutterSrcPaintingTextScaler.TextScaler.noScaling),
          maxLines: (tree.flutterRenderParagraph.hasMaxLines() ? tree.flutterRenderParagraph.maxLines : null),
          locale: (tree.flutterRenderParagraph.hasLocale() ? evaluateDartLocaleType(tree.flutterRenderParagraph.locale) : null),
          strutStyle: (tree.flutterRenderParagraph.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterRenderParagraph.strutStyle) : null),
          textWidthBasis: (tree.flutterRenderParagraph.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterRenderParagraph.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterRenderParagraph.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterRenderParagraph.textHeightBehavior) : null),
          children: tree.flutterRenderParagraph.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          selectionColor: (tree.flutterRenderParagraph.hasSelectionColor() ? evaluateDartColorType(tree.flutterRenderParagraph.selectionColor) : null),
          registrar: (tree.flutterRenderParagraph.hasRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterRenderParagraph.registrar) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderPerformanceOverlay:
      return $flutterSrcRenderingPerformanceOverlay.RenderPerformanceOverlay(
          optionsMask: (tree.flutterRenderPerformanceOverlay.hasOptionsMask() ? tree.flutterRenderPerformanceOverlay.optionsMask : 0),
          rasterizerThreshold: (tree.flutterRenderPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterRenderPerformanceOverlay.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterRenderPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterRenderPerformanceOverlay.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterRenderPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterRenderPerformanceOverlay.checkerboardOffscreenLayers : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderPhysicalModel:
      return $flutterSrcRenderingProxyBox.RenderPhysicalModel(
          child: (tree.flutterRenderPhysicalModel.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPhysicalModel.child) : null),
          shape: (tree.flutterRenderPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterRenderPhysicalModel.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle),
          clipBehavior: (tree.flutterRenderPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderPhysicalModel.clipBehavior) : $dartUi.Clip.antiAlias),
          borderRadius: (tree.flutterRenderPhysicalModel.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.flutterRenderPhysicalModel.borderRadius) : null),
          elevation: (tree.flutterRenderPhysicalModel.hasElevation() ? tree.flutterRenderPhysicalModel.elevation : missing('elevation')),
          color: (tree.flutterRenderPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterRenderPhysicalModel.color) : missing('color')),
          shadowColor: (tree.flutterRenderPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterRenderPhysicalModel.shadowColor) : missing('shadowColor')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderPointerListener:
      return $flutterSrcRenderingProxyBox.RenderPointerListener(
          onPointerDown: null,
          onPointerMove: null,
          onPointerUp: null,
          onPointerHover: null,
          onPointerCancel: null,
          onPointerPanZoomStart: null,
          onPointerPanZoomUpdate: null,
          onPointerPanZoomEnd: null,
          onPointerSignal: null,
          behavior: (tree.flutterRenderPointerListener.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderPointerListener.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterRenderPointerListener.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPointerListener.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderPositionedBox:
      return $flutterSrcRenderingShiftedBox.RenderPositionedBox(
          child: (tree.flutterRenderPositionedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPositionedBox.child) : null),
          widthFactor: (tree.flutterRenderPositionedBox.hasWidthFactor() ? tree.flutterRenderPositionedBox.widthFactor : null),
          heightFactor: (tree.flutterRenderPositionedBox.hasHeightFactor() ? tree.flutterRenderPositionedBox.heightFactor : null),
          alignment: (tree.flutterRenderPositionedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderPositionedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderPositionedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderPositionedBox.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderProxyBox:
      return $flutterSrcRenderingProxyBox.RenderProxyBox(
          (tree.flutterRenderProxyBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderProxyBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderRepaintBoundary:
      return $flutterSrcRenderingProxyBox.RenderRepaintBoundary(
          child: (tree.flutterRenderRepaintBoundary.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderRepaintBoundary.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderRotatedBox:
      return $flutterSrcRenderingRotatedBox.RenderRotatedBox(
          quarterTurns: (tree.flutterRenderRotatedBox.hasQuarterTurns() ? tree.flutterRenderRotatedBox.quarterTurns : missing('quarterTurns')),
          child: (tree.flutterRenderRotatedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderRotatedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSemanticsAnnotations:
      return $flutterSrcRenderingProxyBox.RenderSemanticsAnnotations(
          child: (tree.flutterRenderSemanticsAnnotations.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSemanticsAnnotations.child) : null),
          properties: (tree.flutterRenderSemanticsAnnotations.hasProperties() ? evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(tree.flutterRenderSemanticsAnnotations.properties) : missing('properties')),
          container: (tree.flutterRenderSemanticsAnnotations.hasContainer() ? tree.flutterRenderSemanticsAnnotations.container : false),
          explicitChildNodes: (tree.flutterRenderSemanticsAnnotations.hasExplicitChildNodes() ? tree.flutterRenderSemanticsAnnotations.explicitChildNodes : false),
          excludeSemantics: (tree.flutterRenderSemanticsAnnotations.hasExcludeSemantics() ? tree.flutterRenderSemanticsAnnotations.excludeSemantics : false),
          blockUserActions: (tree.flutterRenderSemanticsAnnotations.hasBlockUserActions() ? tree.flutterRenderSemanticsAnnotations.blockUserActions : false),
          textDirection: (tree.flutterRenderSemanticsAnnotations.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSemanticsAnnotations.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSemanticsGestureHandler:
      return $flutterSrcRenderingProxyBox.RenderSemanticsGestureHandler(
          child: (tree.flutterRenderSemanticsGestureHandler.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSemanticsGestureHandler.child) : null),
          onTap: null,
          onLongPress: null,
          onHorizontalDragUpdate: null,
          onVerticalDragUpdate: null,
          scrollFactor: (tree.flutterRenderSemanticsGestureHandler.hasScrollFactor() ? tree.flutterRenderSemanticsGestureHandler.scrollFactor : 0.8),
          behavior: (tree.flutterRenderSemanticsGestureHandler.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderSemanticsGestureHandler.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderShrinkWrappingViewport:
      return $flutterSrcRenderingViewport.RenderShrinkWrappingViewport(
          axisDirection: (tree.flutterRenderShrinkWrappingViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderShrinkWrappingViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderShrinkWrappingViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderShrinkWrappingViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderShrinkWrappingViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderShrinkWrappingViewport.offset) : missing('offset')),
          clipBehavior: (tree.flutterRenderShrinkWrappingViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderShrinkWrappingViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          children: tree.flutterRenderShrinkWrappingViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSizedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderSizedOverflowBox(
          child: (tree.flutterRenderSizedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSizedOverflowBox.child) : null),
          requestedSize: (tree.flutterRenderSizedOverflowBox.hasRequestedSize() ? evaluateRequiredDartSizeType(tree.flutterRenderSizedOverflowBox.requestedSize) : missing('requestedSize')),
          alignment: (tree.flutterRenderSizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderSizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderSizedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSizedOverflowBox.textDirection) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverConstrainedCrossAxis:
      return $flutterSrcRenderingProxySliver.RenderSliverConstrainedCrossAxis(
          maxExtent: (tree.flutterRenderSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterRenderSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverCrossAxisGroup:
      return $flutterSrcRenderingSliverGroup.RenderSliverCrossAxisGroup(
          );
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverFillRemaining:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemaining(
          child: (tree.flutterRenderSliverFillRemaining.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemaining.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverFillRemainingAndOverscroll:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemainingAndOverscroll(
          child: (tree.flutterRenderSliverFillRemainingAndOverscroll.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemainingAndOverscroll.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverFillRemainingWithScrollable:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemainingWithScrollable(
          child: (tree.flutterRenderSliverFillRemainingWithScrollable.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemainingWithScrollable.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverFillViewport:
      return $flutterSrcRenderingSliverFill.RenderSliverFillViewport(
          childManager: (tree.flutterRenderSliverFillViewport.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverFillViewport.childManager) : missing('childManager')),
          viewportFraction: (tree.flutterRenderSliverFillViewport.hasViewportFraction() ? tree.flutterRenderSliverFillViewport.viewportFraction : 1.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverFixedExtentList:
      return $flutterSrcRenderingSliverFixedExtentList.RenderSliverFixedExtentList(
          childManager: (tree.flutterRenderSliverFixedExtentList.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverFixedExtentList.childManager) : missing('childManager')),
          itemExtent: (tree.flutterRenderSliverFixedExtentList.hasItemExtent() ? tree.flutterRenderSliverFixedExtentList.itemExtent : missing('itemExtent')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverGrid:
      return $flutterSrcRenderingSliverGrid.RenderSliverGrid(
          childManager: (tree.flutterRenderSliverGrid.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverGrid.childManager) : missing('childManager')),
          gridDelegate: (tree.flutterRenderSliverGrid.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterRenderSliverGrid.gridDelegate) : missing('gridDelegate')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverIgnorePointer:
      return $flutterSrcRenderingProxySliver.RenderSliverIgnorePointer(
          sliver: (tree.flutterRenderSliverIgnorePointer.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverIgnorePointer.sliver) : null),
          ignoring: (tree.flutterRenderSliverIgnorePointer.hasIgnoring() ? tree.flutterRenderSliverIgnorePointer.ignoring : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverList:
      return $flutterSrcRenderingSliverList.RenderSliverList(
          childManager: (tree.flutterRenderSliverList.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverList.childManager) : missing('childManager')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverMainAxisGroup:
      return $flutterSrcRenderingSliverGroup.RenderSliverMainAxisGroup(
          );
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverOffstage:
      return $flutterSrcRenderingProxySliver.RenderSliverOffstage(
          offstage: (tree.flutterRenderSliverOffstage.hasOffstage() ? tree.flutterRenderSliverOffstage.offstage : true),
          sliver: (tree.flutterRenderSliverOffstage.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOffstage.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverOpacity:
      return $flutterSrcRenderingProxySliver.RenderSliverOpacity(
          opacity: (tree.flutterRenderSliverOpacity.hasOpacity() ? tree.flutterRenderSliverOpacity.opacity : 1.0),
          alwaysIncludeSemantics: (tree.flutterRenderSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterRenderSliverOpacity.alwaysIncludeSemantics : false),
          sliver: (tree.flutterRenderSliverOpacity.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOpacity.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverOverlapAbsorber:
      return $flutterSrcWidgetsNestedScrollView.RenderSliverOverlapAbsorber(
          handle: (tree.flutterRenderSliverOverlapAbsorber.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderSliverOverlapAbsorber.handle) : missing('handle')),
          sliver: (tree.flutterRenderSliverOverlapAbsorber.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOverlapAbsorber.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverOverlapInjector:
      return $flutterSrcWidgetsNestedScrollView.RenderSliverOverlapInjector(
          handle: (tree.flutterRenderSliverOverlapInjector.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderSliverOverlapInjector.handle) : missing('handle')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverPadding:
      return $flutterSrcRenderingSliverPadding.RenderSliverPadding(
          padding: (tree.flutterRenderSliverPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterRenderSliverPadding.padding) : missing('padding')),
          textDirection: (tree.flutterRenderSliverPadding.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSliverPadding.textDirection) : null),
          child: (tree.flutterRenderSliverPadding.hasChild() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverPadding.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderSliverToBoxAdapter:
      return $flutterSrcRenderingSliver.RenderSliverToBoxAdapter(
          child: (tree.flutterRenderSliverToBoxAdapter.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverToBoxAdapter.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderStack:
      return $flutterSrcRenderingStack.RenderStack(
          children: tree.flutterRenderStack.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          alignment: (tree.flutterRenderStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterRenderStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderStack.textDirection) : null),
          fit: (tree.flutterRenderStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterRenderStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterRenderStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderStack.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderTable:
      return $flutterSrcRenderingTable.RenderTable(
          columns: (tree.flutterRenderTable.hasColumns() ? tree.flutterRenderTable.columns : null),
          rows: (tree.flutterRenderTable.hasRows() ? tree.flutterRenderTable.rows : null),
          columnWidths: null,
          defaultColumnWidth: (tree.flutterRenderTable.hasDefaultColumnWidth() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterRenderTable.defaultColumnWidth) : $flutterSrcRenderingTable.FlexColumnWidth()),
          textDirection: (tree.flutterRenderTable.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterRenderTable.textDirection) : missing('textDirection')),
          border: (tree.flutterRenderTable.hasBorder() ? evaluateFlutterTableBorderType(tree.flutterRenderTable.border) : null),
          rowDecorations: tree.flutterRenderTable.rowDecorations.map((e) => evaluateRequiredFlutterDecorationType(e)).toList(),
          configuration: (tree.flutterRenderTable.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderTable.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty),
          defaultVerticalAlignment: (tree.flutterRenderTable.hasDefaultVerticalAlignment() ? enums.convertRequiredFlutterTableCellVerticalAlignmentType(tree.flutterRenderTable.defaultVerticalAlignment) : $flutterSrcRenderingTable.TableCellVerticalAlignment.top),
          textBaseline: (tree.flutterRenderTable.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRenderTable.textBaseline) : null),
          children: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderTapRegion:
      return $flutterSrcWidgetsTapRegion.RenderTapRegion(
          registry: (tree.flutterRenderTapRegion.hasRegistry() ? evaluateFlutterTapRegionRegistryType(tree.flutterRenderTapRegion.registry) : null),
          enabled: (tree.flutterRenderTapRegion.hasEnabled() ? tree.flutterRenderTapRegion.enabled : true),
          onTapOutside: null,
          onTapInside: null,
          behavior: (tree.flutterRenderTapRegion.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderTapRegion.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          groupId: null,
          debugLabel: (tree.flutterRenderTapRegion.hasDebugLabel() ? tree.flutterRenderTapRegion.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.RenderTapRegionSurface(
          );
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderTransform:
      return $flutterSrcRenderingProxyBox.RenderTransform(
          transform: (tree.flutterRenderTransform.hasTransform() ? evaluateRequiredVectorMathMatrix4Type(tree.flutterRenderTransform.transform) : missing('transform')),
          origin: (tree.flutterRenderTransform.hasOrigin() ? evaluateDartOffsetType(tree.flutterRenderTransform.origin) : null),
          alignment: (tree.flutterRenderTransform.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterRenderTransform.alignment) : null),
          textDirection: (tree.flutterRenderTransform.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderTransform.textDirection) : null),
          transformHitTests: (tree.flutterRenderTransform.hasTransformHitTests() ? tree.flutterRenderTransform.transformHitTests : true),
          filterQuality: (tree.flutterRenderTransform.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterRenderTransform.filterQuality) : null),
          child: (tree.flutterRenderTransform.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderTransform.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderView:
      return $flutterSrcRenderingView.RenderView(
          child: (tree.flutterRenderView.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderView.child) : null),
          configuration: (tree.flutterRenderView.hasConfiguration() ? evaluateFlutterViewConfigurationType(tree.flutterRenderView.configuration) : null),
          view: missing('view'));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderViewport:
      return $flutterSrcRenderingViewport.RenderViewport(
          axisDirection: (tree.flutterRenderViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderViewport.offset) : missing('offset')),
          anchor: (tree.flutterRenderViewport.hasAnchor() ? tree.flutterRenderViewport.anchor : 0.0),
          children: tree.flutterRenderViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList(),
          center: (tree.flutterRenderViewport.hasCenter() ? evaluateFlutterRenderSliverType(tree.flutterRenderViewport.center) : null),
          cacheExtent: (tree.flutterRenderViewport.hasCacheExtent() ? tree.flutterRenderViewport.cacheExtent : null),
          cacheExtentStyle: (tree.flutterRenderViewport.hasCacheExtentStyle() ? enums.convertRequiredFlutterCacheExtentStyleType(tree.flutterRenderViewport.cacheExtentStyle) : $flutterSrcRenderingViewport.CacheExtentStyle.pixel),
          clipBehavior: (tree.flutterRenderViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRenderWrap:
      return $flutterSrcRenderingWrap.RenderWrap(
          children: tree.flutterRenderWrap.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          direction: (tree.flutterRenderWrap.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterRenderWrap.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          alignment: (tree.flutterRenderWrap.hasAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterRenderWrap.alignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          spacing: (tree.flutterRenderWrap.hasSpacing() ? tree.flutterRenderWrap.spacing : 0.0),
          runAlignment: (tree.flutterRenderWrap.hasRunAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterRenderWrap.runAlignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          runSpacing: (tree.flutterRenderWrap.hasRunSpacing() ? tree.flutterRenderWrap.runSpacing : 0.0),
          crossAxisAlignment: (tree.flutterRenderWrap.hasCrossAxisAlignment() ? enums.convertRequiredFlutterWrapCrossAlignmentType(tree.flutterRenderWrap.crossAxisAlignment) : $flutterSrcRenderingWrap.WrapCrossAlignment.start),
          textDirection: (tree.flutterRenderWrap.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderWrap.textDirection) : null),
          verticalDirection: (tree.flutterRenderWrap.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRenderWrap.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          clipBehavior: (tree.flutterRenderWrap.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderWrap.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterReorderableDelayedDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDelayedDragStartListener(
          key: (tree.flutterReorderableDelayedDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDelayedDragStartListener.key) : null),
          child: (tree.flutterReorderableDelayedDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDelayedDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDelayedDragStartListener.hasIndex() ? tree.flutterReorderableDelayedDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterReorderableDelayedDragStartListener.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterReorderableDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDragStartListener(
          key: (tree.flutterReorderableDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDragStartListener.key) : null),
          child: (tree.flutterReorderableDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDragStartListener.hasIndex() ? tree.flutterReorderableDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDragStartListener.hasEnabled() ? tree.flutterReorderableDragStartListener.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRepaintBoundary:
      return $flutterSrcWidgetsBasic.RepaintBoundary(
          key: (tree.flutterRepaintBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterRepaintBoundary.key) : null),
          child: (tree.flutterRepaintBoundary.hasChild() ? evaluateWidgetType(tree.flutterRepaintBoundary.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRepaintBoundaryNamedWrap:
      return $flutterSrcWidgetsBasic.RepaintBoundary.wrap(
          (tree.flutterRepaintBoundaryNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterRepaintBoundaryNamedWrap.child) : missing('child')),
          (tree.flutterRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRestorationScope:
      return $flutterSrcWidgetsRestoration.RestorationScope(
          key: (tree.flutterRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRestorationScope.key) : null),
          restorationId: (tree.flutterRestorationScope.hasRestorationId() ? tree.flutterRestorationScope.restorationId : null),
          child: (tree.flutterRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRestorationScope.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRichText:
      return $flutterSrcWidgetsBasic.RichText(
          key: (tree.flutterRichText.hasKey() ? evaluateFlutterKeyType(tree.flutterRichText.key) : null),
          text: (tree.flutterRichText.hasText() ? evaluateRequiredFlutterInlineSpanType(tree.flutterRichText.text) : missing('text')),
          textAlign: (tree.flutterRichText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterRichText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterRichText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRichText.textDirection) : null),
          softWrap: (tree.flutterRichText.hasSoftWrap() ? tree.flutterRichText.softWrap : true),
          overflow: (tree.flutterRichText.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterRichText.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          textScaler: (tree.flutterRichText.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterRichText.textScaler) : $flutterSrcPaintingTextScaler.TextScaler.noScaling),
          maxLines: (tree.flutterRichText.hasMaxLines() ? tree.flutterRichText.maxLines : null),
          locale: (tree.flutterRichText.hasLocale() ? evaluateDartLocaleType(tree.flutterRichText.locale) : null),
          strutStyle: (tree.flutterRichText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterRichText.strutStyle) : null),
          textWidthBasis: (tree.flutterRichText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterRichText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterRichText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterRichText.textHeightBehavior) : null),
          selectionRegistrar: (tree.flutterRichText.hasSelectionRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterRichText.selectionRegistrar) : null),
          selectionColor: (tree.flutterRichText.hasSelectionColor() ? evaluateDartColorType(tree.flutterRichText.selectionColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRootElement:
      return $flutterSrcWidgetsBinding.RootElement(
          (tree.flutterRootElement.hasWidget() ? evaluateRequiredFlutterRootWidgetType(tree.flutterRootElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRootRestorationScope:
      return $flutterSrcWidgetsRestoration.RootRestorationScope(
          key: (tree.flutterRootRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRootRestorationScope.key) : null),
          restorationId: (tree.flutterRootRestorationScope.hasRestorationId() ? tree.flutterRootRestorationScope.restorationId : null),
          child: (tree.flutterRootRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRootRestorationScope.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRootWidget:
      return $flutterSrcWidgetsBinding.RootWidget(
          key: (tree.flutterRootWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterRootWidget.key) : null),
          child: (tree.flutterRootWidget.hasChild() ? evaluateWidgetType(tree.flutterRootWidget.child) : null),
          debugShortDescription: (tree.flutterRootWidget.hasDebugShortDescription() ? tree.flutterRootWidget.debugShortDescription : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRotatedBox:
      return $flutterSrcWidgetsBasic.RotatedBox(
          key: (tree.flutterRotatedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterRotatedBox.key) : null),
          quarterTurns: (tree.flutterRotatedBox.hasQuarterTurns() ? tree.flutterRotatedBox.quarterTurns : missing('quarterTurns')),
          child: (tree.flutterRotatedBox.hasChild() ? evaluateWidgetType(tree.flutterRotatedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterRow:
      return $flutterSrcWidgetsBasic.Row(
          key: (tree.flutterRow.hasKey() ? evaluateFlutterKeyType(tree.flutterRow.key) : null),
          mainAxisAlignment: (tree.flutterRow.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterRow.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterRow.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterRow.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterRow.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterRow.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRow.textDirection) : null),
          verticalDirection: (tree.flutterRow.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRow.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterRow.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRow.textBaseline) : null),
          children: tree.flutterRow.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSafeArea:
      return $flutterSrcWidgetsSafeArea.SafeArea(
          key: (tree.flutterSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSafeArea.key) : null),
          left: (tree.flutterSafeArea.hasLeft() ? tree.flutterSafeArea.left : true),
          top: (tree.flutterSafeArea.hasTop() ? tree.flutterSafeArea.top : true),
          right: (tree.flutterSafeArea.hasRight() ? tree.flutterSafeArea.right : true),
          bottom: (tree.flutterSafeArea.hasBottom() ? tree.flutterSafeArea.bottom : true),
          minimum: (tree.flutterSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          maintainBottomViewPadding: (tree.flutterSafeArea.hasMaintainBottomViewPadding() ? tree.flutterSafeArea.maintainBottomViewPadding : false),
          child: (tree.flutterSafeArea.hasChild() ? evaluateRequiredWidgetType(tree.flutterSafeArea.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterScaleGestureRecognizer:
      return $flutterSrcGesturesScale.ScaleGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null,
          dragStartBehavior: (tree.flutterScaleGestureRecognizer.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterScaleGestureRecognizer.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.down),
          trackpadScrollCausesScale: (tree.flutterScaleGestureRecognizer.hasTrackpadScrollCausesScale() ? tree.flutterScaleGestureRecognizer.trackpadScrollCausesScale : false),
          trackpadScrollToScaleFactor: (tree.flutterScaleGestureRecognizer.hasTrackpadScrollToScaleFactor() ? evaluateRequiredDartOffsetType(tree.flutterScaleGestureRecognizer.trackpadScrollToScaleFactor) : $flutterSrcGesturesScale.kDefaultTrackpadScrollToScaleFactor));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterScrollConfiguration:
      return $flutterSrcWidgetsScrollConfiguration.ScrollConfiguration(
          key: (tree.flutterScrollConfiguration.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollConfiguration.key) : null),
          behavior: (tree.flutterScrollConfiguration.hasBehavior() ? evaluateRequiredFlutterScrollBehaviorType(tree.flutterScrollConfiguration.behavior) : missing('behavior')),
          child: (tree.flutterScrollConfiguration.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollConfiguration.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterScrollNotificationObserver:
      return $flutterSrcWidgetsScrollNotificationObserver.ScrollNotificationObserver(
          key: (tree.flutterScrollNotificationObserver.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollNotificationObserver.key) : null),
          child: (tree.flutterScrollNotificationObserver.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollNotificationObserver.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSelectableRegion:
      return $flutterSrcWidgetsSelectableRegion.SelectableRegion(
          key: (tree.flutterSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectableRegion.key) : null),
          contextMenuBuilder: null,
          focusNode: (tree.flutterSelectableRegion.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterSelectableRegion.focusNode) : missing('focusNode')),
          selectionControls: (tree.flutterSelectableRegion.hasSelectionControls() ? evaluateRequiredFlutterTextSelectionControlsType(tree.flutterSelectableRegion.selectionControls) : missing('selectionControls')),
          child: (tree.flutterSelectableRegion.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectableRegion.child) : missing('child')),
          magnifierConfiguration: (tree.flutterSelectableRegion.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterSelectableRegion.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          onSelectionChanged: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSelectionContainer:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer(
          key: (tree.flutterSelectionContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainer.key) : null),
          registrar: (tree.flutterSelectionContainer.hasRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterSelectionContainer.registrar) : null),
          delegate: missing('delegate'),
          child: (tree.flutterSelectionContainer.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainer.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSelectionContainerNamedDisabled:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer.disabled(
          key: (tree.flutterSelectionContainerNamedDisabled.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainerNamedDisabled.key) : null),
          child: (tree.flutterSelectionContainerNamedDisabled.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainerNamedDisabled.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSelectionRegistrarScope:
      return $flutterSrcWidgetsSelectionContainer.SelectionRegistrarScope(
          key: (tree.flutterSelectionRegistrarScope.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionRegistrarScope.key) : null),
          registrar: (tree.flutterSelectionRegistrarScope.hasRegistrar() ? evaluateRequiredFlutterSelectionRegistrarType(tree.flutterSelectionRegistrarScope.registrar) : missing('registrar')),
          child: (tree.flutterSelectionRegistrarScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionRegistrarScope.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSemantics:
      return $flutterSrcWidgetsBasic.Semantics(
          key: (tree.flutterSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterSemantics.key) : null),
          child: (tree.flutterSemantics.hasChild() ? evaluateWidgetType(tree.flutterSemantics.child) : null),
          container: (tree.flutterSemantics.hasContainer() ? tree.flutterSemantics.container : false),
          explicitChildNodes: (tree.flutterSemantics.hasExplicitChildNodes() ? tree.flutterSemantics.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemantics.hasExcludeSemantics() ? tree.flutterSemantics.excludeSemantics : false),
          blockUserActions: (tree.flutterSemantics.hasBlockUserActions() ? tree.flutterSemantics.blockUserActions : false),
          enabled: (tree.flutterSemantics.hasEnabled() ? tree.flutterSemantics.enabled : null),
          checked: (tree.flutterSemantics.hasChecked() ? tree.flutterSemantics.checked : null),
          mixed: (tree.flutterSemantics.hasMixed() ? tree.flutterSemantics.mixed : null),
          selected: (tree.flutterSemantics.hasSelected() ? tree.flutterSemantics.selected : null),
          toggled: (tree.flutterSemantics.hasToggled() ? tree.flutterSemantics.toggled : null),
          button: (tree.flutterSemantics.hasButton() ? tree.flutterSemantics.button : null),
          slider: (tree.flutterSemantics.hasSlider() ? tree.flutterSemantics.slider : null),
          keyboardKey: (tree.flutterSemantics.hasKeyboardKey() ? tree.flutterSemantics.keyboardKey : null),
          link: (tree.flutterSemantics.hasLink() ? tree.flutterSemantics.link : null),
          header: (tree.flutterSemantics.hasHeader() ? tree.flutterSemantics.header : null),
          textField: (tree.flutterSemantics.hasTextField() ? tree.flutterSemantics.textField : null),
          readOnly: (tree.flutterSemantics.hasReadOnly() ? tree.flutterSemantics.readOnly : null),
          focusable: (tree.flutterSemantics.hasFocusable() ? tree.flutterSemantics.focusable : null),
          focused: (tree.flutterSemantics.hasFocused() ? tree.flutterSemantics.focused : null),
          inMutuallyExclusiveGroup: (tree.flutterSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterSemantics.inMutuallyExclusiveGroup : null),
          obscured: (tree.flutterSemantics.hasObscured() ? tree.flutterSemantics.obscured : null),
          multiline: (tree.flutterSemantics.hasMultiline() ? tree.flutterSemantics.multiline : null),
          scopesRoute: (tree.flutterSemantics.hasScopesRoute() ? tree.flutterSemantics.scopesRoute : null),
          namesRoute: (tree.flutterSemantics.hasNamesRoute() ? tree.flutterSemantics.namesRoute : null),
          hidden: (tree.flutterSemantics.hasHidden() ? tree.flutterSemantics.hidden : null),
          image: (tree.flutterSemantics.hasImage() ? tree.flutterSemantics.image : null),
          liveRegion: (tree.flutterSemantics.hasLiveRegion() ? tree.flutterSemantics.liveRegion : null),
          expanded: (tree.flutterSemantics.hasExpanded() ? tree.flutterSemantics.expanded : null),
          maxValueLength: (tree.flutterSemantics.hasMaxValueLength() ? tree.flutterSemantics.maxValueLength : null),
          currentValueLength: (tree.flutterSemantics.hasCurrentValueLength() ? tree.flutterSemantics.currentValueLength : null),
          label: (tree.flutterSemantics.hasLabel() ? tree.flutterSemantics.label : null),
          attributedLabel: (tree.flutterSemantics.hasAttributedLabel() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedLabel) : null),
          value: (tree.flutterSemantics.hasValue() ? tree.flutterSemantics.value : null),
          attributedValue: (tree.flutterSemantics.hasAttributedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedValue) : null),
          increasedValue: (tree.flutterSemantics.hasIncreasedValue() ? tree.flutterSemantics.increasedValue : null),
          attributedIncreasedValue: (tree.flutterSemantics.hasAttributedIncreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedIncreasedValue) : null),
          decreasedValue: (tree.flutterSemantics.hasDecreasedValue() ? tree.flutterSemantics.decreasedValue : null),
          attributedDecreasedValue: (tree.flutterSemantics.hasAttributedDecreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedDecreasedValue) : null),
          hint: (tree.flutterSemantics.hasHint() ? tree.flutterSemantics.hint : null),
          attributedHint: (tree.flutterSemantics.hasAttributedHint() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedHint) : null),
          tooltip: (tree.flutterSemantics.hasTooltip() ? tree.flutterSemantics.tooltip : null),
          onTapHint: (tree.flutterSemantics.hasOnTapHint() ? tree.flutterSemantics.onTapHint : null),
          onLongPressHint: (tree.flutterSemantics.hasOnLongPressHint() ? tree.flutterSemantics.onLongPressHint : null),
          textDirection: (tree.flutterSemantics.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterSemantics.textDirection) : null),
          sortKey: (tree.flutterSemantics.hasSortKey() ? evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree.flutterSemantics.sortKey) : null),
          tagForChildren: (tree.flutterSemantics.hasTagForChildren() ? evaluateFlutterSrcSemanticsSemanticsTagType(tree.flutterSemantics.tagForChildren) : null),
          onTap: null,
          onLongPress: null,
          onScrollLeft: null,
          onScrollRight: null,
          onScrollUp: null,
          onScrollDown: null,
          onIncrease: null,
          onDecrease: null,
          onCopy: null,
          onCut: null,
          onPaste: null,
          onDismiss: null,
          onMoveCursorForwardByCharacter: null,
          onMoveCursorBackwardByCharacter: null,
          onSetSelection: null,
          onSetText: null,
          onDidGainAccessibilityFocus: null,
          onDidLoseAccessibilityFocus: null,
          customSemanticsActions: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSemanticsDebugger:
      return $flutterSrcWidgetsSemanticsDebugger.SemanticsDebugger(
          key: (tree.flutterSemanticsDebugger.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsDebugger.key) : null),
          child: (tree.flutterSemanticsDebugger.hasChild() ? evaluateRequiredWidgetType(tree.flutterSemanticsDebugger.child) : missing('child')),
          labelStyle: (tree.flutterSemanticsDebugger.hasLabelStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterSemanticsDebugger.labelStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFF000000), fontSize: 10.0, height: 0.8)));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSemanticsNamedFromProperties:
      return $flutterSrcWidgetsBasic.Semantics.fromProperties(
          key: (tree.flutterSemanticsNamedFromProperties.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsNamedFromProperties.key) : null),
          child: (tree.flutterSemanticsNamedFromProperties.hasChild() ? evaluateWidgetType(tree.flutterSemanticsNamedFromProperties.child) : null),
          container: (tree.flutterSemanticsNamedFromProperties.hasContainer() ? tree.flutterSemanticsNamedFromProperties.container : false),
          explicitChildNodes: (tree.flutterSemanticsNamedFromProperties.hasExplicitChildNodes() ? tree.flutterSemanticsNamedFromProperties.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemanticsNamedFromProperties.hasExcludeSemantics() ? tree.flutterSemanticsNamedFromProperties.excludeSemantics : false),
          blockUserActions: (tree.flutterSemanticsNamedFromProperties.hasBlockUserActions() ? tree.flutterSemanticsNamedFromProperties.blockUserActions : false),
          properties: (tree.flutterSemanticsNamedFromProperties.hasProperties() ? evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(tree.flutterSemanticsNamedFromProperties.properties) : missing('properties')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSerialTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.SerialTapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterShaderMaskLayer:
      return $flutterSrcRenderingLayer.ShaderMaskLayer(
          shader: (tree.flutterShaderMaskLayer.hasShader() ? evaluateDartShaderType(tree.flutterShaderMaskLayer.shader) : null),
          maskRect: (tree.flutterShaderMaskLayer.hasMaskRect() ? evaluateDartRectType(tree.flutterShaderMaskLayer.maskRect) : null),
          blendMode: (tree.flutterShaderMaskLayer.hasBlendMode() ? enums.convertDartBlendModeType(tree.flutterShaderMaskLayer.blendMode) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSharedAppData:
      return $flutterSrcWidgetsSharedAppData.SharedAppData(
          key: (tree.flutterSharedAppData.hasKey() ? evaluateFlutterKeyType(tree.flutterSharedAppData.key) : null),
          child: (tree.flutterSharedAppData.hasChild() ? evaluateRequiredWidgetType(tree.flutterSharedAppData.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterShortcutRegistrar:
      return $flutterSrcWidgetsShortcuts.ShortcutRegistrar(
          key: (tree.flutterShortcutRegistrar.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutRegistrar.key) : null),
          child: (tree.flutterShortcutRegistrar.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutRegistrar.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterShortcutsNamedManager:
      return $flutterSrcWidgetsShortcuts.Shortcuts.manager(
          key: (tree.flutterShortcutsNamedManager.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutsNamedManager.key) : null),
          manager: (tree.flutterShortcutsNamedManager.hasManager() ? evaluateRequiredFlutterShortcutManagerType(tree.flutterShortcutsNamedManager.manager) : missing('manager')),
          child: (tree.flutterShortcutsNamedManager.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutsNamedManager.child) : missing('child')),
          debugLabel: (tree.flutterShortcutsNamedManager.hasDebugLabel() ? tree.flutterShortcutsNamedManager.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterShrinkWrappingViewport:
      return $flutterSrcWidgetsViewport.ShrinkWrappingViewport(
          key: (tree.flutterShrinkWrappingViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterShrinkWrappingViewport.key) : null),
          axisDirection: (tree.flutterShrinkWrappingViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterShrinkWrappingViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.crossAxisDirection) : null),
          offset: (tree.flutterShrinkWrappingViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterShrinkWrappingViewport.offset) : missing('offset')),
          clipBehavior: (tree.flutterShrinkWrappingViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterShrinkWrappingViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterShrinkWrappingViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSingleChildRenderObjectElement:
      return $flutterSrcWidgetsFramework.SingleChildRenderObjectElement(
          (tree.flutterSingleChildRenderObjectElement.hasWidget() ? evaluateRequiredFlutterSingleChildRenderObjectWidgetType(tree.flutterSingleChildRenderObjectElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSingleChildScrollView:
      return $flutterSrcWidgetsSingleChildScrollView.SingleChildScrollView(
          key: (tree.flutterSingleChildScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterSingleChildScrollView.key) : null),
          scrollDirection: (tree.flutterSingleChildScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterSingleChildScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterSingleChildScrollView.hasReverse() ? tree.flutterSingleChildScrollView.reverse : false),
          padding: (tree.flutterSingleChildScrollView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterSingleChildScrollView.padding) : null),
          primary: (tree.flutterSingleChildScrollView.hasPrimary() ? tree.flutterSingleChildScrollView.primary : null),
          physics: (tree.flutterSingleChildScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterSingleChildScrollView.physics) : null),
          controller: (tree.flutterSingleChildScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterSingleChildScrollView.controller) : null),
          child: (tree.flutterSingleChildScrollView.hasChild() ? evaluateWidgetType(tree.flutterSingleChildScrollView.child) : null),
          dragStartBehavior: (tree.flutterSingleChildScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterSingleChildScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterSingleChildScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterSingleChildScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterSingleChildScrollView.hasRestorationId() ? tree.flutterSingleChildScrollView.restorationId : null),
          keyboardDismissBehavior: (tree.flutterSingleChildScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterSingleChildScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizeChangedLayoutNotifier:
      return $flutterSrcWidgetsSizeChangedLayoutNotifier.SizeChangedLayoutNotifier(
          key: (tree.flutterSizeChangedLayoutNotifier.hasKey() ? evaluateFlutterKeyType(tree.flutterSizeChangedLayoutNotifier.key) : null),
          child: (tree.flutterSizeChangedLayoutNotifier.hasChild() ? evaluateWidgetType(tree.flutterSizeChangedLayoutNotifier.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedBox:
      return $flutterSrcWidgetsBasic.SizedBox(
          key: (tree.flutterSizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBox.key) : null),
          width: (tree.flutterSizedBox.hasWidth() ? tree.flutterSizedBox.width : null),
          height: (tree.flutterSizedBox.hasHeight() ? tree.flutterSizedBox.height : null),
          child: (tree.flutterSizedBox.hasChild() ? evaluateWidgetType(tree.flutterSizedBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedBoxNamedExpand:
      return $flutterSrcWidgetsBasic.SizedBox.expand(
          key: (tree.flutterSizedBoxNamedExpand.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedExpand.key) : null),
          child: (tree.flutterSizedBoxNamedExpand.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedExpand.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedBoxNamedFromSize:
      return $flutterSrcWidgetsBasic.SizedBox.fromSize(
          key: (tree.flutterSizedBoxNamedFromSize.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedFromSize.key) : null),
          child: (tree.flutterSizedBoxNamedFromSize.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedFromSize.child) : null),
          size: (tree.flutterSizedBoxNamedFromSize.hasSize() ? evaluateDartSizeType(tree.flutterSizedBoxNamedFromSize.size) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedBoxNamedShrink:
      return $flutterSrcWidgetsBasic.SizedBox.shrink(
          key: (tree.flutterSizedBoxNamedShrink.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedShrink.key) : null),
          child: (tree.flutterSizedBoxNamedShrink.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedShrink.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedBoxNamedSquare:
      return $flutterSrcWidgetsBasic.SizedBox.square(
          key: (tree.flutterSizedBoxNamedSquare.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedSquare.key) : null),
          child: (tree.flutterSizedBoxNamedSquare.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedSquare.child) : null),
          dimension: (tree.flutterSizedBoxNamedSquare.hasDimension() ? tree.flutterSizedBoxNamedSquare.dimension : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSizedOverflowBox:
      return $flutterSrcWidgetsBasic.SizedOverflowBox(
          key: (tree.flutterSizedOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedOverflowBox.key) : null),
          size: (tree.flutterSizedOverflowBox.hasSize() ? evaluateRequiredDartSizeType(tree.flutterSizedOverflowBox.size) : missing('size')),
          alignment: (tree.flutterSizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterSizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterSizedOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterSizedOverflowBox.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.SliverAnimatedOpacity(
          key: (tree.flutterSliverAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverAnimatedOpacity.key) : null),
          sliver: (tree.flutterSliverAnimatedOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverAnimatedOpacity.sliver) : null),
          opacity: (tree.flutterSliverAnimatedOpacity.hasOpacity() ? tree.flutterSliverAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterSliverAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterSliverAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterSliverAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterSliverAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterSliverAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverConstrainedCrossAxis:
      return $flutterSrcWidgetsSliver.SliverConstrainedCrossAxis(
          key: (tree.flutterSliverConstrainedCrossAxis.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverConstrainedCrossAxis.key) : null),
          maxExtent: (tree.flutterSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')),
          sliver: (tree.flutterSliverConstrainedCrossAxis.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverConstrainedCrossAxis.sliver) : missing('sliver')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverCrossAxisExpanded:
      return $flutterSrcWidgetsSliver.SliverCrossAxisExpanded(
          key: (tree.flutterSliverCrossAxisExpanded.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverCrossAxisExpanded.key) : null),
          flex: (tree.flutterSliverCrossAxisExpanded.hasFlex() ? tree.flutterSliverCrossAxisExpanded.flex : missing('flex')),
          sliver: (tree.flutterSliverCrossAxisExpanded.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverCrossAxisExpanded.sliver) : missing('sliver')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverCrossAxisGroup:
      return $flutterSrcWidgetsSliver.SliverCrossAxisGroup(
          key: (tree.flutterSliverCrossAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverCrossAxisGroup.key) : null),
          slivers: tree.flutterSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverFillRemaining:
      return $flutterSrcWidgetsSliverFill.SliverFillRemaining(
          key: (tree.flutterSliverFillRemaining.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillRemaining.key) : null),
          child: (tree.flutterSliverFillRemaining.hasChild() ? evaluateWidgetType(tree.flutterSliverFillRemaining.child) : null),
          hasScrollBody: (tree.flutterSliverFillRemaining.hasHasScrollBody() ? tree.flutterSliverFillRemaining.hasScrollBody : true),
          fillOverscroll: (tree.flutterSliverFillRemaining.hasFillOverscroll() ? tree.flutterSliverFillRemaining.fillOverscroll : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverFillViewport:
      return $flutterSrcWidgetsSliverFill.SliverFillViewport(
          key: (tree.flutterSliverFillViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillViewport.key) : null),
          delegate: (tree.flutterSliverFillViewport.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFillViewport.delegate) : missing('delegate')),
          viewportFraction: (tree.flutterSliverFillViewport.hasViewportFraction() ? tree.flutterSliverFillViewport.viewportFraction : 1.0),
          padEnds: (tree.flutterSliverFillViewport.hasPadEnds() ? tree.flutterSliverFillViewport.padEnds : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverFixedExtentList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList(
          key: (tree.flutterSliverFixedExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentList.key) : null),
          delegate: (tree.flutterSliverFixedExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFixedExtentList.delegate) : missing('delegate')),
          itemExtent: (tree.flutterSliverFixedExtentList.hasItemExtent() ? tree.flutterSliverFixedExtentList.itemExtent : missing('itemExtent')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverFixedExtentListNamedList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList.list(
          key: (tree.flutterSliverFixedExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentListNamedList.key) : null),
          children: tree.flutterSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          itemExtent: (tree.flutterSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')),
          addAutomaticKeepAlives: (tree.flutterSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverFixedExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverFixedExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverGrid:
      return $flutterSrcWidgetsSliver.SliverGrid(
          key: (tree.flutterSliverGrid.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGrid.key) : null),
          delegate: (tree.flutterSliverGrid.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverGrid.delegate) : missing('delegate')),
          gridDelegate: (tree.flutterSliverGrid.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterSliverGrid.gridDelegate) : missing('gridDelegate')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverGridNamedCount:
      return $flutterSrcWidgetsSliver.SliverGrid.count(
          key: (tree.flutterSliverGridNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedCount.key) : null),
          crossAxisCount: (tree.flutterSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterSliverGridNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterSliverGridNamedCount.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverGridNamedExtent:
      return $flutterSrcWidgetsSliver.SliverGrid.extent(
          key: (tree.flutterSliverGridNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedExtent.key) : null),
          maxCrossAxisExtent: (tree.flutterSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterSliverGridNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterSliverGridNamedExtent.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverIgnorePointer:
      return $flutterSrcWidgetsSliver.SliverIgnorePointer(
          key: (tree.flutterSliverIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverIgnorePointer.key) : null),
          ignoring: (tree.flutterSliverIgnorePointer.hasIgnoring() ? tree.flutterSliverIgnorePointer.ignoring : true),
          sliver: (tree.flutterSliverIgnorePointer.hasSliver() ? evaluateWidgetType(tree.flutterSliverIgnorePointer.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverList:
      return $flutterSrcWidgetsSliver.SliverList(
          key: (tree.flutterSliverList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverList.key) : null),
          delegate: (tree.flutterSliverList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverList.delegate) : missing('delegate')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverListNamedList:
      return $flutterSrcWidgetsSliver.SliverList.list(
          key: (tree.flutterSliverListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverListNamedList.key) : null),
          children: tree.flutterSliverListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          addAutomaticKeepAlives: (tree.flutterSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverListNamedList.addSemanticIndexes : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverMainAxisGroup:
      return $flutterSrcWidgetsSliver.SliverMainAxisGroup(
          key: (tree.flutterSliverMainAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverMainAxisGroup.key) : null),
          slivers: tree.flutterSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverMultiBoxAdaptorElement:
      return $flutterSrcWidgetsSliver.SliverMultiBoxAdaptorElement(
          (tree.flutterSliverMultiBoxAdaptorElement.hasWidget() ? evaluateRequiredFlutterSliverMultiBoxAdaptorWidgetType(tree.flutterSliverMultiBoxAdaptorElement.widget) : missing('widget')),
          replaceMovedChildren: (tree.flutterSliverMultiBoxAdaptorElement.hasReplaceMovedChildren() ? tree.flutterSliverMultiBoxAdaptorElement.replaceMovedChildren : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverOffstage:
      return $flutterSrcWidgetsSliver.SliverOffstage(
          key: (tree.flutterSliverOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOffstage.key) : null),
          offstage: (tree.flutterSliverOffstage.hasOffstage() ? tree.flutterSliverOffstage.offstage : true),
          sliver: (tree.flutterSliverOffstage.hasSliver() ? evaluateWidgetType(tree.flutterSliverOffstage.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverOpacity:
      return $flutterSrcWidgetsSliver.SliverOpacity(
          key: (tree.flutterSliverOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOpacity.key) : null),
          opacity: (tree.flutterSliverOpacity.hasOpacity() ? tree.flutterSliverOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverOpacity.alwaysIncludeSemantics : false),
          sliver: (tree.flutterSliverOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverOpacity.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverOverlapAbsorber:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorber(
          key: (tree.flutterSliverOverlapAbsorber.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapAbsorber.key) : null),
          handle: (tree.flutterSliverOverlapAbsorber.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapAbsorber.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapAbsorber.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapAbsorber.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverOverlapInjector:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapInjector(
          key: (tree.flutterSliverOverlapInjector.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapInjector.key) : null),
          handle: (tree.flutterSliverOverlapInjector.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapInjector.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapInjector.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapInjector.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverPadding:
      return $flutterSrcWidgetsBasic.SliverPadding(
          key: (tree.flutterSliverPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPadding.key) : null),
          padding: (tree.flutterSliverPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterSliverPadding.padding) : missing('padding')),
          sliver: (tree.flutterSliverPadding.hasSliver() ? evaluateWidgetType(tree.flutterSliverPadding.sliver) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverPersistentHeader:
      return $flutterSrcWidgetsSliverPersistentHeader.SliverPersistentHeader(
          key: (tree.flutterSliverPersistentHeader.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPersistentHeader.key) : null),
          delegate: missing('delegate'),
          pinned: (tree.flutterSliverPersistentHeader.hasPinned() ? tree.flutterSliverPersistentHeader.pinned : false),
          floating: (tree.flutterSliverPersistentHeader.hasFloating() ? tree.flutterSliverPersistentHeader.floating : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverPrototypeExtentList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList(
          key: (tree.flutterSliverPrototypeExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentList.key) : null),
          delegate: (tree.flutterSliverPrototypeExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverPrototypeExtentList.delegate) : missing('delegate')),
          prototypeItem: (tree.flutterSliverPrototypeExtentList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentList.prototypeItem) : missing('prototypeItem')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverPrototypeExtentListNamedList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList.list(
          key: (tree.flutterSliverPrototypeExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentListNamedList.key) : null),
          children: tree.flutterSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          prototypeItem: (tree.flutterSliverPrototypeExtentListNamedList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentListNamedList.prototypeItem) : missing('prototypeItem')),
          addAutomaticKeepAlives: (tree.flutterSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverPrototypeExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverSafeArea:
      return $flutterSrcWidgetsSafeArea.SliverSafeArea(
          key: (tree.flutterSliverSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverSafeArea.key) : null),
          left: (tree.flutterSliverSafeArea.hasLeft() ? tree.flutterSliverSafeArea.left : true),
          top: (tree.flutterSliverSafeArea.hasTop() ? tree.flutterSliverSafeArea.top : true),
          right: (tree.flutterSliverSafeArea.hasRight() ? tree.flutterSliverSafeArea.right : true),
          bottom: (tree.flutterSliverSafeArea.hasBottom() ? tree.flutterSliverSafeArea.bottom : true),
          minimum: (tree.flutterSliverSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSliverSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          sliver: (tree.flutterSliverSafeArea.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverSafeArea.sliver) : missing('sliver')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverToBoxAdapter:
      return $flutterSrcWidgetsBasic.SliverToBoxAdapter(
          key: (tree.flutterSliverToBoxAdapter.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverToBoxAdapter.key) : null),
          child: (tree.flutterSliverToBoxAdapter.hasChild() ? evaluateWidgetType(tree.flutterSliverToBoxAdapter.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverVisibility:
      return $flutterSrcWidgetsVisibility.SliverVisibility(
          key: (tree.flutterSliverVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibility.key) : null),
          sliver: (tree.flutterSliverVisibility.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibility.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibility.hasVisible() ? tree.flutterSliverVisibility.visible : true),
          maintainState: (tree.flutterSliverVisibility.hasMaintainState() ? tree.flutterSliverVisibility.maintainState : false),
          maintainAnimation: (tree.flutterSliverVisibility.hasMaintainAnimation() ? tree.flutterSliverVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterSliverVisibility.hasMaintainSize() ? tree.flutterSliverVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterSliverVisibility.hasMaintainSemantics() ? tree.flutterSliverVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterSliverVisibility.hasMaintainInteractivity() ? tree.flutterSliverVisibility.maintainInteractivity : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSliverVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.SliverVisibility.maintain(
          key: (tree.flutterSliverVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibilityNamedMaintain.key) : null),
          sliver: (tree.flutterSliverVisibilityNamedMaintain.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibilityNamedMaintain.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterSliverVisibilityNamedMaintain.visible : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSnapshotWidget:
      return $flutterSrcWidgetsSnapshotWidget.SnapshotWidget(
          key: (tree.flutterSnapshotWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterSnapshotWidget.key) : null),
          mode: (tree.flutterSnapshotWidget.hasMode() ? enums.convertRequiredFlutterSnapshotModeType(tree.flutterSnapshotWidget.mode) : $flutterSrcWidgetsSnapshotWidget.SnapshotMode.normal),
          autoresize: (tree.flutterSnapshotWidget.hasAutoresize() ? tree.flutterSnapshotWidget.autoresize : false),
          controller: (tree.flutterSnapshotWidget.hasController() ? evaluateRequiredFlutterSnapshotControllerType(tree.flutterSnapshotWidget.controller) : missing('controller')),
          child: (tree.flutterSnapshotWidget.hasChild() ? evaluateWidgetType(tree.flutterSnapshotWidget.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSpacer:
      return $flutterSrcWidgetsSpacer.Spacer(
          key: (tree.flutterSpacer.hasKey() ? evaluateFlutterKeyType(tree.flutterSpacer.key) : null),
          flex: (tree.flutterSpacer.hasFlex() ? tree.flutterSpacer.flex : 1));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSrcSemanticsSemanticsHintOverrides:
      return $flutterSrcSemanticsSemantics.SemanticsHintOverrides(
          onTapHint: (tree.flutterSrcSemanticsSemanticsHintOverrides.hasOnTapHint() ? tree.flutterSrcSemanticsSemanticsHintOverrides.onTapHint : null),
          onLongPressHint: (tree.flutterSrcSemanticsSemanticsHintOverrides.hasOnLongPressHint() ? tree.flutterSrcSemanticsSemanticsHintOverrides.onLongPressHint : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSrcSemanticsSemanticsNode:
      return $flutterSrcSemanticsSemantics.SemanticsNode(
          key: (tree.flutterSrcSemanticsSemanticsNode.hasKey() ? evaluateFlutterKeyType(tree.flutterSrcSemanticsSemanticsNode.key) : null),
          showOnScreen: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSrcSemanticsSemanticsNodeNamedRoot:
      return $flutterSrcSemanticsSemantics.SemanticsNode.root(
          key: (tree.flutterSrcSemanticsSemanticsNodeNamedRoot.hasKey() ? evaluateFlutterKeyType(tree.flutterSrcSemanticsSemanticsNodeNamedRoot.key) : null),
          showOnScreen: null,
          owner: missing('owner'));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterSrcSemanticsSemanticsProperties:
      return $flutterSrcSemanticsSemantics.SemanticsProperties(
          enabled: (tree.flutterSrcSemanticsSemanticsProperties.hasEnabled() ? tree.flutterSrcSemanticsSemanticsProperties.enabled : null),
          checked: (tree.flutterSrcSemanticsSemanticsProperties.hasChecked() ? tree.flutterSrcSemanticsSemanticsProperties.checked : null),
          mixed: (tree.flutterSrcSemanticsSemanticsProperties.hasMixed() ? tree.flutterSrcSemanticsSemanticsProperties.mixed : null),
          expanded: (tree.flutterSrcSemanticsSemanticsProperties.hasExpanded() ? tree.flutterSrcSemanticsSemanticsProperties.expanded : null),
          selected: (tree.flutterSrcSemanticsSemanticsProperties.hasSelected() ? tree.flutterSrcSemanticsSemanticsProperties.selected : null),
          toggled: (tree.flutterSrcSemanticsSemanticsProperties.hasToggled() ? tree.flutterSrcSemanticsSemanticsProperties.toggled : null),
          button: (tree.flutterSrcSemanticsSemanticsProperties.hasButton() ? tree.flutterSrcSemanticsSemanticsProperties.button : null),
          link: (tree.flutterSrcSemanticsSemanticsProperties.hasLink() ? tree.flutterSrcSemanticsSemanticsProperties.link : null),
          header: (tree.flutterSrcSemanticsSemanticsProperties.hasHeader() ? tree.flutterSrcSemanticsSemanticsProperties.header : null),
          textField: (tree.flutterSrcSemanticsSemanticsProperties.hasTextField() ? tree.flutterSrcSemanticsSemanticsProperties.textField : null),
          slider: (tree.flutterSrcSemanticsSemanticsProperties.hasSlider() ? tree.flutterSrcSemanticsSemanticsProperties.slider : null),
          keyboardKey: (tree.flutterSrcSemanticsSemanticsProperties.hasKeyboardKey() ? tree.flutterSrcSemanticsSemanticsProperties.keyboardKey : null),
          readOnly: (tree.flutterSrcSemanticsSemanticsProperties.hasReadOnly() ? tree.flutterSrcSemanticsSemanticsProperties.readOnly : null),
          focusable: (tree.flutterSrcSemanticsSemanticsProperties.hasFocusable() ? tree.flutterSrcSemanticsSemanticsProperties.focusable : null),
          focused: (tree.flutterSrcSemanticsSemanticsProperties.hasFocused() ? tree.flutterSrcSemanticsSemanticsProperties.focused : null),
          inMutuallyExclusiveGroup: (tree.flutterSrcSemanticsSemanticsProperties.hasInMutuallyExclusiveGroup() ? tree.flutterSrcSemanticsSemanticsProperties.inMutuallyExclusiveGroup : null),
          hidden: (tree.flutterSrcSemanticsSemanticsProperties.hasHidden() ? tree.flutterSrcSemanticsSemanticsProperties.hidden : null),
          obscured: (tree.flutterSrcSemanticsSemanticsProperties.hasObscured() ? tree.flutterSrcSemanticsSemanticsProperties.obscured : null),
          multiline: (tree.flutterSrcSemanticsSemanticsProperties.hasMultiline() ? tree.flutterSrcSemanticsSemanticsProperties.multiline : null),
          scopesRoute: (tree.flutterSrcSemanticsSemanticsProperties.hasScopesRoute() ? tree.flutterSrcSemanticsSemanticsProperties.scopesRoute : null),
          namesRoute: (tree.flutterSrcSemanticsSemanticsProperties.hasNamesRoute() ? tree.flutterSrcSemanticsSemanticsProperties.namesRoute : null),
          image: (tree.flutterSrcSemanticsSemanticsProperties.hasImage() ? tree.flutterSrcSemanticsSemanticsProperties.image : null),
          liveRegion: (tree.flutterSrcSemanticsSemanticsProperties.hasLiveRegion() ? tree.flutterSrcSemanticsSemanticsProperties.liveRegion : null),
          maxValueLength: (tree.flutterSrcSemanticsSemanticsProperties.hasMaxValueLength() ? tree.flutterSrcSemanticsSemanticsProperties.maxValueLength : null),
          currentValueLength: (tree.flutterSrcSemanticsSemanticsProperties.hasCurrentValueLength() ? tree.flutterSrcSemanticsSemanticsProperties.currentValueLength : null),
          label: (tree.flutterSrcSemanticsSemanticsProperties.hasLabel() ? tree.flutterSrcSemanticsSemanticsProperties.label : null),
          attributedLabel: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedLabel() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedLabel) : null),
          value: (tree.flutterSrcSemanticsSemanticsProperties.hasValue() ? tree.flutterSrcSemanticsSemanticsProperties.value : null),
          attributedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedValue) : null),
          increasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasIncreasedValue() ? tree.flutterSrcSemanticsSemanticsProperties.increasedValue : null),
          attributedIncreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedIncreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedIncreasedValue) : null),
          decreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasDecreasedValue() ? tree.flutterSrcSemanticsSemanticsProperties.decreasedValue : null),
          attributedDecreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedDecreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedDecreasedValue) : null),
          hint: (tree.flutterSrcSemanticsSemanticsProperties.hasHint() ? tree.flutterSrcSemanticsSemanticsProperties.hint : null),
          tooltip: (tree.flutterSrcSemanticsSemanticsProperties.hasTooltip() ? tree.flutterSrcSemanticsSemanticsProperties.tooltip : null),
          attributedHint: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedHint() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedHint) : null),
          hintOverrides: (tree.flutterSrcSemanticsSemanticsProperties.hasHintOverrides() ? evaluateFlutterSrcSemanticsSemanticsHintOverridesType(tree.flutterSrcSemanticsSemanticsProperties.hintOverrides) : null),
          textDirection: (tree.flutterSrcSemanticsSemanticsProperties.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterSrcSemanticsSemanticsProperties.textDirection) : null),
          sortKey: (tree.flutterSrcSemanticsSemanticsProperties.hasSortKey() ? evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree.flutterSrcSemanticsSemanticsProperties.sortKey) : null),
          tagForChildren: (tree.flutterSrcSemanticsSemanticsProperties.hasTagForChildren() ? evaluateFlutterSrcSemanticsSemanticsTagType(tree.flutterSrcSemanticsSemanticsProperties.tagForChildren) : null),
          onTap: null,
          onLongPress: null,
          onScrollLeft: null,
          onScrollRight: null,
          onScrollUp: null,
          onScrollDown: null,
          onIncrease: null,
          onDecrease: null,
          onCopy: null,
          onCut: null,
          onPaste: null,
          onMoveCursorForwardByCharacter: null,
          onMoveCursorBackwardByCharacter: null,
          onMoveCursorForwardByWord: null,
          onMoveCursorBackwardByWord: null,
          onSetSelection: null,
          onSetText: null,
          onDidGainAccessibilityFocus: null,
          onDidLoseAccessibilityFocus: null,
          onDismiss: null,
          customSemanticsActions: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterStack:
      return $flutterSrcWidgetsBasic.Stack(
          key: (tree.flutterStack.hasKey() ? evaluateFlutterKeyType(tree.flutterStack.key) : null),
          alignment: (tree.flutterStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterStack.textDirection) : null),
          fit: (tree.flutterStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStack.clipBehavior) : $dartUi.Clip.hardEdge),
          children: tree.flutterStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterStatefulElement:
      return $flutterSrcWidgetsFramework.StatefulElement(
          (tree.flutterStatefulElement.hasWidget() ? evaluateRequiredFlutterStatefulWidgetType(tree.flutterStatefulElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterStatelessElement:
      return $flutterSrcWidgetsFramework.StatelessElement(
          (tree.flutterStatelessElement.hasWidget() ? evaluateRequiredFlutterStatelessWidgetType(tree.flutterStatelessElement.widget) : missing('widget')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterStretchingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.StretchingOverscrollIndicator(
          key: (tree.flutterStretchingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterStretchingOverscrollIndicator.key) : null),
          axisDirection: (tree.flutterStretchingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterStretchingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          clipBehavior: (tree.flutterStretchingOverscrollIndicator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStretchingOverscrollIndicator.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterStretchingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterStretchingOverscrollIndicator.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTable:
      return $flutterSrcWidgetsTable.Table(
          key: (tree.flutterTable.hasKey() ? evaluateFlutterKeyType(tree.flutterTable.key) : null),
          children: tree.flutterTable.children.map((e) => evaluateRequiredFlutterTableRowType(e)).toList(),
          columnWidths: null,
          defaultColumnWidth: (tree.flutterTable.hasDefaultColumnWidth() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterTable.defaultColumnWidth) : $flutterSrcRenderingTable.FlexColumnWidth()),
          textDirection: (tree.flutterTable.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterTable.textDirection) : null),
          border: (tree.flutterTable.hasBorder() ? evaluateFlutterTableBorderType(tree.flutterTable.border) : null),
          defaultVerticalAlignment: (tree.flutterTable.hasDefaultVerticalAlignment() ? enums.convertRequiredFlutterTableCellVerticalAlignmentType(tree.flutterTable.defaultVerticalAlignment) : $flutterSrcRenderingTable.TableCellVerticalAlignment.top),
          textBaseline: (tree.flutterTable.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterTable.textBaseline) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTableCell:
      return $flutterSrcWidgetsTable.TableCell(
          key: (tree.flutterTableCell.hasKey() ? evaluateFlutterKeyType(tree.flutterTableCell.key) : null),
          verticalAlignment: (tree.flutterTableCell.hasVerticalAlignment() ? enums.convertFlutterTableCellVerticalAlignmentType(tree.flutterTableCell.verticalAlignment) : null),
          child: (tree.flutterTableCell.hasChild() ? evaluateRequiredWidgetType(tree.flutterTableCell.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTapAndHorizontalDragGestureRecognizer:
      return $flutterSrcGesturesTapAndDrag.TapAndHorizontalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTapAndPanGestureRecognizer:
      return $flutterSrcGesturesTapAndDrag.TapAndPanGestureRecognizer(
          debugOwner: null,
          supportedDevices: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTapGestureRecognizer:
      return $flutterSrcGesturesTap.TapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTapRegion:
      return $flutterSrcWidgetsTapRegion.TapRegion(
          key: (tree.flutterTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegion.key) : null),
          child: (tree.flutterTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTapRegion.child) : null),
          enabled: (tree.flutterTapRegion.hasEnabled() ? tree.flutterTapRegion.enabled : true),
          behavior: (tree.flutterTapRegion.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterTapRegion.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          onTapOutside: null,
          onTapInside: null,
          groupId: null,
          debugLabel: (tree.flutterTapRegion.hasDebugLabel() ? tree.flutterTapRegion.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.TapRegionSurface(
          key: (tree.flutterTapRegionSurface.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegionSurface.key) : null),
          child: (tree.flutterTapRegionSurface.hasChild() ? evaluateRequiredWidgetType(tree.flutterTapRegionSurface.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterText:
      return $flutterSrcWidgetsText.Text(
          (tree.flutterText.hasData() ? tree.flutterText.data : missing('data')),
          key: (tree.flutterText.hasKey() ? evaluateFlutterKeyType(tree.flutterText.key) : null),
          style: (tree.flutterText.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterText.style) : null),
          strutStyle: (tree.flutterText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterText.strutStyle) : null),
          textAlign: (tree.flutterText.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterText.textAlign) : null),
          textDirection: (tree.flutterText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterText.textDirection) : null),
          locale: (tree.flutterText.hasLocale() ? evaluateDartLocaleType(tree.flutterText.locale) : null),
          softWrap: (tree.flutterText.hasSoftWrap() ? tree.flutterText.softWrap : null),
          overflow: (tree.flutterText.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterText.overflow) : null),
          textScaler: (tree.flutterText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterText.textScaler) : null),
          maxLines: (tree.flutterText.hasMaxLines() ? tree.flutterText.maxLines : null),
          semanticsLabel: (tree.flutterText.hasSemanticsLabel() ? tree.flutterText.semanticsLabel : null),
          textWidthBasis: (tree.flutterText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterText.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterText.textHeightBehavior) : null),
          selectionColor: (tree.flutterText.hasSelectionColor() ? evaluateDartColorType(tree.flutterText.selectionColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextFieldTapRegion:
      return $flutterSrcWidgetsTapRegion.TextFieldTapRegion(
          key: (tree.flutterTextFieldTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTextFieldTapRegion.key) : null),
          child: (tree.flutterTextFieldTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTextFieldTapRegion.child) : null),
          enabled: (tree.flutterTextFieldTapRegion.hasEnabled() ? tree.flutterTextFieldTapRegion.enabled : true),
          onTapOutside: null,
          onTapInside: null,
          debugLabel: (tree.flutterTextFieldTapRegion.hasDebugLabel() ? tree.flutterTextFieldTapRegion.debugLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextNamedRich:
      return $flutterSrcWidgetsText.Text.rich(
          (tree.flutterTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterInlineSpanType(tree.flutterTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.flutterTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.flutterTextNamedRich.key) : null),
          style: (tree.flutterTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextNamedRich.style) : null),
          strutStyle: (tree.flutterTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterTextNamedRich.strutStyle) : null),
          textAlign: (tree.flutterTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterTextNamedRich.textAlign) : null),
          textDirection: (tree.flutterTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterTextNamedRich.textDirection) : null),
          locale: (tree.flutterTextNamedRich.hasLocale() ? evaluateDartLocaleType(tree.flutterTextNamedRich.locale) : null),
          softWrap: (tree.flutterTextNamedRich.hasSoftWrap() ? tree.flutterTextNamedRich.softWrap : null),
          overflow: (tree.flutterTextNamedRich.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterTextNamedRich.overflow) : null),
          textScaler: (tree.flutterTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterTextNamedRich.textScaler) : null),
          maxLines: (tree.flutterTextNamedRich.hasMaxLines() ? tree.flutterTextNamedRich.maxLines : null),
          semanticsLabel: (tree.flutterTextNamedRich.hasSemanticsLabel() ? tree.flutterTextNamedRich.semanticsLabel : null),
          textWidthBasis: (tree.flutterTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterTextNamedRich.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterTextNamedRich.textHeightBehavior) : null),
          selectionColor: (tree.flutterTextNamedRich.hasSelectionColor() ? evaluateDartColorType(tree.flutterTextNamedRich.selectionColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextSelectionGestureDetector:
      return $flutterSrcWidgetsTextSelection.TextSelectionGestureDetector(
          key: (tree.flutterTextSelectionGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterTextSelectionGestureDetector.key) : null),
          onTapTrackStart: null,
          onTapTrackReset: null,
          onTapDown: null,
          onForcePressStart: null,
          onForcePressEnd: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSingleTapUp: null,
          onSingleTapCancel: null,
          onSingleLongTapStart: null,
          onSingleLongTapMoveUpdate: null,
          onSingleLongTapEnd: null,
          onDoubleTapDown: null,
          onTripleTapDown: null,
          onDragSelectionStart: null,
          onDragSelectionUpdate: null,
          onDragSelectionEnd: null,
          behavior: (tree.flutterTextSelectionGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterTextSelectionGestureDetector.behavior) : null),
          child: (tree.flutterTextSelectionGestureDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterTextSelectionGestureDetector.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextSpan:
      return $flutterSrcPaintingTextSpan.TextSpan(
          text: (tree.flutterTextSpan.hasText() ? tree.flutterTextSpan.text : null),
          children: tree.flutterTextSpan.children.map((e) => evaluateRequiredFlutterInlineSpanType(e)).toList(),
          style: (tree.flutterTextSpan.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextSpan.style) : null),
          recognizer: (tree.flutterTextSpan.hasRecognizer() ? evaluateFlutterGestureRecognizerType(tree.flutterTextSpan.recognizer) : null),
          mouseCursor: null,
          onEnter: null,
          onExit: null,
          semanticsLabel: (tree.flutterTextSpan.hasSemanticsLabel() ? tree.flutterTextSpan.semanticsLabel : null),
          locale: (tree.flutterTextSpan.hasLocale() ? evaluateDartLocaleType(tree.flutterTextSpan.locale) : null),
          spellOut: (tree.flutterTextSpan.hasSpellOut() ? tree.flutterTextSpan.spellOut : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTexture:
      return $flutterSrcWidgetsTexture.Texture(
          key: (tree.flutterTexture.hasKey() ? evaluateFlutterKeyType(tree.flutterTexture.key) : null),
          textureId: (tree.flutterTexture.hasTextureId() ? tree.flutterTexture.textureId : missing('textureId')),
          freeze: (tree.flutterTexture.hasFreeze_4() ? tree.flutterTexture.freeze_4 : false),
          filterQuality: (tree.flutterTexture.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTexture.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextureBox:
      return $flutterSrcRenderingTexture.TextureBox(
          textureId: (tree.flutterTextureBox.hasTextureId() ? tree.flutterTextureBox.textureId : missing('textureId')),
          freeze: (tree.flutterTextureBox.hasFreeze_3() ? tree.flutterTextureBox.freeze_3 : false),
          filterQuality: (tree.flutterTextureBox.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTextureBox.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTextureLayer:
      return $flutterSrcRenderingLayer.TextureLayer(
          rect: (tree.flutterTextureLayer.hasRect() ? evaluateRequiredDartRectType(tree.flutterTextureLayer.rect) : missing('rect')),
          textureId: (tree.flutterTextureLayer.hasTextureId() ? tree.flutterTextureLayer.textureId : missing('textureId')),
          freeze: (tree.flutterTextureLayer.hasFreeze_4() ? tree.flutterTextureLayer.freeze_4 : false),
          filterQuality: (tree.flutterTextureLayer.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTextureLayer.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTickerMode:
      return $flutterSrcWidgetsTickerProvider.TickerMode(
          key: (tree.flutterTickerMode.hasKey() ? evaluateFlutterKeyType(tree.flutterTickerMode.key) : null),
          enabled: (tree.flutterTickerMode.hasEnabled() ? tree.flutterTickerMode.enabled : missing('enabled')),
          child: (tree.flutterTickerMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterTickerMode.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTitle:
      return $flutterSrcWidgetsTitle.Title(
          key: (tree.flutterTitle.hasKey() ? evaluateFlutterKeyType(tree.flutterTitle.key) : null),
          title: (tree.flutterTitle.hasTitle() ? tree.flutterTitle.title : ''),
          color: (tree.flutterTitle.hasColor() ? evaluateRequiredDartColorType(tree.flutterTitle.color) : missing('color')),
          child: (tree.flutterTitle.hasChild() ? evaluateRequiredWidgetType(tree.flutterTitle.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransform:
      return $flutterSrcWidgetsBasic.Transform(
          key: (tree.flutterTransform.hasKey() ? evaluateFlutterKeyType(tree.flutterTransform.key) : null),
          transform: (tree.flutterTransform.hasTransform() ? evaluateRequiredVectorMathMatrix4Type(tree.flutterTransform.transform) : missing('transform')),
          origin: (tree.flutterTransform.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransform.origin) : null),
          alignment: (tree.flutterTransform.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransform.alignment) : null),
          transformHitTests: (tree.flutterTransform.hasTransformHitTests() ? tree.flutterTransform.transformHitTests : true),
          filterQuality: (tree.flutterTransform.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransform.filterQuality) : null),
          child: (tree.flutterTransform.hasChild() ? evaluateWidgetType(tree.flutterTransform.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransformLayer:
      return $flutterSrcRenderingLayer.TransformLayer(
          transform: (tree.flutterTransformLayer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterTransformLayer.transform) : null),
          offset: (tree.flutterTransformLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterTransformLayer.offset) : $dartUi.Offset.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransformNamedFlip:
      return $flutterSrcWidgetsBasic.Transform.flip(
          key: (tree.flutterTransformNamedFlip.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedFlip.key) : null),
          flipX: (tree.flutterTransformNamedFlip.hasFlipX() ? tree.flutterTransformNamedFlip.flipX : false),
          flipY: (tree.flutterTransformNamedFlip.hasFlipY() ? tree.flutterTransformNamedFlip.flipY : false),
          origin: (tree.flutterTransformNamedFlip.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedFlip.origin) : null),
          transformHitTests: (tree.flutterTransformNamedFlip.hasTransformHitTests() ? tree.flutterTransformNamedFlip.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedFlip.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedFlip.filterQuality) : null),
          child: (tree.flutterTransformNamedFlip.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedFlip.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransformNamedRotate:
      return $flutterSrcWidgetsBasic.Transform.rotate(
          key: (tree.flutterTransformNamedRotate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedRotate.key) : null),
          angle: (tree.flutterTransformNamedRotate.hasAngle() ? tree.flutterTransformNamedRotate.angle : missing('angle')),
          origin: (tree.flutterTransformNamedRotate.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedRotate.origin) : null),
          alignment: (tree.flutterTransformNamedRotate.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedRotate.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedRotate.hasTransformHitTests() ? tree.flutterTransformNamedRotate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedRotate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedRotate.filterQuality) : null),
          child: (tree.flutterTransformNamedRotate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedRotate.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransformNamedScale:
      return $flutterSrcWidgetsBasic.Transform.scale(
          key: (tree.flutterTransformNamedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedScale.key) : null),
          scale: (tree.flutterTransformNamedScale.hasScale() ? tree.flutterTransformNamedScale.scale : null),
          scaleX: (tree.flutterTransformNamedScale.hasScaleX() ? tree.flutterTransformNamedScale.scaleX : null),
          scaleY: (tree.flutterTransformNamedScale.hasScaleY() ? tree.flutterTransformNamedScale.scaleY : null),
          origin: (tree.flutterTransformNamedScale.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedScale.origin) : null),
          alignment: (tree.flutterTransformNamedScale.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedScale.hasTransformHitTests() ? tree.flutterTransformNamedScale.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedScale.filterQuality) : null),
          child: (tree.flutterTransformNamedScale.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedScale.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterTransformNamedTranslate:
      return $flutterSrcWidgetsBasic.Transform.translate(
          key: (tree.flutterTransformNamedTranslate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedTranslate.key) : null),
          offset: (tree.flutterTransformNamedTranslate.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterTransformNamedTranslate.offset) : missing('offset')),
          transformHitTests: (tree.flutterTransformNamedTranslate.hasTransformHitTests() ? tree.flutterTransformNamedTranslate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedTranslate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedTranslate.filterQuality) : null),
          child: (tree.flutterTransformNamedTranslate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedTranslate.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterUiKitView:
      return $flutterSrcWidgetsPlatformView.UiKitView(
          key: (tree.flutterUiKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterUiKitView.key) : null),
          viewType: (tree.flutterUiKitView.hasViewType() ? tree.flutterUiKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterUiKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterUiKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterUiKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterUiKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterUnconstrainedBox:
      return $flutterSrcWidgetsBasic.UnconstrainedBox(
          key: (tree.flutterUnconstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterUnconstrainedBox.key) : null),
          child: (tree.flutterUnconstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterUnconstrainedBox.child) : null),
          textDirection: (tree.flutterUnconstrainedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterUnconstrainedBox.textDirection) : null),
          alignment: (tree.flutterUnconstrainedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterUnconstrainedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          constrainedAxis: (tree.flutterUnconstrainedBox.hasConstrainedAxis() ? enums.convertFlutterAxisType(tree.flutterUnconstrainedBox.constrainedAxis) : null),
          clipBehavior: (tree.flutterUnconstrainedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterUnconstrainedBox.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterUnmanagedRestorationScope:
      return $flutterSrcWidgetsRestoration.UnmanagedRestorationScope(
          key: (tree.flutterUnmanagedRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterUnmanagedRestorationScope.key) : null),
          bucket: (tree.flutterUnmanagedRestorationScope.hasBucket() ? evaluateFlutterRestorationBucketType(tree.flutterUnmanagedRestorationScope.bucket) : null),
          child: (tree.flutterUnmanagedRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterUnmanagedRestorationScope.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterVerticalDragGestureRecognizer:
      return $flutterSrcGesturesMonodrag.VerticalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterVerticalMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.VerticalMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterView:
      return $flutterSrcWidgetsView.View(
          key: (tree.flutterView.hasKey() ? evaluateFlutterKeyType(tree.flutterView.key) : null),
          view: missing('view'),
          child: (tree.flutterView.hasChild() ? evaluateRequiredWidgetType(tree.flutterView.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterViewAnchor:
      return $flutterSrcWidgetsView.ViewAnchor(
          key: (tree.flutterViewAnchor.hasKey() ? evaluateFlutterKeyType(tree.flutterViewAnchor.key) : null),
          view: (tree.flutterViewAnchor.hasView() ? evaluateWidgetType(tree.flutterViewAnchor.view) : null),
          child: (tree.flutterViewAnchor.hasChild() ? evaluateRequiredWidgetType(tree.flutterViewAnchor.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterViewCollection:
      return $flutterSrcWidgetsView.ViewCollection(
          key: (tree.flutterViewCollection.hasKey() ? evaluateFlutterKeyType(tree.flutterViewCollection.key) : null),
          views: tree.flutterViewCollection.views.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterViewport:
      return $flutterSrcWidgetsViewport.Viewport(
          key: (tree.flutterViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterViewport.key) : null),
          axisDirection: (tree.flutterViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterViewport.crossAxisDirection) : null),
          anchor: (tree.flutterViewport.hasAnchor() ? tree.flutterViewport.anchor : 0.0),
          offset: (tree.flutterViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterViewport.offset) : missing('offset')),
          center: (tree.flutterViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterViewport.center) : null),
          cacheExtent: (tree.flutterViewport.hasCacheExtent() ? tree.flutterViewport.cacheExtent : null),
          cacheExtentStyle: (tree.flutterViewport.hasCacheExtentStyle() ? enums.convertRequiredFlutterCacheExtentStyleType(tree.flutterViewport.cacheExtentStyle) : $flutterSrcRenderingViewport.CacheExtentStyle.pixel),
          clipBehavior: (tree.flutterViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterVisibility:
      return $flutterSrcWidgetsVisibility.Visibility(
          key: (tree.flutterVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibility.key) : null),
          child: (tree.flutterVisibility.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibility.child) : missing('child')),
          replacement: (tree.flutterVisibility.hasReplacement() ? evaluateRequiredWidgetType(tree.flutterVisibility.replacement) : $flutterSrcWidgetsBasic.SizedBox.shrink()),
          visible: (tree.flutterVisibility.hasVisible() ? tree.flutterVisibility.visible : true),
          maintainState: (tree.flutterVisibility.hasMaintainState() ? tree.flutterVisibility.maintainState : false),
          maintainAnimation: (tree.flutterVisibility.hasMaintainAnimation() ? tree.flutterVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterVisibility.hasMaintainSize() ? tree.flutterVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterVisibility.hasMaintainSemantics() ? tree.flutterVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterVisibility.hasMaintainInteractivity() ? tree.flutterVisibility.maintainInteractivity : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.Visibility.maintain(
          key: (tree.flutterVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibilityNamedMaintain.key) : null),
          child: (tree.flutterVisibilityNamedMaintain.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibilityNamedMaintain.child) : missing('child')),
          visible: (tree.flutterVisibilityNamedMaintain.hasVisible() ? tree.flutterVisibilityNamedMaintain.visible : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWidgetInspector:
      return $flutterSrcWidgetsWidgetInspector.WidgetInspector(
          key: (tree.flutterWidgetInspector.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetInspector.key) : null),
          child: (tree.flutterWidgetInspector.hasChild() ? evaluateRequiredWidgetType(tree.flutterWidgetInspector.child) : missing('child')),
          selectButtonBuilder: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWidgetSpan:
      return $flutterSrcWidgetsWidgetSpan.WidgetSpan(
          child: (tree.flutterWidgetSpan.hasChild() ? evaluateRequiredWidgetType(tree.flutterWidgetSpan.child) : missing('child')),
          alignment: (tree.flutterWidgetSpan.hasAlignment() ? enums.convertRequiredDartPlaceholderAlignmentType(tree.flutterWidgetSpan.alignment) : $dartUi.PlaceholderAlignment.bottom),
          baseline: (tree.flutterWidgetSpan.hasBaseline() ? enums.convertDartTextBaselineType(tree.flutterWidgetSpan.baseline) : null),
          style: (tree.flutterWidgetSpan.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetSpan.style) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWidgetToRenderBoxAdapter:
      return $flutterSrcWidgetsBasic.WidgetToRenderBoxAdapter(
          renderBox: (tree.flutterWidgetToRenderBoxAdapter.hasRenderBox() ? evaluateRequiredFlutterRenderBoxType(tree.flutterWidgetToRenderBoxAdapter.renderBox) : missing('renderBox')),
          onBuild: null,
          onUnmount: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWidgetsApp:
      return $flutterSrcWidgetsApp.WidgetsApp(
          key: (tree.flutterWidgetsApp.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsApp.key) : null),
          navigatorKey: null,
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.flutterWidgetsApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          initialRoute: (tree.flutterWidgetsApp.hasInitialRoute() ? tree.flutterWidgetsApp.initialRoute : null),
          pageRouteBuilder: null,
          home: (tree.flutterWidgetsApp.hasHome() ? evaluateWidgetType(tree.flutterWidgetsApp.home) : null),
          builder: null,
          title: (tree.flutterWidgetsApp.hasTitle() ? tree.flutterWidgetsApp.title : ''),
          onGenerateTitle: null,
          textStyle: (tree.flutterWidgetsApp.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsApp.textStyle) : null),
          color: (tree.flutterWidgetsApp.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsApp.color) : missing('color')),
          locale: (tree.flutterWidgetsApp.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsApp.hasShowPerformanceOverlay() ? tree.flutterWidgetsApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsApp.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsApp.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsApp.hasShowSemanticsDebugger() ? tree.flutterWidgetsApp.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsApp.hasDebugShowWidgetInspector() ? tree.flutterWidgetsApp.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsApp.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsApp.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsApp.hasRestorationScopeId() ? tree.flutterWidgetsApp.restorationScopeId : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWidgetsAppNamedRouter:
      return $flutterSrcWidgetsApp.WidgetsApp.router(
          key: (tree.flutterWidgetsAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsAppNamedRouter.key) : null),
          routeInformationProvider: (tree.flutterWidgetsAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.flutterWidgetsAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.flutterWidgetsAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.flutterWidgetsAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.flutterWidgetsAppNamedRouter.hasTitle() ? tree.flutterWidgetsAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          textStyle: (tree.flutterWidgetsAppNamedRouter.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsAppNamedRouter.textStyle) : null),
          color: (tree.flutterWidgetsAppNamedRouter.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsAppNamedRouter.color) : missing('color')),
          locale: (tree.flutterWidgetsAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsAppNamedRouter.hasShowPerformanceOverlay() ? tree.flutterWidgetsAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsAppNamedRouter.hasShowSemanticsDebugger() ? tree.flutterWidgetsAppNamedRouter.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsAppNamedRouter.hasDebugShowWidgetInspector() ? tree.flutterWidgetsAppNamedRouter.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsAppNamedRouter.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsAppNamedRouter.hasRestorationScopeId() ? tree.flutterWidgetsAppNamedRouter.restorationScopeId : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.flutterWrap:
      return $flutterSrcWidgetsBasic.Wrap(
          key: (tree.flutterWrap.hasKey() ? evaluateFlutterKeyType(tree.flutterWrap.key) : null),
          direction: (tree.flutterWrap.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterWrap.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          alignment: (tree.flutterWrap.hasAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.alignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          spacing: (tree.flutterWrap.hasSpacing() ? tree.flutterWrap.spacing : 0.0),
          runAlignment: (tree.flutterWrap.hasRunAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.runAlignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          runSpacing: (tree.flutterWrap.hasRunSpacing() ? tree.flutterWrap.runSpacing : 0.0),
          crossAxisAlignment: (tree.flutterWrap.hasCrossAxisAlignment() ? enums.convertRequiredFlutterWrapCrossAlignmentType(tree.flutterWrap.crossAxisAlignment) : $flutterSrcRenderingWrap.WrapCrossAlignment.start),
          textDirection: (tree.flutterWrap.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterWrap.textDirection) : null),
          verticalDirection: (tree.flutterWrap.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterWrap.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          clipBehavior: (tree.flutterWrap.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterWrap.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterWrap.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAboutDialog:
      return $flutterSrcMaterialAbout.AboutDialog(
          key: (tree.materialAboutDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAboutDialog.key) : null),
          applicationName: (tree.materialAboutDialog.hasApplicationName() ? tree.materialAboutDialog.applicationName : null),
          applicationVersion: (tree.materialAboutDialog.hasApplicationVersion() ? tree.materialAboutDialog.applicationVersion : null),
          applicationIcon: (tree.materialAboutDialog.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutDialog.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutDialog.hasApplicationLegalese() ? tree.materialAboutDialog.applicationLegalese : null),
          children: tree.materialAboutDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAboutListTile:
      return $flutterSrcMaterialAbout.AboutListTile(
          key: (tree.materialAboutListTile.hasKey() ? evaluateFlutterKeyType(tree.materialAboutListTile.key) : null),
          icon: (tree.materialAboutListTile.hasIcon() ? evaluateWidgetType(tree.materialAboutListTile.icon) : null),
          child: (tree.materialAboutListTile.hasChild() ? evaluateWidgetType(tree.materialAboutListTile.child) : null),
          applicationName: (tree.materialAboutListTile.hasApplicationName() ? tree.materialAboutListTile.applicationName : null),
          applicationVersion: (tree.materialAboutListTile.hasApplicationVersion() ? tree.materialAboutListTile.applicationVersion : null),
          applicationIcon: (tree.materialAboutListTile.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutListTile.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutListTile.hasApplicationLegalese() ? tree.materialAboutListTile.applicationLegalese : null),
          aboutBoxChildren: tree.materialAboutListTile.aboutBoxChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dense: (tree.materialAboutListTile.hasDense() ? tree.materialAboutListTile.dense : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialActionChip:
      return $flutterSrcMaterialActionChip.ActionChip(
          key: (tree.materialActionChip.hasKey() ? evaluateFlutterKeyType(tree.materialActionChip.key) : null),
          avatar: (tree.materialActionChip.hasAvatar() ? evaluateWidgetType(tree.materialActionChip.avatar) : null),
          label: (tree.materialActionChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChip.label) : missing('label')),
          labelStyle: (tree.materialActionChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChip.labelStyle) : null),
          labelPadding: (tree.materialActionChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChip.hasPressElevation() ? tree.materialActionChip.pressElevation : null),
          tooltip: (tree.materialActionChip.hasTooltip() ? tree.materialActionChip.tooltip : null),
          side: (tree.materialActionChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChip.side) : null),
          shape: (tree.materialActionChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChip.shape) : null),
          clipBehavior: (tree.materialActionChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChip.focusNode) : null),
          autofocus: (tree.materialActionChip.hasAutofocus() ? tree.materialActionChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChip.backgroundColor) : null),
          disabledColor: (tree.materialActionChip.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChip.disabledColor) : null),
          padding: (tree.materialActionChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.padding) : null),
          visualDensity: (tree.materialActionChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChip.materialTapTargetSize) : null),
          elevation: (tree.materialActionChip.hasElevation() ? tree.materialActionChip.elevation : null),
          shadowColor: (tree.materialActionChip.hasShadowColor() ? evaluateDartColorType(tree.materialActionChip.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChip.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChip.iconTheme) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialActionChipNamedElevated:
      return $flutterSrcMaterialActionChip.ActionChip.elevated(
          key: (tree.materialActionChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialActionChipNamedElevated.key) : null),
          avatar: (tree.materialActionChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialActionChipNamedElevated.avatar) : null),
          label: (tree.materialActionChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialActionChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialActionChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChipNamedElevated.hasPressElevation() ? tree.materialActionChipNamedElevated.pressElevation : null),
          tooltip: (tree.materialActionChipNamedElevated.hasTooltip() ? tree.materialActionChipNamedElevated.tooltip : null),
          side: (tree.materialActionChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChipNamedElevated.side) : null),
          shape: (tree.materialActionChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialActionChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialActionChipNamedElevated.hasAutofocus() ? tree.materialActionChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.backgroundColor) : null),
          disabledColor: (tree.materialActionChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.disabledColor) : null),
          padding: (tree.materialActionChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.padding) : null),
          visualDensity: (tree.materialActionChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialActionChipNamedElevated.hasElevation() ? tree.materialActionChipNamedElevated.elevation : null),
          shadowColor: (tree.materialActionChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChipNamedElevated.iconTheme) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialActionIconTheme:
      return $flutterSrcMaterialActionIconsTheme.ActionIconTheme(
          key: (tree.materialActionIconTheme.hasKey() ? evaluateFlutterKeyType(tree.materialActionIconTheme.key) : null),
          data: (tree.materialActionIconTheme.hasData() ? evaluateRequiredMaterialActionIconThemeDataType(tree.materialActionIconTheme.data) : missing('data')),
          child: (tree.materialActionIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialActionIconTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAdaptiveTextSelectionToolbar:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar(
          key: (tree.materialAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbar.key) : null),
          children: tree.materialAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editable(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editableText(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAdaptiveTextSelectionToolbarNamedSelectableRegion:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.selectableRegion(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.key) : null),
          selectableRegionState: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasSelectableRegionState() ? evaluateRequiredFlutterSelectableRegionStateType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.selectableRegionState) : missing('selectableRegionState')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAlertDialog:
      return $flutterSrcMaterialDialog.AlertDialog(
          key: (tree.materialAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialog.key) : null),
          icon: (tree.materialAlertDialog.hasIcon() ? evaluateWidgetType(tree.materialAlertDialog.icon) : null),
          iconPadding: (tree.materialAlertDialog.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.iconPadding) : null),
          iconColor: (tree.materialAlertDialog.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialog.iconColor) : null),
          title: (tree.materialAlertDialog.hasTitle() ? evaluateWidgetType(tree.materialAlertDialog.title) : null),
          titlePadding: (tree.materialAlertDialog.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.titleTextStyle) : null),
          content: (tree.materialAlertDialog.hasContent() ? evaluateWidgetType(tree.materialAlertDialog.content) : null),
          contentPadding: (tree.materialAlertDialog.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialog.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.contentTextStyle) : null),
          actions: tree.materialAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialog.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialog.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialog.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialog.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialog.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialog.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialog.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialog.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialog.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialog.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialog.backgroundColor) : null),
          elevation: (tree.materialAlertDialog.hasElevation() ? tree.materialAlertDialog.elevation : null),
          shadowColor: (tree.materialAlertDialog.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialog.hasSemanticLabel() ? tree.materialAlertDialog.semanticLabel : null),
          insetPadding: (tree.materialAlertDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialAlertDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialAlertDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialog.shape) : null),
          alignment: (tree.materialAlertDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialog.alignment) : null),
          scrollable: (tree.materialAlertDialog.hasScrollable() ? tree.materialAlertDialog.scrollable : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAlertDialogNamedAdaptive:
      return $flutterSrcMaterialDialog.AlertDialog.adaptive(
          key: (tree.materialAlertDialogNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialogNamedAdaptive.key) : null),
          icon: (tree.materialAlertDialogNamedAdaptive.hasIcon() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.icon) : null),
          iconPadding: (tree.materialAlertDialogNamedAdaptive.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.iconPadding) : null),
          iconColor: (tree.materialAlertDialogNamedAdaptive.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.iconColor) : null),
          title: (tree.materialAlertDialogNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.title) : null),
          titlePadding: (tree.materialAlertDialogNamedAdaptive.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialogNamedAdaptive.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.titleTextStyle) : null),
          content: (tree.materialAlertDialogNamedAdaptive.hasContent() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.content) : null),
          contentPadding: (tree.materialAlertDialogNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialogNamedAdaptive.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.contentTextStyle) : null),
          actions: tree.materialAlertDialogNamedAdaptive.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialogNamedAdaptive.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialogNamedAdaptive.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialogNamedAdaptive.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialogNamedAdaptive.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialogNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.backgroundColor) : null),
          elevation: (tree.materialAlertDialogNamedAdaptive.hasElevation() ? tree.materialAlertDialogNamedAdaptive.elevation : null),
          shadowColor: (tree.materialAlertDialogNamedAdaptive.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialogNamedAdaptive.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialogNamedAdaptive.hasSemanticLabel() ? tree.materialAlertDialogNamedAdaptive.semanticLabel : null),
          insetPadding: (tree.materialAlertDialogNamedAdaptive.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialogNamedAdaptive.insetPadding) : missing('insetPadding')),
          clipBehavior: (tree.materialAlertDialogNamedAdaptive.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialogNamedAdaptive.clipBehavior) : missing('clipBehavior')),
          shape: (tree.materialAlertDialogNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialogNamedAdaptive.shape) : null),
          alignment: (tree.materialAlertDialogNamedAdaptive.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialogNamedAdaptive.alignment) : null),
          scrollable: (tree.materialAlertDialogNamedAdaptive.hasScrollable() ? tree.materialAlertDialogNamedAdaptive.scrollable : missing('scrollable')),
          scrollController: (tree.materialAlertDialogNamedAdaptive.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.scrollController) : null),
          actionScrollController: (tree.materialAlertDialogNamedAdaptive.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.actionScrollController) : null),
          insetAnimationDuration: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialAlertDialogNamedAdaptive.insetAnimationDuration) : missing('insetAnimationDuration')),
          insetAnimationCurve: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAlertDialogNamedAdaptive.insetAnimationCurve) : missing('insetAnimationCurve')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAnimatedTheme:
      return $flutterSrcMaterialTheme.AnimatedTheme(
          key: (tree.materialAnimatedTheme.hasKey() ? evaluateFlutterKeyType(tree.materialAnimatedTheme.key) : null),
          data: (tree.materialAnimatedTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialAnimatedTheme.data) : missing('data')),
          curve: (tree.materialAnimatedTheme.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAnimatedTheme.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.materialAnimatedTheme.hasDuration() ? evaluateRequiredDartDurationType(tree.materialAnimatedTheme.duration) : missing('duration')),
          onEnd: null,
          child: (tree.materialAnimatedTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialAnimatedTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialAppBar:
      return $flutterSrcMaterialAppBar.AppBar(
          key: (tree.materialAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialAppBar.key) : null),
          leading: (tree.materialAppBar.hasLeading() ? evaluateWidgetType(tree.materialAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialAppBar.hasAutomaticallyImplyLeading() ? tree.materialAppBar.automaticallyImplyLeading : true),
          title: (tree.materialAppBar.hasTitle() ? evaluateWidgetType(tree.materialAppBar.title) : null),
          actions: tree.materialAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialAppBar.flexibleSpace) : null),
          bottom: (tree.materialAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialAppBar.bottom) : null),
          elevation: (tree.materialAppBar.hasElevation() ? tree.materialAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialAppBar.hasScrolledUnderElevation() ? tree.materialAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAppBar.surfaceTintColor) : null),
          shape: (tree.materialAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAppBar.shape) : null),
          backgroundColor: (tree.materialAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialAppBar.foregroundColor) : null),
          iconTheme: (tree.materialAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.actionsIconTheme) : null),
          primary: (tree.materialAppBar.hasPrimary() ? tree.materialAppBar.primary : true),
          centerTitle: (tree.materialAppBar.hasCenterTitle() ? tree.materialAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialAppBar.hasExcludeHeaderSemantics() ? tree.materialAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialAppBar.hasTitleSpacing() ? tree.materialAppBar.titleSpacing : null),
          toolbarOpacity: (tree.materialAppBar.hasToolbarOpacity() ? tree.materialAppBar.toolbarOpacity : 1.0),
          bottomOpacity: (tree.materialAppBar.hasBottomOpacity() ? tree.materialAppBar.bottomOpacity : 1.0),
          toolbarHeight: (tree.materialAppBar.hasToolbarHeight() ? tree.materialAppBar.toolbarHeight : null),
          leadingWidth: (tree.materialAppBar.hasLeadingWidth() ? tree.materialAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialAppBar.hasForceMaterialTransparency() ? tree.materialAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialAppBar.clipBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBackButton:
      return $flutterSrcMaterialActionButtons.BackButton(
          key: (tree.materialBackButton.hasKey() ? evaluateFlutterKeyType(tree.materialBackButton.key) : null),
          color: (tree.materialBackButton.hasColor() ? evaluateDartColorType(tree.materialBackButton.color) : null),
          style: (tree.materialBackButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialBackButton.style) : null),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBackButtonIcon:
      return $flutterSrcMaterialActionButtons.BackButtonIcon(
          key: (tree.materialBackButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialBackButtonIcon.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBadge:
      return $flutterSrcMaterialBadge.Badge(
          key: (tree.materialBadge.hasKey() ? evaluateFlutterKeyType(tree.materialBadge.key) : null),
          backgroundColor: (tree.materialBadge.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadge.backgroundColor) : null),
          textColor: (tree.materialBadge.hasTextColor() ? evaluateDartColorType(tree.materialBadge.textColor) : null),
          smallSize: (tree.materialBadge.hasSmallSize() ? tree.materialBadge.smallSize : null),
          largeSize: (tree.materialBadge.hasLargeSize() ? tree.materialBadge.largeSize : null),
          textStyle: (tree.materialBadge.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadge.textStyle) : null),
          padding: (tree.materialBadge.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadge.padding) : null),
          alignment: (tree.materialBadge.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadge.alignment) : null),
          offset: (tree.materialBadge.hasOffset() ? evaluateDartOffsetType(tree.materialBadge.offset) : null),
          label: (tree.materialBadge.hasLabel() ? evaluateWidgetType(tree.materialBadge.label) : null),
          isLabelVisible: (tree.materialBadge.hasIsLabelVisible() ? tree.materialBadge.isLabelVisible : true),
          child: (tree.materialBadge.hasChild() ? evaluateWidgetType(tree.materialBadge.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBadgeNamedCount:
      return $flutterSrcMaterialBadge.Badge.count(
          key: (tree.materialBadgeNamedCount.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeNamedCount.key) : null),
          backgroundColor: (tree.materialBadgeNamedCount.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.backgroundColor) : null),
          textColor: (tree.materialBadgeNamedCount.hasTextColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.textColor) : null),
          smallSize: (tree.materialBadgeNamedCount.hasSmallSize() ? tree.materialBadgeNamedCount.smallSize : null),
          largeSize: (tree.materialBadgeNamedCount.hasLargeSize() ? tree.materialBadgeNamedCount.largeSize : null),
          textStyle: (tree.materialBadgeNamedCount.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadgeNamedCount.textStyle) : null),
          padding: (tree.materialBadgeNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadgeNamedCount.padding) : null),
          alignment: (tree.materialBadgeNamedCount.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadgeNamedCount.alignment) : null),
          offset: (tree.materialBadgeNamedCount.hasOffset() ? evaluateDartOffsetType(tree.materialBadgeNamedCount.offset) : null),
          count: (tree.materialBadgeNamedCount.hasCount() ? tree.materialBadgeNamedCount.count : missing('count')),
          isLabelVisible: (tree.materialBadgeNamedCount.hasIsLabelVisible() ? tree.materialBadgeNamedCount.isLabelVisible : true),
          child: (tree.materialBadgeNamedCount.hasChild() ? evaluateWidgetType(tree.materialBadgeNamedCount.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBadgeTheme:
      return $flutterSrcMaterialBadgeTheme.BadgeTheme(
          key: (tree.materialBadgeTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeTheme.key) : null),
          data: (tree.materialBadgeTheme.hasData() ? evaluateRequiredMaterialBadgeThemeDataType(tree.materialBadgeTheme.data) : missing('data')),
          child: (tree.materialBadgeTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBadgeTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBottomAppBar:
      return $flutterSrcMaterialBottomAppBar.BottomAppBar(
          key: (tree.materialBottomAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomAppBar.key) : null),
          color: (tree.materialBottomAppBar.hasColor() ? evaluateDartColorType(tree.materialBottomAppBar.color) : null),
          elevation: (tree.materialBottomAppBar.hasElevation() ? tree.materialBottomAppBar.elevation : null),
          shape: (tree.materialBottomAppBar.hasShape() ? evaluateFlutterNotchedShapeType(tree.materialBottomAppBar.shape) : null),
          clipBehavior: (tree.materialBottomAppBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialBottomAppBar.clipBehavior) : $dartUi.Clip.none),
          notchMargin: (tree.materialBottomAppBar.hasNotchMargin() ? tree.materialBottomAppBar.notchMargin : 4.0),
          child: (tree.materialBottomAppBar.hasChild() ? evaluateWidgetType(tree.materialBottomAppBar.child) : null),
          padding: (tree.materialBottomAppBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBottomAppBar.padding) : null),
          surfaceTintColor: (tree.materialBottomAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialBottomAppBar.surfaceTintColor) : null),
          shadowColor: (tree.materialBottomAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialBottomAppBar.shadowColor) : null),
          height: (tree.materialBottomAppBar.hasHeight() ? tree.materialBottomAppBar.height : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBottomNavigationBar:
      return $flutterSrcMaterialBottomNavigationBar.BottomNavigationBar(
          key: (tree.materialBottomNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBar.key) : null),
          items: tree.materialBottomNavigationBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.materialBottomNavigationBar.hasCurrentIndex() ? tree.materialBottomNavigationBar.currentIndex : 0),
          elevation: (tree.materialBottomNavigationBar.hasElevation() ? tree.materialBottomNavigationBar.elevation : null),
          type: (tree.materialBottomNavigationBar.hasType() ? enums.convertMaterialBottomNavigationBarTypeType(tree.materialBottomNavigationBar.type) : null),
          fixedColor: (tree.materialBottomNavigationBar.hasFixedColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.fixedColor) : null),
          backgroundColor: (tree.materialBottomNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.backgroundColor) : null),
          iconSize: (tree.materialBottomNavigationBar.hasIconSize() ? tree.materialBottomNavigationBar.iconSize : 24.0),
          selectedItemColor: (tree.materialBottomNavigationBar.hasSelectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.selectedItemColor) : null),
          unselectedItemColor: (tree.materialBottomNavigationBar.hasUnselectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.unselectedItemColor) : null),
          selectedIconTheme: (tree.materialBottomNavigationBar.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.selectedIconTheme) : null),
          unselectedIconTheme: (tree.materialBottomNavigationBar.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.unselectedIconTheme) : null),
          selectedFontSize: (tree.materialBottomNavigationBar.hasSelectedFontSize() ? tree.materialBottomNavigationBar.selectedFontSize : 14.0),
          unselectedFontSize: (tree.materialBottomNavigationBar.hasUnselectedFontSize() ? tree.materialBottomNavigationBar.unselectedFontSize : 12.0),
          selectedLabelStyle: (tree.materialBottomNavigationBar.hasSelectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.selectedLabelStyle) : null),
          unselectedLabelStyle: (tree.materialBottomNavigationBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.unselectedLabelStyle) : null),
          showSelectedLabels: (tree.materialBottomNavigationBar.hasShowSelectedLabels() ? tree.materialBottomNavigationBar.showSelectedLabels : null),
          showUnselectedLabels: (tree.materialBottomNavigationBar.hasShowUnselectedLabels() ? tree.materialBottomNavigationBar.showUnselectedLabels : null),
          mouseCursor: null,
          enableFeedback: (tree.materialBottomNavigationBar.hasEnableFeedback() ? tree.materialBottomNavigationBar.enableFeedback : null),
          landscapeLayout: (tree.materialBottomNavigationBar.hasLandscapeLayout() ? enums.convertMaterialBottomNavigationBarLandscapeLayoutType(tree.materialBottomNavigationBar.landscapeLayout) : null),
          useLegacyColorScheme: (tree.materialBottomNavigationBar.hasUseLegacyColorScheme() ? tree.materialBottomNavigationBar.useLegacyColorScheme : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialBottomNavigationBarTheme:
      return $flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarTheme(
          key: (tree.materialBottomNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBarTheme.key) : null),
          data: (tree.materialBottomNavigationBarTheme.hasData() ? evaluateRequiredMaterialBottomNavigationBarThemeDataType(tree.materialBottomNavigationBarTheme.data) : missing('data')),
          child: (tree.materialBottomNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBottomNavigationBarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialButtonBar:
      return $flutterSrcMaterialButtonBar.ButtonBar(
          key: (tree.materialButtonBar.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBar.key) : null),
          alignment: (tree.materialButtonBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialButtonBar.alignment) : null),
          mainAxisSize: (tree.materialButtonBar.hasMainAxisSize() ? enums.convertFlutterMainAxisSizeType(tree.materialButtonBar.mainAxisSize) : null),
          buttonTextTheme: (tree.materialButtonBar.hasButtonTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialButtonBar.buttonTextTheme) : null),
          buttonMinWidth: (tree.materialButtonBar.hasButtonMinWidth() ? tree.materialButtonBar.buttonMinWidth : null),
          buttonHeight: (tree.materialButtonBar.hasButtonHeight() ? tree.materialButtonBar.buttonHeight : null),
          buttonPadding: (tree.materialButtonBar.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonBar.buttonPadding) : null),
          buttonAlignedDropdown: (tree.materialButtonBar.hasButtonAlignedDropdown() ? tree.materialButtonBar.buttonAlignedDropdown : null),
          layoutBehavior: (tree.materialButtonBar.hasLayoutBehavior() ? enums.convertMaterialButtonBarLayoutBehaviorType(tree.materialButtonBar.layoutBehavior) : null),
          overflowDirection: (tree.materialButtonBar.hasOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialButtonBar.overflowDirection) : null),
          overflowButtonSpacing: (tree.materialButtonBar.hasOverflowButtonSpacing() ? tree.materialButtonBar.overflowButtonSpacing : null),
          children: tree.materialButtonBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialButtonBarTheme:
      return $flutterSrcMaterialButtonBarTheme.ButtonBarTheme(
          key: (tree.materialButtonBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBarTheme.key) : null),
          data: (tree.materialButtonBarTheme.hasData() ? evaluateRequiredMaterialButtonBarThemeDataType(tree.materialButtonBarTheme.data) : missing('data')),
          child: (tree.materialButtonBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonBarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialButtonTheme:
      return $flutterSrcMaterialButtonTheme.ButtonTheme(
          key: (tree.materialButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonTheme.key) : null),
          textTheme: (tree.materialButtonTheme.hasTextTheme() ? enums.convertRequiredMaterialButtonTextThemeType(tree.materialButtonTheme.textTheme) : $flutterSrcMaterialButtonTheme.ButtonTextTheme.normal),
          layoutBehavior: (tree.materialButtonTheme.hasLayoutBehavior() ? enums.convertRequiredMaterialButtonBarLayoutBehaviorType(tree.materialButtonTheme.layoutBehavior) : $flutterSrcMaterialButtonTheme.ButtonBarLayoutBehavior.padded),
          minWidth: (tree.materialButtonTheme.hasMinWidth() ? tree.materialButtonTheme.minWidth : 88.0),
          height: (tree.materialButtonTheme.hasHeight() ? tree.materialButtonTheme.height : 36.0),
          padding: (tree.materialButtonTheme.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonTheme.padding) : null),
          shape: (tree.materialButtonTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialButtonTheme.shape) : null),
          alignedDropdown: (tree.materialButtonTheme.hasAlignedDropdown() ? tree.materialButtonTheme.alignedDropdown : false),
          buttonColor: (tree.materialButtonTheme.hasButtonColor() ? evaluateDartColorType(tree.materialButtonTheme.buttonColor) : null),
          disabledColor: (tree.materialButtonTheme.hasDisabledColor() ? evaluateDartColorType(tree.materialButtonTheme.disabledColor) : null),
          focusColor: (tree.materialButtonTheme.hasFocusColor() ? evaluateDartColorType(tree.materialButtonTheme.focusColor) : null),
          hoverColor: (tree.materialButtonTheme.hasHoverColor() ? evaluateDartColorType(tree.materialButtonTheme.hoverColor) : null),
          highlightColor: (tree.materialButtonTheme.hasHighlightColor() ? evaluateDartColorType(tree.materialButtonTheme.highlightColor) : null),
          splashColor: (tree.materialButtonTheme.hasSplashColor() ? evaluateDartColorType(tree.materialButtonTheme.splashColor) : null),
          colorScheme: (tree.materialButtonTheme.hasColorScheme() ? evaluateMaterialColorSchemeType(tree.materialButtonTheme.colorScheme) : null),
          materialTapTargetSize: (tree.materialButtonTheme.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialButtonTheme.materialTapTargetSize) : null),
          child: (tree.materialButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialButtonThemeNamedFromButtonThemeData:
      return $flutterSrcMaterialButtonTheme.ButtonTheme.fromButtonThemeData(
          key: (tree.materialButtonThemeNamedFromButtonThemeData.hasKey() ? evaluateFlutterKeyType(tree.materialButtonThemeNamedFromButtonThemeData.key) : null),
          data: (tree.materialButtonThemeNamedFromButtonThemeData.hasData() ? evaluateRequiredMaterialButtonThemeDataType(tree.materialButtonThemeNamedFromButtonThemeData.data) : missing('data')),
          child: (tree.materialButtonThemeNamedFromButtonThemeData.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonThemeNamedFromButtonThemeData.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCard:
      return $flutterSrcMaterialCard.Card(
          key: (tree.materialCard.hasKey() ? evaluateFlutterKeyType(tree.materialCard.key) : null),
          color: (tree.materialCard.hasColor() ? evaluateDartColorType(tree.materialCard.color) : null),
          shadowColor: (tree.materialCard.hasShadowColor() ? evaluateDartColorType(tree.materialCard.shadowColor) : null),
          surfaceTintColor: (tree.materialCard.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialCard.surfaceTintColor) : null),
          elevation: (tree.materialCard.hasElevation() ? tree.materialCard.elevation : null),
          shape: (tree.materialCard.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCard.shape) : null),
          borderOnForeground: (tree.materialCard.hasBorderOnForeground() ? tree.materialCard.borderOnForeground : true),
          margin: (tree.materialCard.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCard.margin) : null),
          clipBehavior: (tree.materialCard.hasClipBehavior() ? enums.convertDartClipType(tree.materialCard.clipBehavior) : null),
          child: (tree.materialCard.hasChild() ? evaluateWidgetType(tree.materialCard.child) : null),
          semanticContainer: (tree.materialCard.hasSemanticContainer() ? tree.materialCard.semanticContainer : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckbox:
      return $flutterSrcMaterialCheckbox.Checkbox(
          key: (tree.materialCheckbox.hasKey() ? evaluateFlutterKeyType(tree.materialCheckbox.key) : null),
          value: (tree.materialCheckbox.hasValue() ? tree.materialCheckbox.value : null),
          tristate: (tree.materialCheckbox.hasTristate() ? tree.materialCheckbox.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckbox.hasActiveColor() ? evaluateDartColorType(tree.materialCheckbox.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckbox.hasCheckColor() ? evaluateDartColorType(tree.materialCheckbox.checkColor) : null),
          focusColor: (tree.materialCheckbox.hasFocusColor() ? evaluateDartColorType(tree.materialCheckbox.focusColor) : null),
          hoverColor: (tree.materialCheckbox.hasHoverColor() ? evaluateDartColorType(tree.materialCheckbox.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckbox.hasSplashRadius() ? tree.materialCheckbox.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckbox.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckbox.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckbox.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckbox.visualDensity) : null),
          focusNode: (tree.materialCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckbox.focusNode) : null),
          autofocus: (tree.materialCheckbox.hasAutofocus() ? tree.materialCheckbox.autofocus : false),
          shape: (tree.materialCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckbox.shape) : null),
          side: (tree.materialCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckbox.side) : null),
          isError: (tree.materialCheckbox.hasIsError() ? tree.materialCheckbox.isError : false),
          semanticLabel: (tree.materialCheckbox.hasSemanticLabel() ? tree.materialCheckbox.semanticLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckboxListTile:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile(
          key: (tree.materialCheckboxListTile.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTile.key) : null),
          value: (tree.materialCheckboxListTile.hasValue() ? tree.materialCheckboxListTile.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTile.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTile.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTile.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTile.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTile.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTile.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTile.hasSplashRadius() ? tree.materialCheckboxListTile.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTile.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTile.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTile.focusNode) : null),
          autofocus: (tree.materialCheckboxListTile.hasAutofocus() ? tree.materialCheckboxListTile.autofocus : false),
          shape: (tree.materialCheckboxListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTile.shape) : null),
          side: (tree.materialCheckboxListTile.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTile.side) : null),
          isError: (tree.materialCheckboxListTile.hasIsError() ? tree.materialCheckboxListTile.isError : false),
          enabled: (tree.materialCheckboxListTile.hasEnabled() ? tree.materialCheckboxListTile.enabled : null),
          tileColor: (tree.materialCheckboxListTile.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.tileColor) : null),
          title: (tree.materialCheckboxListTile.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTile.title) : null),
          subtitle: (tree.materialCheckboxListTile.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTile.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTile.hasIsThreeLine() ? tree.materialCheckboxListTile.isThreeLine : false),
          dense: (tree.materialCheckboxListTile.hasDense() ? tree.materialCheckboxListTile.dense : null),
          secondary: (tree.materialCheckboxListTile.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTile.secondary) : null),
          selected: (tree.materialCheckboxListTile.hasSelected() ? tree.materialCheckboxListTile.selected : false),
          controlAffinity: (tree.materialCheckboxListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTile.contentPadding) : null),
          tristate: (tree.materialCheckboxListTile.hasTristate() ? tree.materialCheckboxListTile.tristate : false),
          checkboxShape: (tree.materialCheckboxListTile.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTile.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTile.hasEnableFeedback() ? tree.materialCheckboxListTile.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTile.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTile.checkboxSemanticLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckboxListTileNamedAdaptive:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile.adaptive(
          key: (tree.materialCheckboxListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTileNamedAdaptive.key) : null),
          value: (tree.materialCheckboxListTileNamedAdaptive.hasValue() ? tree.materialCheckboxListTileNamedAdaptive.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTileNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTileNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxListTileNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTileNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTileNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTileNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxListTileNamedAdaptive.hasAutofocus() ? tree.materialCheckboxListTileNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTileNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxListTileNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTileNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxListTileNamedAdaptive.hasIsError() ? tree.materialCheckboxListTileNamedAdaptive.isError : false),
          enabled: (tree.materialCheckboxListTileNamedAdaptive.hasEnabled() ? tree.materialCheckboxListTileNamedAdaptive.enabled : null),
          tileColor: (tree.materialCheckboxListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialCheckboxListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialCheckboxListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTileNamedAdaptive.hasIsThreeLine() ? tree.materialCheckboxListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialCheckboxListTileNamedAdaptive.hasDense() ? tree.materialCheckboxListTileNamedAdaptive.dense : null),
          secondary: (tree.materialCheckboxListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialCheckboxListTileNamedAdaptive.hasSelected() ? tree.materialCheckboxListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialCheckboxListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTileNamedAdaptive.contentPadding) : null),
          tristate: (tree.materialCheckboxListTileNamedAdaptive.hasTristate() ? tree.materialCheckboxListTileNamedAdaptive.tristate : false),
          checkboxShape: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTileNamedAdaptive.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTileNamedAdaptive.hasEnableFeedback() ? tree.materialCheckboxListTileNamedAdaptive.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTileNamedAdaptive.checkboxSemanticLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckboxMenuButton:
      return $flutterSrcMaterialMenuAnchor.CheckboxMenuButton(
          key: (tree.materialCheckboxMenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxMenuButton.key) : null),
          value: (tree.materialCheckboxMenuButton.hasValue() ? tree.materialCheckboxMenuButton.value : null),
          tristate: (tree.materialCheckboxMenuButton.hasTristate() ? tree.materialCheckboxMenuButton.tristate : false),
          isError: (tree.materialCheckboxMenuButton.hasIsError() ? tree.materialCheckboxMenuButton.isError : false),
          onChanged: null,
          onHover: null,
          onFocusChange: null,
          focusNode: (tree.materialCheckboxMenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxMenuButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialCheckboxMenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCheckboxMenuButton.style) : null),
          statesController: (tree.materialCheckboxMenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialCheckboxMenuButton.statesController) : null),
          clipBehavior: (tree.materialCheckboxMenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialCheckboxMenuButton.clipBehavior) : $dartUi.Clip.none),
          trailingIcon: (tree.materialCheckboxMenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialCheckboxMenuButton.trailingIcon) : null),
          closeOnActivate: (tree.materialCheckboxMenuButton.hasCloseOnActivate() ? tree.materialCheckboxMenuButton.closeOnActivate : true),
          child: (tree.materialCheckboxMenuButton.hasChild() ? evaluateWidgetType(tree.materialCheckboxMenuButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckboxNamedAdaptive:
      return $flutterSrcMaterialCheckbox.Checkbox.adaptive(
          key: (tree.materialCheckboxNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxNamedAdaptive.key) : null),
          value: (tree.materialCheckboxNamedAdaptive.hasValue() ? tree.materialCheckboxNamedAdaptive.value : null),
          tristate: (tree.materialCheckboxNamedAdaptive.hasTristate() ? tree.materialCheckboxNamedAdaptive.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.checkColor) : null),
          focusColor: (tree.materialCheckboxNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialCheckboxNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxNamedAdaptive.hasAutofocus() ? tree.materialCheckboxNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxNamedAdaptive.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxNamedAdaptive.hasIsError() ? tree.materialCheckboxNamedAdaptive.isError : false),
          semanticLabel: (tree.materialCheckboxNamedAdaptive.hasSemanticLabel() ? tree.materialCheckboxNamedAdaptive.semanticLabel : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckboxTheme:
      return $flutterSrcMaterialCheckboxTheme.CheckboxTheme(
          key: (tree.materialCheckboxTheme.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxTheme.key) : null),
          data: (tree.materialCheckboxTheme.hasData() ? evaluateRequiredMaterialCheckboxThemeDataType(tree.materialCheckboxTheme.data) : missing('data')),
          child: (tree.materialCheckboxTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialCheckboxTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCheckedPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.CheckedPopupMenuItem(
          key: (tree.materialCheckedPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialCheckedPopupMenuItem.key) : null),
          checked: (tree.materialCheckedPopupMenuItem.hasChecked() ? tree.materialCheckedPopupMenuItem.checked : false),
          enabled: (tree.materialCheckedPopupMenuItem.hasEnabled() ? tree.materialCheckedPopupMenuItem.enabled : true),
          padding: (tree.materialCheckedPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialCheckedPopupMenuItem.padding) : null),
          height: (tree.materialCheckedPopupMenuItem.hasHeight() ? tree.materialCheckedPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialCheckedPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialCheckedPopupMenuItem.child) : null),
          onTap: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialChip:
      return $flutterSrcMaterialChip.Chip(
          key: (tree.materialChip.hasKey() ? evaluateFlutterKeyType(tree.materialChip.key) : null),
          avatar: (tree.materialChip.hasAvatar() ? evaluateWidgetType(tree.materialChip.avatar) : null),
          label: (tree.materialChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChip.label) : missing('label')),
          labelStyle: (tree.materialChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChip.labelStyle) : null),
          labelPadding: (tree.materialChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.labelPadding) : null),
          deleteIcon: (tree.materialChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialChip.hasDeleteButtonTooltipMessage() ? tree.materialChip.deleteButtonTooltipMessage : null),
          side: (tree.materialChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChip.side) : null),
          shape: (tree.materialChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChip.shape) : null),
          clipBehavior: (tree.materialChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChip.focusNode) : null),
          autofocus: (tree.materialChip.hasAutofocus() ? tree.materialChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChip.backgroundColor) : null),
          padding: (tree.materialChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.padding) : null),
          visualDensity: (tree.materialChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChip.materialTapTargetSize) : null),
          elevation: (tree.materialChip.hasElevation() ? tree.materialChip.elevation : null),
          shadowColor: (tree.materialChip.hasShadowColor() ? evaluateDartColorType(tree.materialChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChip.iconTheme) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialChipTheme:
      return $flutterSrcMaterialChipTheme.ChipTheme(
          key: (tree.materialChipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialChipTheme.key) : null),
          data: (tree.materialChipTheme.hasData() ? evaluateRequiredMaterialChipThemeDataType(tree.materialChipTheme.data) : missing('data')),
          child: (tree.materialChipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialChipTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialChoiceChip:
      return $flutterSrcMaterialChoiceChip.ChoiceChip(
          key: (tree.materialChoiceChip.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChip.key) : null),
          avatar: (tree.materialChoiceChip.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChip.avatar) : null),
          label: (tree.materialChoiceChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChip.label) : missing('label')),
          labelStyle: (tree.materialChoiceChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChip.labelStyle) : null),
          labelPadding: (tree.materialChoiceChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChip.hasPressElevation() ? tree.materialChoiceChip.pressElevation : null),
          selected: (tree.materialChoiceChip.hasSelected() ? tree.materialChoiceChip.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChip.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedColor) : null),
          disabledColor: (tree.materialChoiceChip.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChip.disabledColor) : null),
          tooltip: (tree.materialChoiceChip.hasTooltip() ? tree.materialChoiceChip.tooltip : null),
          side: (tree.materialChoiceChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChip.side) : null),
          shape: (tree.materialChoiceChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChip.shape) : null),
          clipBehavior: (tree.materialChoiceChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChip.focusNode) : null),
          autofocus: (tree.materialChoiceChip.hasAutofocus() ? tree.materialChoiceChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChip.backgroundColor) : null),
          padding: (tree.materialChoiceChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.padding) : null),
          visualDensity: (tree.materialChoiceChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChip.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChip.hasElevation() ? tree.materialChoiceChip.elevation : null),
          shadowColor: (tree.materialChoiceChip.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChip.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChip.hasShowCheckmark() ? tree.materialChoiceChip.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChip.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialChoiceChipNamedElevated:
      return $flutterSrcMaterialChoiceChip.ChoiceChip.elevated(
          key: (tree.materialChoiceChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChipNamedElevated.key) : null),
          avatar: (tree.materialChoiceChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChipNamedElevated.avatar) : null),
          label: (tree.materialChoiceChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialChoiceChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialChoiceChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChipNamedElevated.hasPressElevation() ? tree.materialChoiceChipNamedElevated.pressElevation : null),
          selected: (tree.materialChoiceChipNamedElevated.hasSelected() ? tree.materialChoiceChipNamedElevated.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedColor) : null),
          disabledColor: (tree.materialChoiceChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.disabledColor) : null),
          tooltip: (tree.materialChoiceChipNamedElevated.hasTooltip() ? tree.materialChoiceChipNamedElevated.tooltip : null),
          side: (tree.materialChoiceChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChipNamedElevated.side) : null),
          shape: (tree.materialChoiceChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialChoiceChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialChoiceChipNamedElevated.hasAutofocus() ? tree.materialChoiceChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialChoiceChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.padding) : null),
          visualDensity: (tree.materialChoiceChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChipNamedElevated.hasElevation() ? tree.materialChoiceChipNamedElevated.elevation : null),
          shadowColor: (tree.materialChoiceChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChipNamedElevated.hasShowCheckmark() ? tree.materialChoiceChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCircleAvatar:
      return $flutterSrcMaterialCircleAvatar.CircleAvatar(
          key: (tree.materialCircleAvatar.hasKey() ? evaluateFlutterKeyType(tree.materialCircleAvatar.key) : null),
          child: (tree.materialCircleAvatar.hasChild() ? evaluateWidgetType(tree.materialCircleAvatar.child) : null),
          backgroundColor: (tree.materialCircleAvatar.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.backgroundColor) : null),
          backgroundImage: null,
          foregroundImage: null,
          onBackgroundImageError: null,
          onForegroundImageError: null,
          foregroundColor: (tree.materialCircleAvatar.hasForegroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.foregroundColor) : null),
          radius: (tree.materialCircleAvatar.hasRadius() ? tree.materialCircleAvatar.radius : null),
          minRadius: (tree.materialCircleAvatar.hasMinRadius() ? tree.materialCircleAvatar.minRadius : null),
          maxRadius: (tree.materialCircleAvatar.hasMaxRadius() ? tree.materialCircleAvatar.maxRadius : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCircularProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator(
          key: (tree.materialCircularProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicator.key) : null),
          value: (tree.materialCircularProgressIndicator.hasValue() ? tree.materialCircularProgressIndicator.value : null),
          backgroundColor: (tree.materialCircularProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.backgroundColor) : null),
          color: (tree.materialCircularProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicator.hasStrokeWidth() ? tree.materialCircularProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialCircularProgressIndicator.hasStrokeAlign() ? tree.materialCircularProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialCircularProgressIndicator.hasSemanticsLabel() ? tree.materialCircularProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicator.hasSemanticsValue() ? tree.materialCircularProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicator.strokeCap) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCircularProgressIndicatorNamedAdaptive:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.adaptive(
          key: (tree.materialCircularProgressIndicatorNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicatorNamedAdaptive.key) : null),
          value: (tree.materialCircularProgressIndicatorNamedAdaptive.hasValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.value : null),
          backgroundColor: (tree.materialCircularProgressIndicatorNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicatorNamedAdaptive.backgroundColor) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeWidth() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeWidth : 4.0),
          semanticsLabel: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsLabel() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicatorNamedAdaptive.strokeCap) : null),
          strokeAlign: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeAlign() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCloseButton:
      return $flutterSrcMaterialActionButtons.CloseButton(
          key: (tree.materialCloseButton.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButton.key) : null),
          color: (tree.materialCloseButton.hasColor() ? evaluateDartColorType(tree.materialCloseButton.color) : null),
          onPressed: null,
          style: (tree.materialCloseButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCloseButton.style) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialCloseButtonIcon:
      return $flutterSrcMaterialActionButtons.CloseButtonIcon(
          key: (tree.materialCloseButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButtonIcon.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDataTable:
      return $flutterSrcMaterialDataTable.DataTable(
          key: (tree.materialDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialDataTable.key) : null),
          columns: tree.materialDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialDataTable.hasSortColumnIndex() ? tree.materialDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialDataTable.hasSortAscending() ? tree.materialDataTable.sortAscending : true),
          onSelectAll: null,
          decoration: (tree.materialDataTable.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDataTable.decoration) : null),
          dataRowColor: null,
          dataRowMinHeight: (tree.materialDataTable.hasDataRowMinHeight() ? tree.materialDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialDataTable.hasDataRowMaxHeight() ? tree.materialDataTable.dataRowMaxHeight : null),
          dataTextStyle: (tree.materialDataTable.hasDataTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.dataTextStyle) : null),
          headingRowColor: null,
          headingRowHeight: (tree.materialDataTable.hasHeadingRowHeight() ? tree.materialDataTable.headingRowHeight : null),
          headingTextStyle: (tree.materialDataTable.hasHeadingTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.headingTextStyle) : null),
          horizontalMargin: (tree.materialDataTable.hasHorizontalMargin() ? tree.materialDataTable.horizontalMargin : null),
          columnSpacing: (tree.materialDataTable.hasColumnSpacing() ? tree.materialDataTable.columnSpacing : null),
          showCheckboxColumn: (tree.materialDataTable.hasShowCheckboxColumn() ? tree.materialDataTable.showCheckboxColumn : true),
          showBottomBorder: (tree.materialDataTable.hasShowBottomBorder() ? tree.materialDataTable.showBottomBorder : false),
          dividerThickness: (tree.materialDataTable.hasDividerThickness() ? tree.materialDataTable.dividerThickness : null),
          rows: tree.materialDataTable.rows.map((e) => evaluateRequiredMaterialDataRowType(e)).toList(),
          checkboxHorizontalMargin: (tree.materialDataTable.hasCheckboxHorizontalMargin() ? tree.materialDataTable.checkboxHorizontalMargin : null),
          border: (tree.materialDataTable.hasBorder() ? evaluateFlutterTableBorderType(tree.materialDataTable.border) : null),
          clipBehavior: (tree.materialDataTable.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDataTable.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDataTableTheme:
      return $flutterSrcMaterialDataTableTheme.DataTableTheme(
          key: (tree.materialDataTableTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDataTableTheme.key) : null),
          data: (tree.materialDataTableTheme.hasData() ? evaluateRequiredMaterialDataTableThemeDataType(tree.materialDataTableTheme.data) : missing('data')),
          child: (tree.materialDataTableTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDataTableTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDatePickerDialog:
      return $flutterSrcMaterialDatePicker.DatePickerDialog(
          key: (tree.materialDatePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerDialog.key) : null),
          initialDate: (tree.materialDatePickerDialog.hasInitialDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.initialDate) : null),
          firstDate: (tree.materialDatePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDatePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDatePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDatePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDatePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          selectableDayPredicate: null,
          cancelText: (tree.materialDatePickerDialog.hasCancelText() ? tree.materialDatePickerDialog.cancelText : null),
          confirmText: (tree.materialDatePickerDialog.hasConfirmText() ? tree.materialDatePickerDialog.confirmText : null),
          helpText: (tree.materialDatePickerDialog.hasHelpText() ? tree.materialDatePickerDialog.helpText : null),
          initialCalendarMode: (tree.materialDatePickerDialog.hasInitialCalendarMode() ? enums.convertRequiredMaterialDatePickerModeType(tree.materialDatePickerDialog.initialCalendarMode) : $flutterSrcMaterialDate.DatePickerMode.day),
          errorFormatText: (tree.materialDatePickerDialog.hasErrorFormatText() ? tree.materialDatePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDatePickerDialog.hasErrorInvalidText() ? tree.materialDatePickerDialog.errorInvalidText : null),
          fieldHintText: (tree.materialDatePickerDialog.hasFieldHintText() ? tree.materialDatePickerDialog.fieldHintText : null),
          fieldLabelText: (tree.materialDatePickerDialog.hasFieldLabelText() ? tree.materialDatePickerDialog.fieldLabelText : null),
          keyboardType: (tree.materialDatePickerDialog.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialDatePickerDialog.keyboardType) : null),
          restorationId: (tree.materialDatePickerDialog.hasRestorationId() ? tree.materialDatePickerDialog.restorationId : null),
          onDatePickerModeChange: null,
          switchToInputEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDatePickerTheme:
      return $flutterSrcMaterialDatePickerTheme.DatePickerTheme(
          key: (tree.materialDatePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerTheme.key) : null),
          data: (tree.materialDatePickerTheme.hasData() ? evaluateRequiredMaterialDatePickerThemeDataType(tree.materialDatePickerTheme.data) : missing('data')),
          child: (tree.materialDatePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDatePickerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDateRangePickerDialog:
      return $flutterSrcMaterialDatePicker.DateRangePickerDialog(
          key: (tree.materialDateRangePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDateRangePickerDialog.key) : null),
          initialDateRange: (tree.materialDateRangePickerDialog.hasInitialDateRange() ? evaluateMaterialDateTimeRangeType(tree.materialDateRangePickerDialog.initialDateRange) : null),
          firstDate: (tree.materialDateRangePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDateRangePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDateRangePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDateRangePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDateRangePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDateRangePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          helpText: (tree.materialDateRangePickerDialog.hasHelpText() ? tree.materialDateRangePickerDialog.helpText : null),
          cancelText: (tree.materialDateRangePickerDialog.hasCancelText() ? tree.materialDateRangePickerDialog.cancelText : null),
          confirmText: (tree.materialDateRangePickerDialog.hasConfirmText() ? tree.materialDateRangePickerDialog.confirmText : null),
          saveText: (tree.materialDateRangePickerDialog.hasSaveText() ? tree.materialDateRangePickerDialog.saveText : null),
          errorInvalidRangeText: (tree.materialDateRangePickerDialog.hasErrorInvalidRangeText() ? tree.materialDateRangePickerDialog.errorInvalidRangeText : null),
          errorFormatText: (tree.materialDateRangePickerDialog.hasErrorFormatText() ? tree.materialDateRangePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDateRangePickerDialog.hasErrorInvalidText() ? tree.materialDateRangePickerDialog.errorInvalidText : null),
          fieldStartHintText: (tree.materialDateRangePickerDialog.hasFieldStartHintText() ? tree.materialDateRangePickerDialog.fieldStartHintText : null),
          fieldEndHintText: (tree.materialDateRangePickerDialog.hasFieldEndHintText() ? tree.materialDateRangePickerDialog.fieldEndHintText : null),
          fieldStartLabelText: (tree.materialDateRangePickerDialog.hasFieldStartLabelText() ? tree.materialDateRangePickerDialog.fieldStartLabelText : null),
          fieldEndLabelText: (tree.materialDateRangePickerDialog.hasFieldEndLabelText() ? tree.materialDateRangePickerDialog.fieldEndLabelText : null),
          keyboardType: (tree.materialDateRangePickerDialog.hasKeyboardType() ? evaluateRequiredFlutterTextInputTypeType(tree.materialDateRangePickerDialog.keyboardType) : $flutterSrcServicesTextInput.TextInputType.datetime),
          restorationId: (tree.materialDateRangePickerDialog.hasRestorationId() ? tree.materialDateRangePickerDialog.restorationId : null),
          switchToInputEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDefaultTabController:
      return $flutterSrcMaterialTabController.DefaultTabController(
          key: (tree.materialDefaultTabController.hasKey() ? evaluateFlutterKeyType(tree.materialDefaultTabController.key) : null),
          length: (tree.materialDefaultTabController.hasLength() ? tree.materialDefaultTabController.length : missing('length')),
          initialIndex: (tree.materialDefaultTabController.hasInitialIndex() ? tree.materialDefaultTabController.initialIndex : 0),
          child: (tree.materialDefaultTabController.hasChild() ? evaluateRequiredWidgetType(tree.materialDefaultTabController.child) : missing('child')),
          animationDuration: (tree.materialDefaultTabController.hasAnimationDuration() ? evaluateDartDurationType(tree.materialDefaultTabController.animationDuration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDesktopTextSelectionToolbar:
      return $flutterSrcMaterialDesktopTextSelectionToolbar.DesktopTextSelectionToolbar(
          key: (tree.materialDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.materialDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.materialDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDesktopTextSelectionToolbarButton:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton(
          key: (tree.materialDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.materialDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.materialDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton.text(
          key: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButtonNamedText.key) : null),
          context: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.materialDesktopTextSelectionToolbarButtonNamedText.context) : missing('context')),
          onPressed: null,
          text: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.materialDesktopTextSelectionToolbarButtonNamedText.text : missing('text')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDialog:
      return $flutterSrcMaterialDialog.Dialog(
          key: (tree.materialDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDialog.key) : null),
          backgroundColor: (tree.materialDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialog.backgroundColor) : null),
          elevation: (tree.materialDialog.hasElevation() ? tree.materialDialog.elevation : null),
          shadowColor: (tree.materialDialog.hasShadowColor() ? evaluateDartColorType(tree.materialDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDialog.surfaceTintColor) : null),
          insetAnimationDuration: (tree.materialDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.materialDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          insetPadding: (tree.materialDialog.hasInsetPadding() ? evaluateFlutterEdgeInsetsType(tree.materialDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDialog.shape) : null),
          alignment: (tree.materialDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialDialog.alignment) : null),
          child: (tree.materialDialog.hasChild() ? evaluateWidgetType(tree.materialDialog.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDialogNamedFullscreen:
      return $flutterSrcMaterialDialog.Dialog.fullscreen(
          key: (tree.materialDialogNamedFullscreen.hasKey() ? evaluateFlutterKeyType(tree.materialDialogNamedFullscreen.key) : null),
          backgroundColor: (tree.materialDialogNamedFullscreen.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialogNamedFullscreen.backgroundColor) : null),
          insetAnimationDuration: (tree.materialDialogNamedFullscreen.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialogNamedFullscreen.insetAnimationDuration) : $dartCore.Duration.zero),
          insetAnimationCurve: (tree.materialDialogNamedFullscreen.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialogNamedFullscreen.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          child: (tree.materialDialogNamedFullscreen.hasChild() ? evaluateWidgetType(tree.materialDialogNamedFullscreen.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDivider:
      return $flutterSrcMaterialDivider.Divider(
          key: (tree.materialDivider.hasKey() ? evaluateFlutterKeyType(tree.materialDivider.key) : null),
          height: (tree.materialDivider.hasHeight() ? tree.materialDivider.height : null),
          thickness: (tree.materialDivider.hasThickness() ? tree.materialDivider.thickness : null),
          indent: (tree.materialDivider.hasIndent() ? tree.materialDivider.indent : null),
          endIndent: (tree.materialDivider.hasEndIndent() ? tree.materialDivider.endIndent : null),
          color: (tree.materialDivider.hasColor() ? evaluateDartColorType(tree.materialDivider.color) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDividerTheme:
      return $flutterSrcMaterialDividerTheme.DividerTheme(
          key: (tree.materialDividerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDividerTheme.key) : null),
          data: (tree.materialDividerTheme.hasData() ? evaluateRequiredMaterialDividerThemeDataType(tree.materialDividerTheme.data) : missing('data')),
          child: (tree.materialDividerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDividerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawer:
      return $flutterSrcMaterialDrawer.Drawer(
          key: (tree.materialDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialDrawer.key) : null),
          backgroundColor: (tree.materialDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialDrawer.backgroundColor) : null),
          elevation: (tree.materialDrawer.hasElevation() ? tree.materialDrawer.elevation : null),
          shadowColor: (tree.materialDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDrawer.surfaceTintColor) : null),
          shape: (tree.materialDrawer.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDrawer.shape) : null),
          width: (tree.materialDrawer.hasWidth() ? tree.materialDrawer.width : null),
          child: (tree.materialDrawer.hasChild() ? evaluateWidgetType(tree.materialDrawer.child) : null),
          semanticLabel: (tree.materialDrawer.hasSemanticLabel() ? tree.materialDrawer.semanticLabel : null),
          clipBehavior: (tree.materialDrawer.hasClipBehavior() ? enums.convertDartClipType(tree.materialDrawer.clipBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawerButton:
      return $flutterSrcMaterialActionButtons.DrawerButton(
          key: (tree.materialDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButton.key) : null),
          style: (tree.materialDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialDrawerButton.style) : null),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.DrawerButtonIcon(
          key: (tree.materialDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButtonIcon.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawerController:
      return $flutterSrcMaterialDrawer.DrawerController(
          key: null,
          child: (tree.materialDrawerController.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerController.child) : missing('child')),
          alignment: (tree.materialDrawerController.hasAlignment() ? enums.convertRequiredMaterialDrawerAlignmentType(tree.materialDrawerController.alignment) : missing('alignment')),
          isDrawerOpen: (tree.materialDrawerController.hasIsDrawerOpen() ? tree.materialDrawerController.isDrawerOpen : false),
          drawerCallback: null,
          dragStartBehavior: (tree.materialDrawerController.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialDrawerController.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          scrimColor: (tree.materialDrawerController.hasScrimColor() ? evaluateDartColorType(tree.materialDrawerController.scrimColor) : null),
          edgeDragWidth: (tree.materialDrawerController.hasEdgeDragWidth() ? tree.materialDrawerController.edgeDragWidth : null),
          enableOpenDragGesture: (tree.materialDrawerController.hasEnableOpenDragGesture() ? tree.materialDrawerController.enableOpenDragGesture : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawerHeader:
      return $flutterSrcMaterialDrawerHeader.DrawerHeader(
          key: (tree.materialDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerHeader.key) : null),
          decoration: (tree.materialDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDrawerHeader.decoration) : null),
          margin: (tree.materialDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          padding: (tree.materialDrawerHeader.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0)),
          duration: (tree.materialDrawerHeader.hasDuration() ? evaluateRequiredDartDurationType(tree.materialDrawerHeader.duration) : $dartCore.Duration(milliseconds: 250)),
          curve: (tree.materialDrawerHeader.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDrawerHeader.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn),
          child: (tree.materialDrawerHeader.hasChild() ? evaluateWidgetType(tree.materialDrawerHeader.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDrawerTheme:
      return $flutterSrcMaterialDrawerTheme.DrawerTheme(
          key: (tree.materialDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerTheme.key) : null),
          data: (tree.materialDrawerTheme.hasData() ? evaluateRequiredMaterialDrawerThemeDataType(tree.materialDrawerTheme.data) : missing('data')),
          child: (tree.materialDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDropdownButton:
      return $flutterSrcMaterialDropdown.DropdownButton(
          key: (tree.materialDropdownButton.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButton.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButton.hasHint() ? evaluateWidgetType(tree.materialDropdownButton.hint) : null),
          disabledHint: (tree.materialDropdownButton.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButton.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButton.hasElevation() ? tree.materialDropdownButton.elevation : 8),
          style: (tree.materialDropdownButton.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButton.style) : null),
          underline: (tree.materialDropdownButton.hasUnderline() ? evaluateWidgetType(tree.materialDropdownButton.underline) : null),
          icon: (tree.materialDropdownButton.hasIcon() ? evaluateWidgetType(tree.materialDropdownButton.icon) : null),
          iconDisabledColor: (tree.materialDropdownButton.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButton.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButton.hasIconSize() ? tree.materialDropdownButton.iconSize : 24.0),
          isDense: (tree.materialDropdownButton.hasIsDense() ? tree.materialDropdownButton.isDense : false),
          isExpanded: (tree.materialDropdownButton.hasIsExpanded() ? tree.materialDropdownButton.isExpanded : false),
          itemHeight: (tree.materialDropdownButton.hasItemHeight() ? tree.materialDropdownButton.itemHeight : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          focusColor: (tree.materialDropdownButton.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButton.focusColor) : null),
          focusNode: (tree.materialDropdownButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButton.focusNode) : null),
          autofocus: (tree.materialDropdownButton.hasAutofocus() ? tree.materialDropdownButton.autofocus : false),
          dropdownColor: (tree.materialDropdownButton.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButton.dropdownColor) : null),
          menuMaxHeight: (tree.materialDropdownButton.hasMenuMaxHeight() ? tree.materialDropdownButton.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButton.hasEnableFeedback() ? tree.materialDropdownButton.enableFeedback : null),
          alignment: (tree.materialDropdownButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButton.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButton.borderRadius) : null),
          padding: (tree.materialDropdownButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButton.padding) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDropdownButtonFormField:
      return $flutterSrcMaterialDropdown.DropdownButtonFormField(
          key: (tree.materialDropdownButtonFormField.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonFormField.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButtonFormField.hasHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.hint) : null),
          disabledHint: (tree.materialDropdownButtonFormField.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButtonFormField.hasElevation() ? tree.materialDropdownButtonFormField.elevation : 8),
          style: (tree.materialDropdownButtonFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButtonFormField.style) : null),
          icon: (tree.materialDropdownButtonFormField.hasIcon() ? evaluateWidgetType(tree.materialDropdownButtonFormField.icon) : null),
          iconDisabledColor: (tree.materialDropdownButtonFormField.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButtonFormField.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButtonFormField.hasIconSize() ? tree.materialDropdownButtonFormField.iconSize : 24.0),
          isDense: (tree.materialDropdownButtonFormField.hasIsDense() ? tree.materialDropdownButtonFormField.isDense : true),
          isExpanded: (tree.materialDropdownButtonFormField.hasIsExpanded() ? tree.materialDropdownButtonFormField.isExpanded : false),
          itemHeight: (tree.materialDropdownButtonFormField.hasItemHeight() ? tree.materialDropdownButtonFormField.itemHeight : null),
          focusColor: (tree.materialDropdownButtonFormField.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.focusColor) : null),
          focusNode: (tree.materialDropdownButtonFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButtonFormField.focusNode) : null),
          autofocus: (tree.materialDropdownButtonFormField.hasAutofocus() ? tree.materialDropdownButtonFormField.autofocus : false),
          dropdownColor: (tree.materialDropdownButtonFormField.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.dropdownColor) : null),
          decoration: (tree.materialDropdownButtonFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialDropdownButtonFormField.decoration) : null),
          onSaved: null,
          validator: null,
          autovalidateMode: (tree.materialDropdownButtonFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialDropdownButtonFormField.autovalidateMode) : null),
          menuMaxHeight: (tree.materialDropdownButtonFormField.hasMenuMaxHeight() ? tree.materialDropdownButtonFormField.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButtonFormField.hasEnableFeedback() ? tree.materialDropdownButtonFormField.enableFeedback : null),
          alignment: (tree.materialDropdownButtonFormField.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButtonFormField.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButtonFormField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButtonFormField.borderRadius) : null),
          padding: (tree.materialDropdownButtonFormField.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButtonFormField.padding) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDropdownButtonHideUnderline:
      return $flutterSrcMaterialDropdown.DropdownButtonHideUnderline(
          key: (tree.materialDropdownButtonHideUnderline.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonHideUnderline.key) : null),
          child: (tree.materialDropdownButtonHideUnderline.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownButtonHideUnderline.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDropdownMenuItem:
      return $flutterSrcMaterialDropdown.DropdownMenuItem(
          key: (tree.materialDropdownMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialDropdownMenuItem.hasEnabled() ? tree.materialDropdownMenuItem.enabled : true),
          alignment: (tree.materialDropdownMenuItem.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownMenuItem.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          child: (tree.materialDropdownMenuItem.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuItem.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialDropdownMenuTheme:
      return $flutterSrcMaterialDropdownMenuTheme.DropdownMenuTheme(
          key: (tree.materialDropdownMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuTheme.key) : null),
          data: (tree.materialDropdownMenuTheme.hasData() ? evaluateRequiredMaterialDropdownMenuThemeDataType(tree.materialDropdownMenuTheme.data) : missing('data')),
          child: (tree.materialDropdownMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialElevatedButton:
      return $flutterSrcMaterialElevatedButton.ElevatedButton(
          key: (tree.materialElevatedButton.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButton.style) : null),
          focusNode: (tree.materialElevatedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButton.focusNode) : null),
          autofocus: (tree.materialElevatedButton.hasAutofocus() ? tree.materialElevatedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialElevatedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialElevatedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialElevatedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButton.statesController) : null),
          child: (tree.materialElevatedButton.hasChild() ? evaluateWidgetType(tree.materialElevatedButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialElevatedButtonNamedIcon:
      return $flutterSrcMaterialElevatedButton.ElevatedButton.icon(
          key: (tree.materialElevatedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButtonNamedIcon.style) : null),
          focusNode: (tree.materialElevatedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialElevatedButtonNamedIcon.hasAutofocus() ? tree.materialElevatedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialElevatedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialElevatedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialElevatedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButtonNamedIcon.statesController) : null),
          icon: (tree.materialElevatedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialElevatedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.label) : missing('label')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialElevatedButtonTheme:
      return $flutterSrcMaterialElevatedButtonTheme.ElevatedButtonTheme(
          key: (tree.materialElevatedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonTheme.key) : null),
          data: (tree.materialElevatedButtonTheme.hasData() ? evaluateRequiredMaterialElevatedButtonThemeDataType(tree.materialElevatedButtonTheme.data) : missing('data')),
          child: (tree.materialElevatedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialElevatedButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialEndDrawerButton:
      return $flutterSrcMaterialActionButtons.EndDrawerButton(
          key: (tree.materialEndDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButton.key) : null),
          style: (tree.materialEndDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialEndDrawerButton.style) : null),
          onPressed: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialEndDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.EndDrawerButtonIcon(
          key: (tree.materialEndDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButtonIcon.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialExpandIcon:
      return $flutterSrcMaterialExpandIcon.ExpandIcon(
          key: (tree.materialExpandIcon.hasKey() ? evaluateFlutterKeyType(tree.materialExpandIcon.key) : null),
          isExpanded: (tree.materialExpandIcon.hasIsExpanded() ? tree.materialExpandIcon.isExpanded : false),
          size: (tree.materialExpandIcon.hasSize() ? tree.materialExpandIcon.size : 24.0),
          onPressed: null,
          padding: (tree.materialExpandIcon.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialExpandIcon.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(8.0)),
          color: (tree.materialExpandIcon.hasColor() ? evaluateDartColorType(tree.materialExpandIcon.color) : null),
          disabledColor: (tree.materialExpandIcon.hasDisabledColor() ? evaluateDartColorType(tree.materialExpandIcon.disabledColor) : null),
          expandedColor: (tree.materialExpandIcon.hasExpandedColor() ? evaluateDartColorType(tree.materialExpandIcon.expandedColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialExpansionPanelList:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList(
          key: (tree.materialExpansionPanelList.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelList.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelList.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelList.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          expandedHeaderPadding: (tree.materialExpansionPanelList.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelList.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelList.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelList.dividerColor) : null),
          elevation: (tree.materialExpansionPanelList.hasElevation() ? tree.materialExpansionPanelList.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelList.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelList.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelList.hasMaterialGapSize() ? tree.materialExpansionPanelList.materialGapSize : 16.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialExpansionPanelListNamedRadio:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList.radio(
          key: (tree.materialExpansionPanelListNamedRadio.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelListNamedRadio.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelListNamedRadio.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelListNamedRadio.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          initialOpenPanelValue: null,
          expandedHeaderPadding: (tree.materialExpansionPanelListNamedRadio.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelListNamedRadio.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelListNamedRadio.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.dividerColor) : null),
          elevation: (tree.materialExpansionPanelListNamedRadio.hasElevation() ? tree.materialExpansionPanelListNamedRadio.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelListNamedRadio.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelListNamedRadio.hasMaterialGapSize() ? tree.materialExpansionPanelListNamedRadio.materialGapSize : 16.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialExpansionTile:
      return $flutterSrcMaterialExpansionTile.ExpansionTile(
          key: (tree.materialExpansionTile.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTile.key) : null),
          leading: (tree.materialExpansionTile.hasLeading() ? evaluateWidgetType(tree.materialExpansionTile.leading) : null),
          title: (tree.materialExpansionTile.hasTitle() ? evaluateRequiredWidgetType(tree.materialExpansionTile.title) : missing('title')),
          subtitle: (tree.materialExpansionTile.hasSubtitle() ? evaluateWidgetType(tree.materialExpansionTile.subtitle) : null),
          onExpansionChanged: null,
          children: tree.materialExpansionTile.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          trailing: (tree.materialExpansionTile.hasTrailing() ? evaluateWidgetType(tree.materialExpansionTile.trailing) : null),
          initiallyExpanded: (tree.materialExpansionTile.hasInitiallyExpanded() ? tree.materialExpansionTile.initiallyExpanded : false),
          maintainState: (tree.materialExpansionTile.hasMaintainState() ? tree.materialExpansionTile.maintainState : false),
          tilePadding: (tree.materialExpansionTile.hasTilePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.tilePadding) : null),
          expandedCrossAxisAlignment: (tree.materialExpansionTile.hasExpandedCrossAxisAlignment() ? enums.convertFlutterCrossAxisAlignmentType(tree.materialExpansionTile.expandedCrossAxisAlignment) : null),
          expandedAlignment: (tree.materialExpansionTile.hasExpandedAlignment() ? evaluateFlutterAlignmentType(tree.materialExpansionTile.expandedAlignment) : null),
          childrenPadding: (tree.materialExpansionTile.hasChildrenPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.childrenPadding) : null),
          backgroundColor: (tree.materialExpansionTile.hasBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.backgroundColor) : null),
          collapsedBackgroundColor: (tree.materialExpansionTile.hasCollapsedBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedBackgroundColor) : null),
          textColor: (tree.materialExpansionTile.hasTextColor() ? evaluateDartColorType(tree.materialExpansionTile.textColor) : null),
          collapsedTextColor: (tree.materialExpansionTile.hasCollapsedTextColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedTextColor) : null),
          iconColor: (tree.materialExpansionTile.hasIconColor() ? evaluateDartColorType(tree.materialExpansionTile.iconColor) : null),
          collapsedIconColor: (tree.materialExpansionTile.hasCollapsedIconColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedIconColor) : null),
          shape: (tree.materialExpansionTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.shape) : null),
          collapsedShape: (tree.materialExpansionTile.hasCollapsedShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.collapsedShape) : null),
          clipBehavior: (tree.materialExpansionTile.hasClipBehavior() ? enums.convertDartClipType(tree.materialExpansionTile.clipBehavior) : null),
          controlAffinity: (tree.materialExpansionTile.hasControlAffinity() ? enums.convertMaterialListTileControlAffinityType(tree.materialExpansionTile.controlAffinity) : null),
          controller: (tree.materialExpansionTile.hasController() ? evaluateMaterialExpansionTileControllerType(tree.materialExpansionTile.controller) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialExpansionTileTheme:
      return $flutterSrcMaterialExpansionTileTheme.ExpansionTileTheme(
          key: (tree.materialExpansionTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTileTheme.key) : null),
          data: (tree.materialExpansionTileTheme.hasData() ? evaluateRequiredMaterialExpansionTileThemeDataType(tree.materialExpansionTileTheme.data) : missing('data')),
          child: (tree.materialExpansionTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialExpansionTileTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilledButton:
      return $flutterSrcMaterialFilledButton.FilledButton(
          key: (tree.materialFilledButton.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButton.style) : null),
          focusNode: (tree.materialFilledButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButton.focusNode) : null),
          autofocus: (tree.materialFilledButton.hasAutofocus() ? tree.materialFilledButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButton.statesController) : null),
          child: (tree.materialFilledButton.hasChild() ? evaluateWidgetType(tree.materialFilledButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilledButtonNamedIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.icon(
          key: (tree.materialFilledButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedIcon.hasAutofocus() ? tree.materialFilledButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.label) : missing('label')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilledButtonNamedTonal:
      return $flutterSrcMaterialFilledButton.FilledButton.tonal(
          key: (tree.materialFilledButtonNamedTonal.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonal.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonal.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonal.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonal.hasAutofocus() ? tree.materialFilledButtonNamedTonal.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButtonNamedTonal.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButtonNamedTonal.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButtonNamedTonal.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonal.statesController) : null),
          child: (tree.materialFilledButtonNamedTonal.hasChild() ? evaluateWidgetType(tree.materialFilledButtonNamedTonal.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilledButtonNamedTonalIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.tonalIcon(
          key: (tree.materialFilledButtonNamedTonalIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonalIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonalIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonalIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonalIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonalIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonalIcon.hasAutofocus() ? tree.materialFilledButtonNamedTonalIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedTonalIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedTonalIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedTonalIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonalIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedTonalIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedTonalIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.label) : missing('label')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilledButtonTheme:
      return $flutterSrcMaterialFilledButtonTheme.FilledButtonTheme(
          key: (tree.materialFilledButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonTheme.key) : null),
          data: (tree.materialFilledButtonTheme.hasData() ? evaluateRequiredMaterialFilledButtonThemeDataType(tree.materialFilledButtonTheme.data) : missing('data')),
          child: (tree.materialFilledButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialFilledButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilterChip:
      return $flutterSrcMaterialFilterChip.FilterChip(
          key: (tree.materialFilterChip.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChip.key) : null),
          avatar: (tree.materialFilterChip.hasAvatar() ? evaluateWidgetType(tree.materialFilterChip.avatar) : null),
          label: (tree.materialFilterChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChip.label) : missing('label')),
          labelStyle: (tree.materialFilterChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChip.labelStyle) : null),
          labelPadding: (tree.materialFilterChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.labelPadding) : null),
          selected: (tree.materialFilterChip.hasSelected() ? tree.materialFilterChip.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChip.hasPressElevation() ? tree.materialFilterChip.pressElevation : null),
          disabledColor: (tree.materialFilterChip.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChip.disabledColor) : null),
          selectedColor: (tree.materialFilterChip.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChip.selectedColor) : null),
          tooltip: (tree.materialFilterChip.hasTooltip() ? tree.materialFilterChip.tooltip : null),
          side: (tree.materialFilterChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChip.side) : null),
          shape: (tree.materialFilterChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChip.shape) : null),
          clipBehavior: (tree.materialFilterChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChip.focusNode) : null),
          autofocus: (tree.materialFilterChip.hasAutofocus() ? tree.materialFilterChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChip.backgroundColor) : null),
          padding: (tree.materialFilterChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.padding) : null),
          visualDensity: (tree.materialFilterChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChip.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChip.hasElevation() ? tree.materialFilterChip.elevation : null),
          shadowColor: (tree.materialFilterChip.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChip.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChip.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChip.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChip.hasShowCheckmark() ? tree.materialFilterChip.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChip.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFilterChipNamedElevated:
      return $flutterSrcMaterialFilterChip.FilterChip.elevated(
          key: (tree.materialFilterChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChipNamedElevated.key) : null),
          avatar: (tree.materialFilterChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialFilterChipNamedElevated.avatar) : null),
          label: (tree.materialFilterChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialFilterChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialFilterChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.labelPadding) : null),
          selected: (tree.materialFilterChipNamedElevated.hasSelected() ? tree.materialFilterChipNamedElevated.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChipNamedElevated.hasPressElevation() ? tree.materialFilterChipNamedElevated.pressElevation : null),
          disabledColor: (tree.materialFilterChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.disabledColor) : null),
          selectedColor: (tree.materialFilterChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedColor) : null),
          tooltip: (tree.materialFilterChipNamedElevated.hasTooltip() ? tree.materialFilterChipNamedElevated.tooltip : null),
          side: (tree.materialFilterChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChipNamedElevated.side) : null),
          shape: (tree.materialFilterChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialFilterChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialFilterChipNamedElevated.hasAutofocus() ? tree.materialFilterChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialFilterChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.padding) : null),
          visualDensity: (tree.materialFilterChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChipNamedElevated.hasElevation() ? tree.materialFilterChipNamedElevated.elevation : null),
          shadowColor: (tree.materialFilterChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChipNamedElevated.hasShowCheckmark() ? tree.materialFilterChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFlexibleSpaceBar:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBar(
          key: (tree.materialFlexibleSpaceBar.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBar.key) : null),
          title: (tree.materialFlexibleSpaceBar.hasTitle() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.title) : null),
          background: (tree.materialFlexibleSpaceBar.hasBackground() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.background) : null),
          centerTitle: (tree.materialFlexibleSpaceBar.hasCenterTitle() ? tree.materialFlexibleSpaceBar.centerTitle : null),
          titlePadding: (tree.materialFlexibleSpaceBar.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFlexibleSpaceBar.titlePadding) : null),
          collapseMode: (tree.materialFlexibleSpaceBar.hasCollapseMode() ? enums.convertRequiredMaterialCollapseModeType(tree.materialFlexibleSpaceBar.collapseMode) : $flutterSrcMaterialFlexibleSpaceBar.CollapseMode.parallax),
          stretchModes: tree.materialFlexibleSpaceBar.stretchModes.map((e) => enums.convertRequiredMaterialStretchModeType(e)).toList(),
          expandedTitleScale: (tree.materialFlexibleSpaceBar.hasExpandedTitleScale() ? tree.materialFlexibleSpaceBar.expandedTitleScale : 1.5));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFlexibleSpaceBarSettings:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBarSettings(
          key: (tree.materialFlexibleSpaceBarSettings.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBarSettings.key) : null),
          toolbarOpacity: (tree.materialFlexibleSpaceBarSettings.hasToolbarOpacity() ? tree.materialFlexibleSpaceBarSettings.toolbarOpacity : missing('toolbarOpacity')),
          minExtent: (tree.materialFlexibleSpaceBarSettings.hasMinExtent() ? tree.materialFlexibleSpaceBarSettings.minExtent : missing('minExtent')),
          maxExtent: (tree.materialFlexibleSpaceBarSettings.hasMaxExtent() ? tree.materialFlexibleSpaceBarSettings.maxExtent : missing('maxExtent')),
          currentExtent: (tree.materialFlexibleSpaceBarSettings.hasCurrentExtent() ? tree.materialFlexibleSpaceBarSettings.currentExtent : missing('currentExtent')),
          child: (tree.materialFlexibleSpaceBarSettings.hasChild() ? evaluateRequiredWidgetType(tree.materialFlexibleSpaceBarSettings.child) : missing('child')),
          isScrolledUnder: (tree.materialFlexibleSpaceBarSettings.hasIsScrolledUnder() ? tree.materialFlexibleSpaceBarSettings.isScrolledUnder : null),
          hasLeading: (tree.materialFlexibleSpaceBarSettings.hasHasLeading() ? tree.materialFlexibleSpaceBarSettings.hasLeading : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFloatingActionButton:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton(
          key: (tree.materialFloatingActionButton.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButton.key) : null),
          child: (tree.materialFloatingActionButton.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButton.child) : null),
          tooltip: (tree.materialFloatingActionButton.hasTooltip() ? tree.materialFloatingActionButton.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButton.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButton.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButton.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButton.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButton.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButton.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButton.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButton.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButton.hasElevation() ? tree.materialFloatingActionButton.elevation : null),
          focusElevation: (tree.materialFloatingActionButton.hasFocusElevation() ? tree.materialFloatingActionButton.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButton.hasHoverElevation() ? tree.materialFloatingActionButton.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButton.hasHighlightElevation() ? tree.materialFloatingActionButton.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButton.hasDisabledElevation() ? tree.materialFloatingActionButton.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          mini: (tree.materialFloatingActionButton.hasMini() ? tree.materialFloatingActionButton.mini : false),
          shape: (tree.materialFloatingActionButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButton.shape) : null),
          clipBehavior: (tree.materialFloatingActionButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButton.focusNode) : null),
          autofocus: (tree.materialFloatingActionButton.hasAutofocus() ? tree.materialFloatingActionButton.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButton.materialTapTargetSize) : null),
          isExtended: (tree.materialFloatingActionButton.hasIsExtended() ? tree.materialFloatingActionButton.isExtended : false),
          enableFeedback: (tree.materialFloatingActionButton.hasEnableFeedback() ? tree.materialFloatingActionButton.enableFeedback : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFloatingActionButtonNamedExtended:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.extended(
          key: (tree.materialFloatingActionButtonNamedExtended.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedExtended.key) : null),
          tooltip: (tree.materialFloatingActionButtonNamedExtended.hasTooltip() ? tree.materialFloatingActionButtonNamedExtended.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedExtended.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedExtended.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedExtended.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedExtended.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.hoverColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedExtended.hasElevation() ? tree.materialFloatingActionButtonNamedExtended.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedExtended.hasFocusElevation() ? tree.materialFloatingActionButtonNamedExtended.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedExtended.hasHoverElevation() ? tree.materialFloatingActionButtonNamedExtended.hoverElevation : null),
          splashColor: (tree.materialFloatingActionButtonNamedExtended.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.splashColor) : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedExtended.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedExtended.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedExtended.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedExtended.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedExtended.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedExtended.shape) : null),
          isExtended: (tree.materialFloatingActionButtonNamedExtended.hasIsExtended() ? tree.materialFloatingActionButtonNamedExtended.isExtended : true),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedExtended.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedExtended.materialTapTargetSize) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedExtended.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedExtended.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedExtended.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedExtended.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedExtended.hasAutofocus() ? tree.materialFloatingActionButtonNamedExtended.autofocus : false),
          extendedIconLabelSpacing: (tree.materialFloatingActionButtonNamedExtended.hasExtendedIconLabelSpacing() ? tree.materialFloatingActionButtonNamedExtended.extendedIconLabelSpacing : null),
          extendedPadding: (tree.materialFloatingActionButtonNamedExtended.hasExtendedPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFloatingActionButtonNamedExtended.extendedPadding) : null),
          extendedTextStyle: (tree.materialFloatingActionButtonNamedExtended.hasExtendedTextStyle() ? evaluateFlutterTextStyleType(tree.materialFloatingActionButtonNamedExtended.extendedTextStyle) : null),
          icon: (tree.materialFloatingActionButtonNamedExtended.hasIcon() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedExtended.icon) : null),
          label: (tree.materialFloatingActionButtonNamedExtended.hasLabel() ? evaluateRequiredWidgetType(tree.materialFloatingActionButtonNamedExtended.label) : missing('label')),
          enableFeedback: (tree.materialFloatingActionButtonNamedExtended.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedExtended.enableFeedback : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFloatingActionButtonNamedLarge:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.large(
          key: (tree.materialFloatingActionButtonNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedLarge.key) : null),
          child: (tree.materialFloatingActionButtonNamedLarge.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedLarge.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedLarge.hasTooltip() ? tree.materialFloatingActionButtonNamedLarge.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedLarge.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedLarge.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedLarge.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedLarge.hasElevation() ? tree.materialFloatingActionButtonNamedLarge.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedLarge.hasFocusElevation() ? tree.materialFloatingActionButtonNamedLarge.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedLarge.hasHoverElevation() ? tree.materialFloatingActionButtonNamedLarge.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedLarge.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedLarge.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedLarge.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedLarge.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedLarge.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedLarge.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedLarge.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedLarge.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedLarge.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedLarge.hasAutofocus() ? tree.materialFloatingActionButtonNamedLarge.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedLarge.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedLarge.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedLarge.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedLarge.enableFeedback : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFloatingActionButtonNamedSmall:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.small(
          key: (tree.materialFloatingActionButtonNamedSmall.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedSmall.key) : null),
          child: (tree.materialFloatingActionButtonNamedSmall.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedSmall.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedSmall.hasTooltip() ? tree.materialFloatingActionButtonNamedSmall.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedSmall.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedSmall.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedSmall.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedSmall.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedSmall.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedSmall.hasElevation() ? tree.materialFloatingActionButtonNamedSmall.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedSmall.hasFocusElevation() ? tree.materialFloatingActionButtonNamedSmall.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedSmall.hasHoverElevation() ? tree.materialFloatingActionButtonNamedSmall.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedSmall.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedSmall.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedSmall.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedSmall.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedSmall.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedSmall.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedSmall.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedSmall.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedSmall.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedSmall.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedSmall.hasAutofocus() ? tree.materialFloatingActionButtonNamedSmall.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedSmall.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedSmall.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedSmall.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedSmall.enableFeedback : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialFlutterLogo:
      return $flutterSrcMaterialFlutterLogo.FlutterLogo(
          key: (tree.materialFlutterLogo.hasKey() ? evaluateFlutterKeyType(tree.materialFlutterLogo.key) : null),
          size: (tree.materialFlutterLogo.hasSize() ? tree.materialFlutterLogo.size : null),
          textColor: (tree.materialFlutterLogo.hasTextColor() ? evaluateRequiredDartColorType(tree.materialFlutterLogo.textColor) : $dartUi.Color(0xFF757575)),
          style: (tree.materialFlutterLogo.hasStyle() ? enums.convertRequiredFlutterFlutterLogoStyleType(tree.materialFlutterLogo.style) : $flutterSrcPaintingFlutterLogo.FlutterLogoStyle.markOnly),
          duration: (tree.materialFlutterLogo.hasDuration() ? evaluateRequiredDartDurationType(tree.materialFlutterLogo.duration) : $dartCore.Duration(milliseconds: 750)),
          curve: (tree.materialFlutterLogo.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialFlutterLogo.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialGridTile:
      return $flutterSrcMaterialGridTile.GridTile(
          key: (tree.materialGridTile.hasKey() ? evaluateFlutterKeyType(tree.materialGridTile.key) : null),
          header: (tree.materialGridTile.hasHeader() ? evaluateWidgetType(tree.materialGridTile.header) : null),
          footer: (tree.materialGridTile.hasFooter() ? evaluateWidgetType(tree.materialGridTile.footer) : null),
          child: (tree.materialGridTile.hasChild() ? evaluateRequiredWidgetType(tree.materialGridTile.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialGridTileBar:
      return $flutterSrcMaterialGridTileBar.GridTileBar(
          key: (tree.materialGridTileBar.hasKey() ? evaluateFlutterKeyType(tree.materialGridTileBar.key) : null),
          backgroundColor: (tree.materialGridTileBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialGridTileBar.backgroundColor) : null),
          leading: (tree.materialGridTileBar.hasLeading() ? evaluateWidgetType(tree.materialGridTileBar.leading) : null),
          title: (tree.materialGridTileBar.hasTitle() ? evaluateWidgetType(tree.materialGridTileBar.title) : null),
          subtitle: (tree.materialGridTileBar.hasSubtitle() ? evaluateWidgetType(tree.materialGridTileBar.subtitle) : null),
          trailing: (tree.materialGridTileBar.hasTrailing() ? evaluateWidgetType(tree.materialGridTileBar.trailing) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialIconButton:
      return $flutterSrcMaterialIconButton.IconButton(
          key: (tree.materialIconButton.hasKey() ? evaluateFlutterKeyType(tree.materialIconButton.key) : null),
          iconSize: (tree.materialIconButton.hasIconSize() ? tree.materialIconButton.iconSize : null),
          visualDensity: (tree.materialIconButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButton.visualDensity) : null),
          padding: (tree.materialIconButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButton.padding) : null),
          alignment: (tree.materialIconButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButton.alignment) : null),
          splashRadius: (tree.materialIconButton.hasSplashRadius() ? tree.materialIconButton.splashRadius : null),
          color: (tree.materialIconButton.hasColor() ? evaluateDartColorType(tree.materialIconButton.color) : null),
          focusColor: (tree.materialIconButton.hasFocusColor() ? evaluateDartColorType(tree.materialIconButton.focusColor) : null),
          hoverColor: (tree.materialIconButton.hasHoverColor() ? evaluateDartColorType(tree.materialIconButton.hoverColor) : null),
          highlightColor: (tree.materialIconButton.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButton.highlightColor) : null),
          splashColor: (tree.materialIconButton.hasSplashColor() ? evaluateDartColorType(tree.materialIconButton.splashColor) : null),
          disabledColor: (tree.materialIconButton.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButton.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButton.focusNode) : null),
          autofocus: (tree.materialIconButton.hasAutofocus() ? tree.materialIconButton.autofocus : false),
          tooltip: (tree.materialIconButton.hasTooltip() ? tree.materialIconButton.tooltip : null),
          enableFeedback: (tree.materialIconButton.hasEnableFeedback() ? tree.materialIconButton.enableFeedback : null),
          constraints: (tree.materialIconButton.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButton.constraints) : null),
          style: (tree.materialIconButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButton.style) : null),
          isSelected: (tree.materialIconButton.hasIsSelected() ? tree.materialIconButton.isSelected : null),
          selectedIcon: (tree.materialIconButton.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButton.selectedIcon) : null),
          icon: (tree.materialIconButton.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButton.icon) : missing('icon')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialIconButtonNamedFilled:
      return $flutterSrcMaterialIconButton.IconButton.filled(
          key: (tree.materialIconButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilled.key) : null),
          iconSize: (tree.materialIconButtonNamedFilled.hasIconSize() ? tree.materialIconButtonNamedFilled.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilled.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilled.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilled.padding) : null),
          alignment: (tree.materialIconButtonNamedFilled.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilled.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilled.hasSplashRadius() ? tree.materialIconButtonNamedFilled.splashRadius : null),
          color: (tree.materialIconButtonNamedFilled.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.color) : null),
          focusColor: (tree.materialIconButtonNamedFilled.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilled.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilled.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilled.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilled.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilled.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilled.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilled.hasAutofocus() ? tree.materialIconButtonNamedFilled.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilled.hasTooltip() ? tree.materialIconButtonNamedFilled.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilled.hasEnableFeedback() ? tree.materialIconButtonNamedFilled.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilled.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilled.constraints) : null),
          style: (tree.materialIconButtonNamedFilled.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilled.style) : null),
          isSelected: (tree.materialIconButtonNamedFilled.hasIsSelected() ? tree.materialIconButtonNamedFilled.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilled.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilled.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilled.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilled.icon) : missing('icon')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialIconButtonNamedFilledTonal:
      return $flutterSrcMaterialIconButton.IconButton.filledTonal(
          key: (tree.materialIconButtonNamedFilledTonal.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilledTonal.key) : null),
          iconSize: (tree.materialIconButtonNamedFilledTonal.hasIconSize() ? tree.materialIconButtonNamedFilledTonal.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilledTonal.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilledTonal.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilledTonal.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilledTonal.padding) : null),
          alignment: (tree.materialIconButtonNamedFilledTonal.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilledTonal.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilledTonal.hasSplashRadius() ? tree.materialIconButtonNamedFilledTonal.splashRadius : null),
          color: (tree.materialIconButtonNamedFilledTonal.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.color) : null),
          focusColor: (tree.materialIconButtonNamedFilledTonal.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilledTonal.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilledTonal.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilledTonal.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilledTonal.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilledTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilledTonal.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilledTonal.hasAutofocus() ? tree.materialIconButtonNamedFilledTonal.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilledTonal.hasTooltip() ? tree.materialIconButtonNamedFilledTonal.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilledTonal.hasEnableFeedback() ? tree.materialIconButtonNamedFilledTonal.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilledTonal.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilledTonal.constraints) : null),
          style: (tree.materialIconButtonNamedFilledTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilledTonal.style) : null),
          isSelected: (tree.materialIconButtonNamedFilledTonal.hasIsSelected() ? tree.materialIconButtonNamedFilledTonal.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilledTonal.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilledTonal.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilledTonal.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilledTonal.icon) : missing('icon')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialIconButtonNamedOutlined:
      return $flutterSrcMaterialIconButton.IconButton.outlined(
          key: (tree.materialIconButtonNamedOutlined.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedOutlined.key) : null),
          iconSize: (tree.materialIconButtonNamedOutlined.hasIconSize() ? tree.materialIconButtonNamedOutlined.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedOutlined.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedOutlined.visualDensity) : null),
          padding: (tree.materialIconButtonNamedOutlined.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedOutlined.padding) : null),
          alignment: (tree.materialIconButtonNamedOutlined.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedOutlined.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedOutlined.hasSplashRadius() ? tree.materialIconButtonNamedOutlined.splashRadius : null),
          color: (tree.materialIconButtonNamedOutlined.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.color) : null),
          focusColor: (tree.materialIconButtonNamedOutlined.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedOutlined.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedOutlined.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedOutlined.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedOutlined.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedOutlined.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedOutlined.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedOutlined.hasAutofocus() ? tree.materialIconButtonNamedOutlined.autofocus : false),
          tooltip: (tree.materialIconButtonNamedOutlined.hasTooltip() ? tree.materialIconButtonNamedOutlined.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedOutlined.hasEnableFeedback() ? tree.materialIconButtonNamedOutlined.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedOutlined.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedOutlined.constraints) : null),
          style: (tree.materialIconButtonNamedOutlined.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedOutlined.style) : null),
          isSelected: (tree.materialIconButtonNamedOutlined.hasIsSelected() ? tree.materialIconButtonNamedOutlined.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedOutlined.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedOutlined.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedOutlined.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedOutlined.icon) : missing('icon')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialIconButtonTheme:
      return $flutterSrcMaterialIconButtonTheme.IconButtonTheme(
          key: (tree.materialIconButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonTheme.key) : null),
          data: (tree.materialIconButtonTheme.hasData() ? evaluateRequiredMaterialIconButtonThemeDataType(tree.materialIconButtonTheme.data) : missing('data')),
          child: (tree.materialIconButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialIconButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInk:
      return $flutterSrcMaterialInkDecoration.Ink(
          key: (tree.materialInk.hasKey() ? evaluateFlutterKeyType(tree.materialInk.key) : null),
          padding: (tree.materialInk.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInk.padding) : null),
          color: (tree.materialInk.hasColor() ? evaluateDartColorType(tree.materialInk.color) : null),
          decoration: (tree.materialInk.hasDecoration() ? evaluateFlutterDecorationType(tree.materialInk.decoration) : null),
          width: (tree.materialInk.hasWidth() ? tree.materialInk.width : null),
          height: (tree.materialInk.hasHeight() ? tree.materialInk.height : null),
          child: (tree.materialInk.hasChild() ? evaluateWidgetType(tree.materialInk.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInkResponse:
      return $flutterSrcMaterialInkWell.InkResponse(
          key: (tree.materialInkResponse.hasKey() ? evaluateFlutterKeyType(tree.materialInkResponse.key) : null),
          child: (tree.materialInkResponse.hasChild() ? evaluateWidgetType(tree.materialInkResponse.child) : null),
          onTap: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onDoubleTap: null,
          onLongPress: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          containedInkWell: (tree.materialInkResponse.hasContainedInkWell() ? tree.materialInkResponse.containedInkWell : false),
          highlightShape: (tree.materialInkResponse.hasHighlightShape() ? enums.convertRequiredFlutterBoxShapeType(tree.materialInkResponse.highlightShape) : $flutterSrcPaintingBoxBorder.BoxShape.circle),
          radius: (tree.materialInkResponse.hasRadius() ? tree.materialInkResponse.radius : null),
          borderRadius: (tree.materialInkResponse.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkResponse.borderRadius) : null),
          customBorder: (tree.materialInkResponse.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkResponse.customBorder) : null),
          focusColor: (tree.materialInkResponse.hasFocusColor() ? evaluateDartColorType(tree.materialInkResponse.focusColor) : null),
          hoverColor: (tree.materialInkResponse.hasHoverColor() ? evaluateDartColorType(tree.materialInkResponse.hoverColor) : null),
          highlightColor: (tree.materialInkResponse.hasHighlightColor() ? evaluateDartColorType(tree.materialInkResponse.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkResponse.hasSplashColor() ? evaluateDartColorType(tree.materialInkResponse.splashColor) : null),
          splashFactory: null,
          enableFeedback: (tree.materialInkResponse.hasEnableFeedback() ? tree.materialInkResponse.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkResponse.hasExcludeFromSemantics() ? tree.materialInkResponse.excludeFromSemantics : false),
          focusNode: (tree.materialInkResponse.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkResponse.focusNode) : null),
          canRequestFocus: (tree.materialInkResponse.hasCanRequestFocus() ? tree.materialInkResponse.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkResponse.hasAutofocus() ? tree.materialInkResponse.autofocus : false),
          statesController: (tree.materialInkResponse.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkResponse.statesController) : null),
          hoverDuration: (tree.materialInkResponse.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkResponse.hoverDuration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInkWell:
      return $flutterSrcMaterialInkWell.InkWell(
          key: (tree.materialInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialInkWell.key) : null),
          child: (tree.materialInkWell.hasChild() ? evaluateWidgetType(tree.materialInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          focusColor: (tree.materialInkWell.hasFocusColor() ? evaluateDartColorType(tree.materialInkWell.focusColor) : null),
          hoverColor: (tree.materialInkWell.hasHoverColor() ? evaluateDartColorType(tree.materialInkWell.hoverColor) : null),
          highlightColor: (tree.materialInkWell.hasHighlightColor() ? evaluateDartColorType(tree.materialInkWell.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkWell.hasSplashColor() ? evaluateDartColorType(tree.materialInkWell.splashColor) : null),
          splashFactory: null,
          radius: (tree.materialInkWell.hasRadius() ? tree.materialInkWell.radius : null),
          borderRadius: (tree.materialInkWell.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkWell.borderRadius) : null),
          customBorder: (tree.materialInkWell.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkWell.customBorder) : null),
          enableFeedback: (tree.materialInkWell.hasEnableFeedback() ? tree.materialInkWell.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkWell.hasExcludeFromSemantics() ? tree.materialInkWell.excludeFromSemantics : false),
          focusNode: (tree.materialInkWell.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkWell.focusNode) : null),
          canRequestFocus: (tree.materialInkWell.hasCanRequestFocus() ? tree.materialInkWell.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkWell.hasAutofocus() ? tree.materialInkWell.autofocus : false),
          statesController: (tree.materialInkWell.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkWell.statesController) : null),
          hoverDuration: (tree.materialInkWell.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkWell.hoverDuration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInputChip:
      return $flutterSrcMaterialInputChip.InputChip(
          key: (tree.materialInputChip.hasKey() ? evaluateFlutterKeyType(tree.materialInputChip.key) : null),
          avatar: (tree.materialInputChip.hasAvatar() ? evaluateWidgetType(tree.materialInputChip.avatar) : null),
          label: (tree.materialInputChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialInputChip.label) : missing('label')),
          labelStyle: (tree.materialInputChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputChip.labelStyle) : null),
          labelPadding: (tree.materialInputChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.labelPadding) : null),
          selected: (tree.materialInputChip.hasSelected() ? tree.materialInputChip.selected : false),
          isEnabled: (tree.materialInputChip.hasIsEnabled() ? tree.materialInputChip.isEnabled : true),
          onSelected: null,
          deleteIcon: (tree.materialInputChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialInputChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialInputChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialInputChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialInputChip.hasDeleteButtonTooltipMessage() ? tree.materialInputChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          pressElevation: (tree.materialInputChip.hasPressElevation() ? tree.materialInputChip.pressElevation : null),
          disabledColor: (tree.materialInputChip.hasDisabledColor() ? evaluateDartColorType(tree.materialInputChip.disabledColor) : null),
          selectedColor: (tree.materialInputChip.hasSelectedColor() ? evaluateDartColorType(tree.materialInputChip.selectedColor) : null),
          tooltip: (tree.materialInputChip.hasTooltip() ? tree.materialInputChip.tooltip : null),
          side: (tree.materialInputChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialInputChip.side) : null),
          shape: (tree.materialInputChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialInputChip.shape) : null),
          clipBehavior: (tree.materialInputChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialInputChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialInputChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInputChip.focusNode) : null),
          autofocus: (tree.materialInputChip.hasAutofocus() ? tree.materialInputChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialInputChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialInputChip.backgroundColor) : null),
          padding: (tree.materialInputChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.padding) : null),
          visualDensity: (tree.materialInputChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialInputChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialInputChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialInputChip.materialTapTargetSize) : null),
          elevation: (tree.materialInputChip.hasElevation() ? tree.materialInputChip.elevation : null),
          shadowColor: (tree.materialInputChip.hasShadowColor() ? evaluateDartColorType(tree.materialInputChip.shadowColor) : null),
          surfaceTintColor: (tree.materialInputChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialInputChip.surfaceTintColor) : null),
          iconTheme: (tree.materialInputChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialInputChip.iconTheme) : null),
          selectedShadowColor: (tree.materialInputChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialInputChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialInputChip.hasShowCheckmark() ? tree.materialInputChip.showCheckmark : null),
          checkmarkColor: (tree.materialInputChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialInputChip.checkmarkColor) : null),
          avatarBorder: (tree.materialInputChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialInputChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInputDatePickerFormField:
      return $flutterSrcMaterialInputDatePickerFormField.InputDatePickerFormField(
          key: (tree.materialInputDatePickerFormField.hasKey() ? evaluateFlutterKeyType(tree.materialInputDatePickerFormField.key) : null),
          initialDate: (tree.materialInputDatePickerFormField.hasInitialDate() ? evaluateDartDateTimeType(tree.materialInputDatePickerFormField.initialDate) : null),
          firstDate: (tree.materialInputDatePickerFormField.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.firstDate) : missing('firstDate')),
          lastDate: (tree.materialInputDatePickerFormField.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.lastDate) : missing('lastDate')),
          onDateSubmitted: null,
          onDateSaved: null,
          selectableDayPredicate: null,
          errorFormatText: (tree.materialInputDatePickerFormField.hasErrorFormatText() ? tree.materialInputDatePickerFormField.errorFormatText : null),
          errorInvalidText: (tree.materialInputDatePickerFormField.hasErrorInvalidText() ? tree.materialInputDatePickerFormField.errorInvalidText : null),
          fieldHintText: (tree.materialInputDatePickerFormField.hasFieldHintText() ? tree.materialInputDatePickerFormField.fieldHintText : null),
          fieldLabelText: (tree.materialInputDatePickerFormField.hasFieldLabelText() ? tree.materialInputDatePickerFormField.fieldLabelText : null),
          keyboardType: (tree.materialInputDatePickerFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialInputDatePickerFormField.keyboardType) : null),
          autofocus: (tree.materialInputDatePickerFormField.hasAutofocus() ? tree.materialInputDatePickerFormField.autofocus : false),
          acceptEmptyDate: (tree.materialInputDatePickerFormField.hasAcceptEmptyDate() ? tree.materialInputDatePickerFormField.acceptEmptyDate : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialInputDecorator:
      return $flutterSrcMaterialInputDecorator.InputDecorator(
          key: (tree.materialInputDecorator.hasKey() ? evaluateFlutterKeyType(tree.materialInputDecorator.key) : null),
          decoration: (tree.materialInputDecorator.hasDecoration() ? evaluateRequiredMaterialInputDecorationType(tree.materialInputDecorator.decoration) : missing('decoration')),
          baseStyle: (tree.materialInputDecorator.hasBaseStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorator.baseStyle) : null),
          textAlign: (tree.materialInputDecorator.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialInputDecorator.textAlign) : null),
          textAlignVertical: (tree.materialInputDecorator.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialInputDecorator.textAlignVertical) : null),
          isFocused: (tree.materialInputDecorator.hasIsFocused() ? tree.materialInputDecorator.isFocused : false),
          isHovering: (tree.materialInputDecorator.hasIsHovering() ? tree.materialInputDecorator.isHovering : false),
          expands: (tree.materialInputDecorator.hasExpands() ? tree.materialInputDecorator.expands : false),
          isEmpty: (tree.materialInputDecorator.hasIsEmpty() ? tree.materialInputDecorator.isEmpty : false),
          child: (tree.materialInputDecorator.hasChild() ? evaluateWidgetType(tree.materialInputDecorator.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialLicensePage:
      return $flutterSrcMaterialAbout.LicensePage(
          key: (tree.materialLicensePage.hasKey() ? evaluateFlutterKeyType(tree.materialLicensePage.key) : null),
          applicationName: (tree.materialLicensePage.hasApplicationName() ? tree.materialLicensePage.applicationName : null),
          applicationVersion: (tree.materialLicensePage.hasApplicationVersion() ? tree.materialLicensePage.applicationVersion : null),
          applicationIcon: (tree.materialLicensePage.hasApplicationIcon() ? evaluateWidgetType(tree.materialLicensePage.applicationIcon) : null),
          applicationLegalese: (tree.materialLicensePage.hasApplicationLegalese() ? tree.materialLicensePage.applicationLegalese : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialLinearProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.LinearProgressIndicator(
          key: (tree.materialLinearProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialLinearProgressIndicator.key) : null),
          value: (tree.materialLinearProgressIndicator.hasValue() ? tree.materialLinearProgressIndicator.value : null),
          backgroundColor: (tree.materialLinearProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.backgroundColor) : null),
          color: (tree.materialLinearProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.color) : null),
          valueColor: null,
          minHeight: (tree.materialLinearProgressIndicator.hasMinHeight() ? tree.materialLinearProgressIndicator.minHeight : null),
          semanticsLabel: (tree.materialLinearProgressIndicator.hasSemanticsLabel() ? tree.materialLinearProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialLinearProgressIndicator.hasSemanticsValue() ? tree.materialLinearProgressIndicator.semanticsValue : null),
          borderRadius: (tree.materialLinearProgressIndicator.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.materialLinearProgressIndicator.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialListTile:
      return $flutterSrcMaterialListTile.ListTile(
          key: (tree.materialListTile.hasKey() ? evaluateFlutterKeyType(tree.materialListTile.key) : null),
          leading: (tree.materialListTile.hasLeading() ? evaluateWidgetType(tree.materialListTile.leading) : null),
          title: (tree.materialListTile.hasTitle() ? evaluateWidgetType(tree.materialListTile.title) : null),
          subtitle: (tree.materialListTile.hasSubtitle() ? evaluateWidgetType(tree.materialListTile.subtitle) : null),
          trailing: (tree.materialListTile.hasTrailing() ? evaluateWidgetType(tree.materialListTile.trailing) : null),
          isThreeLine: (tree.materialListTile.hasIsThreeLine() ? tree.materialListTile.isThreeLine : false),
          dense: (tree.materialListTile.hasDense() ? tree.materialListTile.dense : null),
          visualDensity: (tree.materialListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialListTile.visualDensity) : null),
          shape: (tree.materialListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTile.shape) : null),
          style: (tree.materialListTile.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTile.style) : null),
          selectedColor: (tree.materialListTile.hasSelectedColor() ? evaluateDartColorType(tree.materialListTile.selectedColor) : null),
          iconColor: (tree.materialListTile.hasIconColor() ? evaluateDartColorType(tree.materialListTile.iconColor) : null),
          textColor: (tree.materialListTile.hasTextColor() ? evaluateDartColorType(tree.materialListTile.textColor) : null),
          titleTextStyle: (tree.materialListTile.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.titleTextStyle) : null),
          subtitleTextStyle: (tree.materialListTile.hasSubtitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.subtitleTextStyle) : null),
          leadingAndTrailingTextStyle: (tree.materialListTile.hasLeadingAndTrailingTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.leadingAndTrailingTextStyle) : null),
          contentPadding: (tree.materialListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTile.contentPadding) : null),
          enabled: (tree.materialListTile.hasEnabled() ? tree.materialListTile.enabled : true),
          onTap: null,
          onLongPress: null,
          onFocusChange: null,
          mouseCursor: null,
          selected: (tree.materialListTile.hasSelected() ? tree.materialListTile.selected : false),
          focusColor: (tree.materialListTile.hasFocusColor() ? evaluateDartColorType(tree.materialListTile.focusColor) : null),
          hoverColor: (tree.materialListTile.hasHoverColor() ? evaluateDartColorType(tree.materialListTile.hoverColor) : null),
          splashColor: (tree.materialListTile.hasSplashColor() ? evaluateDartColorType(tree.materialListTile.splashColor) : null),
          focusNode: (tree.materialListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialListTile.focusNode) : null),
          autofocus: (tree.materialListTile.hasAutofocus() ? tree.materialListTile.autofocus : false),
          tileColor: (tree.materialListTile.hasTileColor() ? evaluateDartColorType(tree.materialListTile.tileColor) : null),
          selectedTileColor: (tree.materialListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTile.selectedTileColor) : null),
          enableFeedback: (tree.materialListTile.hasEnableFeedback() ? tree.materialListTile.enableFeedback : null),
          horizontalTitleGap: (tree.materialListTile.hasHorizontalTitleGap() ? tree.materialListTile.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTile.hasMinVerticalPadding() ? tree.materialListTile.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTile.hasMinLeadingWidth() ? tree.materialListTile.minLeadingWidth : null),
          titleAlignment: (tree.materialListTile.hasTitleAlignment() ? enums.convertMaterialListTileTitleAlignmentType(tree.materialListTile.titleAlignment) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialListTileTheme:
      return $flutterSrcMaterialListTileTheme.ListTileTheme(
          key: (tree.materialListTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialListTileTheme.key) : null),
          data: (tree.materialListTileTheme.hasData() ? evaluateMaterialListTileThemeDataType(tree.materialListTileTheme.data) : null),
          dense: (tree.materialListTileTheme.hasDense() ? tree.materialListTileTheme.dense : null),
          shape: (tree.materialListTileTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTileTheme.shape) : null),
          style: (tree.materialListTileTheme.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTileTheme.style) : null),
          selectedColor: (tree.materialListTileTheme.hasSelectedColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedColor) : null),
          iconColor: (tree.materialListTileTheme.hasIconColor() ? evaluateDartColorType(tree.materialListTileTheme.iconColor) : null),
          textColor: (tree.materialListTileTheme.hasTextColor() ? evaluateDartColorType(tree.materialListTileTheme.textColor) : null),
          contentPadding: (tree.materialListTileTheme.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTileTheme.contentPadding) : null),
          tileColor: (tree.materialListTileTheme.hasTileColor() ? evaluateDartColorType(tree.materialListTileTheme.tileColor) : null),
          selectedTileColor: (tree.materialListTileTheme.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedTileColor) : null),
          enableFeedback: (tree.materialListTileTheme.hasEnableFeedback() ? tree.materialListTileTheme.enableFeedback : null),
          mouseCursor: null,
          horizontalTitleGap: (tree.materialListTileTheme.hasHorizontalTitleGap() ? tree.materialListTileTheme.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTileTheme.hasMinVerticalPadding() ? tree.materialListTileTheme.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTileTheme.hasMinLeadingWidth() ? tree.materialListTileTheme.minLeadingWidth : null),
          child: (tree.materialListTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialListTileTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMagnifier:
      return $flutterSrcMaterialMagnifier.Magnifier(
          key: (tree.materialMagnifier.hasKey() ? evaluateFlutterKeyType(tree.materialMagnifier.key) : null),
          additionalFocalPointOffset: (tree.materialMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.materialMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          borderRadius: (tree.materialMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(40))),
          filmColor: (tree.materialMagnifier.hasFilmColor() ? evaluateRequiredDartColorType(tree.materialMagnifier.filmColor) : $dartUi.Color.fromARGB(8, 158, 158, 158)),
          shadows: tree.materialMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          size: (tree.materialMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.materialMagnifier.size) : $dartUi.Size(77.37, 37.9)));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterial:
      return $flutterSrcMaterialMaterial.Material(
          key: (tree.materialMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMaterial.key) : null),
          type: (tree.materialMaterial.hasType() ? enums.convertRequiredMaterialMaterialTypeType(tree.materialMaterial.type) : $flutterSrcMaterialMaterial.MaterialType.canvas),
          elevation: (tree.materialMaterial.hasElevation() ? tree.materialMaterial.elevation : 0.0),
          color: (tree.materialMaterial.hasColor() ? evaluateDartColorType(tree.materialMaterial.color) : null),
          shadowColor: (tree.materialMaterial.hasShadowColor() ? evaluateDartColorType(tree.materialMaterial.shadowColor) : null),
          surfaceTintColor: (tree.materialMaterial.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterial.surfaceTintColor) : null),
          textStyle: (tree.materialMaterial.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterial.textStyle) : null),
          borderRadius: (tree.materialMaterial.hasBorderRadius() ? evaluateFlutterBorderRadiusGeometryType(tree.materialMaterial.borderRadius) : null),
          shape: (tree.materialMaterial.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterial.shape) : null),
          borderOnForeground: (tree.materialMaterial.hasBorderOnForeground() ? tree.materialMaterial.borderOnForeground : true),
          clipBehavior: (tree.materialMaterial.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterial.clipBehavior) : $dartUi.Clip.none),
          animationDuration: (tree.materialMaterial.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterial.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          child: (tree.materialMaterial.hasChild() ? evaluateWidgetType(tree.materialMaterial.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterialApp:
      return $flutterSrcMaterialApp.MaterialApp(
          key: (tree.materialMaterialApp.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialApp.key) : null),
          navigatorKey: null,
          scaffoldMessengerKey: null,
          home: (tree.materialMaterialApp.hasHome() ? evaluateWidgetType(tree.materialMaterialApp.home) : null),
          initialRoute: (tree.materialMaterialApp.hasInitialRoute() ? tree.materialMaterialApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.materialMaterialApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.materialMaterialApp.hasTitle() ? tree.materialMaterialApp.title : ''),
          onGenerateTitle: null,
          color: (tree.materialMaterialApp.hasColor() ? evaluateDartColorType(tree.materialMaterialApp.color) : null),
          theme: (tree.materialMaterialApp.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.theme) : null),
          darkTheme: (tree.materialMaterialApp.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialApp.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialApp.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialApp.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialApp.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialApp.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialApp.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialApp.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialApp.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialApp.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialApp.hasDebugShowMaterialGrid() ? tree.materialMaterialApp.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialApp.hasShowPerformanceOverlay() ? tree.materialMaterialApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialApp.hasCheckerboardRasterCacheImages() ? tree.materialMaterialApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialApp.hasCheckerboardOffscreenLayers() ? tree.materialMaterialApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialApp.hasShowSemanticsDebugger() ? tree.materialMaterialApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialApp.hasDebugShowCheckedModeBanner() ? tree.materialMaterialApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialApp.hasRestorationScopeId() ? tree.materialMaterialApp.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialApp.scrollBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterialAppNamedRouter:
      return $flutterSrcMaterialApp.MaterialApp.router(
          key: (tree.materialMaterialAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialAppNamedRouter.key) : null),
          scaffoldMessengerKey: null,
          routeInformationProvider: (tree.materialMaterialAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.materialMaterialAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.materialMaterialAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.materialMaterialAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.materialMaterialAppNamedRouter.hasTitle() ? tree.materialMaterialAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.materialMaterialAppNamedRouter.hasColor() ? evaluateDartColorType(tree.materialMaterialAppNamedRouter.color) : null),
          theme: (tree.materialMaterialAppNamedRouter.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.theme) : null),
          darkTheme: (tree.materialMaterialAppNamedRouter.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialAppNamedRouter.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialAppNamedRouter.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialAppNamedRouter.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialAppNamedRouter.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialAppNamedRouter.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialAppNamedRouter.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialAppNamedRouter.hasDebugShowMaterialGrid() ? tree.materialMaterialAppNamedRouter.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialAppNamedRouter.hasShowPerformanceOverlay() ? tree.materialMaterialAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.materialMaterialAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.materialMaterialAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialAppNamedRouter.hasShowSemanticsDebugger() ? tree.materialMaterialAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.materialMaterialAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialAppNamedRouter.hasRestorationScopeId() ? tree.materialMaterialAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialAppNamedRouter.scrollBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterialBanner:
      return $flutterSrcMaterialBanner.MaterialBanner(
          key: (tree.materialMaterialBanner.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBanner.key) : null),
          content: (tree.materialMaterialBanner.hasContent() ? evaluateRequiredWidgetType(tree.materialMaterialBanner.content) : missing('content')),
          contentTextStyle: (tree.materialMaterialBanner.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterialBanner.contentTextStyle) : null),
          actions: tree.materialMaterialBanner.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          elevation: (tree.materialMaterialBanner.hasElevation() ? tree.materialMaterialBanner.elevation : null),
          leading: (tree.materialMaterialBanner.hasLeading() ? evaluateWidgetType(tree.materialMaterialBanner.leading) : null),
          backgroundColor: (tree.materialMaterialBanner.hasBackgroundColor() ? evaluateDartColorType(tree.materialMaterialBanner.backgroundColor) : null),
          surfaceTintColor: (tree.materialMaterialBanner.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterialBanner.surfaceTintColor) : null),
          shadowColor: (tree.materialMaterialBanner.hasShadowColor() ? evaluateDartColorType(tree.materialMaterialBanner.shadowColor) : null),
          dividerColor: (tree.materialMaterialBanner.hasDividerColor() ? evaluateDartColorType(tree.materialMaterialBanner.dividerColor) : null),
          padding: (tree.materialMaterialBanner.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.padding) : null),
          margin: (tree.materialMaterialBanner.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.margin) : null),
          leadingPadding: (tree.materialMaterialBanner.hasLeadingPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.leadingPadding) : null),
          forceActionsBelow: (tree.materialMaterialBanner.hasForceActionsBelow() ? tree.materialMaterialBanner.forceActionsBelow : false),
          overflowAlignment: (tree.materialMaterialBanner.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.materialMaterialBanner.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.end),
          animation: null,
          onVisible: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterialBannerTheme:
      return $flutterSrcMaterialBannerTheme.MaterialBannerTheme(
          key: (tree.materialMaterialBannerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBannerTheme.key) : null),
          data: (tree.materialMaterialBannerTheme.hasData() ? evaluateMaterialMaterialBannerThemeDataType(tree.materialMaterialBannerTheme.data) : null),
          child: (tree.materialMaterialBannerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMaterialBannerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMaterialButton:
      return $flutterSrcMaterialMaterialButton.MaterialButton(
          key: (tree.materialMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textTheme: (tree.materialMaterialButton.hasTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialMaterialButton.textTheme) : null),
          textColor: (tree.materialMaterialButton.hasTextColor() ? evaluateDartColorType(tree.materialMaterialButton.textColor) : null),
          disabledTextColor: (tree.materialMaterialButton.hasDisabledTextColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledTextColor) : null),
          color: (tree.materialMaterialButton.hasColor() ? evaluateDartColorType(tree.materialMaterialButton.color) : null),
          disabledColor: (tree.materialMaterialButton.hasDisabledColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledColor) : null),
          focusColor: (tree.materialMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialMaterialButton.focusColor) : null),
          hoverColor: (tree.materialMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialMaterialButton.highlightColor) : null),
          splashColor: (tree.materialMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialMaterialButton.splashColor) : null),
          colorBrightness: (tree.materialMaterialButton.hasColorBrightness() ? enums.convertDartBrightnessType(tree.materialMaterialButton.colorBrightness) : null),
          elevation: (tree.materialMaterialButton.hasElevation() ? tree.materialMaterialButton.elevation : null),
          focusElevation: (tree.materialMaterialButton.hasFocusElevation() ? tree.materialMaterialButton.focusElevation : null),
          hoverElevation: (tree.materialMaterialButton.hasHoverElevation() ? tree.materialMaterialButton.hoverElevation : null),
          highlightElevation: (tree.materialMaterialButton.hasHighlightElevation() ? tree.materialMaterialButton.highlightElevation : null),
          disabledElevation: (tree.materialMaterialButton.hasDisabledElevation() ? tree.materialMaterialButton.disabledElevation : null),
          padding: (tree.materialMaterialButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialButton.padding) : null),
          visualDensity: (tree.materialMaterialButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialMaterialButton.visualDensity) : null),
          shape: (tree.materialMaterialButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterialButton.shape) : null),
          clipBehavior: (tree.materialMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMaterialButton.focusNode) : null),
          autofocus: (tree.materialMaterialButton.hasAutofocus() ? tree.materialMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialMaterialButton.materialTapTargetSize) : null),
          animationDuration: (tree.materialMaterialButton.hasAnimationDuration() ? evaluateDartDurationType(tree.materialMaterialButton.animationDuration) : null),
          minWidth: (tree.materialMaterialButton.hasMinWidth() ? tree.materialMaterialButton.minWidth : null),
          height: (tree.materialMaterialButton.hasHeight() ? tree.materialMaterialButton.height : null),
          enableFeedback: (tree.materialMaterialButton.hasEnableFeedback() ? tree.materialMaterialButton.enableFeedback : true),
          child: (tree.materialMaterialButton.hasChild() ? evaluateWidgetType(tree.materialMaterialButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuAcceleratorCallbackBinding:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorCallbackBinding(
          key: (tree.materialMenuAcceleratorCallbackBinding.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorCallbackBinding.key) : null),
          onInvoke: null,
          hasSubmenu: (tree.materialMenuAcceleratorCallbackBinding.hasHasSubmenu() ? tree.materialMenuAcceleratorCallbackBinding.hasSubmenu : false),
          child: (tree.materialMenuAcceleratorCallbackBinding.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuAcceleratorCallbackBinding.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuAcceleratorLabel:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorLabel(
          (tree.materialMenuAcceleratorLabel.hasLabel() ? tree.materialMenuAcceleratorLabel.label : missing('label')),
          key: (tree.materialMenuAcceleratorLabel.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorLabel.key) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuAnchor:
      return $flutterSrcMaterialMenuAnchor.MenuAnchor(
          key: (tree.materialMenuAnchor.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAnchor.key) : null),
          controller: (tree.materialMenuAnchor.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuAnchor.controller) : null),
          childFocusNode: (tree.materialMenuAnchor.hasChildFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuAnchor.childFocusNode) : null),
          style: (tree.materialMenuAnchor.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuAnchor.style) : null),
          alignmentOffset: (tree.materialMenuAnchor.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialMenuAnchor.alignmentOffset) : $dartUi.Offset.zero),
          clipBehavior: (tree.materialMenuAnchor.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuAnchor.clipBehavior) : $dartUi.Clip.hardEdge),
          anchorTapClosesMenu: (tree.materialMenuAnchor.hasAnchorTapClosesMenu() ? tree.materialMenuAnchor.anchorTapClosesMenu : false),
          onOpen: null,
          onClose: null,
          crossAxisUnconstrained: (tree.materialMenuAnchor.hasCrossAxisUnconstrained() ? tree.materialMenuAnchor.crossAxisUnconstrained : true),
          menuChildren: tree.materialMenuAnchor.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          builder: null,
          child: (tree.materialMenuAnchor.hasChild() ? evaluateWidgetType(tree.materialMenuAnchor.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuBar:
      return $flutterSrcMaterialMenuAnchor.MenuBar(
          key: (tree.materialMenuBar.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBar.key) : null),
          style: (tree.materialMenuBar.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuBar.style) : null),
          clipBehavior: (tree.materialMenuBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuBar.clipBehavior) : $dartUi.Clip.none),
          controller: (tree.materialMenuBar.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuBar.controller) : null),
          children: tree.materialMenuBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuBarTheme:
      return $flutterSrcMaterialMenuBarTheme.MenuBarTheme(
          key: (tree.materialMenuBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBarTheme.key) : null),
          data: (tree.materialMenuBarTheme.hasData() ? evaluateRequiredMaterialMenuBarThemeDataType(tree.materialMenuBarTheme.data) : missing('data')),
          child: (tree.materialMenuBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuBarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuButtonTheme:
      return $flutterSrcMaterialMenuButtonTheme.MenuButtonTheme(
          key: (tree.materialMenuButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuButtonTheme.key) : null),
          data: (tree.materialMenuButtonTheme.hasData() ? evaluateRequiredMaterialMenuButtonThemeDataType(tree.materialMenuButtonTheme.data) : missing('data')),
          child: (tree.materialMenuButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuItemButton:
      return $flutterSrcMaterialMenuAnchor.MenuItemButton(
          key: (tree.materialMenuItemButton.hasKey() ? evaluateFlutterKeyType(tree.materialMenuItemButton.key) : null),
          onPressed: null,
          onHover: null,
          requestFocusOnHover: (tree.materialMenuItemButton.hasRequestFocusOnHover() ? tree.materialMenuItemButton.requestFocusOnHover : true),
          onFocusChange: null,
          focusNode: (tree.materialMenuItemButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuItemButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialMenuItemButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialMenuItemButton.style) : null),
          statesController: (tree.materialMenuItemButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialMenuItemButton.statesController) : null),
          clipBehavior: (tree.materialMenuItemButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuItemButton.clipBehavior) : $dartUi.Clip.none),
          leadingIcon: (tree.materialMenuItemButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.leadingIcon) : null),
          trailingIcon: (tree.materialMenuItemButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.trailingIcon) : null),
          closeOnActivate: (tree.materialMenuItemButton.hasCloseOnActivate() ? tree.materialMenuItemButton.closeOnActivate : true),
          child: (tree.materialMenuItemButton.hasChild() ? evaluateWidgetType(tree.materialMenuItemButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMenuTheme:
      return $flutterSrcMaterialMenuTheme.MenuTheme(
          key: (tree.materialMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuTheme.key) : null),
          data: (tree.materialMenuTheme.hasData() ? evaluateRequiredMaterialMenuThemeDataType(tree.materialMenuTheme.data) : missing('data')),
          child: (tree.materialMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialMergeableMaterial:
      return $flutterSrcMaterialMergeableMaterial.MergeableMaterial(
          key: (tree.materialMergeableMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMergeableMaterial.key) : null),
          mainAxis: (tree.materialMergeableMaterial.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.materialMergeableMaterial.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          elevation: (tree.materialMergeableMaterial.hasElevation() ? tree.materialMergeableMaterial.elevation : 2),
          hasDividers: (tree.materialMergeableMaterial.hasHasDividers() ? tree.materialMergeableMaterial.hasDividers : false),
          children: tree.materialMergeableMaterial.children.map((e) => evaluateRequiredMaterialMergeableMaterialItemType(e)).toList(),
          dividerColor: (tree.materialMergeableMaterial.hasDividerColor() ? evaluateDartColorType(tree.materialMergeableMaterial.dividerColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationBar:
      return $flutterSrcMaterialNavigationBar.NavigationBar(
          key: (tree.materialNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBar.key) : null),
          animationDuration: (tree.materialNavigationBar.hasAnimationDuration() ? evaluateDartDurationType(tree.materialNavigationBar.animationDuration) : null),
          selectedIndex: (tree.materialNavigationBar.hasSelectedIndex() ? tree.materialNavigationBar.selectedIndex : 0),
          destinations: tree.materialNavigationBar.destinations.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onDestinationSelected: null,
          backgroundColor: (tree.materialNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationBar.backgroundColor) : null),
          elevation: (tree.materialNavigationBar.hasElevation() ? tree.materialNavigationBar.elevation : null),
          shadowColor: (tree.materialNavigationBar.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationBar.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationBar.surfaceTintColor) : null),
          indicatorColor: (tree.materialNavigationBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationBar.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationBar.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationBar.indicatorShape) : null),
          height: (tree.materialNavigationBar.hasHeight() ? tree.materialNavigationBar.height : null),
          labelBehavior: (tree.materialNavigationBar.hasLabelBehavior() ? enums.convertMaterialNavigationDestinationLabelBehaviorType(tree.materialNavigationBar.labelBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationBarTheme:
      return $flutterSrcMaterialNavigationBarTheme.NavigationBarTheme(
          key: (tree.materialNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBarTheme.key) : null),
          data: (tree.materialNavigationBarTheme.hasData() ? evaluateRequiredMaterialNavigationBarThemeDataType(tree.materialNavigationBarTheme.data) : missing('data')),
          child: (tree.materialNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationBarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationDestination:
      return $flutterSrcMaterialNavigationBar.NavigationDestination(
          key: (tree.materialNavigationDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDestination.key) : null),
          icon: (tree.materialNavigationDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDestination.selectedIcon) : null),
          label: (tree.materialNavigationDestination.hasLabel() ? tree.materialNavigationDestination.label : missing('label')),
          tooltip: (tree.materialNavigationDestination.hasTooltip() ? tree.materialNavigationDestination.tooltip : null),
          enabled: (tree.materialNavigationDestination.hasEnabled() ? tree.materialNavigationDestination.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationDrawer:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawer(
          key: (tree.materialNavigationDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawer.key) : null),
          children: tree.materialNavigationDrawer.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          backgroundColor: (tree.materialNavigationDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawer.backgroundColor) : null),
          shadowColor: (tree.materialNavigationDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationDrawer.surfaceTintColor) : null),
          elevation: (tree.materialNavigationDrawer.hasElevation() ? tree.materialNavigationDrawer.elevation : null),
          indicatorColor: (tree.materialNavigationDrawer.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationDrawer.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationDrawer.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationDrawer.indicatorShape) : null),
          onDestinationSelected: null,
          selectedIndex: (tree.materialNavigationDrawer.hasSelectedIndex() ? tree.materialNavigationDrawer.selectedIndex : 0),
          tilePadding: (tree.materialNavigationDrawer.hasTilePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialNavigationDrawer.tilePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 12.0)));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationDrawerDestination:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawerDestination(
          key: (tree.materialNavigationDrawerDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerDestination.key) : null),
          backgroundColor: (tree.materialNavigationDrawerDestination.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawerDestination.backgroundColor) : null),
          icon: (tree.materialNavigationDrawerDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDrawerDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDrawerDestination.selectedIcon) : null),
          label: (tree.materialNavigationDrawerDestination.hasLabel() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.label) : missing('label')),
          enabled: (tree.materialNavigationDrawerDestination.hasEnabled() ? tree.materialNavigationDrawerDestination.enabled : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationDrawerTheme:
      return $flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerTheme(
          key: (tree.materialNavigationDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerTheme.key) : null),
          data: (tree.materialNavigationDrawerTheme.hasData() ? evaluateRequiredMaterialNavigationDrawerThemeDataType(tree.materialNavigationDrawerTheme.data) : missing('data')),
          child: (tree.materialNavigationDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationRail:
      return $flutterSrcMaterialNavigationRail.NavigationRail(
          key: (tree.materialNavigationRail.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRail.key) : null),
          backgroundColor: (tree.materialNavigationRail.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationRail.backgroundColor) : null),
          extended: (tree.materialNavigationRail.hasExtended() ? tree.materialNavigationRail.extended : false),
          leading: (tree.materialNavigationRail.hasLeading() ? evaluateWidgetType(tree.materialNavigationRail.leading) : null),
          trailing: (tree.materialNavigationRail.hasTrailing() ? evaluateWidgetType(tree.materialNavigationRail.trailing) : null),
          destinations: tree.materialNavigationRail.destinations.map((e) => evaluateRequiredMaterialNavigationRailDestinationType(e)).toList(),
          selectedIndex: (tree.materialNavigationRail.hasSelectedIndex() ? tree.materialNavigationRail.selectedIndex : null),
          onDestinationSelected: null,
          elevation: (tree.materialNavigationRail.hasElevation() ? tree.materialNavigationRail.elevation : null),
          groupAlignment: (tree.materialNavigationRail.hasGroupAlignment() ? tree.materialNavigationRail.groupAlignment : null),
          labelType: (tree.materialNavigationRail.hasLabelType() ? enums.convertMaterialNavigationRailLabelTypeType(tree.materialNavigationRail.labelType) : null),
          unselectedLabelTextStyle: (tree.materialNavigationRail.hasUnselectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.unselectedLabelTextStyle) : null),
          selectedLabelTextStyle: (tree.materialNavigationRail.hasSelectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.selectedLabelTextStyle) : null),
          unselectedIconTheme: (tree.materialNavigationRail.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.unselectedIconTheme) : null),
          selectedIconTheme: (tree.materialNavigationRail.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.selectedIconTheme) : null),
          minWidth: (tree.materialNavigationRail.hasMinWidth() ? tree.materialNavigationRail.minWidth : null),
          minExtendedWidth: (tree.materialNavigationRail.hasMinExtendedWidth() ? tree.materialNavigationRail.minExtendedWidth : null),
          useIndicator: (tree.materialNavigationRail.hasUseIndicator() ? tree.materialNavigationRail.useIndicator : null),
          indicatorColor: (tree.materialNavigationRail.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationRail.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationRail.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationRail.indicatorShape) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialNavigationRailTheme:
      return $flutterSrcMaterialNavigationRailTheme.NavigationRailTheme(
          key: (tree.materialNavigationRailTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRailTheme.key) : null),
          data: (tree.materialNavigationRailTheme.hasData() ? evaluateRequiredMaterialNavigationRailThemeDataType(tree.materialNavigationRailTheme.data) : missing('data')),
          child: (tree.materialNavigationRailTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationRailTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialOutlinedButton:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton(
          key: (tree.materialOutlinedButton.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialOutlinedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButton.style) : null),
          focusNode: (tree.materialOutlinedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButton.focusNode) : null),
          autofocus: (tree.materialOutlinedButton.hasAutofocus() ? tree.materialOutlinedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialOutlinedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialOutlinedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialOutlinedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButton.statesController) : null),
          child: (tree.materialOutlinedButton.hasChild() ? evaluateWidgetType(tree.materialOutlinedButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialOutlinedButtonNamedIcon:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton.icon(
          key: (tree.materialOutlinedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          style: (tree.materialOutlinedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButtonNamedIcon.style) : null),
          focusNode: (tree.materialOutlinedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialOutlinedButtonNamedIcon.hasAutofocus() ? tree.materialOutlinedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialOutlinedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialOutlinedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialOutlinedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButtonNamedIcon.statesController) : null),
          icon: (tree.materialOutlinedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialOutlinedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.label) : missing('label')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialOutlinedButtonTheme:
      return $flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonTheme(
          key: (tree.materialOutlinedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonTheme.key) : null),
          data: (tree.materialOutlinedButtonTheme.hasData() ? evaluateRequiredMaterialOutlinedButtonThemeDataType(tree.materialOutlinedButtonTheme.data) : missing('data')),
          child: (tree.materialOutlinedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialPaginatedDataTable:
      return $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable(
          key: (tree.materialPaginatedDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialPaginatedDataTable.key) : null),
          header: (tree.materialPaginatedDataTable.hasHeader() ? evaluateWidgetType(tree.materialPaginatedDataTable.header) : null),
          actions: tree.materialPaginatedDataTable.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          columns: tree.materialPaginatedDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialPaginatedDataTable.hasSortColumnIndex() ? tree.materialPaginatedDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialPaginatedDataTable.hasSortAscending() ? tree.materialPaginatedDataTable.sortAscending : true),
          onSelectAll: null,
          dataRowMinHeight: (tree.materialPaginatedDataTable.hasDataRowMinHeight() ? tree.materialPaginatedDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialPaginatedDataTable.hasDataRowMaxHeight() ? tree.materialPaginatedDataTable.dataRowMaxHeight : null),
          headingRowHeight: (tree.materialPaginatedDataTable.hasHeadingRowHeight() ? tree.materialPaginatedDataTable.headingRowHeight : 56.0),
          horizontalMargin: (tree.materialPaginatedDataTable.hasHorizontalMargin() ? tree.materialPaginatedDataTable.horizontalMargin : 24.0),
          columnSpacing: (tree.materialPaginatedDataTable.hasColumnSpacing() ? tree.materialPaginatedDataTable.columnSpacing : 56.0),
          showCheckboxColumn: (tree.materialPaginatedDataTable.hasShowCheckboxColumn() ? tree.materialPaginatedDataTable.showCheckboxColumn : true),
          showFirstLastButtons: (tree.materialPaginatedDataTable.hasShowFirstLastButtons() ? tree.materialPaginatedDataTable.showFirstLastButtons : false),
          initialFirstRowIndex: (tree.materialPaginatedDataTable.hasInitialFirstRowIndex() ? tree.materialPaginatedDataTable.initialFirstRowIndex : 0),
          onPageChanged: null,
          rowsPerPage: (tree.materialPaginatedDataTable.hasRowsPerPage() ? tree.materialPaginatedDataTable.rowsPerPage : $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable.defaultRowsPerPage),
          availableRowsPerPage: tree.materialPaginatedDataTable.availableRowsPerPage,
          onRowsPerPageChanged: null,
          dragStartBehavior: (tree.materialPaginatedDataTable.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialPaginatedDataTable.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          arrowHeadColor: (tree.materialPaginatedDataTable.hasArrowHeadColor() ? evaluateDartColorType(tree.materialPaginatedDataTable.arrowHeadColor) : null),
          source: missing('source'),
          checkboxHorizontalMargin: (tree.materialPaginatedDataTable.hasCheckboxHorizontalMargin() ? tree.materialPaginatedDataTable.checkboxHorizontalMargin : null),
          controller: (tree.materialPaginatedDataTable.hasController() ? evaluateFlutterScrollControllerType(tree.materialPaginatedDataTable.controller) : null),
          primary: (tree.materialPaginatedDataTable.hasPrimary() ? tree.materialPaginatedDataTable.primary : null),
          headingRowColor: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialPopupMenuDivider:
      return $flutterSrcMaterialPopupMenu.PopupMenuDivider(
          key: (tree.materialPopupMenuDivider.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuDivider.key) : null),
          height: (tree.materialPopupMenuDivider.hasHeight() ? tree.materialPopupMenuDivider.height : 16.0));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.PopupMenuItem(
          key: (tree.materialPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialPopupMenuItem.hasEnabled() ? tree.materialPopupMenuItem.enabled : true),
          height: (tree.materialPopupMenuItem.hasHeight() ? tree.materialPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          padding: (tree.materialPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialPopupMenuItem.padding) : null),
          textStyle: (tree.materialPopupMenuItem.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialPopupMenuItem.textStyle) : null),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialPopupMenuItem.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialPopupMenuTheme:
      return $flutterSrcMaterialPopupMenuTheme.PopupMenuTheme(
          key: (tree.materialPopupMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuTheme.key) : null),
          data: (tree.materialPopupMenuTheme.hasData() ? evaluateRequiredMaterialPopupMenuThemeDataType(tree.materialPopupMenuTheme.data) : missing('data')),
          child: (tree.materialPopupMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialPopupMenuTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialProgressIndicatorTheme:
      return $flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorTheme(
          key: (tree.materialProgressIndicatorTheme.hasKey() ? evaluateFlutterKeyType(tree.materialProgressIndicatorTheme.key) : null),
          data: (tree.materialProgressIndicatorTheme.hasData() ? evaluateRequiredMaterialProgressIndicatorThemeDataType(tree.materialProgressIndicatorTheme.data) : missing('data')),
          child: (tree.materialProgressIndicatorTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialProgressIndicatorTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialRadioTheme:
      return $flutterSrcMaterialRadioTheme.RadioTheme(
          key: (tree.materialRadioTheme.hasKey() ? evaluateFlutterKeyType(tree.materialRadioTheme.key) : null),
          data: (tree.materialRadioTheme.hasData() ? evaluateRequiredMaterialRadioThemeDataType(tree.materialRadioTheme.data) : missing('data')),
          child: (tree.materialRadioTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialRadioTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialRangeSlider:
      return $flutterSrcMaterialRangeSlider.RangeSlider(
          key: (tree.materialRangeSlider.hasKey() ? evaluateFlutterKeyType(tree.materialRangeSlider.key) : null),
          values: (tree.materialRangeSlider.hasValues() ? evaluateRequiredMaterialRangeValuesType(tree.materialRangeSlider.values) : missing('values')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialRangeSlider.hasMin() ? tree.materialRangeSlider.min : 0.0),
          max: (tree.materialRangeSlider.hasMax() ? tree.materialRangeSlider.max : 1.0),
          divisions: (tree.materialRangeSlider.hasDivisions() ? tree.materialRangeSlider.divisions : null),
          labels: (tree.materialRangeSlider.hasLabels() ? evaluateMaterialRangeLabelsType(tree.materialRangeSlider.labels) : null),
          activeColor: (tree.materialRangeSlider.hasActiveColor() ? evaluateDartColorType(tree.materialRangeSlider.activeColor) : null),
          inactiveColor: (tree.materialRangeSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialRangeSlider.inactiveColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialRawChip:
      return $flutterSrcMaterialChip.RawChip(
          key: (tree.materialRawChip.hasKey() ? evaluateFlutterKeyType(tree.materialRawChip.key) : null),
          defaultProperties: (tree.materialRawChip.hasDefaultProperties() ? evaluateMaterialChipThemeDataType(tree.materialRawChip.defaultProperties) : null),
          avatar: (tree.materialRawChip.hasAvatar() ? evaluateWidgetType(tree.materialRawChip.avatar) : null),
          label: (tree.materialRawChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialRawChip.label) : missing('label')),
          labelStyle: (tree.materialRawChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialRawChip.labelStyle) : null),
          padding: (tree.materialRawChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.padding) : null),
          visualDensity: (tree.materialRawChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialRawChip.visualDensity) : null),
          labelPadding: (tree.materialRawChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.labelPadding) : null),
          deleteIcon: (tree.materialRawChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialRawChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialRawChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialRawChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialRawChip.hasDeleteButtonTooltipMessage() ? tree.materialRawChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          onSelected: null,
          pressElevation: (tree.materialRawChip.hasPressElevation() ? tree.materialRawChip.pressElevation : null),
          tapEnabled: (tree.materialRawChip.hasTapEnabled() ? tree.materialRawChip.tapEnabled : true),
          selected: (tree.materialRawChip.hasSelected() ? tree.materialRawChip.selected : false),
          isEnabled: (tree.materialRawChip.hasIsEnabled() ? tree.materialRawChip.isEnabled : true),
          disabledColor: (tree.materialRawChip.hasDisabledColor() ? evaluateDartColorType(tree.materialRawChip.disabledColor) : null),
          selectedColor: (tree.materialRawChip.hasSelectedColor() ? evaluateDartColorType(tree.materialRawChip.selectedColor) : null),
          tooltip: (tree.materialRawChip.hasTooltip() ? tree.materialRawChip.tooltip : null),
          side: (tree.materialRawChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialRawChip.side) : null),
          shape: (tree.materialRawChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialRawChip.shape) : null),
          clipBehavior: (tree.materialRawChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawChip.focusNode) : null),
          autofocus: (tree.materialRawChip.hasAutofocus() ? tree.materialRawChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialRawChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialRawChip.backgroundColor) : null),
          materialTapTargetSize: (tree.materialRawChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawChip.materialTapTargetSize) : null),
          elevation: (tree.materialRawChip.hasElevation() ? tree.materialRawChip.elevation : null),
          shadowColor: (tree.materialRawChip.hasShadowColor() ? evaluateDartColorType(tree.materialRawChip.shadowColor) : null),
          surfaceTintColor: (tree.materialRawChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialRawChip.surfaceTintColor) : null),
          iconTheme: (tree.materialRawChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialRawChip.iconTheme) : null),
          selectedShadowColor: (tree.materialRawChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialRawChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialRawChip.hasShowCheckmark() ? tree.materialRawChip.showCheckmark : null),
          checkmarkColor: (tree.materialRawChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialRawChip.checkmarkColor) : null),
          avatarBorder: (tree.materialRawChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialRawMaterialButton:
      return $flutterSrcMaterialButton.RawMaterialButton(
          key: (tree.materialRawMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialRawMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textStyle: (tree.materialRawMaterialButton.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialRawMaterialButton.textStyle) : null),
          fillColor: (tree.materialRawMaterialButton.hasFillColor() ? evaluateDartColorType(tree.materialRawMaterialButton.fillColor) : null),
          focusColor: (tree.materialRawMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialRawMaterialButton.focusColor) : null),
          hoverColor: (tree.materialRawMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialRawMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialRawMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialRawMaterialButton.highlightColor) : null),
          splashColor: (tree.materialRawMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialRawMaterialButton.splashColor) : null),
          elevation: (tree.materialRawMaterialButton.hasElevation() ? tree.materialRawMaterialButton.elevation : 2.0),
          focusElevation: (tree.materialRawMaterialButton.hasFocusElevation() ? tree.materialRawMaterialButton.focusElevation : 4.0),
          hoverElevation: (tree.materialRawMaterialButton.hasHoverElevation() ? tree.materialRawMaterialButton.hoverElevation : 4.0),
          highlightElevation: (tree.materialRawMaterialButton.hasHighlightElevation() ? tree.materialRawMaterialButton.highlightElevation : 8.0),
          disabledElevation: (tree.materialRawMaterialButton.hasDisabledElevation() ? tree.materialRawMaterialButton.disabledElevation : 0.0),
          padding: (tree.materialRawMaterialButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRawMaterialButton.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          visualDensity: (tree.materialRawMaterialButton.hasVisualDensity() ? evaluateRequiredMaterialVisualDensityType(tree.materialRawMaterialButton.visualDensity) : $flutterSrcMaterialThemeData.VisualDensity.standard),
          constraints: (tree.materialRawMaterialButton.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.materialRawMaterialButton.constraints) : $flutterSrcRenderingBox.BoxConstraints(minWidth: 88.0, minHeight: 36.0)),
          shape: (tree.materialRawMaterialButton.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawMaterialButton.shape) : $flutterSrcPaintingRoundedRectangleBorder.RoundedRectangleBorder()),
          animationDuration: (tree.materialRawMaterialButton.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialRawMaterialButton.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          clipBehavior: (tree.materialRawMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawMaterialButton.focusNode) : null),
          autofocus: (tree.materialRawMaterialButton.hasAutofocus() ? tree.materialRawMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialRawMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawMaterialButton.materialTapTargetSize) : null),
          child: (tree.materialRawMaterialButton.hasChild() ? evaluateWidgetType(tree.materialRawMaterialButton.child) : null),
          enableFeedback: (tree.materialRawMaterialButton.hasEnableFeedback() ? tree.materialRawMaterialButton.enableFeedback : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialRefreshProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.RefreshProgressIndicator(
          key: (tree.materialRefreshProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialRefreshProgressIndicator.key) : null),
          value: (tree.materialRefreshProgressIndicator.hasValue() ? tree.materialRefreshProgressIndicator.value : null),
          backgroundColor: (tree.materialRefreshProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.backgroundColor) : null),
          color: (tree.materialRefreshProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialRefreshProgressIndicator.hasStrokeWidth() ? tree.materialRefreshProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialRefreshProgressIndicator.hasStrokeAlign() ? tree.materialRefreshProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialRefreshProgressIndicator.hasSemanticsLabel() ? tree.materialRefreshProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialRefreshProgressIndicator.hasSemanticsValue() ? tree.materialRefreshProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialRefreshProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialRefreshProgressIndicator.strokeCap) : null),
          elevation: (tree.materialRefreshProgressIndicator.hasElevation() ? tree.materialRefreshProgressIndicator.elevation : 2.0),
          indicatorMargin: (tree.materialRefreshProgressIndicator.hasIndicatorMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(4.0)),
          indicatorPadding: (tree.materialRefreshProgressIndicator.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(12.0)));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialScaffold:
      return $flutterSrcMaterialScaffold.Scaffold(
          key: (tree.materialScaffold.hasKey() ? evaluateFlutterKeyType(tree.materialScaffold.key) : null),
          appBar: (tree.materialScaffold.hasAppBar() ? evaluateFlutterPreferredSizeWidgetType(tree.materialScaffold.appBar) : null),
          body: (tree.materialScaffold.hasBody() ? evaluateWidgetType(tree.materialScaffold.body) : null),
          floatingActionButton: (tree.materialScaffold.hasFloatingActionButton() ? evaluateWidgetType(tree.materialScaffold.floatingActionButton) : null),
          floatingActionButtonLocation: null,
          floatingActionButtonAnimator: null,
          persistentFooterButtons: tree.materialScaffold.persistentFooterButtons.map((e) => evaluateRequiredWidgetType(e)).toList(),
          persistentFooterAlignment: (tree.materialScaffold.hasPersistentFooterAlignment() ? evaluateRequiredFlutterAlignmentDirectionalType(tree.materialScaffold.persistentFooterAlignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerEnd),
          drawer: (tree.materialScaffold.hasDrawer() ? evaluateWidgetType(tree.materialScaffold.drawer) : null),
          onDrawerChanged: null,
          endDrawer: (tree.materialScaffold.hasEndDrawer() ? evaluateWidgetType(tree.materialScaffold.endDrawer) : null),
          onEndDrawerChanged: null,
          bottomNavigationBar: (tree.materialScaffold.hasBottomNavigationBar() ? evaluateWidgetType(tree.materialScaffold.bottomNavigationBar) : null),
          bottomSheet: (tree.materialScaffold.hasBottomSheet() ? evaluateWidgetType(tree.materialScaffold.bottomSheet) : null),
          backgroundColor: (tree.materialScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.materialScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.materialScaffold.hasResizeToAvoidBottomInset() ? tree.materialScaffold.resizeToAvoidBottomInset : null),
          primary: (tree.materialScaffold.hasPrimary() ? tree.materialScaffold.primary : true),
          drawerDragStartBehavior: (tree.materialScaffold.hasDrawerDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialScaffold.drawerDragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          extendBody: (tree.materialScaffold.hasExtendBody() ? tree.materialScaffold.extendBody : false),
          extendBodyBehindAppBar: (tree.materialScaffold.hasExtendBodyBehindAppBar() ? tree.materialScaffold.extendBodyBehindAppBar : false),
          drawerScrimColor: (tree.materialScaffold.hasDrawerScrimColor() ? evaluateDartColorType(tree.materialScaffold.drawerScrimColor) : null),
          drawerEdgeDragWidth: (tree.materialScaffold.hasDrawerEdgeDragWidth() ? tree.materialScaffold.drawerEdgeDragWidth : null),
          drawerEnableOpenDragGesture: (tree.materialScaffold.hasDrawerEnableOpenDragGesture() ? tree.materialScaffold.drawerEnableOpenDragGesture : true),
          endDrawerEnableOpenDragGesture: (tree.materialScaffold.hasEndDrawerEnableOpenDragGesture() ? tree.materialScaffold.endDrawerEnableOpenDragGesture : true),
          restorationId: (tree.materialScaffold.hasRestorationId() ? tree.materialScaffold.restorationId : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialScaffoldMessenger:
      return $flutterSrcMaterialScaffold.ScaffoldMessenger(
          key: (tree.materialScaffoldMessenger.hasKey() ? evaluateFlutterKeyType(tree.materialScaffoldMessenger.key) : null),
          child: (tree.materialScaffoldMessenger.hasChild() ? evaluateRequiredWidgetType(tree.materialScaffoldMessenger.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialScrollbar:
      return $flutterSrcMaterialScrollbar.Scrollbar(
          key: (tree.materialScrollbar.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbar.key) : null),
          child: (tree.materialScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbar.child) : missing('child')),
          controller: (tree.materialScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.materialScrollbar.controller) : null),
          thumbVisibility: (tree.materialScrollbar.hasThumbVisibility() ? tree.materialScrollbar.thumbVisibility : null),
          trackVisibility: (tree.materialScrollbar.hasTrackVisibility() ? tree.materialScrollbar.trackVisibility : null),
          thickness: (tree.materialScrollbar.hasThickness() ? tree.materialScrollbar.thickness : null),
          radius: (tree.materialScrollbar.hasRadius() ? evaluateDartRadiusType(tree.materialScrollbar.radius) : null),
          notificationPredicate: null,
          interactive: (tree.materialScrollbar.hasInteractive() ? tree.materialScrollbar.interactive : null),
          scrollbarOrientation: (tree.materialScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.materialScrollbar.scrollbarOrientation) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialScrollbarTheme:
      return $flutterSrcMaterialScrollbarTheme.ScrollbarTheme(
          key: (tree.materialScrollbarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbarTheme.key) : null),
          data: (tree.materialScrollbarTheme.hasData() ? evaluateRequiredMaterialScrollbarThemeDataType(tree.materialScrollbarTheme.data) : missing('data')),
          child: (tree.materialScrollbarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSearchBar:
      return $flutterSrcMaterialSearchAnchor.SearchBar(
          key: (tree.materialSearchBar.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBar.key) : null),
          controller: (tree.materialSearchBar.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialSearchBar.controller) : null),
          focusNode: (tree.materialSearchBar.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSearchBar.focusNode) : null),
          hintText: (tree.materialSearchBar.hasHintText() ? tree.materialSearchBar.hintText : null),
          leading: (tree.materialSearchBar.hasLeading() ? evaluateWidgetType(tree.materialSearchBar.leading) : null),
          trailing: tree.materialSearchBar.trailing.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onTap: null,
          onChanged: null,
          onSubmitted: null,
          constraints: (tree.materialSearchBar.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialSearchBar.constraints) : null),
          elevation: null,
          backgroundColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          overlayColor: null,
          side: null,
          shape: null,
          padding: null,
          textStyle: null,
          hintStyle: null,
          textCapitalization: (tree.materialSearchBar.hasTextCapitalization() ? enums.convertFlutterTextCapitalizationType(tree.materialSearchBar.textCapitalization) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSearchBarTheme:
      return $flutterSrcMaterialSearchBarTheme.SearchBarTheme(
          key: (tree.materialSearchBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBarTheme.key) : null),
          data: (tree.materialSearchBarTheme.hasData() ? evaluateRequiredMaterialSearchBarThemeDataType(tree.materialSearchBarTheme.data) : missing('data')),
          child: (tree.materialSearchBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchBarTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSearchViewTheme:
      return $flutterSrcMaterialSearchViewTheme.SearchViewTheme(
          key: (tree.materialSearchViewTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchViewTheme.key) : null),
          data: (tree.materialSearchViewTheme.hasData() ? evaluateRequiredMaterialSearchViewThemeDataType(tree.materialSearchViewTheme.data) : missing('data')),
          child: (tree.materialSearchViewTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchViewTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSegmentedButtonTheme:
      return $flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonTheme(
          key: (tree.materialSegmentedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSegmentedButtonTheme.key) : null),
          data: (tree.materialSegmentedButtonTheme.hasData() ? evaluateRequiredMaterialSegmentedButtonThemeDataType(tree.materialSegmentedButtonTheme.data) : missing('data')),
          child: (tree.materialSegmentedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSegmentedButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSelectableText:
      return $flutterSrcMaterialSelectableText.SelectableText(
          (tree.materialSelectableText.hasData() ? tree.materialSelectableText.data : missing('data')),
          key: (tree.materialSelectableText.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableText.key) : null),
          focusNode: (tree.materialSelectableText.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableText.focusNode) : null),
          style: (tree.materialSelectableText.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableText.style) : null),
          strutStyle: (tree.materialSelectableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableText.strutStyle) : null),
          textAlign: (tree.materialSelectableText.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableText.textAlign) : null),
          textDirection: (tree.materialSelectableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableText.textDirection) : null),
          textScaler: (tree.materialSelectableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableText.textScaler) : null),
          showCursor: (tree.materialSelectableText.hasShowCursor() ? tree.materialSelectableText.showCursor : false),
          autofocus: (tree.materialSelectableText.hasAutofocus() ? tree.materialSelectableText.autofocus : false),
          minLines: (tree.materialSelectableText.hasMinLines() ? tree.materialSelectableText.minLines : null),
          maxLines: (tree.materialSelectableText.hasMaxLines() ? tree.materialSelectableText.maxLines : null),
          cursorWidth: (tree.materialSelectableText.hasCursorWidth() ? tree.materialSelectableText.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableText.hasCursorHeight() ? tree.materialSelectableText.cursorHeight : null),
          cursorRadius: (tree.materialSelectableText.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableText.cursorRadius) : null),
          cursorColor: (tree.materialSelectableText.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableText.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableText.hasEnableInteractiveSelection() ? tree.materialSelectableText.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableText.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableText.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableText.hasSemanticsLabel() ? tree.materialSelectableText.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableText.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableText.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableText.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableText.magnifierConfiguration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSelectableTextNamedRich:
      return $flutterSrcMaterialSelectableText.SelectableText.rich(
          (tree.materialSelectableTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterTextSpanType(tree.materialSelectableTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.materialSelectableTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableTextNamedRich.key) : null),
          focusNode: (tree.materialSelectableTextNamedRich.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableTextNamedRich.focusNode) : null),
          style: (tree.materialSelectableTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableTextNamedRich.style) : null),
          strutStyle: (tree.materialSelectableTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableTextNamedRich.strutStyle) : null),
          textAlign: (tree.materialSelectableTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableTextNamedRich.textAlign) : null),
          textDirection: (tree.materialSelectableTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableTextNamedRich.textDirection) : null),
          textScaler: (tree.materialSelectableTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableTextNamedRich.textScaler) : null),
          showCursor: (tree.materialSelectableTextNamedRich.hasShowCursor() ? tree.materialSelectableTextNamedRich.showCursor : false),
          autofocus: (tree.materialSelectableTextNamedRich.hasAutofocus() ? tree.materialSelectableTextNamedRich.autofocus : false),
          minLines: (tree.materialSelectableTextNamedRich.hasMinLines() ? tree.materialSelectableTextNamedRich.minLines : null),
          maxLines: (tree.materialSelectableTextNamedRich.hasMaxLines() ? tree.materialSelectableTextNamedRich.maxLines : null),
          cursorWidth: (tree.materialSelectableTextNamedRich.hasCursorWidth() ? tree.materialSelectableTextNamedRich.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableTextNamedRich.hasCursorHeight() ? tree.materialSelectableTextNamedRich.cursorHeight : null),
          cursorRadius: (tree.materialSelectableTextNamedRich.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableTextNamedRich.cursorRadius) : null),
          cursorColor: (tree.materialSelectableTextNamedRich.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableTextNamedRich.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableTextNamedRich.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableTextNamedRich.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableTextNamedRich.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableTextNamedRich.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableTextNamedRich.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableTextNamedRich.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableTextNamedRich.hasEnableInteractiveSelection() ? tree.materialSelectableTextNamedRich.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableTextNamedRich.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableTextNamedRich.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableTextNamedRich.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableTextNamedRich.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableTextNamedRich.hasSemanticsLabel() ? tree.materialSelectableTextNamedRich.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableTextNamedRich.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableTextNamedRich.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableTextNamedRich.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableTextNamedRich.magnifierConfiguration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSelectionArea:
      return $flutterSrcMaterialSelectionArea.SelectionArea(
          key: (tree.materialSelectionArea.hasKey() ? evaluateFlutterKeyType(tree.materialSelectionArea.key) : null),
          focusNode: (tree.materialSelectionArea.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectionArea.focusNode) : null),
          selectionControls: (tree.materialSelectionArea.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectionArea.selectionControls) : null),
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectionArea.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectionArea.magnifierConfiguration) : null),
          onSelectionChanged: null,
          child: (tree.materialSelectionArea.hasChild() ? evaluateRequiredWidgetType(tree.materialSelectionArea.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSimpleDialog:
      return $flutterSrcMaterialDialog.SimpleDialog(
          key: (tree.materialSimpleDialog.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialog.key) : null),
          title: (tree.materialSimpleDialog.hasTitle() ? evaluateWidgetType(tree.materialSimpleDialog.title) : null),
          titlePadding: (tree.materialSimpleDialog.hasTitlePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.titlePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0)),
          titleTextStyle: (tree.materialSimpleDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSimpleDialog.titleTextStyle) : null),
          children: tree.materialSimpleDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          contentPadding: (tree.materialSimpleDialog.hasContentPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.contentPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0)),
          backgroundColor: (tree.materialSimpleDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialSimpleDialog.backgroundColor) : null),
          elevation: (tree.materialSimpleDialog.hasElevation() ? tree.materialSimpleDialog.elevation : null),
          shadowColor: (tree.materialSimpleDialog.hasShadowColor() ? evaluateDartColorType(tree.materialSimpleDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialSimpleDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSimpleDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialSimpleDialog.hasSemanticLabel() ? tree.materialSimpleDialog.semanticLabel : null),
          insetPadding: (tree.materialSimpleDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialSimpleDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialSimpleDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSimpleDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialSimpleDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSimpleDialog.shape) : null),
          alignment: (tree.materialSimpleDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialSimpleDialog.alignment) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSimpleDialogOption:
      return $flutterSrcMaterialDialog.SimpleDialogOption(
          key: (tree.materialSimpleDialogOption.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialogOption.key) : null),
          onPressed: null,
          padding: (tree.materialSimpleDialogOption.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialSimpleDialogOption.padding) : null),
          child: (tree.materialSimpleDialogOption.hasChild() ? evaluateWidgetType(tree.materialSimpleDialogOption.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSlider:
      return $flutterSrcMaterialSlider.Slider(
          key: (tree.materialSlider.hasKey() ? evaluateFlutterKeyType(tree.materialSlider.key) : null),
          value: (tree.materialSlider.hasValue() ? tree.materialSlider.value : missing('value')),
          secondaryTrackValue: (tree.materialSlider.hasSecondaryTrackValue() ? tree.materialSlider.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSlider.hasMin() ? tree.materialSlider.min : 0.0),
          max: (tree.materialSlider.hasMax() ? tree.materialSlider.max : 1.0),
          divisions: (tree.materialSlider.hasDivisions() ? tree.materialSlider.divisions : null),
          label: (tree.materialSlider.hasLabel() ? tree.materialSlider.label : null),
          activeColor: (tree.materialSlider.hasActiveColor() ? evaluateDartColorType(tree.materialSlider.activeColor) : null),
          inactiveColor: (tree.materialSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialSlider.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSlider.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSlider.secondaryActiveColor) : null),
          thumbColor: (tree.materialSlider.hasThumbColor() ? evaluateDartColorType(tree.materialSlider.thumbColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSlider.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSlider.focusNode) : null),
          autofocus: (tree.materialSlider.hasAutofocus() ? tree.materialSlider.autofocus : false),
          allowedInteraction: (tree.materialSlider.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSlider.allowedInteraction) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSliderNamedAdaptive:
      return $flutterSrcMaterialSlider.Slider.adaptive(
          key: (tree.materialSliderNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSliderNamedAdaptive.key) : null),
          value: (tree.materialSliderNamedAdaptive.hasValue() ? tree.materialSliderNamedAdaptive.value : missing('value')),
          secondaryTrackValue: (tree.materialSliderNamedAdaptive.hasSecondaryTrackValue() ? tree.materialSliderNamedAdaptive.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSliderNamedAdaptive.hasMin() ? tree.materialSliderNamedAdaptive.min : 0.0),
          max: (tree.materialSliderNamedAdaptive.hasMax() ? tree.materialSliderNamedAdaptive.max : 1.0),
          divisions: (tree.materialSliderNamedAdaptive.hasDivisions() ? tree.materialSliderNamedAdaptive.divisions : null),
          label: (tree.materialSliderNamedAdaptive.hasLabel() ? tree.materialSliderNamedAdaptive.label : null),
          mouseCursor: null,
          activeColor: (tree.materialSliderNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.activeColor) : null),
          inactiveColor: (tree.materialSliderNamedAdaptive.hasInactiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSliderNamedAdaptive.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.secondaryActiveColor) : null),
          thumbColor: (tree.materialSliderNamedAdaptive.hasThumbColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.thumbColor) : null),
          overlayColor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSliderNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSliderNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialSliderNamedAdaptive.hasAutofocus() ? tree.materialSliderNamedAdaptive.autofocus : false),
          allowedInteraction: (tree.materialSliderNamedAdaptive.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSliderNamedAdaptive.allowedInteraction) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSliderTheme:
      return $flutterSrcMaterialSliderTheme.SliderTheme(
          key: (tree.materialSliderTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSliderTheme.key) : null),
          data: (tree.materialSliderTheme.hasData() ? evaluateRequiredMaterialSliderThemeDataType(tree.materialSliderTheme.data) : missing('data')),
          child: (tree.materialSliderTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSliderTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSliverAppBar:
      return $flutterSrcMaterialAppBar.SliverAppBar(
          key: (tree.materialSliverAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBar.key) : null),
          leading: (tree.materialSliverAppBar.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBar.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBar.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBar.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBar.title) : null),
          actions: tree.materialSliverAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBar.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBar.bottom) : null),
          elevation: (tree.materialSliverAppBar.hasElevation() ? tree.materialSliverAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBar.hasScrolledUnderElevation() ? tree.materialSliverAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBar.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBar.hasForceElevated() ? tree.materialSliverAppBar.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBar.hasPrimary() ? tree.materialSliverAppBar.primary : true),
          centerTitle: (tree.materialSliverAppBar.hasCenterTitle() ? tree.materialSliverAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBar.hasExcludeHeaderSemantics() ? tree.materialSliverAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBar.hasTitleSpacing() ? tree.materialSliverAppBar.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBar.hasCollapsedHeight() ? tree.materialSliverAppBar.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBar.hasExpandedHeight() ? tree.materialSliverAppBar.expandedHeight : null),
          floating: (tree.materialSliverAppBar.hasFloating() ? tree.materialSliverAppBar.floating : false),
          pinned: (tree.materialSliverAppBar.hasPinned() ? tree.materialSliverAppBar.pinned : false),
          snap: (tree.materialSliverAppBar.hasSnap() ? tree.materialSliverAppBar.snap : false),
          stretch: (tree.materialSliverAppBar.hasStretch() ? tree.materialSliverAppBar.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBar.hasStretchTriggerOffset() ? tree.materialSliverAppBar.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBar.shape) : null),
          toolbarHeight: (tree.materialSliverAppBar.hasToolbarHeight() ? tree.materialSliverAppBar.toolbarHeight : $flutterSrcMaterialConstants.kToolbarHeight),
          leadingWidth: (tree.materialSliverAppBar.hasLeadingWidth() ? tree.materialSliverAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBar.hasForceMaterialTransparency() ? tree.materialSliverAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBar.clipBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSliverAppBarNamedLarge:
      return $flutterSrcMaterialAppBar.SliverAppBar.large(
          key: (tree.materialSliverAppBarNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedLarge.key) : null),
          leading: (tree.materialSliverAppBarNamedLarge.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedLarge.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedLarge.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedLarge.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.title) : null),
          actions: tree.materialSliverAppBarNamedLarge.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedLarge.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedLarge.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedLarge.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedLarge.hasElevation() ? tree.materialSliverAppBarNamedLarge.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedLarge.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedLarge.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedLarge.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedLarge.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedLarge.hasForceElevated() ? tree.materialSliverAppBarNamedLarge.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedLarge.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedLarge.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedLarge.hasPrimary() ? tree.materialSliverAppBarNamedLarge.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedLarge.hasCenterTitle() ? tree.materialSliverAppBarNamedLarge.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedLarge.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedLarge.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedLarge.hasTitleSpacing() ? tree.materialSliverAppBarNamedLarge.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedLarge.hasCollapsedHeight() ? tree.materialSliverAppBarNamedLarge.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedLarge.hasExpandedHeight() ? tree.materialSliverAppBarNamedLarge.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedLarge.hasFloating() ? tree.materialSliverAppBarNamedLarge.floating : false),
          pinned: (tree.materialSliverAppBarNamedLarge.hasPinned() ? tree.materialSliverAppBarNamedLarge.pinned : true),
          snap: (tree.materialSliverAppBarNamedLarge.hasSnap() ? tree.materialSliverAppBarNamedLarge.snap : false),
          stretch: (tree.materialSliverAppBarNamedLarge.hasStretch() ? tree.materialSliverAppBarNamedLarge.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedLarge.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedLarge.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedLarge.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedLarge.hasToolbarHeight() ? tree.materialSliverAppBarNamedLarge.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedLarge.hasLeadingWidth() ? tree.materialSliverAppBarNamedLarge.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedLarge.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedLarge.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedLarge.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedLarge.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedLarge.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedLarge.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedLarge.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedLarge.clipBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSliverAppBarNamedMedium:
      return $flutterSrcMaterialAppBar.SliverAppBar.medium(
          key: (tree.materialSliverAppBarNamedMedium.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedMedium.key) : null),
          leading: (tree.materialSliverAppBarNamedMedium.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedMedium.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedMedium.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedMedium.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.title) : null),
          actions: tree.materialSliverAppBarNamedMedium.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedMedium.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedMedium.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedMedium.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedMedium.hasElevation() ? tree.materialSliverAppBarNamedMedium.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedMedium.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedMedium.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedMedium.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedMedium.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedMedium.hasForceElevated() ? tree.materialSliverAppBarNamedMedium.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedMedium.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedMedium.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedMedium.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedMedium.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedMedium.hasPrimary() ? tree.materialSliverAppBarNamedMedium.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedMedium.hasCenterTitle() ? tree.materialSliverAppBarNamedMedium.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedMedium.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedMedium.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedMedium.hasTitleSpacing() ? tree.materialSliverAppBarNamedMedium.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedMedium.hasCollapsedHeight() ? tree.materialSliverAppBarNamedMedium.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedMedium.hasExpandedHeight() ? tree.materialSliverAppBarNamedMedium.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedMedium.hasFloating() ? tree.materialSliverAppBarNamedMedium.floating : false),
          pinned: (tree.materialSliverAppBarNamedMedium.hasPinned() ? tree.materialSliverAppBarNamedMedium.pinned : true),
          snap: (tree.materialSliverAppBarNamedMedium.hasSnap() ? tree.materialSliverAppBarNamedMedium.snap : false),
          stretch: (tree.materialSliverAppBarNamedMedium.hasStretch() ? tree.materialSliverAppBarNamedMedium.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedMedium.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedMedium.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedMedium.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedMedium.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedMedium.hasToolbarHeight() ? tree.materialSliverAppBarNamedMedium.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedMedium.hasLeadingWidth() ? tree.materialSliverAppBarNamedMedium.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedMedium.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedMedium.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedMedium.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedMedium.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedMedium.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedMedium.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedMedium.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedMedium.clipBehavior) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSnackBar:
      return $flutterSrcMaterialSnackBar.SnackBar(
          key: (tree.materialSnackBar.hasKey() ? evaluateFlutterKeyType(tree.materialSnackBar.key) : null),
          content: (tree.materialSnackBar.hasContent() ? evaluateRequiredWidgetType(tree.materialSnackBar.content) : missing('content')),
          backgroundColor: (tree.materialSnackBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSnackBar.backgroundColor) : null),
          elevation: (tree.materialSnackBar.hasElevation() ? tree.materialSnackBar.elevation : null),
          margin: (tree.materialSnackBar.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.margin) : null),
          padding: (tree.materialSnackBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.padding) : null),
          width: (tree.materialSnackBar.hasWidth() ? tree.materialSnackBar.width : null),
          shape: (tree.materialSnackBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSnackBar.shape) : null),
          hitTestBehavior: (tree.materialSnackBar.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.materialSnackBar.hitTestBehavior) : null),
          behavior: (tree.materialSnackBar.hasBehavior() ? enums.convertMaterialSnackBarBehaviorType(tree.materialSnackBar.behavior) : null),
          action: null,
          actionOverflowThreshold: (tree.materialSnackBar.hasActionOverflowThreshold() ? tree.materialSnackBar.actionOverflowThreshold : null),
          showCloseIcon: (tree.materialSnackBar.hasShowCloseIcon() ? tree.materialSnackBar.showCloseIcon : null),
          closeIconColor: (tree.materialSnackBar.hasCloseIconColor() ? evaluateDartColorType(tree.materialSnackBar.closeIconColor) : null),
          duration: (tree.materialSnackBar.hasDuration() ? evaluateRequiredDartDurationType(tree.materialSnackBar.duration) : $dartCore.Duration(milliseconds: 4000)),
          animation: null,
          onVisible: null,
          dismissDirection: (tree.materialSnackBar.hasDismissDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.materialSnackBar.dismissDirection) : $flutterSrcWidgetsDismissible.DismissDirection.down),
          clipBehavior: (tree.materialSnackBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSnackBar.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSpellCheckSuggestionsToolbar:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar(
          key: (tree.materialSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbar.key) : null),
          anchor: (tree.materialSpellCheckSuggestionsToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialSpellCheckSuggestionsToolbar.anchor) : missing('anchor')),
          buttonItems: tree.materialSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar.editableText(
          key: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialStepper:
      return $flutterSrcMaterialStepper.Stepper(
          key: (tree.materialStepper.hasKey() ? evaluateFlutterKeyType(tree.materialStepper.key) : null),
          steps: tree.materialStepper.steps.map((e) => evaluateRequiredMaterialStepType(e)).toList(),
          controller: (tree.materialStepper.hasController() ? evaluateFlutterScrollControllerType(tree.materialStepper.controller) : null),
          physics: (tree.materialStepper.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialStepper.physics) : null),
          type: (tree.materialStepper.hasType() ? enums.convertRequiredMaterialStepperTypeType(tree.materialStepper.type) : $flutterSrcMaterialStepper.StepperType.vertical),
          currentStep: (tree.materialStepper.hasCurrentStep() ? tree.materialStepper.currentStep : 0),
          onStepTapped: null,
          onStepContinue: null,
          onStepCancel: null,
          controlsBuilder: null,
          elevation: (tree.materialStepper.hasElevation() ? tree.materialStepper.elevation : null),
          margin: (tree.materialStepper.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialStepper.margin) : null),
          connectorColor: null,
          connectorThickness: (tree.materialStepper.hasConnectorThickness() ? tree.materialStepper.connectorThickness : null),
          stepIconBuilder: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSubmenuButton:
      return $flutterSrcMaterialMenuAnchor.SubmenuButton(
          key: (tree.materialSubmenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialSubmenuButton.key) : null),
          onHover: null,
          onFocusChange: null,
          onOpen: null,
          onClose: null,
          controller: (tree.materialSubmenuButton.hasController() ? evaluateMaterialMenuControllerType(tree.materialSubmenuButton.controller) : null),
          style: (tree.materialSubmenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialSubmenuButton.style) : null),
          menuStyle: (tree.materialSubmenuButton.hasMenuStyle() ? evaluateMaterialMenuStyleType(tree.materialSubmenuButton.menuStyle) : null),
          alignmentOffset: (tree.materialSubmenuButton.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialSubmenuButton.alignmentOffset) : null),
          clipBehavior: (tree.materialSubmenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSubmenuButton.clipBehavior) : $dartUi.Clip.hardEdge),
          focusNode: (tree.materialSubmenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSubmenuButton.focusNode) : null),
          statesController: (tree.materialSubmenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialSubmenuButton.statesController) : null),
          leadingIcon: (tree.materialSubmenuButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.leadingIcon) : null),
          trailingIcon: (tree.materialSubmenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.trailingIcon) : null),
          menuChildren: tree.materialSubmenuButton.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.materialSubmenuButton.hasChild() ? evaluateWidgetType(tree.materialSubmenuButton.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSwitch:
      return $flutterSrcMaterialSwitch.Switch(
          key: (tree.materialSwitch.hasKey() ? evaluateFlutterKeyType(tree.materialSwitch.key) : null),
          value: (tree.materialSwitch.hasValue() ? tree.materialSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitch.hasActiveColor() ? evaluateDartColorType(tree.materialSwitch.activeColor) : null),
          activeTrackColor: (tree.materialSwitch.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitch.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitch.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitch.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitch.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitch.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitch.hasFocusColor() ? evaluateDartColorType(tree.materialSwitch.focusColor) : null),
          hoverColor: (tree.materialSwitch.hasHoverColor() ? evaluateDartColorType(tree.materialSwitch.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitch.hasSplashRadius() ? tree.materialSwitch.splashRadius : null),
          focusNode: (tree.materialSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitch.hasAutofocus() ? tree.materialSwitch.autofocus : false));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSwitchListTile:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile(
          key: (tree.materialSwitchListTile.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTile.key) : null),
          value: (tree.materialSwitchListTile.hasValue() ? tree.materialSwitchListTile.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTile.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTile.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTile.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTile.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTile.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTile.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTile.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTile.hasSplashRadius() ? tree.materialSwitchListTile.splashRadius : null),
          focusNode: (tree.materialSwitchListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTile.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTile.hasAutofocus() ? tree.materialSwitchListTile.autofocus : false),
          tileColor: (tree.materialSwitchListTile.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.tileColor) : null),
          title: (tree.materialSwitchListTile.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTile.title) : null),
          subtitle: (tree.materialSwitchListTile.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTile.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTile.hasIsThreeLine() ? tree.materialSwitchListTile.isThreeLine : false),
          dense: (tree.materialSwitchListTile.hasDense() ? tree.materialSwitchListTile.dense : null),
          contentPadding: (tree.materialSwitchListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTile.contentPadding) : null),
          secondary: (tree.materialSwitchListTile.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTile.secondary) : null),
          selected: (tree.materialSwitchListTile.hasSelected() ? tree.materialSwitchListTile.selected : false),
          controlAffinity: (tree.materialSwitchListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTile.shape) : null),
          selectedTileColor: (tree.materialSwitchListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTile.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTile.hasEnableFeedback() ? tree.materialSwitchListTile.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTile.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTile.hoverColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSwitchListTileNamedAdaptive:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile.adaptive(
          key: (tree.materialSwitchListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTileNamedAdaptive.key) : null),
          value: (tree.materialSwitchListTileNamedAdaptive.hasValue() ? tree.materialSwitchListTileNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTileNamedAdaptive.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTileNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTileNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTileNamedAdaptive.hasSplashRadius() ? tree.materialSwitchListTileNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTileNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTileNamedAdaptive.hasAutofocus() ? tree.materialSwitchListTileNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchListTileNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchListTileNamedAdaptive.applyCupertinoTheme : null),
          tileColor: (tree.materialSwitchListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialSwitchListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialSwitchListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTileNamedAdaptive.hasIsThreeLine() ? tree.materialSwitchListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialSwitchListTileNamedAdaptive.hasDense() ? tree.materialSwitchListTileNamedAdaptive.dense : null),
          contentPadding: (tree.materialSwitchListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTileNamedAdaptive.contentPadding) : null),
          secondary: (tree.materialSwitchListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialSwitchListTileNamedAdaptive.hasSelected() ? tree.materialSwitchListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialSwitchListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTileNamedAdaptive.shape) : null),
          selectedTileColor: (tree.materialSwitchListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTileNamedAdaptive.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTileNamedAdaptive.hasEnableFeedback() ? tree.materialSwitchListTileNamedAdaptive.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.hoverColor) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSwitchNamedAdaptive:
      return $flutterSrcMaterialSwitch.Switch.adaptive(
          key: (tree.materialSwitchNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchNamedAdaptive.key) : null),
          value: (tree.materialSwitchNamedAdaptive.hasValue() ? tree.materialSwitchNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          materialTapTargetSize: (tree.materialSwitchNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchNamedAdaptive.materialTapTargetSize) : null),
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          dragStartBehavior: (tree.materialSwitchNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitchNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialSwitchNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitchNamedAdaptive.hasSplashRadius() ? tree.materialSwitchNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchNamedAdaptive.hasAutofocus() ? tree.materialSwitchNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchNamedAdaptive.applyCupertinoTheme : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialSwitchTheme:
      return $flutterSrcMaterialSwitchTheme.SwitchTheme(
          key: (tree.materialSwitchTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchTheme.key) : null),
          data: (tree.materialSwitchTheme.hasData() ? evaluateRequiredMaterialSwitchThemeDataType(tree.materialSwitchTheme.data) : missing('data')),
          child: (tree.materialSwitchTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSwitchTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTab:
      return $flutterSrcMaterialTabs.Tab(
          key: (tree.materialTab.hasKey() ? evaluateFlutterKeyType(tree.materialTab.key) : null),
          text: (tree.materialTab.hasText() ? tree.materialTab.text : null),
          icon: (tree.materialTab.hasIcon() ? evaluateWidgetType(tree.materialTab.icon) : null),
          iconMargin: (tree.materialTab.hasIconMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTab.iconMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 10.0)),
          height: (tree.materialTab.hasHeight() ? tree.materialTab.height : null),
          child: (tree.materialTab.hasChild() ? evaluateWidgetType(tree.materialTab.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTabBar:
      return $flutterSrcMaterialTabs.TabBar(
          key: (tree.materialTabBar.hasKey() ? evaluateFlutterKeyType(tree.materialTabBar.key) : null),
          tabs: tree.materialTabBar.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBar.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBar.controller) : null),
          isScrollable: (tree.materialTabBar.hasIsScrollable() ? tree.materialTabBar.isScrollable : false),
          padding: (tree.materialTabBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.padding) : null),
          indicatorColor: (tree.materialTabBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBar.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBar.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBar.hasIndicatorWeight() ? tree.materialTabBar.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBar.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBar.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBar.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBar.indicator) : null),
          indicatorSize: (tree.materialTabBar.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBar.indicatorSize) : null),
          dividerColor: (tree.materialTabBar.hasDividerColor() ? evaluateDartColorType(tree.materialTabBar.dividerColor) : null),
          dividerHeight: (tree.materialTabBar.hasDividerHeight() ? tree.materialTabBar.dividerHeight : null),
          labelColor: (tree.materialTabBar.hasLabelColor() ? evaluateDartColorType(tree.materialTabBar.labelColor) : null),
          labelStyle: (tree.materialTabBar.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.labelStyle) : null),
          labelPadding: (tree.materialTabBar.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBar.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBar.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBar.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBar.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBar.hasEnableFeedback() ? tree.materialTabBar.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBar.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBar.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBar.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBar.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBar.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBar.tabAlignment) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTabBarNamedSecondary:
      return $flutterSrcMaterialTabs.TabBar.secondary(
          key: (tree.materialTabBarNamedSecondary.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarNamedSecondary.key) : null),
          tabs: tree.materialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarNamedSecondary.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarNamedSecondary.controller) : null),
          isScrollable: (tree.materialTabBarNamedSecondary.hasIsScrollable() ? tree.materialTabBarNamedSecondary.isScrollable : false),
          padding: (tree.materialTabBarNamedSecondary.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.padding) : null),
          indicatorColor: (tree.materialTabBarNamedSecondary.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBarNamedSecondary.hasIndicatorWeight() ? tree.materialTabBarNamedSecondary.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBarNamedSecondary.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBarNamedSecondary.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBarNamedSecondary.indicator) : null),
          indicatorSize: (tree.materialTabBarNamedSecondary.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBarNamedSecondary.indicatorSize) : null),
          dividerColor: (tree.materialTabBarNamedSecondary.hasDividerColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.dividerColor) : null),
          dividerHeight: (tree.materialTabBarNamedSecondary.hasDividerHeight() ? tree.materialTabBarNamedSecondary.dividerHeight : null),
          labelColor: (tree.materialTabBarNamedSecondary.hasLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.labelColor) : null),
          labelStyle: (tree.materialTabBarNamedSecondary.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.labelStyle) : null),
          labelPadding: (tree.materialTabBarNamedSecondary.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBarNamedSecondary.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBarNamedSecondary.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBarNamedSecondary.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarNamedSecondary.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBarNamedSecondary.hasEnableFeedback() ? tree.materialTabBarNamedSecondary.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBarNamedSecondary.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarNamedSecondary.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBarNamedSecondary.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBarNamedSecondary.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBarNamedSecondary.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBarNamedSecondary.tabAlignment) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTabBarView:
      return $flutterSrcMaterialTabs.TabBarView(
          key: (tree.materialTabBarView.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarView.key) : null),
          children: tree.materialTabBarView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarView.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarView.controller) : null),
          physics: (tree.materialTabBarView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarView.physics) : null),
          dragStartBehavior: (tree.materialTabBarView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          viewportFraction: (tree.materialTabBarView.hasViewportFraction() ? tree.materialTabBarView.viewportFraction : 1.0),
          clipBehavior: (tree.materialTabBarView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTabBarView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTabPageSelector:
      return $flutterSrcMaterialTabs.TabPageSelector(
          key: (tree.materialTabPageSelector.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelector.key) : null),
          controller: (tree.materialTabPageSelector.hasController() ? evaluateMaterialTabControllerType(tree.materialTabPageSelector.controller) : null),
          indicatorSize: (tree.materialTabPageSelector.hasIndicatorSize() ? tree.materialTabPageSelector.indicatorSize : 12.0),
          color: (tree.materialTabPageSelector.hasColor() ? evaluateDartColorType(tree.materialTabPageSelector.color) : null),
          selectedColor: (tree.materialTabPageSelector.hasSelectedColor() ? evaluateDartColorType(tree.materialTabPageSelector.selectedColor) : null),
          borderStyle: (tree.materialTabPageSelector.hasBorderStyle() ? enums.convertFlutterBorderStyleType(tree.materialTabPageSelector.borderStyle) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTabPageSelectorIndicator:
      return $flutterSrcMaterialTabs.TabPageSelectorIndicator(
          key: (tree.materialTabPageSelectorIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelectorIndicator.key) : null),
          backgroundColor: (tree.materialTabPageSelectorIndicator.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.backgroundColor) : missing('backgroundColor')),
          borderColor: (tree.materialTabPageSelectorIndicator.hasBorderColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.borderColor) : missing('borderColor')),
          size: (tree.materialTabPageSelectorIndicator.hasSize() ? tree.materialTabPageSelectorIndicator.size : missing('size')),
          borderStyle: (tree.materialTabPageSelectorIndicator.hasBorderStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.materialTabPageSelectorIndicator.borderStyle) : $flutterSrcPaintingBorders.BorderStyle.solid));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTableRowInkWell:
      return $flutterSrcMaterialDataTable.TableRowInkWell(
          key: (tree.materialTableRowInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialTableRowInkWell.key) : null),
          child: (tree.materialTableRowInkWell.hasChild() ? evaluateWidgetType(tree.materialTableRowInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onHighlightChanged: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          overlayColor: null,
          mouseCursor: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextButton:
      return $flutterSrcMaterialTextButton.TextButton(
          key: (tree.materialTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButton.style) : null),
          focusNode: (tree.materialTextButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButton.focusNode) : null),
          autofocus: (tree.materialTextButton.hasAutofocus() ? tree.materialTextButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialTextButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialTextButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButton.statesController) : null),
          isSemanticButton: (tree.materialTextButton.hasIsSemanticButton() ? tree.materialTextButton.isSemanticButton : true),
          child: (tree.materialTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButton.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextButtonNamedIcon:
      return $flutterSrcMaterialTextButton.TextButton.icon(
          key: (tree.materialTextButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButtonNamedIcon.style) : null),
          focusNode: (tree.materialTextButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialTextButtonNamedIcon.hasAutofocus() ? tree.materialTextButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialTextButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialTextButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialTextButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButtonNamedIcon.statesController) : null),
          icon: (tree.materialTextButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialTextButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.label) : missing('label')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextButtonTheme:
      return $flutterSrcMaterialTextButtonTheme.TextButtonTheme(
          key: (tree.materialTextButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonTheme.key) : null),
          data: (tree.materialTextButtonTheme.hasData() ? evaluateRequiredMaterialTextButtonThemeDataType(tree.materialTextButtonTheme.data) : missing('data')),
          child: (tree.materialTextButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButtonTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextField:
      return $flutterSrcMaterialTextField.TextField(
          key: (tree.materialTextField.hasKey() ? evaluateFlutterKeyType(tree.materialTextField.key) : null),
          controller: (tree.materialTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextField.controller) : null),
          focusNode: (tree.materialTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextField.focusNode) : null),
          undoController: (tree.materialTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextField.undoController) : null),
          decoration: (tree.materialTextField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextField.keyboardType) : null),
          textInputAction: (tree.materialTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextField.textInputAction) : null),
          textCapitalization: (tree.materialTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.materialTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextField.style) : null),
          strutStyle: (tree.materialTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextField.strutStyle) : null),
          textAlign: (tree.materialTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextField.textAlignVertical) : null),
          textDirection: (tree.materialTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextField.textDirection) : null),
          readOnly: (tree.materialTextField.hasReadOnly() ? tree.materialTextField.readOnly : false),
          showCursor: (tree.materialTextField.hasShowCursor() ? tree.materialTextField.showCursor : null),
          autofocus: (tree.materialTextField.hasAutofocus() ? tree.materialTextField.autofocus : false),
          obscuringCharacter: (tree.materialTextField.hasObscuringCharacter() ? tree.materialTextField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextField.hasObscureText() ? tree.materialTextField.obscureText : false),
          autocorrect: (tree.materialTextField.hasAutocorrect() ? tree.materialTextField.autocorrect : true),
          smartDashesType: (tree.materialTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextField.hasEnableSuggestions() ? tree.materialTextField.enableSuggestions : true),
          maxLines: (tree.materialTextField.hasMaxLines() ? tree.materialTextField.maxLines : 1),
          minLines: (tree.materialTextField.hasMinLines() ? tree.materialTextField.minLines : null),
          expands: (tree.materialTextField.hasExpands() ? tree.materialTextField.expands : false),
          maxLength: (tree.materialTextField.hasMaxLength() ? tree.materialTextField.maxLength : null),
          maxLengthEnforcement: (tree.materialTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          inputFormatters: tree.materialTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextField.hasEnabled() ? tree.materialTextField.enabled : null),
          cursorWidth: (tree.materialTextField.hasCursorWidth() ? tree.materialTextField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextField.hasCursorHeight() ? tree.materialTextField.cursorHeight : null),
          cursorRadius: (tree.materialTextField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextField.cursorRadius) : null),
          cursorOpacityAnimates: (tree.materialTextField.hasCursorOpacityAnimates() ? tree.materialTextField.cursorOpacityAnimates : null),
          cursorColor: (tree.materialTextField.hasCursorColor() ? evaluateDartColorType(tree.materialTextField.cursorColor) : null),
          selectionHeightStyle: (tree.materialTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.materialTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.materialTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialTextField.hasEnableInteractiveSelection() ? tree.materialTextField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextField.selectionControls) : null),
          onTap: null,
          onTapOutside: null,
          mouseCursor: null,
          buildCounter: null,
          scrollController: (tree.materialTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextField.scrollController) : null),
          scrollPhysics: (tree.materialTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextField.scrollPhysics) : null),
          autofillHints: tree.materialTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.materialTextField.hasRestorationId() ? tree.materialTextField.restorationId : null),
          scribbleEnabled: (tree.materialTextField.hasScribbleEnabled() ? tree.materialTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.materialTextField.hasEnableIMEPersonalizedLearning() ? tree.materialTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          canRequestFocus: (tree.materialTextField.hasCanRequestFocus() ? tree.materialTextField.canRequestFocus : true),
          spellCheckConfiguration: (tree.materialTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextField.magnifierConfiguration) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextFormField:
      return $flutterSrcMaterialTextFormField.TextFormField(
          key: (tree.materialTextFormField.hasKey() ? evaluateFlutterKeyType(tree.materialTextFormField.key) : null),
          controller: (tree.materialTextFormField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextFormField.controller) : null),
          initialValue: (tree.materialTextFormField.hasInitialValue() ? tree.materialTextFormField.initialValue : null),
          focusNode: (tree.materialTextFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextFormField.focusNode) : null),
          decoration: (tree.materialTextFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextFormField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextFormField.keyboardType) : null),
          textCapitalization: (tree.materialTextFormField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextFormField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.materialTextFormField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextFormField.textInputAction) : null),
          style: (tree.materialTextFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextFormField.style) : null),
          strutStyle: (tree.materialTextFormField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextFormField.strutStyle) : null),
          textDirection: (tree.materialTextFormField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextFormField.textDirection) : null),
          textAlign: (tree.materialTextFormField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextFormField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextFormField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextFormField.textAlignVertical) : null),
          autofocus: (tree.materialTextFormField.hasAutofocus() ? tree.materialTextFormField.autofocus : false),
          readOnly: (tree.materialTextFormField.hasReadOnly() ? tree.materialTextFormField.readOnly : false),
          showCursor: (tree.materialTextFormField.hasShowCursor() ? tree.materialTextFormField.showCursor : null),
          obscuringCharacter: (tree.materialTextFormField.hasObscuringCharacter() ? tree.materialTextFormField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextFormField.hasObscureText() ? tree.materialTextFormField.obscureText : false),
          autocorrect: (tree.materialTextFormField.hasAutocorrect() ? tree.materialTextFormField.autocorrect : true),
          smartDashesType: (tree.materialTextFormField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextFormField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextFormField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextFormField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextFormField.hasEnableSuggestions() ? tree.materialTextFormField.enableSuggestions : true),
          maxLengthEnforcement: (tree.materialTextFormField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextFormField.maxLengthEnforcement) : null),
          maxLines: (tree.materialTextFormField.hasMaxLines() ? tree.materialTextFormField.maxLines : 1),
          minLines: (tree.materialTextFormField.hasMinLines() ? tree.materialTextFormField.minLines : null),
          expands: (tree.materialTextFormField.hasExpands() ? tree.materialTextFormField.expands : false),
          maxLength: (tree.materialTextFormField.hasMaxLength() ? tree.materialTextFormField.maxLength : null),
          onChanged: null,
          onTap: null,
          onTapOutside: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.materialTextFormField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextFormField.hasEnabled() ? tree.materialTextFormField.enabled : null),
          cursorWidth: (tree.materialTextFormField.hasCursorWidth() ? tree.materialTextFormField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextFormField.hasCursorHeight() ? tree.materialTextFormField.cursorHeight : null),
          cursorRadius: (tree.materialTextFormField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextFormField.cursorRadius) : null),
          cursorColor: (tree.materialTextFormField.hasCursorColor() ? evaluateDartColorType(tree.materialTextFormField.cursorColor) : null),
          keyboardAppearance: (tree.materialTextFormField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextFormField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextFormField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextFormField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.materialTextFormField.hasEnableInteractiveSelection() ? tree.materialTextFormField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextFormField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextFormField.selectionControls) : null),
          buildCounter: null,
          scrollPhysics: (tree.materialTextFormField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextFormField.scrollPhysics) : null),
          autofillHints: tree.materialTextFormField.autofillHints,
          autovalidateMode: (tree.materialTextFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialTextFormField.autovalidateMode) : null),
          scrollController: (tree.materialTextFormField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextFormField.scrollController) : null),
          restorationId: (tree.materialTextFormField.hasRestorationId() ? tree.materialTextFormField.restorationId : null),
          enableIMEPersonalizedLearning: (tree.materialTextFormField.hasEnableIMEPersonalizedLearning() ? tree.materialTextFormField.enableIMEPersonalizedLearning : true),
          mouseCursor: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.materialTextFormField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextFormField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextFormField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextFormField.magnifierConfiguration) : null),
          undoController: (tree.materialTextFormField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextFormField.undoController) : null),
          onAppPrivateCommand: null,
          cursorOpacityAnimates: (tree.materialTextFormField.hasCursorOpacityAnimates() ? tree.materialTextFormField.cursorOpacityAnimates : null),
          selectionHeightStyle: (tree.materialTextFormField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextFormField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextFormField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextFormField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialTextFormField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextFormField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextFormField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextFormField.clipBehavior) : $dartUi.Clip.hardEdge),
          scribbleEnabled: (tree.materialTextFormField.hasScribbleEnabled() ? tree.materialTextFormField.scribbleEnabled : true),
          canRequestFocus: (tree.materialTextFormField.hasCanRequestFocus() ? tree.materialTextFormField.canRequestFocus : true));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextSelectionTheme:
      return $flutterSrcMaterialTextSelectionTheme.TextSelectionTheme(
          key: (tree.materialTextSelectionTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionTheme.key) : null),
          data: (tree.materialTextSelectionTheme.hasData() ? evaluateRequiredMaterialTextSelectionThemeDataType(tree.materialTextSelectionTheme.data) : missing('data')),
          child: (tree.materialTextSelectionTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextSelectionToolbar:
      return $flutterSrcMaterialTextSelectionToolbar.TextSelectionToolbar(
          key: (tree.materialTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbar.key) : null),
          anchorAbove: (tree.materialTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.materialTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.materialTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTextSelectionToolbarTextButton:
      return $flutterSrcMaterialTextSelectionToolbarTextButton.TextSelectionToolbarTextButton(
          key: (tree.materialTextSelectionToolbarTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbarTextButton.key) : null),
          child: (tree.materialTextSelectionToolbarTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionToolbarTextButton.child) : missing('child')),
          padding: (tree.materialTextSelectionToolbarTextButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextSelectionToolbarTextButton.padding) : missing('padding')),
          onPressed: null,
          alignment: (tree.materialTextSelectionToolbarTextButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialTextSelectionToolbarTextButton.alignment) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTheme:
      return $flutterSrcMaterialTheme.Theme(
          key: (tree.materialTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTheme.key) : null),
          data: (tree.materialTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialTheme.data) : missing('data')),
          child: (tree.materialTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTimePickerDialog:
      return $flutterSrcMaterialTimePicker.TimePickerDialog(
          key: (tree.materialTimePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerDialog.key) : null),
          initialTime: (tree.materialTimePickerDialog.hasInitialTime() ? evaluateRequiredMaterialTimeOfDayType(tree.materialTimePickerDialog.initialTime) : missing('initialTime')),
          cancelText: (tree.materialTimePickerDialog.hasCancelText() ? tree.materialTimePickerDialog.cancelText : null),
          confirmText: (tree.materialTimePickerDialog.hasConfirmText() ? tree.materialTimePickerDialog.confirmText : null),
          helpText: (tree.materialTimePickerDialog.hasHelpText() ? tree.materialTimePickerDialog.helpText : null),
          errorInvalidText: (tree.materialTimePickerDialog.hasErrorInvalidText() ? tree.materialTimePickerDialog.errorInvalidText : null),
          hourLabelText: (tree.materialTimePickerDialog.hasHourLabelText() ? tree.materialTimePickerDialog.hourLabelText : null),
          minuteLabelText: (tree.materialTimePickerDialog.hasMinuteLabelText() ? tree.materialTimePickerDialog.minuteLabelText : null),
          restorationId: (tree.materialTimePickerDialog.hasRestorationId() ? tree.materialTimePickerDialog.restorationId : null),
          initialEntryMode: (tree.materialTimePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialTimePickerEntryModeType(tree.materialTimePickerDialog.initialEntryMode) : $flutterSrcMaterialTimePicker.TimePickerEntryMode.dial),
          orientation: (tree.materialTimePickerDialog.hasOrientation() ? enums.convertFlutterOrientationType(tree.materialTimePickerDialog.orientation) : null),
          onEntryModeChanged: null);
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTimePickerTheme:
      return $flutterSrcMaterialTimePickerTheme.TimePickerTheme(
          key: (tree.materialTimePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerTheme.key) : null),
          data: (tree.materialTimePickerTheme.hasData() ? evaluateRequiredMaterialTimePickerThemeDataType(tree.materialTimePickerTheme.data) : missing('data')),
          child: (tree.materialTimePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTimePickerTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialToggleButtons:
      return $flutterSrcMaterialToggleButtons.ToggleButtons(
          key: (tree.materialToggleButtons.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtons.key) : null),
          children: tree.materialToggleButtons.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          isSelected: tree.materialToggleButtons.isSelected,
          onPressed: null,
          mouseCursor: null,
          tapTargetSize: (tree.materialToggleButtons.hasTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialToggleButtons.tapTargetSize) : null),
          textStyle: (tree.materialToggleButtons.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialToggleButtons.textStyle) : null),
          constraints: (tree.materialToggleButtons.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialToggleButtons.constraints) : null),
          color: (tree.materialToggleButtons.hasColor() ? evaluateDartColorType(tree.materialToggleButtons.color) : null),
          selectedColor: (tree.materialToggleButtons.hasSelectedColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedColor) : null),
          disabledColor: (tree.materialToggleButtons.hasDisabledColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledColor) : null),
          fillColor: (tree.materialToggleButtons.hasFillColor() ? evaluateDartColorType(tree.materialToggleButtons.fillColor) : null),
          focusColor: (tree.materialToggleButtons.hasFocusColor() ? evaluateDartColorType(tree.materialToggleButtons.focusColor) : null),
          highlightColor: (tree.materialToggleButtons.hasHighlightColor() ? evaluateDartColorType(tree.materialToggleButtons.highlightColor) : null),
          hoverColor: (tree.materialToggleButtons.hasHoverColor() ? evaluateDartColorType(tree.materialToggleButtons.hoverColor) : null),
          splashColor: (tree.materialToggleButtons.hasSplashColor() ? evaluateDartColorType(tree.materialToggleButtons.splashColor) : null),
          focusNodes: tree.materialToggleButtons.focusNodes.map((e) => evaluateRequiredFlutterFocusNodeType(e)).toList(),
          renderBorder: (tree.materialToggleButtons.hasRenderBorder() ? tree.materialToggleButtons.renderBorder : true),
          borderColor: (tree.materialToggleButtons.hasBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.borderColor) : null),
          selectedBorderColor: (tree.materialToggleButtons.hasSelectedBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedBorderColor) : null),
          disabledBorderColor: (tree.materialToggleButtons.hasDisabledBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledBorderColor) : null),
          borderRadius: (tree.materialToggleButtons.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialToggleButtons.borderRadius) : null),
          borderWidth: (tree.materialToggleButtons.hasBorderWidth() ? tree.materialToggleButtons.borderWidth : null),
          direction: (tree.materialToggleButtons.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.materialToggleButtons.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          verticalDirection: (tree.materialToggleButtons.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.materialToggleButtons.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialToggleButtonsTheme:
      return $flutterSrcMaterialToggleButtonsTheme.ToggleButtonsTheme(
          key: (tree.materialToggleButtonsTheme.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtonsTheme.key) : null),
          data: (tree.materialToggleButtonsTheme.hasData() ? evaluateRequiredMaterialToggleButtonsThemeDataType(tree.materialToggleButtonsTheme.data) : missing('data')),
          child: (tree.materialToggleButtonsTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialToggleButtonsTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTooltip:
      return $flutterSrcMaterialTooltip.Tooltip(
          key: (tree.materialTooltip.hasKey() ? evaluateFlutterKeyType(tree.materialTooltip.key) : null),
          message: (tree.materialTooltip.hasMessage() ? tree.materialTooltip.message : null),
          richMessage: (tree.materialTooltip.hasRichMessage() ? evaluateFlutterInlineSpanType(tree.materialTooltip.richMessage) : null),
          height: (tree.materialTooltip.hasHeight() ? tree.materialTooltip.height : null),
          padding: (tree.materialTooltip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.padding) : null),
          margin: (tree.materialTooltip.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.margin) : null),
          verticalOffset: (tree.materialTooltip.hasVerticalOffset() ? tree.materialTooltip.verticalOffset : null),
          preferBelow: (tree.materialTooltip.hasPreferBelow() ? tree.materialTooltip.preferBelow : null),
          excludeFromSemantics: (tree.materialTooltip.hasExcludeFromSemantics() ? tree.materialTooltip.excludeFromSemantics : null),
          decoration: (tree.materialTooltip.hasDecoration() ? evaluateFlutterDecorationType(tree.materialTooltip.decoration) : null),
          textStyle: (tree.materialTooltip.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialTooltip.textStyle) : null),
          textAlign: (tree.materialTooltip.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialTooltip.textAlign) : null),
          waitDuration: (tree.materialTooltip.hasWaitDuration() ? evaluateDartDurationType(tree.materialTooltip.waitDuration) : null),
          showDuration: (tree.materialTooltip.hasShowDuration() ? evaluateDartDurationType(tree.materialTooltip.showDuration) : null),
          triggerMode: (tree.materialTooltip.hasTriggerMode() ? enums.convertMaterialTooltipTriggerModeType(tree.materialTooltip.triggerMode) : null),
          enableFeedback: (tree.materialTooltip.hasEnableFeedback() ? tree.materialTooltip.enableFeedback : null),
          onTriggered: null,
          child: (tree.materialTooltip.hasChild() ? evaluateWidgetType(tree.materialTooltip.child) : null));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTooltipTheme:
      return $flutterSrcMaterialTooltipTheme.TooltipTheme(
          key: (tree.materialTooltipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipTheme.key) : null),
          data: (tree.materialTooltipTheme.hasData() ? evaluateRequiredMaterialTooltipThemeDataType(tree.materialTooltipTheme.data) : missing('data')),
          child: (tree.materialTooltipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipTheme.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialTooltipVisibility:
      return $flutterSrcMaterialTooltipVisibility.TooltipVisibility(
          key: (tree.materialTooltipVisibility.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipVisibility.key) : null),
          visible: (tree.materialTooltipVisibility.hasVisible() ? tree.materialTooltipVisibility.visible : missing('visible')),
          child: (tree.materialTooltipVisibility.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipVisibility.child) : missing('child')));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialUserAccountsDrawerHeader:
      return $flutterSrcMaterialUserAccountsDrawerHeader.UserAccountsDrawerHeader(
          key: (tree.materialUserAccountsDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialUserAccountsDrawerHeader.key) : null),
          decoration: (tree.materialUserAccountsDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialUserAccountsDrawerHeader.decoration) : null),
          margin: (tree.materialUserAccountsDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialUserAccountsDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          currentAccountPicture: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPicture() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.currentAccountPicture) : null),
          otherAccountsPictures: tree.materialUserAccountsDrawerHeader.otherAccountsPictures.map((e) => evaluateRequiredWidgetType(e)).toList(),
          currentAccountPictureSize: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPictureSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.currentAccountPictureSize) : $dartUi.Size.square(72.0)),
          otherAccountsPicturesSize: (tree.materialUserAccountsDrawerHeader.hasOtherAccountsPicturesSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.otherAccountsPicturesSize) : $dartUi.Size.square(40.0)),
          accountName: (tree.materialUserAccountsDrawerHeader.hasAccountName() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountName) : null),
          accountEmail: (tree.materialUserAccountsDrawerHeader.hasAccountEmail() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountEmail) : null),
          onDetailsPressed: null,
          arrowColor: (tree.materialUserAccountsDrawerHeader.hasArrowColor() ? evaluateRequiredDartColorType(tree.materialUserAccountsDrawerHeader.arrowColor) : $flutterSrcMaterialColors.Colors.white));
    case messages.FlutterDiagnosticableTreeType_Constructor.materialVerticalDivider:
      return $flutterSrcMaterialDivider.VerticalDivider(
          key: (tree.materialVerticalDivider.hasKey() ? evaluateFlutterKeyType(tree.materialVerticalDivider.key) : null),
          width: (tree.materialVerticalDivider.hasWidth() ? tree.materialVerticalDivider.width : null),
          thickness: (tree.materialVerticalDivider.hasThickness() ? tree.materialVerticalDivider.thickness : null),
          indent: (tree.materialVerticalDivider.hasIndent() ? tree.materialVerticalDivider.indent : null),
          endIndent: (tree.materialVerticalDivider.hasEndIndent() ? tree.materialVerticalDivider.endIndent : null),
          color: (tree.materialVerticalDivider.hasColor() ? evaluateDartColorType(tree.materialVerticalDivider.color) : null));
    default:
      return null;
  }
}

$flutterSrcFoundationDiagnostics.DiagnosticsNode evaluateRequiredFlutterDiagnosticsNodeType(messages.FlutterDiagnosticsNodeType tree) {
  final result = evaluateFlutterDiagnosticsNodeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcFoundationDiagnostics.DiagnosticsNode? evaluateFlutterDiagnosticsNodeType(messages.FlutterDiagnosticsNodeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterColorProperty:
      return $flutterSrcPaintingColors.ColorProperty(
          (tree.flutterColorProperty.hasName() ? tree.flutterColorProperty.name : missing('name')),
          (tree.flutterColorProperty.hasValue() ? evaluateDartColorType(tree.flutterColorProperty.value) : null),
          showName: (tree.flutterColorProperty.hasShowName() ? tree.flutterColorProperty.showName : true),
          defaultValue: null,
          style: (tree.flutterColorProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterColorProperty.style) : missing('style')),
          level: (tree.flutterColorProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterColorProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDevToolsDeepLinkProperty:
      return $flutterSrcWidgetsWidgetInspector.DevToolsDeepLinkProperty(
          (tree.flutterDevToolsDeepLinkProperty.hasDescription() ? tree.flutterDevToolsDeepLinkProperty.description : missing('description')),
          (tree.flutterDevToolsDeepLinkProperty.hasUrl() ? tree.flutterDevToolsDeepLinkProperty.url : missing('url')));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDiagnosticableTreeNode:
      return $flutterSrcFoundationDiagnostics.DiagnosticableTreeNode(
          name: (tree.flutterDiagnosticableTreeNode.hasName() ? tree.flutterDiagnosticableTreeNode.name : null),
          value: (tree.flutterDiagnosticableTreeNode.hasValue() ? evaluateRequiredFlutterDiagnosticableTreeType(tree.flutterDiagnosticableTreeNode.value) : missing('value')),
          style: (tree.flutterDiagnosticableTreeNode.hasStyle() ? enums.convertFlutterDiagnosticsTreeStyleType(tree.flutterDiagnosticableTreeNode.style) : null));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDiagnosticsBlock:
      return $flutterSrcFoundationDiagnostics.DiagnosticsBlock(
          name: (tree.flutterDiagnosticsBlock.hasName() ? tree.flutterDiagnosticsBlock.name : null),
          style: (tree.flutterDiagnosticsBlock.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterDiagnosticsBlock.style) : missing('style')),
          showName: (tree.flutterDiagnosticsBlock.hasShowName() ? tree.flutterDiagnosticsBlock.showName : true),
          showSeparator: (tree.flutterDiagnosticsBlock.hasShowSeparator() ? tree.flutterDiagnosticsBlock.showSeparator : true),
          linePrefix: (tree.flutterDiagnosticsBlock.hasLinePrefix() ? tree.flutterDiagnosticsBlock.linePrefix : null),
          value: null,
          description: (tree.flutterDiagnosticsBlock.hasDescription() ? tree.flutterDiagnosticsBlock.description : null),
          level: (tree.flutterDiagnosticsBlock.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterDiagnosticsBlock.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info),
          allowTruncate: (tree.flutterDiagnosticsBlock.hasAllowTruncate() ? tree.flutterDiagnosticsBlock.allowTruncate : false),
          children: tree.flutterDiagnosticsBlock.children.map((e) => evaluateRequiredFlutterDiagnosticsNodeType(e)).toList(),
          properties: tree.flutterDiagnosticsBlock.properties.map((e) => evaluateRequiredFlutterDiagnosticsNodeType(e)).toList());
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDiagnosticsNodeNamedMessage:
      return $flutterSrcFoundationDiagnostics.DiagnosticsNode.message(
          (tree.flutterDiagnosticsNodeNamedMessage.hasMessage() ? tree.flutterDiagnosticsNodeNamedMessage.message : missing('message')),
          style: (tree.flutterDiagnosticsNodeNamedMessage.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterDiagnosticsNodeNamedMessage.style) : $flutterSrcFoundationDiagnostics.DiagnosticsTreeStyle.singleLine),
          level: (tree.flutterDiagnosticsNodeNamedMessage.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterDiagnosticsNodeNamedMessage.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info),
          allowWrap: (tree.flutterDiagnosticsNodeNamedMessage.hasAllowWrap() ? tree.flutterDiagnosticsNodeNamedMessage.allowWrap : true));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDiagnosticsStackTrace:
      return $flutterSrcFoundationAssertions.DiagnosticsStackTrace(
          (tree.flutterDiagnosticsStackTrace.hasName() ? tree.flutterDiagnosticsStackTrace.name : missing('name')),
          (tree.flutterDiagnosticsStackTrace.hasStack() ? evaluateDartStackTraceType(tree.flutterDiagnosticsStackTrace.stack) : null),
          stackFilter: null,
          showSeparator: (tree.flutterDiagnosticsStackTrace.hasShowSeparator() ? tree.flutterDiagnosticsStackTrace.showSeparator : true));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDiagnosticsStackTraceNamedSingleFrame:
      return $flutterSrcFoundationAssertions.DiagnosticsStackTrace.singleFrame(
          (tree.flutterDiagnosticsStackTraceNamedSingleFrame.hasName() ? tree.flutterDiagnosticsStackTraceNamedSingleFrame.name : missing('name')),
          frame: (tree.flutterDiagnosticsStackTraceNamedSingleFrame.hasFrame() ? tree.flutterDiagnosticsStackTraceNamedSingleFrame.frame : missing('frame')),
          showSeparator: (tree.flutterDiagnosticsStackTraceNamedSingleFrame.hasShowSeparator() ? tree.flutterDiagnosticsStackTraceNamedSingleFrame.showSeparator : true));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterDoubleProperty:
      return $flutterSrcFoundationDiagnostics.DoubleProperty(
          (tree.flutterDoubleProperty.hasName() ? tree.flutterDoubleProperty.name : missing('name')),
          (tree.flutterDoubleProperty.hasValue() ? tree.flutterDoubleProperty.value : null),
          ifNull: (tree.flutterDoubleProperty.hasIfNull() ? tree.flutterDoubleProperty.ifNull : null),
          unit: (tree.flutterDoubleProperty.hasUnit() ? tree.flutterDoubleProperty.unit : null),
          tooltip: (tree.flutterDoubleProperty.hasTooltip() ? tree.flutterDoubleProperty.tooltip : null),
          defaultValue: null,
          showName: (tree.flutterDoubleProperty.hasShowName() ? tree.flutterDoubleProperty.showName : true),
          style: (tree.flutterDoubleProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterDoubleProperty.style) : missing('style')),
          level: (tree.flutterDoubleProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterDoubleProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterErrorDescription:
      return $flutterSrcFoundationAssertions.ErrorDescription(
          (tree.flutterErrorDescription.hasMessage() ? tree.flutterErrorDescription.message : missing('message')));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterErrorHint:
      return $flutterSrcFoundationAssertions.ErrorHint(
          (tree.flutterErrorHint.hasMessage() ? tree.flutterErrorHint.message : missing('message')));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterErrorSpacer:
      return $flutterSrcFoundationAssertions.ErrorSpacer(
          );
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterErrorSummary:
      return $flutterSrcFoundationAssertions.ErrorSummary(
          (tree.flutterErrorSummary.hasMessage() ? tree.flutterErrorSummary.message : missing('message')));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterFlagProperty:
      return $flutterSrcFoundationDiagnostics.FlagProperty(
          (tree.flutterFlagProperty.hasName() ? tree.flutterFlagProperty.name : missing('name')),
          value: (tree.flutterFlagProperty.hasValue() ? tree.flutterFlagProperty.value : null),
          ifTrue: (tree.flutterFlagProperty.hasIfTrue() ? tree.flutterFlagProperty.ifTrue : null),
          ifFalse: (tree.flutterFlagProperty.hasIfFalse() ? tree.flutterFlagProperty.ifFalse : null),
          showName: (tree.flutterFlagProperty.hasShowName() ? tree.flutterFlagProperty.showName : false),
          defaultValue: null,
          level: (tree.flutterFlagProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterFlagProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterIconDataProperty:
      return $flutterSrcWidgetsIconData.IconDataProperty(
          (tree.flutterIconDataProperty.hasName() ? tree.flutterIconDataProperty.name : missing('name')),
          (tree.flutterIconDataProperty.hasValue() ? evaluateFlutterIconDataType(tree.flutterIconDataProperty.value) : null),
          ifNull: (tree.flutterIconDataProperty.hasIfNull() ? tree.flutterIconDataProperty.ifNull : null),
          showName: (tree.flutterIconDataProperty.hasShowName() ? tree.flutterIconDataProperty.showName : true),
          style: (tree.flutterIconDataProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterIconDataProperty.style) : missing('style')),
          level: (tree.flutterIconDataProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterIconDataProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterIntProperty:
      return $flutterSrcFoundationDiagnostics.IntProperty(
          (tree.flutterIntProperty.hasName() ? tree.flutterIntProperty.name : missing('name')),
          (tree.flutterIntProperty.hasValue() ? tree.flutterIntProperty.value : null),
          ifNull: (tree.flutterIntProperty.hasIfNull() ? tree.flutterIntProperty.ifNull : null),
          showName: (tree.flutterIntProperty.hasShowName() ? tree.flutterIntProperty.showName : true),
          unit: (tree.flutterIntProperty.hasUnit() ? tree.flutterIntProperty.unit : null),
          defaultValue: null,
          style: (tree.flutterIntProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterIntProperty.style) : missing('style')),
          level: (tree.flutterIntProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterIntProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterIterableProperty:
      return $flutterSrcFoundationDiagnostics.IterableProperty(
          (tree.flutterIterableProperty.hasName() ? tree.flutterIterableProperty.name : missing('name')),
          null,
          defaultValue: null,
          ifNull: (tree.flutterIterableProperty.hasIfNull() ? tree.flutterIterableProperty.ifNull : null),
          ifEmpty: (tree.flutterIterableProperty.hasIfEmpty() ? tree.flutterIterableProperty.ifEmpty : null),
          style: (tree.flutterIterableProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterIterableProperty.style) : missing('style')),
          showName: (tree.flutterIterableProperty.hasShowName() ? tree.flutterIterableProperty.showName : true),
          showSeparator: (tree.flutterIterableProperty.hasShowSeparator() ? tree.flutterIterableProperty.showSeparator : true),
          level: (tree.flutterIterableProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterIterableProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterMessageProperty:
      return $flutterSrcFoundationDiagnostics.MessageProperty(
          (tree.flutterMessageProperty.hasName() ? tree.flutterMessageProperty.name : missing('name')),
          (tree.flutterMessageProperty.hasMessage() ? tree.flutterMessageProperty.message : missing('message')),
          style: (tree.flutterMessageProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterMessageProperty.style) : $flutterSrcFoundationDiagnostics.DiagnosticsTreeStyle.singleLine),
          level: (tree.flutterMessageProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterMessageProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterPercentProperty:
      return $flutterSrcFoundationDiagnostics.PercentProperty(
          (tree.flutterPercentProperty.hasName() ? tree.flutterPercentProperty.name : missing('name')),
          (tree.flutterPercentProperty.hasFraction() ? tree.flutterPercentProperty.fraction : null),
          ifNull: (tree.flutterPercentProperty.hasIfNull() ? tree.flutterPercentProperty.ifNull : null),
          showName: (tree.flutterPercentProperty.hasShowName() ? tree.flutterPercentProperty.showName : true),
          tooltip: (tree.flutterPercentProperty.hasTooltip() ? tree.flutterPercentProperty.tooltip : null),
          unit: (tree.flutterPercentProperty.hasUnit() ? tree.flutterPercentProperty.unit : null),
          level: (tree.flutterPercentProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterPercentProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterSrcSemanticsAttributedStringProperty:
      return $flutterSrcSemanticsSemantics.AttributedStringProperty(
          (tree.flutterSrcSemanticsAttributedStringProperty.hasName() ? tree.flutterSrcSemanticsAttributedStringProperty.name : missing('name')),
          (tree.flutterSrcSemanticsAttributedStringProperty.hasValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsAttributedStringProperty.value) : null),
          showName: (tree.flutterSrcSemanticsAttributedStringProperty.hasShowName() ? tree.flutterSrcSemanticsAttributedStringProperty.showName : true),
          showWhenEmpty: (tree.flutterSrcSemanticsAttributedStringProperty.hasShowWhenEmpty() ? tree.flutterSrcSemanticsAttributedStringProperty.showWhenEmpty : false),
          defaultValue: null,
          level: (tree.flutterSrcSemanticsAttributedStringProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterSrcSemanticsAttributedStringProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info),
          description: (tree.flutterSrcSemanticsAttributedStringProperty.hasDescription() ? tree.flutterSrcSemanticsAttributedStringProperty.description : null));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterStringProperty:
      return $flutterSrcFoundationDiagnostics.StringProperty(
          (tree.flutterStringProperty.hasName() ? tree.flutterStringProperty.name : missing('name')),
          (tree.flutterStringProperty.hasValue() ? tree.flutterStringProperty.value : null),
          description: (tree.flutterStringProperty.hasDescription() ? tree.flutterStringProperty.description : null),
          tooltip: (tree.flutterStringProperty.hasTooltip() ? tree.flutterStringProperty.tooltip : null),
          showName: (tree.flutterStringProperty.hasShowName() ? tree.flutterStringProperty.showName : true),
          defaultValue: null,
          quoted: (tree.flutterStringProperty.hasQuoted() ? tree.flutterStringProperty.quoted : true),
          ifEmpty: (tree.flutterStringProperty.hasIfEmpty() ? tree.flutterStringProperty.ifEmpty : null),
          style: (tree.flutterStringProperty.hasStyle() ? enums.convertRequiredFlutterDiagnosticsTreeStyleType(tree.flutterStringProperty.style) : missing('style')),
          level: (tree.flutterStringProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterStringProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    case messages.FlutterDiagnosticsNodeType_Constructor.flutterTransformProperty:
      return $flutterSrcPaintingMatrixUtils.TransformProperty(
          (tree.flutterTransformProperty.hasName() ? tree.flutterTransformProperty.name : missing('name')),
          (tree.flutterTransformProperty.hasValue() ? evaluateVectorMathMatrix4Type(tree.flutterTransformProperty.value) : null),
          showName: (tree.flutterTransformProperty.hasShowName() ? tree.flutterTransformProperty.showName : true),
          defaultValue: null,
          level: (tree.flutterTransformProperty.hasLevel() ? enums.convertRequiredFlutterDiagnosticLevelType(tree.flutterTransformProperty.level) : $flutterSrcFoundationDiagnostics.DiagnosticLevel.info));
    default:
      return null;
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional evaluateRequiredFlutterEdgeInsetsDirectionalType(messages.FlutterEdgeInsetsDirectionalType tree) {
  final result = evaluateFlutterEdgeInsetsDirectionalType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional? evaluateFlutterEdgeInsetsDirectionalType(messages.FlutterEdgeInsetsDirectionalType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterEdgeInsetsDirectionalType_Constructor.flutterEdgeInsetsDirectionalNamedAll:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.all(
          (tree.flutterEdgeInsetsDirectionalNamedAll.hasValue() ? tree.flutterEdgeInsetsDirectionalNamedAll.value : missing('value')));
    case messages.FlutterEdgeInsetsDirectionalType_Constructor.flutterEdgeInsetsDirectionalNamedFromSTEB:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasStart() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.start : missing('start')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasTop() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.top : missing('top')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasEnd() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.end : missing('end')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasBottom() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.bottom : missing('bottom')));
    case messages.FlutterEdgeInsetsDirectionalType_Constructor.flutterEdgeInsetsDirectionalNamedOnly:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.only(
          start: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasStart() ? tree.flutterEdgeInsetsDirectionalNamedOnly.start : 0.0),
          top: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasTop() ? tree.flutterEdgeInsetsDirectionalNamedOnly.top : 0.0),
          end: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasEnd() ? tree.flutterEdgeInsetsDirectionalNamedOnly.end : 0.0),
          bottom: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasBottom() ? tree.flutterEdgeInsetsDirectionalNamedOnly.bottom : 0.0));
    case messages.FlutterEdgeInsetsDirectionalType_Constructor.flutterEdgeInsetsDirectionalNamedSymmetric:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.symmetric(
          horizontal: (tree.flutterEdgeInsetsDirectionalNamedSymmetric.hasHorizontal() ? tree.flutterEdgeInsetsDirectionalNamedSymmetric.horizontal : 0.0),
          vertical: (tree.flutterEdgeInsetsDirectionalNamedSymmetric.hasVertical() ? tree.flutterEdgeInsetsDirectionalNamedSymmetric.vertical : 0.0));
    default:
      return null;
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsetsGeometry evaluateRequiredFlutterEdgeInsetsGeometryType(messages.FlutterEdgeInsetsGeometryType tree) {
  final result = evaluateFlutterEdgeInsetsGeometryType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsetsGeometry? evaluateFlutterEdgeInsetsGeometryType(messages.FlutterEdgeInsetsGeometryType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsDirectionalNamedAll:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.all(
          (tree.flutterEdgeInsetsDirectionalNamedAll.hasValue() ? tree.flutterEdgeInsetsDirectionalNamedAll.value : missing('value')));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsDirectionalNamedFromSTEB:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasStart() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.start : missing('start')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasTop() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.top : missing('top')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasEnd() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.end : missing('end')),
          (tree.flutterEdgeInsetsDirectionalNamedFromSTEB.hasBottom() ? tree.flutterEdgeInsetsDirectionalNamedFromSTEB.bottom : missing('bottom')));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsDirectionalNamedOnly:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.only(
          start: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasStart() ? tree.flutterEdgeInsetsDirectionalNamedOnly.start : 0.0),
          top: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasTop() ? tree.flutterEdgeInsetsDirectionalNamedOnly.top : 0.0),
          end: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasEnd() ? tree.flutterEdgeInsetsDirectionalNamedOnly.end : 0.0),
          bottom: (tree.flutterEdgeInsetsDirectionalNamedOnly.hasBottom() ? tree.flutterEdgeInsetsDirectionalNamedOnly.bottom : 0.0));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsDirectionalNamedSymmetric:
      return $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.symmetric(
          horizontal: (tree.flutterEdgeInsetsDirectionalNamedSymmetric.hasHorizontal() ? tree.flutterEdgeInsetsDirectionalNamedSymmetric.horizontal : 0.0),
          vertical: (tree.flutterEdgeInsetsDirectionalNamedSymmetric.hasVertical() ? tree.flutterEdgeInsetsDirectionalNamedSymmetric.vertical : 0.0));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsNamedAll:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.all(
          (tree.flutterEdgeInsetsNamedAll.hasValue() ? tree.flutterEdgeInsetsNamedAll.value : missing('value')));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsNamedFromLTRB:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(
          (tree.flutterEdgeInsetsNamedFromLTRB.hasLeft() ? tree.flutterEdgeInsetsNamedFromLTRB.left : missing('left')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasTop() ? tree.flutterEdgeInsetsNamedFromLTRB.top : missing('top')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasRight() ? tree.flutterEdgeInsetsNamedFromLTRB.right : missing('right')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasBottom() ? tree.flutterEdgeInsetsNamedFromLTRB.bottom : missing('bottom')));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsNamedFromViewPadding:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.fromViewPadding(
          missing('padding'),
          (tree.flutterEdgeInsetsNamedFromViewPadding.hasDevicePixelRatio() ? tree.flutterEdgeInsetsNamedFromViewPadding.devicePixelRatio : missing('devicePixelRatio')));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsNamedOnly:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.only(
          left: (tree.flutterEdgeInsetsNamedOnly.hasLeft() ? tree.flutterEdgeInsetsNamedOnly.left : 0.0),
          top: (tree.flutterEdgeInsetsNamedOnly.hasTop() ? tree.flutterEdgeInsetsNamedOnly.top : 0.0),
          right: (tree.flutterEdgeInsetsNamedOnly.hasRight() ? tree.flutterEdgeInsetsNamedOnly.right : 0.0),
          bottom: (tree.flutterEdgeInsetsNamedOnly.hasBottom() ? tree.flutterEdgeInsetsNamedOnly.bottom : 0.0));
    case messages.FlutterEdgeInsetsGeometryType_Constructor.flutterEdgeInsetsNamedSymmetric:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(
          vertical: (tree.flutterEdgeInsetsNamedSymmetric.hasVertical() ? tree.flutterEdgeInsetsNamedSymmetric.vertical : 0.0),
          horizontal: (tree.flutterEdgeInsetsNamedSymmetric.hasHorizontal() ? tree.flutterEdgeInsetsNamedSymmetric.horizontal : 0.0));
    default:
      return null;
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsets evaluateRequiredFlutterEdgeInsetsType(messages.FlutterEdgeInsetsType tree) {
  final result = evaluateFlutterEdgeInsetsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingEdgeInsets.EdgeInsets? evaluateFlutterEdgeInsetsType(messages.FlutterEdgeInsetsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterEdgeInsetsType_Constructor.flutterEdgeInsetsNamedAll:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.all(
          (tree.flutterEdgeInsetsNamedAll.hasValue() ? tree.flutterEdgeInsetsNamedAll.value : missing('value')));
    case messages.FlutterEdgeInsetsType_Constructor.flutterEdgeInsetsNamedFromLTRB:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(
          (tree.flutterEdgeInsetsNamedFromLTRB.hasLeft() ? tree.flutterEdgeInsetsNamedFromLTRB.left : missing('left')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasTop() ? tree.flutterEdgeInsetsNamedFromLTRB.top : missing('top')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasRight() ? tree.flutterEdgeInsetsNamedFromLTRB.right : missing('right')),
          (tree.flutterEdgeInsetsNamedFromLTRB.hasBottom() ? tree.flutterEdgeInsetsNamedFromLTRB.bottom : missing('bottom')));
    case messages.FlutterEdgeInsetsType_Constructor.flutterEdgeInsetsNamedFromViewPadding:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.fromViewPadding(
          missing('padding'),
          (tree.flutterEdgeInsetsNamedFromViewPadding.hasDevicePixelRatio() ? tree.flutterEdgeInsetsNamedFromViewPadding.devicePixelRatio : missing('devicePixelRatio')));
    case messages.FlutterEdgeInsetsType_Constructor.flutterEdgeInsetsNamedOnly:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.only(
          left: (tree.flutterEdgeInsetsNamedOnly.hasLeft() ? tree.flutterEdgeInsetsNamedOnly.left : 0.0),
          top: (tree.flutterEdgeInsetsNamedOnly.hasTop() ? tree.flutterEdgeInsetsNamedOnly.top : 0.0),
          right: (tree.flutterEdgeInsetsNamedOnly.hasRight() ? tree.flutterEdgeInsetsNamedOnly.right : 0.0),
          bottom: (tree.flutterEdgeInsetsNamedOnly.hasBottom() ? tree.flutterEdgeInsetsNamedOnly.bottom : 0.0));
    case messages.FlutterEdgeInsetsType_Constructor.flutterEdgeInsetsNamedSymmetric:
      return $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(
          vertical: (tree.flutterEdgeInsetsNamedSymmetric.hasVertical() ? tree.flutterEdgeInsetsNamedSymmetric.vertical : 0.0),
          horizontal: (tree.flutterEdgeInsetsNamedSymmetric.hasHorizontal() ? tree.flutterEdgeInsetsNamedSymmetric.horizontal : 0.0));
    default:
      return null;
  }
}

$flutterSrcWidgetsEditableText.EditableTextState evaluateRequiredFlutterEditableTextStateType(messages.FlutterEditableTextStateType tree) {
  final result = evaluateFlutterEditableTextStateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsEditableText.EditableTextState? evaluateFlutterEditableTextStateType(messages.FlutterEditableTextStateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterEditableTextStateType_Constructor.flutterEditableTextState:
      return $flutterSrcWidgetsEditableText.EditableTextState(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsListWheelScrollView.FixedExtentScrollController evaluateRequiredFlutterFixedExtentScrollControllerType(messages.FlutterFixedExtentScrollControllerType tree) {
  final result = evaluateFlutterFixedExtentScrollControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsListWheelScrollView.FixedExtentScrollController? evaluateFlutterFixedExtentScrollControllerType(messages.FlutterFixedExtentScrollControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFixedExtentScrollControllerType_Constructor.flutterFixedExtentScrollController:
      return $flutterSrcWidgetsListWheelScrollView.FixedExtentScrollController(
          initialItem: (tree.flutterFixedExtentScrollController.hasInitialItem() ? tree.flutterFixedExtentScrollController.initialItem : 0));
    default:
      return null;
  }
}

$flutterSrcFoundationAssertions.FlutterError evaluateRequiredFlutterFlutterErrorType(messages.FlutterFlutterErrorType tree) {
  final result = evaluateFlutterFlutterErrorType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcFoundationAssertions.FlutterError? evaluateFlutterFlutterErrorType(messages.FlutterFlutterErrorType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFlutterErrorType_Constructor.flutterFlutterError:
      return $flutterSrcFoundationAssertions.FlutterError(
          (tree.flutterFlutterError.hasMessage() ? tree.flutterFlutterError.message : missing('message')));
    case messages.FlutterFlutterErrorType_Constructor.flutterFlutterErrorNamedFromParts:
      return $flutterSrcFoundationAssertions.FlutterError.fromParts(
          tree.flutterFlutterErrorNamedFromParts.diagnostics.map((e) => evaluateRequiredFlutterDiagnosticsNodeType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcWidgetsFocusManager.FocusNode evaluateRequiredFlutterFocusNodeType(messages.FlutterFocusNodeType tree) {
  final result = evaluateFlutterFocusNodeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFocusManager.FocusNode? evaluateFlutterFocusNodeType(messages.FlutterFocusNodeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFocusNodeType_Constructor.flutterFocusNode:
      return $flutterSrcWidgetsFocusManager.FocusNode(
          debugLabel: (tree.flutterFocusNode.hasDebugLabel() ? tree.flutterFocusNode.debugLabel : null),
          onKey: null,
          onKeyEvent: null,
          skipTraversal: (tree.flutterFocusNode.hasSkipTraversal() ? tree.flutterFocusNode.skipTraversal : false),
          canRequestFocus: (tree.flutterFocusNode.hasCanRequestFocus() ? tree.flutterFocusNode.canRequestFocus : true),
          descendantsAreFocusable: (tree.flutterFocusNode.hasDescendantsAreFocusable() ? tree.flutterFocusNode.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusNode.hasDescendantsAreTraversable() ? tree.flutterFocusNode.descendantsAreTraversable : true));
    case messages.FlutterFocusNodeType_Constructor.flutterFocusScopeNode:
      return $flutterSrcWidgetsFocusManager.FocusScopeNode(
          debugLabel: (tree.flutterFocusScopeNode.hasDebugLabel() ? tree.flutterFocusScopeNode.debugLabel : null),
          onKeyEvent: null,
          onKey: null,
          skipTraversal: (tree.flutterFocusScopeNode.hasSkipTraversal() ? tree.flutterFocusScopeNode.skipTraversal : false),
          canRequestFocus: (tree.flutterFocusScopeNode.hasCanRequestFocus() ? tree.flutterFocusScopeNode.canRequestFocus : true),
          traversalEdgeBehavior: (tree.flutterFocusScopeNode.hasTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterFocusScopeNode.traversalEdgeBehavior) : $flutterSrcWidgetsFocusTraversal.TraversalEdgeBehavior.closedLoop));
    default:
      return null;
  }
}

$flutterSrcWidgetsFocusTraversal.FocusOrder evaluateRequiredFlutterFocusOrderType(messages.FlutterFocusOrderType tree) {
  final result = evaluateFlutterFocusOrderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFocusTraversal.FocusOrder? evaluateFlutterFocusOrderType(messages.FlutterFocusOrderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFocusOrderType_Constructor.flutterLexicalFocusOrder:
      return $flutterSrcWidgetsFocusTraversal.LexicalFocusOrder(
          (tree.flutterLexicalFocusOrder.hasOrder() ? tree.flutterLexicalFocusOrder.order : missing('order')));
    case messages.FlutterFocusOrderType_Constructor.flutterNumericFocusOrder:
      return $flutterSrcWidgetsFocusTraversal.NumericFocusOrder(
          (tree.flutterNumericFocusOrder.hasOrder() ? tree.flutterNumericFocusOrder.order : missing('order')));
    default:
      return null;
  }
}

$flutterSrcWidgetsFocusManager.FocusScopeNode evaluateRequiredFlutterFocusScopeNodeType(messages.FlutterFocusScopeNodeType tree) {
  final result = evaluateFlutterFocusScopeNodeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFocusManager.FocusScopeNode? evaluateFlutterFocusScopeNodeType(messages.FlutterFocusScopeNodeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFocusScopeNodeType_Constructor.flutterFocusScopeNode:
      return $flutterSrcWidgetsFocusManager.FocusScopeNode(
          debugLabel: (tree.flutterFocusScopeNode.hasDebugLabel() ? tree.flutterFocusScopeNode.debugLabel : null),
          onKeyEvent: null,
          onKey: null,
          skipTraversal: (tree.flutterFocusScopeNode.hasSkipTraversal() ? tree.flutterFocusScopeNode.skipTraversal : false),
          canRequestFocus: (tree.flutterFocusScopeNode.hasCanRequestFocus() ? tree.flutterFocusScopeNode.canRequestFocus : true),
          traversalEdgeBehavior: (tree.flutterFocusScopeNode.hasTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterFocusScopeNode.traversalEdgeBehavior) : $flutterSrcWidgetsFocusTraversal.TraversalEdgeBehavior.closedLoop));
    default:
      return null;
  }
}

$flutterSrcWidgetsFocusTraversal.FocusTraversalPolicy evaluateRequiredFlutterFocusTraversalPolicyType(messages.FlutterFocusTraversalPolicyType tree) {
  final result = evaluateFlutterFocusTraversalPolicyType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFocusTraversal.FocusTraversalPolicy? evaluateFlutterFocusTraversalPolicyType(messages.FlutterFocusTraversalPolicyType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterFocusTraversalPolicyType_Constructor.flutterOrderedTraversalPolicy:
      return $flutterSrcWidgetsFocusTraversal.OrderedTraversalPolicy(
          secondary: (tree.flutterOrderedTraversalPolicy.hasSecondary() ? evaluateFlutterFocusTraversalPolicyType(tree.flutterOrderedTraversalPolicy.secondary) : null),
          requestFocusCallback: null);
    case messages.FlutterFocusTraversalPolicyType_Constructor.flutterReadingOrderTraversalPolicy:
      return $flutterSrcWidgetsFocusTraversal.ReadingOrderTraversalPolicy(
          requestFocusCallback: null);
    case messages.FlutterFocusTraversalPolicyType_Constructor.flutterWidgetOrderTraversalPolicy:
      return $flutterSrcWidgetsFocusTraversal.WidgetOrderTraversalPolicy(
          requestFocusCallback: null);
    default:
      return null;
  }
}

$flutterSrcGesturesRecognizer.GestureRecognizer evaluateRequiredFlutterGestureRecognizerType(messages.FlutterGestureRecognizerType tree) {
  final result = evaluateFlutterGestureRecognizerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcGesturesRecognizer.GestureRecognizer? evaluateFlutterGestureRecognizerType(messages.FlutterGestureRecognizerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterGestureRecognizerType_Constructor.flutterDelayedMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.DelayedMultiDragGestureRecognizer(
          delay: (tree.flutterDelayedMultiDragGestureRecognizer.hasDelay() ? evaluateRequiredDartDurationType(tree.flutterDelayedMultiDragGestureRecognizer.delay) : $flutterSrcGesturesConstants.kLongPressTimeout),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterDoubleTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.DoubleTapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterEagerGestureRecognizer:
      return $flutterSrcGesturesEager.EagerGestureRecognizer(
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterForcePressGestureRecognizer:
      return $flutterSrcGesturesForcePress.ForcePressGestureRecognizer(
          startPressure: (tree.flutterForcePressGestureRecognizer.hasStartPressure() ? tree.flutterForcePressGestureRecognizer.startPressure : 0.4),
          peakPressure: (tree.flutterForcePressGestureRecognizer.hasPeakPressure() ? tree.flutterForcePressGestureRecognizer.peakPressure : 0.85),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterHorizontalDragGestureRecognizer:
      return $flutterSrcGesturesMonodrag.HorizontalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterHorizontalMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.HorizontalMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterImmediateMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.ImmediateMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterLongPressGestureRecognizer:
      return $flutterSrcGesturesLongPress.LongPressGestureRecognizer(
          duration: (tree.flutterLongPressGestureRecognizer.hasDuration() ? evaluateDartDurationType(tree.flutterLongPressGestureRecognizer.duration) : null),
          postAcceptSlopTolerance: (tree.flutterLongPressGestureRecognizer.hasPostAcceptSlopTolerance() ? tree.flutterLongPressGestureRecognizer.postAcceptSlopTolerance : $flutterSrcGesturesConstants.kTouchSlop),
          supportedDevices: null,
          debugOwner: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterMultiTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.MultiTapGestureRecognizer(
          longTapDelay: (tree.flutterMultiTapGestureRecognizer.hasLongTapDelay() ? evaluateRequiredDartDurationType(tree.flutterMultiTapGestureRecognizer.longTapDelay) : $dartCore.Duration.zero),
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterPanGestureRecognizer:
      return $flutterSrcGesturesMonodrag.PanGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterScaleGestureRecognizer:
      return $flutterSrcGesturesScale.ScaleGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null,
          dragStartBehavior: (tree.flutterScaleGestureRecognizer.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterScaleGestureRecognizer.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.down),
          trackpadScrollCausesScale: (tree.flutterScaleGestureRecognizer.hasTrackpadScrollCausesScale() ? tree.flutterScaleGestureRecognizer.trackpadScrollCausesScale : false),
          trackpadScrollToScaleFactor: (tree.flutterScaleGestureRecognizer.hasTrackpadScrollToScaleFactor() ? evaluateRequiredDartOffsetType(tree.flutterScaleGestureRecognizer.trackpadScrollToScaleFactor) : $flutterSrcGesturesScale.kDefaultTrackpadScrollToScaleFactor));
    case messages.FlutterGestureRecognizerType_Constructor.flutterSerialTapGestureRecognizer:
      return $flutterSrcGesturesMultitap.SerialTapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterTapAndHorizontalDragGestureRecognizer:
      return $flutterSrcGesturesTapAndDrag.TapAndHorizontalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterTapAndPanGestureRecognizer:
      return $flutterSrcGesturesTapAndDrag.TapAndPanGestureRecognizer(
          debugOwner: null,
          supportedDevices: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterTapGestureRecognizer:
      return $flutterSrcGesturesTap.TapGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterVerticalDragGestureRecognizer:
      return $flutterSrcGesturesMonodrag.VerticalDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    case messages.FlutterGestureRecognizerType_Constructor.flutterVerticalMultiDragGestureRecognizer:
      return $flutterSrcGesturesMultidrag.VerticalMultiDragGestureRecognizer(
          debugOwner: null,
          supportedDevices: null,
          allowedButtonsFilter: null);
    default:
      return null;
  }
}

$flutterSrcPaintingGradient.GradientTransform evaluateRequiredFlutterGradientTransformType(messages.FlutterGradientTransformType tree) {
  final result = evaluateFlutterGradientTransformType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingGradient.GradientTransform? evaluateFlutterGradientTransformType(messages.FlutterGradientTransformType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterGradientTransformType_Constructor.flutterGradientRotation:
      return $flutterSrcPaintingGradient.GradientRotation(
          (tree.flutterGradientRotation.hasRadians() ? tree.flutterGradientRotation.radians : missing('radians')));
    default:
      return null;
  }
}

$flutterSrcPaintingGradient.Gradient evaluateRequiredFlutterGradientType(messages.FlutterGradientType tree) {
  final result = evaluateFlutterGradientType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingGradient.Gradient? evaluateFlutterGradientType(messages.FlutterGradientType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterGradientType_Constructor.flutterLinearGradient:
      return $flutterSrcPaintingGradient.LinearGradient(
          begin: (tree.flutterLinearGradient.hasBegin() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterLinearGradient.begin) : $flutterSrcPaintingAlignment.Alignment.centerLeft),
          end: (tree.flutterLinearGradient.hasEnd() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterLinearGradient.end) : $flutterSrcPaintingAlignment.Alignment.centerRight),
          colors: tree.flutterLinearGradient.colors.map((e) => evaluateRequiredDartColorType(e)).toList(),
          stops: tree.flutterLinearGradient.stops,
          tileMode: (tree.flutterLinearGradient.hasTileMode() ? enums.convertRequiredDartTileModeType(tree.flutterLinearGradient.tileMode) : $dartUi.TileMode.clamp),
          transform: (tree.flutterLinearGradient.hasTransform() ? evaluateFlutterGradientTransformType(tree.flutterLinearGradient.transform) : null));
    case messages.FlutterGradientType_Constructor.flutterRadialGradient:
      return $flutterSrcPaintingGradient.RadialGradient(
          center: (tree.flutterRadialGradient.hasCenter() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRadialGradient.center) : $flutterSrcPaintingAlignment.Alignment.center),
          radius: (tree.flutterRadialGradient.hasRadius() ? tree.flutterRadialGradient.radius : 0.5),
          colors: tree.flutterRadialGradient.colors.map((e) => evaluateRequiredDartColorType(e)).toList(),
          stops: tree.flutterRadialGradient.stops,
          tileMode: (tree.flutterRadialGradient.hasTileMode() ? enums.convertRequiredDartTileModeType(tree.flutterRadialGradient.tileMode) : $dartUi.TileMode.clamp),
          focal: (tree.flutterRadialGradient.hasFocal() ? evaluateFlutterAlignmentGeometryType(tree.flutterRadialGradient.focal) : null),
          focalRadius: (tree.flutterRadialGradient.hasFocalRadius() ? tree.flutterRadialGradient.focalRadius : 0.0),
          transform: (tree.flutterRadialGradient.hasTransform() ? evaluateFlutterGradientTransformType(tree.flutterRadialGradient.transform) : null));
    case messages.FlutterGradientType_Constructor.flutterSweepGradient:
      return $flutterSrcPaintingGradient.SweepGradient(
          center: (tree.flutterSweepGradient.hasCenter() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterSweepGradient.center) : $flutterSrcPaintingAlignment.Alignment.center),
          startAngle: (tree.flutterSweepGradient.hasStartAngle() ? tree.flutterSweepGradient.startAngle : 0.0),
          endAngle: (tree.flutterSweepGradient.hasEndAngle() ? tree.flutterSweepGradient.endAngle : $dartMath.pi * 2),
          colors: tree.flutterSweepGradient.colors.map((e) => evaluateRequiredDartColorType(e)).toList(),
          stops: tree.flutterSweepGradient.stops,
          tileMode: (tree.flutterSweepGradient.hasTileMode() ? enums.convertRequiredDartTileModeType(tree.flutterSweepGradient.tileMode) : $dartUi.TileMode.clamp),
          transform: (tree.flutterSweepGradient.hasTransform() ? evaluateFlutterGradientTransformType(tree.flutterSweepGradient.transform) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsHeroes.HeroController evaluateRequiredFlutterHeroControllerType(messages.FlutterHeroControllerType tree) {
  final result = evaluateFlutterHeroControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsHeroes.HeroController? evaluateFlutterHeroControllerType(messages.FlutterHeroControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterHeroControllerType_Constructor.flutterHeroController:
      return $flutterSrcWidgetsHeroes.HeroController(
          createRectTween: null);
    default:
      return null;
  }
}

$flutterSrcWidgetsIconData.IconData evaluateRequiredFlutterIconDataType(messages.FlutterIconDataType tree) {
  final result = evaluateFlutterIconDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsIconData.IconData? evaluateFlutterIconDataType(messages.FlutterIconDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterIconDataType_Constructor.flutterIconData:
      return $flutterSrcWidgetsIconData.IconData(
          (tree.flutterIconData.hasCodePoint() ? tree.flutterIconData.codePoint : missing('codePoint')),
          fontFamily: (tree.flutterIconData.hasFontFamily() ? tree.flutterIconData.fontFamily : null),
          fontPackage: (tree.flutterIconData.hasFontPackage() ? tree.flutterIconData.fontPackage : null),
          matchTextDirection: (tree.flutterIconData.hasMatchTextDirection() ? tree.flutterIconData.matchTextDirection : false),
          fontFamilyFallback: tree.flutterIconData.fontFamilyFallback);
    default:
      return null;
  }
}

$flutterSrcWidgetsIconThemeData.IconThemeData evaluateRequiredFlutterIconThemeDataType(messages.FlutterIconThemeDataType tree) {
  final result = evaluateFlutterIconThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsIconThemeData.IconThemeData? evaluateFlutterIconThemeDataType(messages.FlutterIconThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterIconThemeDataType_Constructor.cupertinoIconThemeData:
      return $flutterSrcCupertinoIconThemeData.CupertinoIconThemeData(
          size: (tree.cupertinoIconThemeData.hasSize() ? tree.cupertinoIconThemeData.size : null),
          fill: (tree.cupertinoIconThemeData.hasFill() ? tree.cupertinoIconThemeData.fill : null),
          weight: (tree.cupertinoIconThemeData.hasWeight() ? tree.cupertinoIconThemeData.weight : null),
          grade: (tree.cupertinoIconThemeData.hasGrade() ? tree.cupertinoIconThemeData.grade : null),
          opticalSize: (tree.cupertinoIconThemeData.hasOpticalSize() ? tree.cupertinoIconThemeData.opticalSize : null),
          color: (tree.cupertinoIconThemeData.hasColor() ? evaluateDartColorType(tree.cupertinoIconThemeData.color) : null),
          opacity: (tree.cupertinoIconThemeData.hasOpacity() ? tree.cupertinoIconThemeData.opacity : null),
          shadows: tree.cupertinoIconThemeData.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList());
    case messages.FlutterIconThemeDataType_Constructor.flutterIconThemeData:
      return $flutterSrcWidgetsIconThemeData.IconThemeData(
          size: (tree.flutterIconThemeData.hasSize() ? tree.flutterIconThemeData.size : null),
          fill: (tree.flutterIconThemeData.hasFill() ? tree.flutterIconThemeData.fill : null),
          weight: (tree.flutterIconThemeData.hasWeight() ? tree.flutterIconThemeData.weight : null),
          grade: (tree.flutterIconThemeData.hasGrade() ? tree.flutterIconThemeData.grade : null),
          opticalSize: (tree.flutterIconThemeData.hasOpticalSize() ? tree.flutterIconThemeData.opticalSize : null),
          color: (tree.flutterIconThemeData.hasColor() ? evaluateDartColorType(tree.flutterIconThemeData.color) : null),
          opacity: (tree.flutterIconThemeData.hasOpacity() ? tree.flutterIconThemeData.opacity : null),
          shadows: tree.flutterIconThemeData.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList());
    case messages.FlutterIconThemeDataType_Constructor.flutterIconThemeDataNamedFallback:
      return $flutterSrcWidgetsIconThemeData.IconThemeData.fallback(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsIcon.Icon evaluateRequiredFlutterIconType(messages.FlutterIconType tree) {
  final result = evaluateFlutterIconType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsIcon.Icon? evaluateFlutterIconType(messages.FlutterIconType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterIconType_Constructor.flutterIcon:
      return $flutterSrcWidgetsIcon.Icon(
          (tree.flutterIcon.hasIcon() ? evaluateFlutterIconDataType(tree.flutterIcon.icon) : null),
          key: (tree.flutterIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterIcon.key) : null),
          size: (tree.flutterIcon.hasSize() ? tree.flutterIcon.size : null),
          fill: (tree.flutterIcon.hasFill() ? tree.flutterIcon.fill : null),
          weight: (tree.flutterIcon.hasWeight() ? tree.flutterIcon.weight : null),
          grade: (tree.flutterIcon.hasGrade() ? tree.flutterIcon.grade : null),
          opticalSize: (tree.flutterIcon.hasOpticalSize() ? tree.flutterIcon.opticalSize : null),
          color: (tree.flutterIcon.hasColor() ? evaluateDartColorType(tree.flutterIcon.color) : null),
          shadows: tree.flutterIcon.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList(),
          semanticLabel: (tree.flutterIcon.hasSemanticLabel() ? tree.flutterIcon.semanticLabel : null),
          textDirection: (tree.flutterIcon.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIcon.textDirection) : null));
    default:
      return null;
  }
}

$flutterSrcPaintingImageProvider.ImageConfiguration evaluateRequiredFlutterImageConfigurationType(messages.FlutterImageConfigurationType tree) {
  final result = evaluateFlutterImageConfigurationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingImageProvider.ImageConfiguration? evaluateFlutterImageConfigurationType(messages.FlutterImageConfigurationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterImageConfigurationType_Constructor.flutterImageConfiguration:
      return $flutterSrcPaintingImageProvider.ImageConfiguration(
          bundle: (tree.flutterImageConfiguration.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterImageConfiguration.bundle) : null),
          devicePixelRatio: (tree.flutterImageConfiguration.hasDevicePixelRatio() ? tree.flutterImageConfiguration.devicePixelRatio : null),
          locale: (tree.flutterImageConfiguration.hasLocale() ? evaluateDartLocaleType(tree.flutterImageConfiguration.locale) : null),
          textDirection: (tree.flutterImageConfiguration.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterImageConfiguration.textDirection) : null),
          size: (tree.flutterImageConfiguration.hasSize() ? evaluateDartSizeType(tree.flutterImageConfiguration.size) : null),
          platform: (tree.flutterImageConfiguration.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.flutterImageConfiguration.platform) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.InheritedWidget evaluateRequiredFlutterInheritedWidgetType(messages.FlutterInheritedWidgetType tree) {
  final result = evaluateFlutterInheritedWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.InheritedWidget? evaluateFlutterInheritedWidgetType(messages.FlutterInheritedWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterInheritedWidgetType_Constructor.cupertinoUserInterfaceLevel:
      return $flutterSrcCupertinoInterfaceLevel.CupertinoUserInterfaceLevel(
          key: (tree.cupertinoUserInterfaceLevel.hasKey() ? evaluateFlutterKeyType(tree.cupertinoUserInterfaceLevel.key) : null),
          data: (tree.cupertinoUserInterfaceLevel.hasData() ? enums.convertRequiredCupertinoUserInterfaceLevelDataType(tree.cupertinoUserInterfaceLevel.data) : missing('data')),
          child: (tree.cupertinoUserInterfaceLevel.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoUserInterfaceLevel.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultAssetBundle:
      return $flutterSrcWidgetsBasic.DefaultAssetBundle(
          key: (tree.flutterDefaultAssetBundle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultAssetBundle.key) : null),
          bundle: (tree.flutterDefaultAssetBundle.hasBundle() ? evaluateRequiredFlutterAssetBundleType(tree.flutterDefaultAssetBundle.bundle) : missing('bundle')),
          child: (tree.flutterDefaultAssetBundle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultAssetBundle.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultSelectionStyle:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle(
          key: (tree.flutterDefaultSelectionStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyle.key) : null),
          cursorColor: (tree.flutterDefaultSelectionStyle.hasCursorColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.cursorColor) : null),
          selectionColor: (tree.flutterDefaultSelectionStyle.hasSelectionColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.selectionColor) : null),
          mouseCursor: null,
          child: (tree.flutterDefaultSelectionStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultSelectionStyle.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultSelectionStyleNamedFallback:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle.fallback(
          key: (tree.flutterDefaultSelectionStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyleNamedFallback.key) : null));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultTextHeightBehavior:
      return $flutterSrcWidgetsText.DefaultTextHeightBehavior(
          key: (tree.flutterDefaultTextHeightBehavior.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextHeightBehavior.key) : null),
          textHeightBehavior: (tree.flutterDefaultTextHeightBehavior.hasTextHeightBehavior() ? evaluateRequiredDartTextHeightBehaviorType(tree.flutterDefaultTextHeightBehavior.textHeightBehavior) : missing('textHeightBehavior')),
          child: (tree.flutterDefaultTextHeightBehavior.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextHeightBehavior.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultTextStyle:
      return $flutterSrcWidgetsText.DefaultTextStyle(
          key: (tree.flutterDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyle.key) : null),
          style: (tree.flutterDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterDefaultTextStyle.hasSoftWrap() ? tree.flutterDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterDefaultTextStyle.hasMaxLines() ? tree.flutterDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterDefaultTextStyle.textHeightBehavior) : null),
          child: (tree.flutterDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextStyle.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDefaultTextStyleNamedFallback:
      return $flutterSrcWidgetsText.DefaultTextStyle.fallback(
          key: (tree.flutterDefaultTextStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyleNamedFallback.key) : null));
    case messages.FlutterInheritedWidgetType_Constructor.flutterDirectionality:
      return $flutterSrcWidgetsBasic.Directionality(
          key: (tree.flutterDirectionality.hasKey() ? evaluateFlutterKeyType(tree.flutterDirectionality.key) : null),
          textDirection: (tree.flutterDirectionality.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterDirectionality.textDirection) : missing('textDirection')),
          child: (tree.flutterDirectionality.hasChild() ? evaluateRequiredWidgetType(tree.flutterDirectionality.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterFocusTraversalOrder:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalOrder(
          key: (tree.flutterFocusTraversalOrder.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalOrder.key) : null),
          order: (tree.flutterFocusTraversalOrder.hasOrder() ? evaluateRequiredFlutterFocusOrderType(tree.flutterFocusTraversalOrder.order) : missing('order')),
          child: (tree.flutterFocusTraversalOrder.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalOrder.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterHeroControllerScope:
      return $flutterSrcWidgetsNavigator.HeroControllerScope(
          key: (tree.flutterHeroControllerScope.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScope.key) : null),
          controller: (tree.flutterHeroControllerScope.hasController() ? evaluateRequiredFlutterHeroControllerType(tree.flutterHeroControllerScope.controller) : missing('controller')),
          child: (tree.flutterHeroControllerScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScope.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterHeroControllerScopeNamedNone:
      return $flutterSrcWidgetsNavigator.HeroControllerScope.none(
          key: (tree.flutterHeroControllerScopeNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScopeNamedNone.key) : null),
          child: (tree.flutterHeroControllerScopeNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScopeNamedNone.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterIconTheme:
      return $flutterSrcWidgetsIconTheme.IconTheme(
          key: (tree.flutterIconTheme.hasKey() ? evaluateFlutterKeyType(tree.flutterIconTheme.key) : null),
          data: (tree.flutterIconTheme.hasData() ? evaluateRequiredFlutterIconThemeDataType(tree.flutterIconTheme.data) : missing('data')),
          child: (tree.flutterIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.flutterIconTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterLookupBoundary:
      return $flutterSrcWidgetsLookupBoundary.LookupBoundary(
          key: (tree.flutterLookupBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterLookupBoundary.key) : null),
          child: (tree.flutterLookupBoundary.hasChild() ? evaluateRequiredWidgetType(tree.flutterLookupBoundary.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterMediaQuery:
      return $flutterSrcWidgetsMediaQuery.MediaQuery(
          key: (tree.flutterMediaQuery.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQuery.key) : null),
          data: (tree.flutterMediaQuery.hasData() ? evaluateRequiredFlutterMediaQueryDataType(tree.flutterMediaQuery.data) : missing('data')),
          child: (tree.flutterMediaQuery.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQuery.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterMediaQueryNamedRemovePadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removePadding(
          key: (tree.flutterMediaQueryNamedRemovePadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemovePadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemovePadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemovePadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemovePadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemovePadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemovePadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemovePadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemovePadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemovePadding.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterMediaQueryNamedRemoveViewInsets:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewInsets(
          key: (tree.flutterMediaQueryNamedRemoveViewInsets.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewInsets.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewInsets.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewInsets.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewInsets.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewInsets.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterMediaQueryNamedRemoveViewPadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewPadding(
          key: (tree.flutterMediaQueryNamedRemoveViewPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewPadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewPadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewPadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewPadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewPadding.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterPrimaryScrollController:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController(
          key: (tree.flutterPrimaryScrollController.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollController.key) : null),
          controller: (tree.flutterPrimaryScrollController.hasController() ? evaluateRequiredFlutterScrollControllerType(tree.flutterPrimaryScrollController.controller) : missing('controller')),
          scrollDirection: (tree.flutterPrimaryScrollController.hasScrollDirection() ? enums.convertFlutterAxisType(tree.flutterPrimaryScrollController.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          child: (tree.flutterPrimaryScrollController.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollController.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterPrimaryScrollControllerNamedNone:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController.none(
          key: (tree.flutterPrimaryScrollControllerNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollControllerNamedNone.key) : null),
          child: (tree.flutterPrimaryScrollControllerNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollControllerNamedNone.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterScrollConfiguration:
      return $flutterSrcWidgetsScrollConfiguration.ScrollConfiguration(
          key: (tree.flutterScrollConfiguration.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollConfiguration.key) : null),
          behavior: (tree.flutterScrollConfiguration.hasBehavior() ? evaluateRequiredFlutterScrollBehaviorType(tree.flutterScrollConfiguration.behavior) : missing('behavior')),
          child: (tree.flutterScrollConfiguration.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollConfiguration.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterSelectionRegistrarScope:
      return $flutterSrcWidgetsSelectionContainer.SelectionRegistrarScope(
          key: (tree.flutterSelectionRegistrarScope.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionRegistrarScope.key) : null),
          registrar: (tree.flutterSelectionRegistrarScope.hasRegistrar() ? evaluateRequiredFlutterSelectionRegistrarType(tree.flutterSelectionRegistrarScope.registrar) : missing('registrar')),
          child: (tree.flutterSelectionRegistrarScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionRegistrarScope.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.flutterUnmanagedRestorationScope:
      return $flutterSrcWidgetsRestoration.UnmanagedRestorationScope(
          key: (tree.flutterUnmanagedRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterUnmanagedRestorationScope.key) : null),
          bucket: (tree.flutterUnmanagedRestorationScope.hasBucket() ? evaluateFlutterRestorationBucketType(tree.flutterUnmanagedRestorationScope.bucket) : null),
          child: (tree.flutterUnmanagedRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterUnmanagedRestorationScope.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialActionIconTheme:
      return $flutterSrcMaterialActionIconsTheme.ActionIconTheme(
          key: (tree.materialActionIconTheme.hasKey() ? evaluateFlutterKeyType(tree.materialActionIconTheme.key) : null),
          data: (tree.materialActionIconTheme.hasData() ? evaluateRequiredMaterialActionIconThemeDataType(tree.materialActionIconTheme.data) : missing('data')),
          child: (tree.materialActionIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialActionIconTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialBadgeTheme:
      return $flutterSrcMaterialBadgeTheme.BadgeTheme(
          key: (tree.materialBadgeTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeTheme.key) : null),
          data: (tree.materialBadgeTheme.hasData() ? evaluateRequiredMaterialBadgeThemeDataType(tree.materialBadgeTheme.data) : missing('data')),
          child: (tree.materialBadgeTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBadgeTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialBottomNavigationBarTheme:
      return $flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarTheme(
          key: (tree.materialBottomNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBarTheme.key) : null),
          data: (tree.materialBottomNavigationBarTheme.hasData() ? evaluateRequiredMaterialBottomNavigationBarThemeDataType(tree.materialBottomNavigationBarTheme.data) : missing('data')),
          child: (tree.materialBottomNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBottomNavigationBarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialButtonBarTheme:
      return $flutterSrcMaterialButtonBarTheme.ButtonBarTheme(
          key: (tree.materialButtonBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBarTheme.key) : null),
          data: (tree.materialButtonBarTheme.hasData() ? evaluateRequiredMaterialButtonBarThemeDataType(tree.materialButtonBarTheme.data) : missing('data')),
          child: (tree.materialButtonBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonBarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialButtonTheme:
      return $flutterSrcMaterialButtonTheme.ButtonTheme(
          key: (tree.materialButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonTheme.key) : null),
          textTheme: (tree.materialButtonTheme.hasTextTheme() ? enums.convertRequiredMaterialButtonTextThemeType(tree.materialButtonTheme.textTheme) : $flutterSrcMaterialButtonTheme.ButtonTextTheme.normal),
          layoutBehavior: (tree.materialButtonTheme.hasLayoutBehavior() ? enums.convertRequiredMaterialButtonBarLayoutBehaviorType(tree.materialButtonTheme.layoutBehavior) : $flutterSrcMaterialButtonTheme.ButtonBarLayoutBehavior.padded),
          minWidth: (tree.materialButtonTheme.hasMinWidth() ? tree.materialButtonTheme.minWidth : 88.0),
          height: (tree.materialButtonTheme.hasHeight() ? tree.materialButtonTheme.height : 36.0),
          padding: (tree.materialButtonTheme.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonTheme.padding) : null),
          shape: (tree.materialButtonTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialButtonTheme.shape) : null),
          alignedDropdown: (tree.materialButtonTheme.hasAlignedDropdown() ? tree.materialButtonTheme.alignedDropdown : false),
          buttonColor: (tree.materialButtonTheme.hasButtonColor() ? evaluateDartColorType(tree.materialButtonTheme.buttonColor) : null),
          disabledColor: (tree.materialButtonTheme.hasDisabledColor() ? evaluateDartColorType(tree.materialButtonTheme.disabledColor) : null),
          focusColor: (tree.materialButtonTheme.hasFocusColor() ? evaluateDartColorType(tree.materialButtonTheme.focusColor) : null),
          hoverColor: (tree.materialButtonTheme.hasHoverColor() ? evaluateDartColorType(tree.materialButtonTheme.hoverColor) : null),
          highlightColor: (tree.materialButtonTheme.hasHighlightColor() ? evaluateDartColorType(tree.materialButtonTheme.highlightColor) : null),
          splashColor: (tree.materialButtonTheme.hasSplashColor() ? evaluateDartColorType(tree.materialButtonTheme.splashColor) : null),
          colorScheme: (tree.materialButtonTheme.hasColorScheme() ? evaluateMaterialColorSchemeType(tree.materialButtonTheme.colorScheme) : null),
          materialTapTargetSize: (tree.materialButtonTheme.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialButtonTheme.materialTapTargetSize) : null),
          child: (tree.materialButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialButtonThemeNamedFromButtonThemeData:
      return $flutterSrcMaterialButtonTheme.ButtonTheme.fromButtonThemeData(
          key: (tree.materialButtonThemeNamedFromButtonThemeData.hasKey() ? evaluateFlutterKeyType(tree.materialButtonThemeNamedFromButtonThemeData.key) : null),
          data: (tree.materialButtonThemeNamedFromButtonThemeData.hasData() ? evaluateRequiredMaterialButtonThemeDataType(tree.materialButtonThemeNamedFromButtonThemeData.data) : missing('data')),
          child: (tree.materialButtonThemeNamedFromButtonThemeData.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonThemeNamedFromButtonThemeData.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialCheckboxTheme:
      return $flutterSrcMaterialCheckboxTheme.CheckboxTheme(
          key: (tree.materialCheckboxTheme.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxTheme.key) : null),
          data: (tree.materialCheckboxTheme.hasData() ? evaluateRequiredMaterialCheckboxThemeDataType(tree.materialCheckboxTheme.data) : missing('data')),
          child: (tree.materialCheckboxTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialCheckboxTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialChipTheme:
      return $flutterSrcMaterialChipTheme.ChipTheme(
          key: (tree.materialChipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialChipTheme.key) : null),
          data: (tree.materialChipTheme.hasData() ? evaluateRequiredMaterialChipThemeDataType(tree.materialChipTheme.data) : missing('data')),
          child: (tree.materialChipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialChipTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDataTableTheme:
      return $flutterSrcMaterialDataTableTheme.DataTableTheme(
          key: (tree.materialDataTableTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDataTableTheme.key) : null),
          data: (tree.materialDataTableTheme.hasData() ? evaluateRequiredMaterialDataTableThemeDataType(tree.materialDataTableTheme.data) : missing('data')),
          child: (tree.materialDataTableTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDataTableTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDatePickerTheme:
      return $flutterSrcMaterialDatePickerTheme.DatePickerTheme(
          key: (tree.materialDatePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerTheme.key) : null),
          data: (tree.materialDatePickerTheme.hasData() ? evaluateRequiredMaterialDatePickerThemeDataType(tree.materialDatePickerTheme.data) : missing('data')),
          child: (tree.materialDatePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDatePickerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDividerTheme:
      return $flutterSrcMaterialDividerTheme.DividerTheme(
          key: (tree.materialDividerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDividerTheme.key) : null),
          data: (tree.materialDividerTheme.hasData() ? evaluateRequiredMaterialDividerThemeDataType(tree.materialDividerTheme.data) : missing('data')),
          child: (tree.materialDividerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDividerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDrawerTheme:
      return $flutterSrcMaterialDrawerTheme.DrawerTheme(
          key: (tree.materialDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerTheme.key) : null),
          data: (tree.materialDrawerTheme.hasData() ? evaluateRequiredMaterialDrawerThemeDataType(tree.materialDrawerTheme.data) : missing('data')),
          child: (tree.materialDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDropdownButtonHideUnderline:
      return $flutterSrcMaterialDropdown.DropdownButtonHideUnderline(
          key: (tree.materialDropdownButtonHideUnderline.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonHideUnderline.key) : null),
          child: (tree.materialDropdownButtonHideUnderline.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownButtonHideUnderline.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialDropdownMenuTheme:
      return $flutterSrcMaterialDropdownMenuTheme.DropdownMenuTheme(
          key: (tree.materialDropdownMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuTheme.key) : null),
          data: (tree.materialDropdownMenuTheme.hasData() ? evaluateRequiredMaterialDropdownMenuThemeDataType(tree.materialDropdownMenuTheme.data) : missing('data')),
          child: (tree.materialDropdownMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialElevatedButtonTheme:
      return $flutterSrcMaterialElevatedButtonTheme.ElevatedButtonTheme(
          key: (tree.materialElevatedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonTheme.key) : null),
          data: (tree.materialElevatedButtonTheme.hasData() ? evaluateRequiredMaterialElevatedButtonThemeDataType(tree.materialElevatedButtonTheme.data) : missing('data')),
          child: (tree.materialElevatedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialElevatedButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialExpansionTileTheme:
      return $flutterSrcMaterialExpansionTileTheme.ExpansionTileTheme(
          key: (tree.materialExpansionTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTileTheme.key) : null),
          data: (tree.materialExpansionTileTheme.hasData() ? evaluateRequiredMaterialExpansionTileThemeDataType(tree.materialExpansionTileTheme.data) : missing('data')),
          child: (tree.materialExpansionTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialExpansionTileTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialFilledButtonTheme:
      return $flutterSrcMaterialFilledButtonTheme.FilledButtonTheme(
          key: (tree.materialFilledButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonTheme.key) : null),
          data: (tree.materialFilledButtonTheme.hasData() ? evaluateRequiredMaterialFilledButtonThemeDataType(tree.materialFilledButtonTheme.data) : missing('data')),
          child: (tree.materialFilledButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialFilledButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialFlexibleSpaceBarSettings:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBarSettings(
          key: (tree.materialFlexibleSpaceBarSettings.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBarSettings.key) : null),
          toolbarOpacity: (tree.materialFlexibleSpaceBarSettings.hasToolbarOpacity() ? tree.materialFlexibleSpaceBarSettings.toolbarOpacity : missing('toolbarOpacity')),
          minExtent: (tree.materialFlexibleSpaceBarSettings.hasMinExtent() ? tree.materialFlexibleSpaceBarSettings.minExtent : missing('minExtent')),
          maxExtent: (tree.materialFlexibleSpaceBarSettings.hasMaxExtent() ? tree.materialFlexibleSpaceBarSettings.maxExtent : missing('maxExtent')),
          currentExtent: (tree.materialFlexibleSpaceBarSettings.hasCurrentExtent() ? tree.materialFlexibleSpaceBarSettings.currentExtent : missing('currentExtent')),
          child: (tree.materialFlexibleSpaceBarSettings.hasChild() ? evaluateRequiredWidgetType(tree.materialFlexibleSpaceBarSettings.child) : missing('child')),
          isScrolledUnder: (tree.materialFlexibleSpaceBarSettings.hasIsScrolledUnder() ? tree.materialFlexibleSpaceBarSettings.isScrolledUnder : null),
          hasLeading: (tree.materialFlexibleSpaceBarSettings.hasHasLeading() ? tree.materialFlexibleSpaceBarSettings.hasLeading : null));
    case messages.FlutterInheritedWidgetType_Constructor.materialIconButtonTheme:
      return $flutterSrcMaterialIconButtonTheme.IconButtonTheme(
          key: (tree.materialIconButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonTheme.key) : null),
          data: (tree.materialIconButtonTheme.hasData() ? evaluateRequiredMaterialIconButtonThemeDataType(tree.materialIconButtonTheme.data) : missing('data')),
          child: (tree.materialIconButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialIconButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialListTileTheme:
      return $flutterSrcMaterialListTileTheme.ListTileTheme(
          key: (tree.materialListTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialListTileTheme.key) : null),
          data: (tree.materialListTileTheme.hasData() ? evaluateMaterialListTileThemeDataType(tree.materialListTileTheme.data) : null),
          dense: (tree.materialListTileTheme.hasDense() ? tree.materialListTileTheme.dense : null),
          shape: (tree.materialListTileTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTileTheme.shape) : null),
          style: (tree.materialListTileTheme.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTileTheme.style) : null),
          selectedColor: (tree.materialListTileTheme.hasSelectedColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedColor) : null),
          iconColor: (tree.materialListTileTheme.hasIconColor() ? evaluateDartColorType(tree.materialListTileTheme.iconColor) : null),
          textColor: (tree.materialListTileTheme.hasTextColor() ? evaluateDartColorType(tree.materialListTileTheme.textColor) : null),
          contentPadding: (tree.materialListTileTheme.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTileTheme.contentPadding) : null),
          tileColor: (tree.materialListTileTheme.hasTileColor() ? evaluateDartColorType(tree.materialListTileTheme.tileColor) : null),
          selectedTileColor: (tree.materialListTileTheme.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedTileColor) : null),
          enableFeedback: (tree.materialListTileTheme.hasEnableFeedback() ? tree.materialListTileTheme.enableFeedback : null),
          mouseCursor: null,
          horizontalTitleGap: (tree.materialListTileTheme.hasHorizontalTitleGap() ? tree.materialListTileTheme.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTileTheme.hasMinVerticalPadding() ? tree.materialListTileTheme.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTileTheme.hasMinLeadingWidth() ? tree.materialListTileTheme.minLeadingWidth : null),
          child: (tree.materialListTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialListTileTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialMaterialBannerTheme:
      return $flutterSrcMaterialBannerTheme.MaterialBannerTheme(
          key: (tree.materialMaterialBannerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBannerTheme.key) : null),
          data: (tree.materialMaterialBannerTheme.hasData() ? evaluateMaterialMaterialBannerThemeDataType(tree.materialMaterialBannerTheme.data) : null),
          child: (tree.materialMaterialBannerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMaterialBannerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialMenuAcceleratorCallbackBinding:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorCallbackBinding(
          key: (tree.materialMenuAcceleratorCallbackBinding.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorCallbackBinding.key) : null),
          onInvoke: null,
          hasSubmenu: (tree.materialMenuAcceleratorCallbackBinding.hasHasSubmenu() ? tree.materialMenuAcceleratorCallbackBinding.hasSubmenu : false),
          child: (tree.materialMenuAcceleratorCallbackBinding.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuAcceleratorCallbackBinding.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialMenuBarTheme:
      return $flutterSrcMaterialMenuBarTheme.MenuBarTheme(
          key: (tree.materialMenuBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBarTheme.key) : null),
          data: (tree.materialMenuBarTheme.hasData() ? evaluateRequiredMaterialMenuBarThemeDataType(tree.materialMenuBarTheme.data) : missing('data')),
          child: (tree.materialMenuBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuBarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialMenuButtonTheme:
      return $flutterSrcMaterialMenuButtonTheme.MenuButtonTheme(
          key: (tree.materialMenuButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuButtonTheme.key) : null),
          data: (tree.materialMenuButtonTheme.hasData() ? evaluateRequiredMaterialMenuButtonThemeDataType(tree.materialMenuButtonTheme.data) : missing('data')),
          child: (tree.materialMenuButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialMenuTheme:
      return $flutterSrcMaterialMenuTheme.MenuTheme(
          key: (tree.materialMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuTheme.key) : null),
          data: (tree.materialMenuTheme.hasData() ? evaluateRequiredMaterialMenuThemeDataType(tree.materialMenuTheme.data) : missing('data')),
          child: (tree.materialMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialNavigationBarTheme:
      return $flutterSrcMaterialNavigationBarTheme.NavigationBarTheme(
          key: (tree.materialNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBarTheme.key) : null),
          data: (tree.materialNavigationBarTheme.hasData() ? evaluateRequiredMaterialNavigationBarThemeDataType(tree.materialNavigationBarTheme.data) : missing('data')),
          child: (tree.materialNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationBarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialNavigationDrawerTheme:
      return $flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerTheme(
          key: (tree.materialNavigationDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerTheme.key) : null),
          data: (tree.materialNavigationDrawerTheme.hasData() ? evaluateRequiredMaterialNavigationDrawerThemeDataType(tree.materialNavigationDrawerTheme.data) : missing('data')),
          child: (tree.materialNavigationDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialNavigationRailTheme:
      return $flutterSrcMaterialNavigationRailTheme.NavigationRailTheme(
          key: (tree.materialNavigationRailTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRailTheme.key) : null),
          data: (tree.materialNavigationRailTheme.hasData() ? evaluateRequiredMaterialNavigationRailThemeDataType(tree.materialNavigationRailTheme.data) : missing('data')),
          child: (tree.materialNavigationRailTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationRailTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialOutlinedButtonTheme:
      return $flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonTheme(
          key: (tree.materialOutlinedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonTheme.key) : null),
          data: (tree.materialOutlinedButtonTheme.hasData() ? evaluateRequiredMaterialOutlinedButtonThemeDataType(tree.materialOutlinedButtonTheme.data) : missing('data')),
          child: (tree.materialOutlinedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialPopupMenuTheme:
      return $flutterSrcMaterialPopupMenuTheme.PopupMenuTheme(
          key: (tree.materialPopupMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuTheme.key) : null),
          data: (tree.materialPopupMenuTheme.hasData() ? evaluateRequiredMaterialPopupMenuThemeDataType(tree.materialPopupMenuTheme.data) : missing('data')),
          child: (tree.materialPopupMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialPopupMenuTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialProgressIndicatorTheme:
      return $flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorTheme(
          key: (tree.materialProgressIndicatorTheme.hasKey() ? evaluateFlutterKeyType(tree.materialProgressIndicatorTheme.key) : null),
          data: (tree.materialProgressIndicatorTheme.hasData() ? evaluateRequiredMaterialProgressIndicatorThemeDataType(tree.materialProgressIndicatorTheme.data) : missing('data')),
          child: (tree.materialProgressIndicatorTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialProgressIndicatorTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialRadioTheme:
      return $flutterSrcMaterialRadioTheme.RadioTheme(
          key: (tree.materialRadioTheme.hasKey() ? evaluateFlutterKeyType(tree.materialRadioTheme.key) : null),
          data: (tree.materialRadioTheme.hasData() ? evaluateRequiredMaterialRadioThemeDataType(tree.materialRadioTheme.data) : missing('data')),
          child: (tree.materialRadioTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialRadioTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialScrollbarTheme:
      return $flutterSrcMaterialScrollbarTheme.ScrollbarTheme(
          key: (tree.materialScrollbarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbarTheme.key) : null),
          data: (tree.materialScrollbarTheme.hasData() ? evaluateRequiredMaterialScrollbarThemeDataType(tree.materialScrollbarTheme.data) : missing('data')),
          child: (tree.materialScrollbarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialSearchBarTheme:
      return $flutterSrcMaterialSearchBarTheme.SearchBarTheme(
          key: (tree.materialSearchBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBarTheme.key) : null),
          data: (tree.materialSearchBarTheme.hasData() ? evaluateRequiredMaterialSearchBarThemeDataType(tree.materialSearchBarTheme.data) : missing('data')),
          child: (tree.materialSearchBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchBarTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialSearchViewTheme:
      return $flutterSrcMaterialSearchViewTheme.SearchViewTheme(
          key: (tree.materialSearchViewTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchViewTheme.key) : null),
          data: (tree.materialSearchViewTheme.hasData() ? evaluateRequiredMaterialSearchViewThemeDataType(tree.materialSearchViewTheme.data) : missing('data')),
          child: (tree.materialSearchViewTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchViewTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialSegmentedButtonTheme:
      return $flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonTheme(
          key: (tree.materialSegmentedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSegmentedButtonTheme.key) : null),
          data: (tree.materialSegmentedButtonTheme.hasData() ? evaluateRequiredMaterialSegmentedButtonThemeDataType(tree.materialSegmentedButtonTheme.data) : missing('data')),
          child: (tree.materialSegmentedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSegmentedButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialSliderTheme:
      return $flutterSrcMaterialSliderTheme.SliderTheme(
          key: (tree.materialSliderTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSliderTheme.key) : null),
          data: (tree.materialSliderTheme.hasData() ? evaluateRequiredMaterialSliderThemeDataType(tree.materialSliderTheme.data) : missing('data')),
          child: (tree.materialSliderTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSliderTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialSwitchTheme:
      return $flutterSrcMaterialSwitchTheme.SwitchTheme(
          key: (tree.materialSwitchTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchTheme.key) : null),
          data: (tree.materialSwitchTheme.hasData() ? evaluateRequiredMaterialSwitchThemeDataType(tree.materialSwitchTheme.data) : missing('data')),
          child: (tree.materialSwitchTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSwitchTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialTextButtonTheme:
      return $flutterSrcMaterialTextButtonTheme.TextButtonTheme(
          key: (tree.materialTextButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonTheme.key) : null),
          data: (tree.materialTextButtonTheme.hasData() ? evaluateRequiredMaterialTextButtonThemeDataType(tree.materialTextButtonTheme.data) : missing('data')),
          child: (tree.materialTextButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButtonTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialTextSelectionTheme:
      return $flutterSrcMaterialTextSelectionTheme.TextSelectionTheme(
          key: (tree.materialTextSelectionTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionTheme.key) : null),
          data: (tree.materialTextSelectionTheme.hasData() ? evaluateRequiredMaterialTextSelectionThemeDataType(tree.materialTextSelectionTheme.data) : missing('data')),
          child: (tree.materialTextSelectionTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialTimePickerTheme:
      return $flutterSrcMaterialTimePickerTheme.TimePickerTheme(
          key: (tree.materialTimePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerTheme.key) : null),
          data: (tree.materialTimePickerTheme.hasData() ? evaluateRequiredMaterialTimePickerThemeDataType(tree.materialTimePickerTheme.data) : missing('data')),
          child: (tree.materialTimePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTimePickerTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialToggleButtonsTheme:
      return $flutterSrcMaterialToggleButtonsTheme.ToggleButtonsTheme(
          key: (tree.materialToggleButtonsTheme.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtonsTheme.key) : null),
          data: (tree.materialToggleButtonsTheme.hasData() ? evaluateRequiredMaterialToggleButtonsThemeDataType(tree.materialToggleButtonsTheme.data) : missing('data')),
          child: (tree.materialToggleButtonsTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialToggleButtonsTheme.child) : missing('child')));
    case messages.FlutterInheritedWidgetType_Constructor.materialTooltipTheme:
      return $flutterSrcMaterialTooltipTheme.TooltipTheme(
          key: (tree.materialTooltipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipTheme.key) : null),
          data: (tree.materialTooltipTheme.hasData() ? evaluateRequiredMaterialTooltipThemeDataType(tree.materialTooltipTheme.data) : missing('data')),
          child: (tree.materialTooltipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipTheme.child) : missing('child')));
    default:
      return null;
  }
}

$flutterSrcPaintingInlineSpan.InlineSpan evaluateRequiredFlutterInlineSpanType(messages.FlutterInlineSpanType tree) {
  final result = evaluateFlutterInlineSpanType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingInlineSpan.InlineSpan? evaluateFlutterInlineSpanType(messages.FlutterInlineSpanType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterInlineSpanType_Constructor.flutterTextSpan:
      return $flutterSrcPaintingTextSpan.TextSpan(
          text: (tree.flutterTextSpan.hasText() ? tree.flutterTextSpan.text : null),
          children: tree.flutterTextSpan.children.map((e) => evaluateRequiredFlutterInlineSpanType(e)).toList(),
          style: (tree.flutterTextSpan.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextSpan.style) : null),
          recognizer: (tree.flutterTextSpan.hasRecognizer() ? evaluateFlutterGestureRecognizerType(tree.flutterTextSpan.recognizer) : null),
          mouseCursor: null,
          onEnter: null,
          onExit: null,
          semanticsLabel: (tree.flutterTextSpan.hasSemanticsLabel() ? tree.flutterTextSpan.semanticsLabel : null),
          locale: (tree.flutterTextSpan.hasLocale() ? evaluateDartLocaleType(tree.flutterTextSpan.locale) : null),
          spellOut: (tree.flutterTextSpan.hasSpellOut() ? tree.flutterTextSpan.spellOut : null));
    case messages.FlutterInlineSpanType_Constructor.flutterWidgetSpan:
      return $flutterSrcWidgetsWidgetSpan.WidgetSpan(
          child: (tree.flutterWidgetSpan.hasChild() ? evaluateRequiredWidgetType(tree.flutterWidgetSpan.child) : missing('child')),
          alignment: (tree.flutterWidgetSpan.hasAlignment() ? enums.convertRequiredDartPlaceholderAlignmentType(tree.flutterWidgetSpan.alignment) : $dartUi.PlaceholderAlignment.bottom),
          baseline: (tree.flutterWidgetSpan.hasBaseline() ? enums.convertDartTextBaselineType(tree.flutterWidgetSpan.baseline) : null),
          style: (tree.flutterWidgetSpan.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetSpan.style) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsActions.Intent evaluateRequiredFlutterIntentType(messages.FlutterIntentType tree) {
  final result = evaluateFlutterIntentType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsActions.Intent? evaluateFlutterIntentType(messages.FlutterIntentType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterIntentType_Constructor.flutterActivateIntent:
      return $flutterSrcWidgetsActions.ActivateIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterAutocompleteNextOptionIntent:
      return $flutterSrcWidgetsAutocomplete.AutocompleteNextOptionIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterAutocompletePreviousOptionIntent:
      return $flutterSrcWidgetsAutocomplete.AutocompletePreviousOptionIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterButtonActivateIntent:
      return $flutterSrcWidgetsActions.ButtonActivateIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterCopySelectionTextIntentNamedCut:
      return $flutterSrcWidgetsTextEditingIntents.CopySelectionTextIntent.cut(
          (tree.flutterCopySelectionTextIntentNamedCut.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterCopySelectionTextIntentNamedCut.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterDeleteCharacterIntent:
      return $flutterSrcWidgetsTextEditingIntents.DeleteCharacterIntent(
          forward: (tree.flutterDeleteCharacterIntent.hasForward() ? tree.flutterDeleteCharacterIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterDeleteToLineBreakIntent:
      return $flutterSrcWidgetsTextEditingIntents.DeleteToLineBreakIntent(
          forward: (tree.flutterDeleteToLineBreakIntent.hasForward() ? tree.flutterDeleteToLineBreakIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterDeleteToNextWordBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.DeleteToNextWordBoundaryIntent(
          forward: (tree.flutterDeleteToNextWordBoundaryIntent.hasForward() ? tree.flutterDeleteToNextWordBoundaryIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterDirectionalFocusIntent:
      return $flutterSrcWidgetsFocusTraversal.DirectionalFocusIntent(
          (tree.flutterDirectionalFocusIntent.hasDirection() ? enums.convertRequiredFlutterTraversalDirectionType(tree.flutterDirectionalFocusIntent.direction) : missing('direction')),
          ignoreTextFields: (tree.flutterDirectionalFocusIntent.hasIgnoreTextFields() ? tree.flutterDirectionalFocusIntent.ignoreTextFields : true));
    case messages.FlutterIntentType_Constructor.flutterDismissIntent:
      return $flutterSrcWidgetsActions.DismissIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterDoNothingAndStopPropagationIntent:
      return $flutterSrcWidgetsActions.DoNothingAndStopPropagationIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterDoNothingAndStopPropagationTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.DoNothingAndStopPropagationTextIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterDoNothingIntent:
      return $flutterSrcWidgetsActions.DoNothingIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterExpandSelectionToDocumentBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExpandSelectionToDocumentBoundaryIntent(
          forward: (tree.flutterExpandSelectionToDocumentBoundaryIntent.hasForward() ? tree.flutterExpandSelectionToDocumentBoundaryIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterExpandSelectionToLineBreakIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExpandSelectionToLineBreakIntent(
          forward: (tree.flutterExpandSelectionToLineBreakIntent.hasForward() ? tree.flutterExpandSelectionToLineBreakIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionByCharacterIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionByCharacterIntent(
          forward: (tree.flutterExtendSelectionByCharacterIntent.hasForward() ? tree.flutterExtendSelectionByCharacterIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionByCharacterIntent.hasCollapseSelection() ? tree.flutterExtendSelectionByCharacterIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionByPageIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionByPageIntent(
          forward: (tree.flutterExtendSelectionByPageIntent.hasForward() ? tree.flutterExtendSelectionByPageIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToDocumentBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToDocumentBoundaryIntent(
          forward: (tree.flutterExtendSelectionToDocumentBoundaryIntent.hasForward() ? tree.flutterExtendSelectionToDocumentBoundaryIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionToDocumentBoundaryIntent.hasCollapseSelection() ? tree.flutterExtendSelectionToDocumentBoundaryIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToLineBreakIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToLineBreakIntent(
          forward: (tree.flutterExtendSelectionToLineBreakIntent.hasForward() ? tree.flutterExtendSelectionToLineBreakIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionToLineBreakIntent.hasCollapseSelection() ? tree.flutterExtendSelectionToLineBreakIntent.collapseSelection : missing('collapseSelection')),
          collapseAtReversal: (tree.flutterExtendSelectionToLineBreakIntent.hasCollapseAtReversal() ? tree.flutterExtendSelectionToLineBreakIntent.collapseAtReversal : false),
          continuesAtWrap: (tree.flutterExtendSelectionToLineBreakIntent.hasContinuesAtWrap() ? tree.flutterExtendSelectionToLineBreakIntent.continuesAtWrap : false));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToNextParagraphBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToNextParagraphBoundaryIntent(
          forward: (tree.flutterExtendSelectionToNextParagraphBoundaryIntent.hasForward() ? tree.flutterExtendSelectionToNextParagraphBoundaryIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionToNextParagraphBoundaryIntent.hasCollapseSelection() ? tree.flutterExtendSelectionToNextParagraphBoundaryIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent(
          forward: (tree.flutterExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent.hasForward() ? tree.flutterExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToNextWordBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToNextWordBoundaryIntent(
          forward: (tree.flutterExtendSelectionToNextWordBoundaryIntent.hasForward() ? tree.flutterExtendSelectionToNextWordBoundaryIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionToNextWordBoundaryIntent.hasCollapseSelection() ? tree.flutterExtendSelectionToNextWordBoundaryIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionToNextWordBoundaryOrCaretLocationIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionToNextWordBoundaryOrCaretLocationIntent(
          forward: (tree.flutterExtendSelectionToNextWordBoundaryOrCaretLocationIntent.hasForward() ? tree.flutterExtendSelectionToNextWordBoundaryOrCaretLocationIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionVerticallyToAdjacentLineIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionVerticallyToAdjacentLineIntent(
          forward: (tree.flutterExtendSelectionVerticallyToAdjacentLineIntent.hasForward() ? tree.flutterExtendSelectionVerticallyToAdjacentLineIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionVerticallyToAdjacentLineIntent.hasCollapseSelection() ? tree.flutterExtendSelectionVerticallyToAdjacentLineIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterExtendSelectionVerticallyToAdjacentPageIntent:
      return $flutterSrcWidgetsTextEditingIntents.ExtendSelectionVerticallyToAdjacentPageIntent(
          forward: (tree.flutterExtendSelectionVerticallyToAdjacentPageIntent.hasForward() ? tree.flutterExtendSelectionVerticallyToAdjacentPageIntent.forward : missing('forward')),
          collapseSelection: (tree.flutterExtendSelectionVerticallyToAdjacentPageIntent.hasCollapseSelection() ? tree.flutterExtendSelectionVerticallyToAdjacentPageIntent.collapseSelection : missing('collapseSelection')));
    case messages.FlutterIntentType_Constructor.flutterNextFocusIntent:
      return $flutterSrcWidgetsFocusTraversal.NextFocusIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterPasteTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.PasteTextIntent(
          (tree.flutterPasteTextIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterPasteTextIntent.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterPreviousFocusIntent:
      return $flutterSrcWidgetsFocusTraversal.PreviousFocusIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterPrioritizedIntents:
      return $flutterSrcWidgetsActions.PrioritizedIntents(
          orderedIntents: tree.flutterPrioritizedIntents.orderedIntents.map((e) => evaluateRequiredFlutterIntentType(e)).toList());
    case messages.FlutterIntentType_Constructor.flutterRedoTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.RedoTextIntent(
          (tree.flutterRedoTextIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterRedoTextIntent.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterReplaceTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.ReplaceTextIntent(
          (tree.flutterReplaceTextIntent.hasCurrentTextEditingValue() ? evaluateRequiredFlutterTextEditingValueType(tree.flutterReplaceTextIntent.currentTextEditingValue) : missing('currentTextEditingValue')),
          (tree.flutterReplaceTextIntent.hasReplacementText() ? tree.flutterReplaceTextIntent.replacementText : missing('replacementText')),
          (tree.flutterReplaceTextIntent.hasReplacementRange() ? evaluateRequiredDartTextRangeType(tree.flutterReplaceTextIntent.replacementRange) : missing('replacementRange')),
          (tree.flutterReplaceTextIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterReplaceTextIntent.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterRequestFocusIntent:
      return $flutterSrcWidgetsFocusTraversal.RequestFocusIntent(
          (tree.flutterRequestFocusIntent.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterRequestFocusIntent.focusNode) : missing('focusNode')),
          requestFocusCallback: null);
    case messages.FlutterIntentType_Constructor.flutterScrollIntent:
      return $flutterSrcWidgetsScrollableHelpers.ScrollIntent(
          direction: (tree.flutterScrollIntent.hasDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterScrollIntent.direction) : missing('direction')),
          type: (tree.flutterScrollIntent.hasType() ? enums.convertRequiredFlutterScrollIncrementTypeType(tree.flutterScrollIntent.type) : $flutterSrcWidgetsScrollableHelpers.ScrollIncrementType.line));
    case messages.FlutterIntentType_Constructor.flutterScrollToDocumentBoundaryIntent:
      return $flutterSrcWidgetsTextEditingIntents.ScrollToDocumentBoundaryIntent(
          forward: (tree.flutterScrollToDocumentBoundaryIntent.hasForward() ? tree.flutterScrollToDocumentBoundaryIntent.forward : missing('forward')));
    case messages.FlutterIntentType_Constructor.flutterSelectAllTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.SelectAllTextIntent(
          (tree.flutterSelectAllTextIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterSelectAllTextIntent.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterSelectIntent:
      return $flutterSrcWidgetsActions.SelectIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterTransposeCharactersIntent:
      return $flutterSrcWidgetsTextEditingIntents.TransposeCharactersIntent(
          );
    case messages.FlutterIntentType_Constructor.flutterUndoTextIntent:
      return $flutterSrcWidgetsTextEditingIntents.UndoTextIntent(
          (tree.flutterUndoTextIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterUndoTextIntent.cause) : missing('cause')));
    case messages.FlutterIntentType_Constructor.flutterUpdateSelectionIntent:
      return $flutterSrcWidgetsTextEditingIntents.UpdateSelectionIntent(
          (tree.flutterUpdateSelectionIntent.hasCurrentTextEditingValue() ? evaluateRequiredFlutterTextEditingValueType(tree.flutterUpdateSelectionIntent.currentTextEditingValue) : missing('currentTextEditingValue')),
          (tree.flutterUpdateSelectionIntent.hasNewSelection() ? evaluateRequiredFlutterTextSelectionType(tree.flutterUpdateSelectionIntent.newSelection) : missing('newSelection')),
          (tree.flutterUpdateSelectionIntent.hasCause() ? enums.convertRequiredFlutterSelectionChangedCauseType(tree.flutterUpdateSelectionIntent.cause) : missing('cause')));
    default:
      return null;
  }
}

$flutterSrcFoundationKey.Key evaluateRequiredFlutterKeyType(messages.FlutterKeyType tree) {
  final result = evaluateFlutterKeyType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcFoundationKey.Key? evaluateFlutterKeyType(messages.FlutterKeyType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterKeyType_Constructor.flutterGlobalKey:
      return $flutterSrcWidgetsFramework.GlobalKey(
          debugLabel: (tree.flutterGlobalKey.hasDebugLabel() ? tree.flutterGlobalKey.debugLabel : null));
    case messages.FlutterKeyType_Constructor.flutterKey:
      return $flutterSrcFoundationKey.Key(
          (tree.flutterKey.hasValue() ? tree.flutterKey.value : missing('value')));
    case messages.FlutterKeyType_Constructor.flutterLabeledGlobalKey:
      return $flutterSrcWidgetsFramework.LabeledGlobalKey(
          (tree.flutterLabeledGlobalKey.hasDebugLabel() ? tree.flutterLabeledGlobalKey.debugLabel : null));
    case messages.FlutterKeyType_Constructor.flutterObjectKey:
      return $flutterSrcWidgetsFramework.ObjectKey(
          null);
    case messages.FlutterKeyType_Constructor.flutterUniqueKey:
      return $flutterSrcFoundationKey.UniqueKey(
          );
    default:
      return null;
  }
}

$flutterSrcRenderingLayer.LayerLink evaluateRequiredFlutterLayerLinkType(messages.FlutterLayerLinkType tree) {
  final result = evaluateFlutterLayerLinkType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingLayer.LayerLink? evaluateFlutterLayerLinkType(messages.FlutterLayerLinkType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterLayerLinkType_Constructor.flutterLayerLink:
      return $flutterSrcRenderingLayer.LayerLink(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.LeafRenderObjectWidget evaluateRequiredFlutterLeafRenderObjectWidgetType(messages.FlutterLeafRenderObjectWidgetType tree) {
  final result = evaluateFlutterLeafRenderObjectWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.LeafRenderObjectWidget? evaluateFlutterLeafRenderObjectWidgetType(messages.FlutterLeafRenderObjectWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterErrorWidgetNamedWithDetails:
      return $flutterSrcWidgetsFramework.ErrorWidget.withDetails(
          message: (tree.flutterErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterErrorWidgetNamedWithDetails.message : ''),
          error: (tree.flutterErrorWidgetNamedWithDetails.hasError() ? evaluateFlutterFlutterErrorType(tree.flutterErrorWidgetNamedWithDetails.error) : null));
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterPerformanceOverlay:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay(
          key: (tree.flutterPerformanceOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlay.key) : null),
          optionsMask: (tree.flutterPerformanceOverlay.hasOptionsMask() ? tree.flutterPerformanceOverlay.optionsMask : 0),
          rasterizerThreshold: (tree.flutterPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterPerformanceOverlay.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlay.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlay.checkerboardOffscreenLayers : false));
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterPerformanceOverlayNamedAllEnabled:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay.allEnabled(
          key: (tree.flutterPerformanceOverlayNamedAllEnabled.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlayNamedAllEnabled.key) : null),
          rasterizerThreshold: (tree.flutterPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterRawImage:
      return $flutterSrcWidgetsBasic.RawImage(
          key: (tree.flutterRawImage.hasKey() ? evaluateFlutterKeyType(tree.flutterRawImage.key) : null),
          image: null,
          debugImageLabel: (tree.flutterRawImage.hasDebugImageLabel() ? tree.flutterRawImage.debugImageLabel : null),
          width: (tree.flutterRawImage.hasWidth() ? tree.flutterRawImage.width : null),
          height: (tree.flutterRawImage.hasHeight() ? tree.flutterRawImage.height : null),
          scale: (tree.flutterRawImage.hasScale() ? tree.flutterRawImage.scale : 1.0),
          color: (tree.flutterRawImage.hasColor() ? evaluateDartColorType(tree.flutterRawImage.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterRawImage.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterRawImage.colorBlendMode) : null),
          fit: (tree.flutterRawImage.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterRawImage.fit) : null),
          alignment: (tree.flutterRawImage.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRawImage.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterRawImage.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterRawImage.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterRawImage.hasCenterSlice() ? evaluateDartRectType(tree.flutterRawImage.centerSlice) : null),
          matchTextDirection: (tree.flutterRawImage.hasMatchTextDirection() ? tree.flutterRawImage.matchTextDirection : false),
          invertColors: (tree.flutterRawImage.hasInvertColors() ? tree.flutterRawImage.invertColors : false),
          filterQuality: (tree.flutterRawImage.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterRawImage.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterRawImage.hasIsAntiAlias() ? tree.flutterRawImage.isAntiAlias : false));
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterTexture:
      return $flutterSrcWidgetsTexture.Texture(
          key: (tree.flutterTexture.hasKey() ? evaluateFlutterKeyType(tree.flutterTexture.key) : null),
          textureId: (tree.flutterTexture.hasTextureId() ? tree.flutterTexture.textureId : missing('textureId')),
          freeze: (tree.flutterTexture.hasFreeze_4() ? tree.flutterTexture.freeze_4 : false),
          filterQuality: (tree.flutterTexture.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTexture.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterLeafRenderObjectWidgetType_Constructor.flutterWidgetToRenderBoxAdapter:
      return $flutterSrcWidgetsBasic.WidgetToRenderBoxAdapter(
          renderBox: (tree.flutterWidgetToRenderBoxAdapter.hasRenderBox() ? evaluateRequiredFlutterRenderBoxType(tree.flutterWidgetToRenderBoxAdapter.renderBox) : missing('renderBox')),
          onBuild: null,
          onUnmount: null);
    default:
      return null;
  }
}

$flutterSrcPaintingLinearBorder.LinearBorderEdge evaluateRequiredFlutterLinearBorderEdgeType(messages.FlutterLinearBorderEdgeType tree) {
  final result = evaluateFlutterLinearBorderEdgeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingLinearBorder.LinearBorderEdge? evaluateFlutterLinearBorderEdgeType(messages.FlutterLinearBorderEdgeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterLinearBorderEdgeType_Constructor.flutterLinearBorderEdge:
      return $flutterSrcPaintingLinearBorder.LinearBorderEdge(
          size: (tree.flutterLinearBorderEdge.hasSize() ? tree.flutterLinearBorderEdge.size : 1.0),
          alignment: (tree.flutterLinearBorderEdge.hasAlignment() ? tree.flutterLinearBorderEdge.alignment : 0.0));
    default:
      return null;
  }
}

$flutterSrcWidgetsListWheelScrollView.ListWheelChildDelegate evaluateRequiredFlutterListWheelChildDelegateType(messages.FlutterListWheelChildDelegateType tree) {
  final result = evaluateFlutterListWheelChildDelegateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsListWheelScrollView.ListWheelChildDelegate? evaluateFlutterListWheelChildDelegateType(messages.FlutterListWheelChildDelegateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterListWheelChildDelegateType_Constructor.flutterListWheelChildListDelegate:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelChildListDelegate(
          children: tree.flutterListWheelChildListDelegate.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterListWheelChildDelegateType_Constructor.flutterListWheelChildLoopingListDelegate:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelChildLoopingListDelegate(
          children: tree.flutterListWheelChildLoopingListDelegate.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcRenderingListWheelViewport.ListWheelChildManager evaluateRequiredFlutterListWheelChildManagerType(messages.FlutterListWheelChildManagerType tree) {
  final result = evaluateFlutterListWheelChildManagerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingListWheelViewport.ListWheelChildManager? evaluateFlutterListWheelChildManagerType(messages.FlutterListWheelChildManagerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterListWheelChildManagerType_Constructor.flutterListWheelElement:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelElement(
          (tree.flutterListWheelElement.hasWidget() ? evaluateRequiredFlutterListWheelViewportType(tree.flutterListWheelElement.widget) : missing('widget')));
    default:
      return null;
  }
}

$flutterSrcWidgetsListWheelScrollView.ListWheelViewport evaluateRequiredFlutterListWheelViewportType(messages.FlutterListWheelViewportType tree) {
  final result = evaluateFlutterListWheelViewportType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsListWheelScrollView.ListWheelViewport? evaluateFlutterListWheelViewportType(messages.FlutterListWheelViewportType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterListWheelViewportType_Constructor.flutterListWheelViewport:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelViewport(
          key: (tree.flutterListWheelViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelViewport.key) : null),
          diameterRatio: (tree.flutterListWheelViewport.hasDiameterRatio() ? tree.flutterListWheelViewport.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelViewport.hasPerspective() ? tree.flutterListWheelViewport.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelViewport.hasOffAxisFraction() ? tree.flutterListWheelViewport.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelViewport.hasUseMagnifier() ? tree.flutterListWheelViewport.useMagnifier : false),
          magnification: (tree.flutterListWheelViewport.hasMagnification() ? tree.flutterListWheelViewport.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelViewport.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelViewport.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelViewport.hasItemExtent() ? tree.flutterListWheelViewport.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelViewport.hasSqueeze() ? tree.flutterListWheelViewport.squeeze : 1.0),
          renderChildrenOutsideViewport: (tree.flutterListWheelViewport.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelViewport.renderChildrenOutsideViewport : false),
          offset: (tree.flutterListWheelViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterListWheelViewport.offset) : missing('offset')),
          childDelegate: (tree.flutterListWheelViewport.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelViewport.childDelegate) : missing('childDelegate')),
          clipBehavior: (tree.flutterListWheelViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    default:
      return null;
  }
}

$flutterSrcFoundationKey.LocalKey evaluateRequiredFlutterLocalKeyType(messages.FlutterLocalKeyType tree) {
  final result = evaluateFlutterLocalKeyType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcFoundationKey.LocalKey? evaluateFlutterLocalKeyType(messages.FlutterLocalKeyType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterLocalKeyType_Constructor.flutterObjectKey:
      return $flutterSrcWidgetsFramework.ObjectKey(
          null);
    case messages.FlutterLocalKeyType_Constructor.flutterUniqueKey:
      return $flutterSrcFoundationKey.UniqueKey(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsMagnifier.MagnifierDecoration evaluateRequiredFlutterMagnifierDecorationType(messages.FlutterMagnifierDecorationType tree) {
  final result = evaluateFlutterMagnifierDecorationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsMagnifier.MagnifierDecoration? evaluateFlutterMagnifierDecorationType(messages.FlutterMagnifierDecorationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterMagnifierDecorationType_Constructor.flutterMagnifierDecoration:
      return $flutterSrcWidgetsMagnifier.MagnifierDecoration(
          opacity: (tree.flutterMagnifierDecoration.hasOpacity() ? tree.flutterMagnifierDecoration.opacity : 1),
          shadows: tree.flutterMagnifierDecoration.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          shape: (tree.flutterMagnifierDecoration.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.flutterMagnifierDecoration.shape) : missing('shape')));
    default:
      return null;
  }
}

$flutterSrcWidgetsMediaQuery.MediaQueryData evaluateRequiredFlutterMediaQueryDataType(messages.FlutterMediaQueryDataType tree) {
  final result = evaluateFlutterMediaQueryDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsMediaQuery.MediaQueryData? evaluateFlutterMediaQueryDataType(messages.FlutterMediaQueryDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterMediaQueryDataType_Constructor.flutterMediaQueryData:
      if(tree.flutterMediaQueryData.hasTextScaler()) {
        return $flutterSrcWidgetsMediaQuery.MediaQueryData(
            size: (tree.flutterMediaQueryData.hasSize() ? evaluateRequiredDartSizeType(tree.flutterMediaQueryData.size) : $dartUi.Size.zero),
            devicePixelRatio: (tree.flutterMediaQueryData.hasDevicePixelRatio() ? tree.flutterMediaQueryData.devicePixelRatio : 1.0),
            textScaler: (tree.flutterMediaQueryData.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterMediaQueryData.textScaler) : missing('textScaler')),
            platformBrightness: (tree.flutterMediaQueryData.hasPlatformBrightness() ? enums.convertRequiredDartBrightnessType(tree.flutterMediaQueryData.platformBrightness) : $dartUi.Brightness.light),
            padding: (tree.flutterMediaQueryData.hasPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            viewInsets: (tree.flutterMediaQueryData.hasViewInsets() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.viewInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            systemGestureInsets: (tree.flutterMediaQueryData.hasSystemGestureInsets() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.systemGestureInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            viewPadding: (tree.flutterMediaQueryData.hasViewPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.viewPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            alwaysUse24HourFormat: (tree.flutterMediaQueryData.hasAlwaysUse24HourFormat() ? tree.flutterMediaQueryData.alwaysUse24HourFormat : false),
            accessibleNavigation: (tree.flutterMediaQueryData.hasAccessibleNavigation() ? tree.flutterMediaQueryData.accessibleNavigation : false),
            invertColors: (tree.flutterMediaQueryData.hasInvertColors() ? tree.flutterMediaQueryData.invertColors : false),
            highContrast: (tree.flutterMediaQueryData.hasHighContrast() ? tree.flutterMediaQueryData.highContrast : false),
            onOffSwitchLabels: (tree.flutterMediaQueryData.hasOnOffSwitchLabels() ? tree.flutterMediaQueryData.onOffSwitchLabels : false),
            disableAnimations: (tree.flutterMediaQueryData.hasDisableAnimations() ? tree.flutterMediaQueryData.disableAnimations : false),
            boldText: (tree.flutterMediaQueryData.hasBoldText() ? tree.flutterMediaQueryData.boldText : false),
            navigationMode: (tree.flutterMediaQueryData.hasNavigationMode() ? enums.convertRequiredFlutterNavigationModeType(tree.flutterMediaQueryData.navigationMode) : $flutterSrcWidgetsMediaQuery.NavigationMode.traditional),
            gestureSettings: (tree.flutterMediaQueryData.hasGestureSettings() ? evaluateRequiredFlutterDeviceGestureSettingsType(tree.flutterMediaQueryData.gestureSettings) : $flutterSrcGesturesGestureSettings.DeviceGestureSettings(touchSlop: $flutterSrcGesturesConstants.kTouchSlop)),
            displayFeatures: tree.flutterMediaQueryData.displayFeatures.map((e) => evaluateRequiredDartDisplayFeatureType(e)).toList());
      } else {
        return $flutterSrcWidgetsMediaQuery.MediaQueryData(
            size: (tree.flutterMediaQueryData.hasSize() ? evaluateRequiredDartSizeType(tree.flutterMediaQueryData.size) : $dartUi.Size.zero),
            devicePixelRatio: (tree.flutterMediaQueryData.hasDevicePixelRatio() ? tree.flutterMediaQueryData.devicePixelRatio : 1.0),
            platformBrightness: (tree.flutterMediaQueryData.hasPlatformBrightness() ? enums.convertRequiredDartBrightnessType(tree.flutterMediaQueryData.platformBrightness) : $dartUi.Brightness.light),
            padding: (tree.flutterMediaQueryData.hasPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            viewInsets: (tree.flutterMediaQueryData.hasViewInsets() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.viewInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            systemGestureInsets: (tree.flutterMediaQueryData.hasSystemGestureInsets() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.systemGestureInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            viewPadding: (tree.flutterMediaQueryData.hasViewPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterMediaQueryData.viewPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
            alwaysUse24HourFormat: (tree.flutterMediaQueryData.hasAlwaysUse24HourFormat() ? tree.flutterMediaQueryData.alwaysUse24HourFormat : false),
            accessibleNavigation: (tree.flutterMediaQueryData.hasAccessibleNavigation() ? tree.flutterMediaQueryData.accessibleNavigation : false),
            invertColors: (tree.flutterMediaQueryData.hasInvertColors() ? tree.flutterMediaQueryData.invertColors : false),
            highContrast: (tree.flutterMediaQueryData.hasHighContrast() ? tree.flutterMediaQueryData.highContrast : false),
            onOffSwitchLabels: (tree.flutterMediaQueryData.hasOnOffSwitchLabels() ? tree.flutterMediaQueryData.onOffSwitchLabels : false),
            disableAnimations: (tree.flutterMediaQueryData.hasDisableAnimations() ? tree.flutterMediaQueryData.disableAnimations : false),
            boldText: (tree.flutterMediaQueryData.hasBoldText() ? tree.flutterMediaQueryData.boldText : false),
            navigationMode: (tree.flutterMediaQueryData.hasNavigationMode() ? enums.convertRequiredFlutterNavigationModeType(tree.flutterMediaQueryData.navigationMode) : $flutterSrcWidgetsMediaQuery.NavigationMode.traditional),
            gestureSettings: (tree.flutterMediaQueryData.hasGestureSettings() ? evaluateRequiredFlutterDeviceGestureSettingsType(tree.flutterMediaQueryData.gestureSettings) : $flutterSrcGesturesGestureSettings.DeviceGestureSettings(touchSlop: $flutterSrcGesturesConstants.kTouchSlop)),
            displayFeatures: tree.flutterMediaQueryData.displayFeatures.map((e) => evaluateRequiredDartDisplayFeatureType(e)).toList());
      }
      
    case messages.FlutterMediaQueryDataType_Constructor.flutterMediaQueryDataNamedFromView:
      return $flutterSrcWidgetsMediaQuery.MediaQueryData.fromView(
          missing('view'),
          platformData: (tree.flutterMediaQueryDataNamedFromView.hasPlatformData() ? evaluateFlutterMediaQueryDataType(tree.flutterMediaQueryDataNamedFromView.platformData) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.MultiChildRenderObjectWidget evaluateRequiredFlutterMultiChildRenderObjectWidgetType(messages.FlutterMultiChildRenderObjectWidgetType tree) {
  final result = evaluateFlutterMultiChildRenderObjectWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.MultiChildRenderObjectWidget? evaluateFlutterMultiChildRenderObjectWidgetType(messages.FlutterMultiChildRenderObjectWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterColumn:
      return $flutterSrcWidgetsBasic.Column(
          key: (tree.flutterColumn.hasKey() ? evaluateFlutterKeyType(tree.flutterColumn.key) : null),
          mainAxisAlignment: (tree.flutterColumn.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterColumn.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterColumn.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterColumn.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterColumn.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterColumn.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterColumn.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterColumn.textDirection) : null),
          verticalDirection: (tree.flutterColumn.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterColumn.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterColumn.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterColumn.textBaseline) : null),
          children: tree.flutterColumn.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterCustomMultiChildLayout:
      return $flutterSrcWidgetsBasic.CustomMultiChildLayout(
          key: (tree.flutterCustomMultiChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomMultiChildLayout.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterCustomMultiChildLayout.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterFlex:
      return $flutterSrcWidgetsBasic.Flex(
          key: (tree.flutterFlex.hasKey() ? evaluateFlutterKeyType(tree.flutterFlex.key) : null),
          direction: (tree.flutterFlex.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterFlex.direction) : missing('direction')),
          mainAxisAlignment: (tree.flutterFlex.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterFlex.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterFlex.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterFlex.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterFlex.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterFlex.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterFlex.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterFlex.textDirection) : null),
          verticalDirection: (tree.flutterFlex.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterFlex.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterFlex.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterFlex.textBaseline) : null),
          clipBehavior: (tree.flutterFlex.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlex.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterFlex.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterFlow:
      return $flutterSrcWidgetsBasic.Flow(
          key: (tree.flutterFlow.hasKey() ? evaluateFlutterKeyType(tree.flutterFlow.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlow.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlow.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlow.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterFlowNamedUnwrapped:
      return $flutterSrcWidgetsBasic.Flow.unwrapped(
          key: (tree.flutterFlowNamedUnwrapped.hasKey() ? evaluateFlutterKeyType(tree.flutterFlowNamedUnwrapped.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlowNamedUnwrapped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlowNamedUnwrapped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlowNamedUnwrapped.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterListBody:
      return $flutterSrcWidgetsBasic.ListBody(
          key: (tree.flutterListBody.hasKey() ? evaluateFlutterKeyType(tree.flutterListBody.key) : null),
          mainAxis: (tree.flutterListBody.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.flutterListBody.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListBody.hasReverse() ? tree.flutterListBody.reverse : false),
          children: tree.flutterListBody.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterNestedScrollViewViewport:
      return $flutterSrcWidgetsNestedScrollView.NestedScrollViewViewport(
          key: (tree.flutterNestedScrollViewViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.key) : null),
          axisDirection: (tree.flutterNestedScrollViewViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterNestedScrollViewViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.crossAxisDirection) : null),
          anchor: (tree.flutterNestedScrollViewViewport.hasAnchor() ? tree.flutterNestedScrollViewViewport.anchor : 0.0),
          offset: (tree.flutterNestedScrollViewViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterNestedScrollViewViewport.offset) : missing('offset')),
          center: (tree.flutterNestedScrollViewViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.center) : null),
          slivers: tree.flutterNestedScrollViewViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          handle: (tree.flutterNestedScrollViewViewport.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterNestedScrollViewViewport.handle) : missing('handle')),
          clipBehavior: (tree.flutterNestedScrollViewViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNestedScrollViewViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterOverflowBar:
      return $flutterSrcWidgetsOverflowBar.OverflowBar(
          key: (tree.flutterOverflowBar.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBar.key) : null),
          spacing: (tree.flutterOverflowBar.hasSpacing() ? tree.flutterOverflowBar.spacing : 0.0),
          alignment: (tree.flutterOverflowBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.flutterOverflowBar.alignment) : null),
          overflowSpacing: (tree.flutterOverflowBar.hasOverflowSpacing() ? tree.flutterOverflowBar.overflowSpacing : 0.0),
          overflowAlignment: (tree.flutterOverflowBar.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.flutterOverflowBar.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.start),
          overflowDirection: (tree.flutterOverflowBar.hasOverflowDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterOverflowBar.overflowDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textDirection: (tree.flutterOverflowBar.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterOverflowBar.textDirection) : null),
          clipBehavior: (tree.flutterOverflowBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverflowBar.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterOverflowBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterRichText:
      return $flutterSrcWidgetsBasic.RichText(
          key: (tree.flutterRichText.hasKey() ? evaluateFlutterKeyType(tree.flutterRichText.key) : null),
          text: (tree.flutterRichText.hasText() ? evaluateRequiredFlutterInlineSpanType(tree.flutterRichText.text) : missing('text')),
          textAlign: (tree.flutterRichText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterRichText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterRichText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRichText.textDirection) : null),
          softWrap: (tree.flutterRichText.hasSoftWrap() ? tree.flutterRichText.softWrap : true),
          overflow: (tree.flutterRichText.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterRichText.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          textScaler: (tree.flutterRichText.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterRichText.textScaler) : $flutterSrcPaintingTextScaler.TextScaler.noScaling),
          maxLines: (tree.flutterRichText.hasMaxLines() ? tree.flutterRichText.maxLines : null),
          locale: (tree.flutterRichText.hasLocale() ? evaluateDartLocaleType(tree.flutterRichText.locale) : null),
          strutStyle: (tree.flutterRichText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterRichText.strutStyle) : null),
          textWidthBasis: (tree.flutterRichText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterRichText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterRichText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterRichText.textHeightBehavior) : null),
          selectionRegistrar: (tree.flutterRichText.hasSelectionRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterRichText.selectionRegistrar) : null),
          selectionColor: (tree.flutterRichText.hasSelectionColor() ? evaluateDartColorType(tree.flutterRichText.selectionColor) : null));
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterRow:
      return $flutterSrcWidgetsBasic.Row(
          key: (tree.flutterRow.hasKey() ? evaluateFlutterKeyType(tree.flutterRow.key) : null),
          mainAxisAlignment: (tree.flutterRow.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterRow.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterRow.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterRow.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterRow.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterRow.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRow.textDirection) : null),
          verticalDirection: (tree.flutterRow.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRow.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterRow.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRow.textBaseline) : null),
          children: tree.flutterRow.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterShrinkWrappingViewport:
      return $flutterSrcWidgetsViewport.ShrinkWrappingViewport(
          key: (tree.flutterShrinkWrappingViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterShrinkWrappingViewport.key) : null),
          axisDirection: (tree.flutterShrinkWrappingViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterShrinkWrappingViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.crossAxisDirection) : null),
          offset: (tree.flutterShrinkWrappingViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterShrinkWrappingViewport.offset) : missing('offset')),
          clipBehavior: (tree.flutterShrinkWrappingViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterShrinkWrappingViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterShrinkWrappingViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterSliverCrossAxisGroup:
      return $flutterSrcWidgetsSliver.SliverCrossAxisGroup(
          key: (tree.flutterSliverCrossAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverCrossAxisGroup.key) : null),
          slivers: tree.flutterSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterSliverMainAxisGroup:
      return $flutterSrcWidgetsSliver.SliverMainAxisGroup(
          key: (tree.flutterSliverMainAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverMainAxisGroup.key) : null),
          slivers: tree.flutterSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterStack:
      return $flutterSrcWidgetsBasic.Stack(
          key: (tree.flutterStack.hasKey() ? evaluateFlutterKeyType(tree.flutterStack.key) : null),
          alignment: (tree.flutterStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterStack.textDirection) : null),
          fit: (tree.flutterStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStack.clipBehavior) : $dartUi.Clip.hardEdge),
          children: tree.flutterStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterViewport:
      return $flutterSrcWidgetsViewport.Viewport(
          key: (tree.flutterViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterViewport.key) : null),
          axisDirection: (tree.flutterViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterViewport.crossAxisDirection) : null),
          anchor: (tree.flutterViewport.hasAnchor() ? tree.flutterViewport.anchor : 0.0),
          offset: (tree.flutterViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterViewport.offset) : missing('offset')),
          center: (tree.flutterViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterViewport.center) : null),
          cacheExtent: (tree.flutterViewport.hasCacheExtent() ? tree.flutterViewport.cacheExtent : null),
          cacheExtentStyle: (tree.flutterViewport.hasCacheExtentStyle() ? enums.convertRequiredFlutterCacheExtentStyleType(tree.flutterViewport.cacheExtentStyle) : $flutterSrcRenderingViewport.CacheExtentStyle.pixel),
          clipBehavior: (tree.flutterViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterMultiChildRenderObjectWidgetType_Constructor.flutterWrap:
      return $flutterSrcWidgetsBasic.Wrap(
          key: (tree.flutterWrap.hasKey() ? evaluateFlutterKeyType(tree.flutterWrap.key) : null),
          direction: (tree.flutterWrap.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterWrap.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          alignment: (tree.flutterWrap.hasAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.alignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          spacing: (tree.flutterWrap.hasSpacing() ? tree.flutterWrap.spacing : 0.0),
          runAlignment: (tree.flutterWrap.hasRunAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.runAlignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          runSpacing: (tree.flutterWrap.hasRunSpacing() ? tree.flutterWrap.runSpacing : 0.0),
          crossAxisAlignment: (tree.flutterWrap.hasCrossAxisAlignment() ? enums.convertRequiredFlutterWrapCrossAlignmentType(tree.flutterWrap.crossAxisAlignment) : $flutterSrcRenderingWrap.WrapCrossAlignment.start),
          textDirection: (tree.flutterWrap.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterWrap.textDirection) : null),
          verticalDirection: (tree.flutterWrap.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterWrap.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          clipBehavior: (tree.flutterWrap.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterWrap.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterWrap.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcWidgetsNavigator.NavigatorObserver evaluateRequiredFlutterNavigatorObserverType(messages.FlutterNavigatorObserverType tree) {
  final result = evaluateFlutterNavigatorObserverType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsNavigator.NavigatorObserver? evaluateFlutterNavigatorObserverType(messages.FlutterNavigatorObserverType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterNavigatorObserverType_Constructor.flutterHeroController:
      return $flutterSrcWidgetsHeroes.HeroController(
          createRectTween: null);
    case messages.FlutterNavigatorObserverType_Constructor.flutterNavigatorObserver:
      return $flutterSrcWidgetsNavigator.NavigatorObserver(
          );
    case messages.FlutterNavigatorObserverType_Constructor.flutterRouteObserver:
      return $flutterSrcWidgetsRoutes.RouteObserver(
          );
    default:
      return null;
  }
}

$flutterSrcPaintingNotchedShapes.NotchedShape evaluateRequiredFlutterNotchedShapeType(messages.FlutterNotchedShapeType tree) {
  final result = evaluateFlutterNotchedShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingNotchedShapes.NotchedShape? evaluateFlutterNotchedShapeType(messages.FlutterNotchedShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterNotchedShapeType_Constructor.flutterAutomaticNotchedShape:
      return $flutterSrcPaintingNotchedShapes.AutomaticNotchedShape(
          (tree.flutterAutomaticNotchedShape.hasHost() ? evaluateRequiredFlutterShapeBorderType(tree.flutterAutomaticNotchedShape.host) : missing('host')),
          (tree.flutterAutomaticNotchedShape.hasGuest() ? evaluateFlutterShapeBorderType(tree.flutterAutomaticNotchedShape.guest) : null));
    case messages.FlutterNotchedShapeType_Constructor.flutterCircularNotchedRectangle:
      return $flutterSrcPaintingNotchedShapes.CircularNotchedRectangle(
          );
    default:
      return null;
  }
}

$flutterSrcPaintingBorders.OutlinedBorder evaluateRequiredFlutterOutlinedBorderType(messages.FlutterOutlinedBorderType tree) {
  final result = evaluateFlutterOutlinedBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBorders.OutlinedBorder? evaluateFlutterOutlinedBorderType(messages.FlutterOutlinedBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterOutlinedBorderType_Constructor.flutterBeveledRectangleBorder:
      return $flutterSrcPaintingBeveledRectangleBorder.BeveledRectangleBorder(
          side: (tree.flutterBeveledRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterBeveledRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterBeveledRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterBeveledRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterOutlinedBorderType_Constructor.flutterCircleBorder:
      return $flutterSrcPaintingCircleBorder.CircleBorder(
          side: (tree.flutterCircleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterCircleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          eccentricity: (tree.flutterCircleBorder.hasEccentricity() ? tree.flutterCircleBorder.eccentricity : 0.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterContinuousRectangleBorder:
      return $flutterSrcPaintingContinuousRectangleBorder.ContinuousRectangleBorder(
          side: (tree.flutterContinuousRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterContinuousRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterContinuousRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterContinuousRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterOutlinedBorderType_Constructor.flutterLinearBorder:
      return $flutterSrcPaintingLinearBorder.LinearBorder(
          side: (tree.flutterLinearBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          start: (tree.flutterLinearBorder.hasStart() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.start) : null),
          end: (tree.flutterLinearBorder.hasEnd() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.end) : null),
          top: (tree.flutterLinearBorder.hasTop() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.top) : null),
          bottom: (tree.flutterLinearBorder.hasBottom() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.bottom) : null));
    case messages.FlutterOutlinedBorderType_Constructor.flutterLinearBorderNamedBottom:
      return $flutterSrcPaintingLinearBorder.LinearBorder.bottom(
          side: (tree.flutterLinearBorderNamedBottom.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedBottom.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedBottom.hasAlignment() ? tree.flutterLinearBorderNamedBottom.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedBottom.hasSize() ? tree.flutterLinearBorderNamedBottom.size : 1.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterLinearBorderNamedEnd:
      return $flutterSrcPaintingLinearBorder.LinearBorder.end(
          side: (tree.flutterLinearBorderNamedEnd.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedEnd.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedEnd.hasAlignment() ? tree.flutterLinearBorderNamedEnd.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedEnd.hasSize() ? tree.flutterLinearBorderNamedEnd.size : 1.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterLinearBorderNamedStart:
      return $flutterSrcPaintingLinearBorder.LinearBorder.start(
          side: (tree.flutterLinearBorderNamedStart.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedStart.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedStart.hasAlignment() ? tree.flutterLinearBorderNamedStart.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedStart.hasSize() ? tree.flutterLinearBorderNamedStart.size : 1.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterLinearBorderNamedTop:
      return $flutterSrcPaintingLinearBorder.LinearBorder.top(
          side: (tree.flutterLinearBorderNamedTop.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedTop.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedTop.hasAlignment() ? tree.flutterLinearBorderNamedTop.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedTop.hasSize() ? tree.flutterLinearBorderNamedTop.size : 1.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterOvalBorder:
      return $flutterSrcPaintingOvalBorder.OvalBorder(
          side: (tree.flutterOvalBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterOvalBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          eccentricity: (tree.flutterOvalBorder.hasEccentricity() ? tree.flutterOvalBorder.eccentricity : 0.0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterRoundedRectangleBorder:
      return $flutterSrcPaintingRoundedRectangleBorder.RoundedRectangleBorder(
          side: (tree.flutterRoundedRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterRoundedRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterRoundedRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterRoundedRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterOutlinedBorderType_Constructor.flutterStadiumBorder:
      return $flutterSrcPaintingStadiumBorder.StadiumBorder(
          side: (tree.flutterStadiumBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStadiumBorder.side) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterOutlinedBorderType_Constructor.flutterStarBorder:
      return $flutterSrcPaintingStarBorder.StarBorder(
          side: (tree.flutterStarBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStarBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          points: (tree.flutterStarBorder.hasPoints() ? tree.flutterStarBorder.points : 5),
          innerRadiusRatio: (tree.flutterStarBorder.hasInnerRadiusRatio() ? tree.flutterStarBorder.innerRadiusRatio : 0.4),
          pointRounding: (tree.flutterStarBorder.hasPointRounding() ? tree.flutterStarBorder.pointRounding : 0),
          valleyRounding: (tree.flutterStarBorder.hasValleyRounding() ? tree.flutterStarBorder.valleyRounding : 0),
          rotation: (tree.flutterStarBorder.hasRotation() ? tree.flutterStarBorder.rotation : 0),
          squash: (tree.flutterStarBorder.hasSquash() ? tree.flutterStarBorder.squash : 0));
    case messages.FlutterOutlinedBorderType_Constructor.flutterStarBorderNamedPolygon:
      return $flutterSrcPaintingStarBorder.StarBorder.polygon(
          side: (tree.flutterStarBorderNamedPolygon.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStarBorderNamedPolygon.side) : $flutterSrcPaintingBorders.BorderSide.none),
          sides: (tree.flutterStarBorderNamedPolygon.hasSides() ? tree.flutterStarBorderNamedPolygon.sides : 5),
          pointRounding: (tree.flutterStarBorderNamedPolygon.hasPointRounding() ? tree.flutterStarBorderNamedPolygon.pointRounding : 0),
          rotation: (tree.flutterStarBorderNamedPolygon.hasRotation() ? tree.flutterStarBorderNamedPolygon.rotation : 0),
          squash: (tree.flutterStarBorderNamedPolygon.hasSquash() ? tree.flutterStarBorderNamedPolygon.squash : 0));
    default:
      return null;
  }
}

$flutterSrcWidgetsPageView.PageController evaluateRequiredFlutterPageControllerType(messages.FlutterPageControllerType tree) {
  final result = evaluateFlutterPageControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsPageView.PageController? evaluateFlutterPageControllerType(messages.FlutterPageControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterPageControllerType_Constructor.flutterPageController:
      return $flutterSrcWidgetsPageView.PageController(
          initialPage: (tree.flutterPageController.hasInitialPage() ? tree.flutterPageController.initialPage : 0),
          keepPage: (tree.flutterPageController.hasKeepPage() ? tree.flutterPageController.keepPage : true),
          viewportFraction: (tree.flutterPageController.hasViewportFraction() ? tree.flutterPageController.viewportFraction : 1.0));
    default:
      return null;
  }
}

$flutterSrcWidgetsPageStorage.PageStorageBucket evaluateRequiredFlutterPageStorageBucketType(messages.FlutterPageStorageBucketType tree) {
  final result = evaluateFlutterPageStorageBucketType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsPageStorage.PageStorageBucket? evaluateFlutterPageStorageBucketType(messages.FlutterPageStorageBucketType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterPageStorageBucketType_Constructor.flutterPageStorageBucket:
      return $flutterSrcWidgetsPageStorage.PageStorageBucket(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsPlatformMenuBar.PlatformMenuItem evaluateRequiredFlutterPlatformMenuItemType(messages.FlutterPlatformMenuItemType tree) {
  final result = evaluateFlutterPlatformMenuItemType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsPlatformMenuBar.PlatformMenuItem? evaluateFlutterPlatformMenuItemType(messages.FlutterPlatformMenuItemType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterPlatformMenuItemType_Constructor.flutterPlatformMenu:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenu(
          label: (tree.flutterPlatformMenu.hasLabel() ? tree.flutterPlatformMenu.label : missing('label')),
          onOpen: null,
          onClose: null,
          menus: tree.flutterPlatformMenu.menus.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList());
    case messages.FlutterPlatformMenuItemType_Constructor.flutterPlatformMenuItem:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenuItem(
          label: (tree.flutterPlatformMenuItem.hasLabel() ? tree.flutterPlatformMenuItem.label : missing('label')),
          shortcut: null,
          onSelected: null,
          onSelectedIntent: (tree.flutterPlatformMenuItem.hasOnSelectedIntent() ? evaluateFlutterIntentType(tree.flutterPlatformMenuItem.onSelectedIntent) : null));
    case messages.FlutterPlatformMenuItemType_Constructor.flutterPlatformMenuItemGroup:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenuItemGroup(
          members: tree.flutterPlatformMenuItemGroup.members.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList());
    case messages.FlutterPlatformMenuItemType_Constructor.flutterPlatformProvidedMenuItem:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformProvidedMenuItem(
          type: (tree.flutterPlatformProvidedMenuItem.hasType() ? enums.convertRequiredFlutterPlatformProvidedMenuItemTypeType(tree.flutterPlatformProvidedMenuItem.type) : missing('type')),
          enabled: (tree.flutterPlatformProvidedMenuItem.hasEnabled() ? tree.flutterPlatformProvidedMenuItem.enabled : true));
    default:
      return null;
  }
}

$flutterSrcWidgetsPreferredSize.PreferredSizeWidget evaluateRequiredFlutterPreferredSizeWidgetType(messages.FlutterPreferredSizeWidgetType tree) {
  final result = evaluateFlutterPreferredSizeWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsPreferredSize.PreferredSizeWidget? evaluateFlutterPreferredSizeWidgetType(messages.FlutterPreferredSizeWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterPreferredSizeWidgetType_Constructor.cupertinoNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBar(
          key: (tree.cupertinoNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBar.key) : null),
          leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true),
          previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoNavigationBar.middle) : null),
          trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoNavigationBar.trailing) : null),
          border: (tree.cupertinoNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoNavigationBar.brightness) : null),
          padding: (tree.cupertinoNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    case messages.FlutterPreferredSizeWidgetType_Constructor.cupertinoTabBar:
      return $flutterSrcCupertinoBottomTabBar.CupertinoTabBar(
          key: (tree.cupertinoTabBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabBar.key) : null),
          items: tree.cupertinoTabBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.cupertinoTabBar.hasCurrentIndex() ? tree.cupertinoTabBar.currentIndex : 0),
          backgroundColor: (tree.cupertinoTabBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoTabBar.backgroundColor) : null),
          activeColor: (tree.cupertinoTabBar.hasActiveColor() ? evaluateDartColorType(tree.cupertinoTabBar.activeColor) : null),
          inactiveColor: (tree.cupertinoTabBar.hasInactiveColor() ? evaluateRequiredDartColorType(tree.cupertinoTabBar.inactiveColor) : $flutterSrcCupertinoColors.CupertinoColors.inactiveGray),
          iconSize: (tree.cupertinoTabBar.hasIconSize() ? tree.cupertinoTabBar.iconSize : 30.0),
          height: (tree.cupertinoTabBar.hasHeight() ? tree.cupertinoTabBar.height : 50.0),
          border: (tree.cupertinoTabBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoTabBar.border) : $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x4D000000), darkColor: $dartUi.Color(0x29000000)), width: 0.0))));
    case messages.FlutterPreferredSizeWidgetType_Constructor.flutterPreferredSize:
      return $flutterSrcWidgetsPreferredSize.PreferredSize(
          key: (tree.flutterPreferredSize.hasKey() ? evaluateFlutterKeyType(tree.flutterPreferredSize.key) : null),
          preferredSize: (tree.flutterPreferredSize.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterPreferredSize.preferredSize) : missing('preferredSize')),
          child: (tree.flutterPreferredSize.hasChild() ? evaluateRequiredWidgetType(tree.flutterPreferredSize.child) : missing('child')));
    case messages.FlutterPreferredSizeWidgetType_Constructor.materialAppBar:
      return $flutterSrcMaterialAppBar.AppBar(
          key: (tree.materialAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialAppBar.key) : null),
          leading: (tree.materialAppBar.hasLeading() ? evaluateWidgetType(tree.materialAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialAppBar.hasAutomaticallyImplyLeading() ? tree.materialAppBar.automaticallyImplyLeading : true),
          title: (tree.materialAppBar.hasTitle() ? evaluateWidgetType(tree.materialAppBar.title) : null),
          actions: tree.materialAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialAppBar.flexibleSpace) : null),
          bottom: (tree.materialAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialAppBar.bottom) : null),
          elevation: (tree.materialAppBar.hasElevation() ? tree.materialAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialAppBar.hasScrolledUnderElevation() ? tree.materialAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAppBar.surfaceTintColor) : null),
          shape: (tree.materialAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAppBar.shape) : null),
          backgroundColor: (tree.materialAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialAppBar.foregroundColor) : null),
          iconTheme: (tree.materialAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.actionsIconTheme) : null),
          primary: (tree.materialAppBar.hasPrimary() ? tree.materialAppBar.primary : true),
          centerTitle: (tree.materialAppBar.hasCenterTitle() ? tree.materialAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialAppBar.hasExcludeHeaderSemantics() ? tree.materialAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialAppBar.hasTitleSpacing() ? tree.materialAppBar.titleSpacing : null),
          toolbarOpacity: (tree.materialAppBar.hasToolbarOpacity() ? tree.materialAppBar.toolbarOpacity : 1.0),
          bottomOpacity: (tree.materialAppBar.hasBottomOpacity() ? tree.materialAppBar.bottomOpacity : 1.0),
          toolbarHeight: (tree.materialAppBar.hasToolbarHeight() ? tree.materialAppBar.toolbarHeight : null),
          leadingWidth: (tree.materialAppBar.hasLeadingWidth() ? tree.materialAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialAppBar.hasForceMaterialTransparency() ? tree.materialAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialAppBar.clipBehavior) : null));
    case messages.FlutterPreferredSizeWidgetType_Constructor.materialTab:
      return $flutterSrcMaterialTabs.Tab(
          key: (tree.materialTab.hasKey() ? evaluateFlutterKeyType(tree.materialTab.key) : null),
          text: (tree.materialTab.hasText() ? tree.materialTab.text : null),
          icon: (tree.materialTab.hasIcon() ? evaluateWidgetType(tree.materialTab.icon) : null),
          iconMargin: (tree.materialTab.hasIconMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTab.iconMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 10.0)),
          height: (tree.materialTab.hasHeight() ? tree.materialTab.height : null),
          child: (tree.materialTab.hasChild() ? evaluateWidgetType(tree.materialTab.child) : null));
    case messages.FlutterPreferredSizeWidgetType_Constructor.materialTabBar:
      return $flutterSrcMaterialTabs.TabBar(
          key: (tree.materialTabBar.hasKey() ? evaluateFlutterKeyType(tree.materialTabBar.key) : null),
          tabs: tree.materialTabBar.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBar.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBar.controller) : null),
          isScrollable: (tree.materialTabBar.hasIsScrollable() ? tree.materialTabBar.isScrollable : false),
          padding: (tree.materialTabBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.padding) : null),
          indicatorColor: (tree.materialTabBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBar.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBar.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBar.hasIndicatorWeight() ? tree.materialTabBar.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBar.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBar.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBar.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBar.indicator) : null),
          indicatorSize: (tree.materialTabBar.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBar.indicatorSize) : null),
          dividerColor: (tree.materialTabBar.hasDividerColor() ? evaluateDartColorType(tree.materialTabBar.dividerColor) : null),
          dividerHeight: (tree.materialTabBar.hasDividerHeight() ? tree.materialTabBar.dividerHeight : null),
          labelColor: (tree.materialTabBar.hasLabelColor() ? evaluateDartColorType(tree.materialTabBar.labelColor) : null),
          labelStyle: (tree.materialTabBar.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.labelStyle) : null),
          labelPadding: (tree.materialTabBar.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBar.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBar.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBar.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBar.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBar.hasEnableFeedback() ? tree.materialTabBar.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBar.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBar.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBar.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBar.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBar.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBar.tabAlignment) : null));
    case messages.FlutterPreferredSizeWidgetType_Constructor.materialTabBarNamedSecondary:
      return $flutterSrcMaterialTabs.TabBar.secondary(
          key: (tree.materialTabBarNamedSecondary.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarNamedSecondary.key) : null),
          tabs: tree.materialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarNamedSecondary.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarNamedSecondary.controller) : null),
          isScrollable: (tree.materialTabBarNamedSecondary.hasIsScrollable() ? tree.materialTabBarNamedSecondary.isScrollable : false),
          padding: (tree.materialTabBarNamedSecondary.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.padding) : null),
          indicatorColor: (tree.materialTabBarNamedSecondary.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBarNamedSecondary.hasIndicatorWeight() ? tree.materialTabBarNamedSecondary.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBarNamedSecondary.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBarNamedSecondary.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBarNamedSecondary.indicator) : null),
          indicatorSize: (tree.materialTabBarNamedSecondary.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBarNamedSecondary.indicatorSize) : null),
          dividerColor: (tree.materialTabBarNamedSecondary.hasDividerColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.dividerColor) : null),
          dividerHeight: (tree.materialTabBarNamedSecondary.hasDividerHeight() ? tree.materialTabBarNamedSecondary.dividerHeight : null),
          labelColor: (tree.materialTabBarNamedSecondary.hasLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.labelColor) : null),
          labelStyle: (tree.materialTabBarNamedSecondary.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.labelStyle) : null),
          labelPadding: (tree.materialTabBarNamedSecondary.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBarNamedSecondary.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBarNamedSecondary.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBarNamedSecondary.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarNamedSecondary.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBarNamedSecondary.hasEnableFeedback() ? tree.materialTabBarNamedSecondary.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBarNamedSecondary.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarNamedSecondary.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBarNamedSecondary.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBarNamedSecondary.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBarNamedSecondary.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBarNamedSecondary.tabAlignment) : null));
    default:
      return null;
  }
}

$flutterSrcRenderingStack.RelativeRect evaluateRequiredFlutterRelativeRectType(messages.FlutterRelativeRectType tree) {
  final result = evaluateFlutterRelativeRectType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingStack.RelativeRect? evaluateFlutterRelativeRectType(messages.FlutterRelativeRectType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRelativeRectType_Constructor.flutterRelativeRectNamedFromDirectional:
      return $flutterSrcRenderingStack.RelativeRect.fromDirectional(
          textDirection: (tree.flutterRelativeRectNamedFromDirectional.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterRelativeRectNamedFromDirectional.textDirection) : missing('textDirection')),
          start: (tree.flutterRelativeRectNamedFromDirectional.hasStart() ? tree.flutterRelativeRectNamedFromDirectional.start : missing('start')),
          top: (tree.flutterRelativeRectNamedFromDirectional.hasTop() ? tree.flutterRelativeRectNamedFromDirectional.top : missing('top')),
          end: (tree.flutterRelativeRectNamedFromDirectional.hasEnd() ? tree.flutterRelativeRectNamedFromDirectional.end : missing('end')),
          bottom: (tree.flutterRelativeRectNamedFromDirectional.hasBottom() ? tree.flutterRelativeRectNamedFromDirectional.bottom : missing('bottom')));
    case messages.FlutterRelativeRectType_Constructor.flutterRelativeRectNamedFromLTRB:
      return $flutterSrcRenderingStack.RelativeRect.fromLTRB(
          (tree.flutterRelativeRectNamedFromLTRB.hasLeft() ? tree.flutterRelativeRectNamedFromLTRB.left : missing('left')),
          (tree.flutterRelativeRectNamedFromLTRB.hasTop() ? tree.flutterRelativeRectNamedFromLTRB.top : missing('top')),
          (tree.flutterRelativeRectNamedFromLTRB.hasRight() ? tree.flutterRelativeRectNamedFromLTRB.right : missing('right')),
          (tree.flutterRelativeRectNamedFromLTRB.hasBottom() ? tree.flutterRelativeRectNamedFromLTRB.bottom : missing('bottom')));
    case messages.FlutterRelativeRectType_Constructor.flutterRelativeRectNamedFromRect:
      return $flutterSrcRenderingStack.RelativeRect.fromRect(
          (tree.flutterRelativeRectNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterRelativeRectNamedFromRect.rect) : missing('rect')),
          (tree.flutterRelativeRectNamedFromRect.hasContainer() ? evaluateRequiredDartRectType(tree.flutterRelativeRectNamedFromRect.container) : missing('container')));
    case messages.FlutterRelativeRectType_Constructor.flutterRelativeRectNamedFromSize:
      return $flutterSrcRenderingStack.RelativeRect.fromSize(
          (tree.flutterRelativeRectNamedFromSize.hasRect() ? evaluateRequiredDartRectType(tree.flutterRelativeRectNamedFromSize.rect) : missing('rect')),
          (tree.flutterRelativeRectNamedFromSize.hasContainer() ? evaluateRequiredDartSizeType(tree.flutterRelativeRectNamedFromSize.container) : missing('container')));
    default:
      return null;
  }
}

$flutterSrcRenderingBox.RenderBox evaluateRequiredFlutterRenderBoxType(messages.FlutterRenderBoxType tree) {
  final result = evaluateFlutterRenderBoxType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingBox.RenderBox? evaluateFlutterRenderBoxType(messages.FlutterRenderBoxType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRenderBoxType_Constructor.flutterRenderAbsorbPointer:
      return $flutterSrcRenderingProxyBox.RenderAbsorbPointer(
          child: (tree.flutterRenderAbsorbPointer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAbsorbPointer.child) : null),
          absorbing: (tree.flutterRenderAbsorbPointer.hasAbsorbing() ? tree.flutterRenderAbsorbPointer.absorbing : true));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderAnimatedSize:
      return $flutterSrcRenderingAnimatedSize.RenderAnimatedSize(
          vsync: (tree.flutterRenderAnimatedSize.hasVsync() ? evaluateRequiredFlutterSrcSchedulerTickerProviderType(tree.flutterRenderAnimatedSize.vsync) : missing('vsync')),
          duration: (tree.flutterRenderAnimatedSize.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterRenderAnimatedSize.duration) : missing('duration')),
          reverseDuration: (tree.flutterRenderAnimatedSize.hasReverseDuration() ? evaluateDartDurationType(tree.flutterRenderAnimatedSize.reverseDuration) : null),
          curve: (tree.flutterRenderAnimatedSize.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterRenderAnimatedSize.curve) : $flutterSrcAnimationCurves.Curves.linear),
          alignment: (tree.flutterRenderAnimatedSize.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderAnimatedSize.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderAnimatedSize.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderAnimatedSize.textDirection) : null),
          child: (tree.flutterRenderAnimatedSize.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAnimatedSize.child) : null),
          clipBehavior: (tree.flutterRenderAnimatedSize.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderAnimatedSize.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderAspectRatio:
      return $flutterSrcRenderingProxyBox.RenderAspectRatio(
          child: (tree.flutterRenderAspectRatio.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderAspectRatio.child) : null),
          aspectRatio: (tree.flutterRenderAspectRatio.hasAspectRatio() ? tree.flutterRenderAspectRatio.aspectRatio : missing('aspectRatio')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderBackdropFilter:
      return $flutterSrcRenderingProxyBox.RenderBackdropFilter(
          child: (tree.flutterRenderBackdropFilter.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBackdropFilter.child) : null),
          filter: (tree.flutterRenderBackdropFilter.hasFilter() ? evaluateRequiredDartImageFilterType(tree.flutterRenderBackdropFilter.filter) : missing('filter')),
          blendMode: (tree.flutterRenderBackdropFilter.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterRenderBackdropFilter.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderBaseline:
      return $flutterSrcRenderingShiftedBox.RenderBaseline(
          child: (tree.flutterRenderBaseline.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBaseline.child) : null),
          baseline: (tree.flutterRenderBaseline.hasBaseline() ? tree.flutterRenderBaseline.baseline : missing('baseline')),
          baselineType: (tree.flutterRenderBaseline.hasBaselineType() ? enums.convertRequiredDartTextBaselineType(tree.flutterRenderBaseline.baselineType) : missing('baselineType')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderBlockSemantics:
      return $flutterSrcRenderingProxyBox.RenderBlockSemantics(
          child: (tree.flutterRenderBlockSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderBlockSemantics.child) : null),
          blocking: (tree.flutterRenderBlockSemantics.hasBlocking() ? tree.flutterRenderBlockSemantics.blocking : true));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderClipOval:
      return $flutterSrcRenderingProxyBox.RenderClipOval(
          child: (tree.flutterRenderClipOval.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipOval.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipOval.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipOval.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderClipPath:
      return $flutterSrcRenderingProxyBox.RenderClipPath(
          child: (tree.flutterRenderClipPath.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipPath.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipPath.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipPath.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderClipRRect:
      return $flutterSrcRenderingProxyBox.RenderClipRRect(
          child: (tree.flutterRenderClipRRect.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipRRect.child) : null),
          borderRadius: (tree.flutterRenderClipRRect.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterRenderClipRRect.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipRRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipRRect.clipBehavior) : $dartUi.Clip.antiAlias),
          textDirection: (tree.flutterRenderClipRRect.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderClipRRect.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderClipRect:
      return $flutterSrcRenderingProxyBox.RenderClipRect(
          child: (tree.flutterRenderClipRect.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderClipRect.child) : null),
          clipper: null,
          clipBehavior: (tree.flutterRenderClipRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderClipRect.clipBehavior) : $dartUi.Clip.antiAlias));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderConstrainedBox:
      return $flutterSrcRenderingProxyBox.RenderConstrainedBox(
          child: (tree.flutterRenderConstrainedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderConstrainedBox.child) : null),
          additionalConstraints: (tree.flutterRenderConstrainedBox.hasAdditionalConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.flutterRenderConstrainedBox.additionalConstraints) : missing('additionalConstraints')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderConstrainedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderConstrainedOverflowBox(
          child: (tree.flutterRenderConstrainedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderConstrainedOverflowBox.child) : null),
          minWidth: (tree.flutterRenderConstrainedOverflowBox.hasMinWidth() ? tree.flutterRenderConstrainedOverflowBox.minWidth : null),
          maxWidth: (tree.flutterRenderConstrainedOverflowBox.hasMaxWidth() ? tree.flutterRenderConstrainedOverflowBox.maxWidth : null),
          minHeight: (tree.flutterRenderConstrainedOverflowBox.hasMinHeight() ? tree.flutterRenderConstrainedOverflowBox.minHeight : null),
          maxHeight: (tree.flutterRenderConstrainedOverflowBox.hasMaxHeight() ? tree.flutterRenderConstrainedOverflowBox.maxHeight : null),
          alignment: (tree.flutterRenderConstrainedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderConstrainedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderConstrainedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderConstrainedOverflowBox.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderCustomMultiChildLayoutBox:
      return $flutterSrcRenderingCustomLayout.RenderCustomMultiChildLayoutBox(
          children: tree.flutterRenderCustomMultiChildLayoutBox.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          delegate: missing('delegate'));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderCustomPaint:
      return $flutterSrcRenderingCustomPaint.RenderCustomPaint(
          painter: (tree.flutterRenderCustomPaint.hasPainter() ? evaluateFlutterCustomPainterType(tree.flutterRenderCustomPaint.painter) : null),
          foregroundPainter: (tree.flutterRenderCustomPaint.hasForegroundPainter() ? evaluateFlutterCustomPainterType(tree.flutterRenderCustomPaint.foregroundPainter) : null),
          preferredSize: (tree.flutterRenderCustomPaint.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterRenderCustomPaint.preferredSize) : $dartUi.Size.zero),
          isComplex: (tree.flutterRenderCustomPaint.hasIsComplex() ? tree.flutterRenderCustomPaint.isComplex : false),
          willChange: (tree.flutterRenderCustomPaint.hasWillChange() ? tree.flutterRenderCustomPaint.willChange : false),
          child: (tree.flutterRenderCustomPaint.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderCustomPaint.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderCustomSingleChildLayoutBox:
      return $flutterSrcRenderingShiftedBox.RenderCustomSingleChildLayoutBox(
          child: (tree.flutterRenderCustomSingleChildLayoutBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderCustomSingleChildLayoutBox.child) : null),
          delegate: (tree.flutterRenderCustomSingleChildLayoutBox.hasDelegate() ? evaluateRequiredFlutterSingleChildLayoutDelegateType(tree.flutterRenderCustomSingleChildLayoutBox.delegate) : missing('delegate')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderDecoratedBox:
      return $flutterSrcRenderingProxyBox.RenderDecoratedBox(
          decoration: (tree.flutterRenderDecoratedBox.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterRenderDecoratedBox.decoration) : missing('decoration')),
          position: (tree.flutterRenderDecoratedBox.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterRenderDecoratedBox.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          configuration: (tree.flutterRenderDecoratedBox.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderDecoratedBox.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty),
          child: (tree.flutterRenderDecoratedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderDecoratedBox.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderErrorBox:
      return $flutterSrcRenderingError.RenderErrorBox(
          (tree.flutterRenderErrorBox.hasMessage() ? tree.flutterRenderErrorBox.message : ''));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderExcludeSemantics:
      return $flutterSrcRenderingProxyBox.RenderExcludeSemantics(
          child: (tree.flutterRenderExcludeSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderExcludeSemantics.child) : null),
          excluding: (tree.flutterRenderExcludeSemantics.hasExcluding() ? tree.flutterRenderExcludeSemantics.excluding : true));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFittedBox:
      return $flutterSrcRenderingProxyBox.RenderFittedBox(
          fit: (tree.flutterRenderFittedBox.hasFit() ? enums.convertRequiredFlutterBoxFitType(tree.flutterRenderFittedBox.fit) : $flutterSrcPaintingBoxFit.BoxFit.contain),
          alignment: (tree.flutterRenderFittedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderFittedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderFittedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFittedBox.textDirection) : null),
          child: (tree.flutterRenderFittedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFittedBox.child) : null),
          clipBehavior: (tree.flutterRenderFittedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFittedBox.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFlex:
      return $flutterSrcRenderingFlex.RenderFlex(
          children: tree.flutterRenderFlex.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          direction: (tree.flutterRenderFlex.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterRenderFlex.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          mainAxisSize: (tree.flutterRenderFlex.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterRenderFlex.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          mainAxisAlignment: (tree.flutterRenderFlex.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterRenderFlex.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          crossAxisAlignment: (tree.flutterRenderFlex.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterRenderFlex.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterRenderFlex.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFlex.textDirection) : null),
          verticalDirection: (tree.flutterRenderFlex.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRenderFlex.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterRenderFlex.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRenderFlex.textBaseline) : null),
          clipBehavior: (tree.flutterRenderFlex.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFlex.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFlow:
      return $flutterSrcRenderingFlow.RenderFlow(
          children: tree.flutterRenderFlow.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          delegate: missing('delegate'),
          clipBehavior: (tree.flutterRenderFlow.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderFlow.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFollowerLayer:
      return $flutterSrcRenderingProxyBox.RenderFollowerLayer(
          link: (tree.flutterRenderFollowerLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterRenderFollowerLayer.link) : missing('link')),
          showWhenUnlinked: (tree.flutterRenderFollowerLayer.hasShowWhenUnlinked() ? tree.flutterRenderFollowerLayer.showWhenUnlinked : true),
          offset: (tree.flutterRenderFollowerLayer.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterRenderFollowerLayer.offset) : $dartUi.Offset.zero),
          leaderAnchor: (tree.flutterRenderFollowerLayer.hasLeaderAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterRenderFollowerLayer.leaderAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          followerAnchor: (tree.flutterRenderFollowerLayer.hasFollowerAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterRenderFollowerLayer.followerAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          child: (tree.flutterRenderFollowerLayer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFollowerLayer.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFractionalTranslation:
      return $flutterSrcRenderingProxyBox.RenderFractionalTranslation(
          translation: (tree.flutterRenderFractionalTranslation.hasTranslation() ? evaluateRequiredDartOffsetType(tree.flutterRenderFractionalTranslation.translation) : missing('translation')),
          transformHitTests: (tree.flutterRenderFractionalTranslation.hasTransformHitTests() ? tree.flutterRenderFractionalTranslation.transformHitTests : true),
          child: (tree.flutterRenderFractionalTranslation.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFractionalTranslation.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderFractionallySizedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderFractionallySizedOverflowBox(
          child: (tree.flutterRenderFractionallySizedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderFractionallySizedOverflowBox.child) : null),
          widthFactor: (tree.flutterRenderFractionallySizedOverflowBox.hasWidthFactor() ? tree.flutterRenderFractionallySizedOverflowBox.widthFactor : null),
          heightFactor: (tree.flutterRenderFractionallySizedOverflowBox.hasHeightFactor() ? tree.flutterRenderFractionallySizedOverflowBox.heightFactor : null),
          alignment: (tree.flutterRenderFractionallySizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderFractionallySizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderFractionallySizedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderFractionallySizedOverflowBox.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIgnoreBaseline:
      return $flutterSrcRenderingProxyBox.RenderIgnoreBaseline(
          child: (tree.flutterRenderIgnoreBaseline.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIgnoreBaseline.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIgnorePointer:
      return $flutterSrcRenderingProxyBox.RenderIgnorePointer(
          child: (tree.flutterRenderIgnorePointer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIgnorePointer.child) : null),
          ignoring: (tree.flutterRenderIgnorePointer.hasIgnoring() ? tree.flutterRenderIgnorePointer.ignoring : true));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderImage:
      return $flutterSrcRenderingImage.RenderImage(
          image: null,
          debugImageLabel: (tree.flutterRenderImage.hasDebugImageLabel() ? tree.flutterRenderImage.debugImageLabel : null),
          width: (tree.flutterRenderImage.hasWidth() ? tree.flutterRenderImage.width : null),
          height: (tree.flutterRenderImage.hasHeight() ? tree.flutterRenderImage.height : null),
          scale: (tree.flutterRenderImage.hasScale() ? tree.flutterRenderImage.scale : 1.0),
          color: (tree.flutterRenderImage.hasColor() ? evaluateDartColorType(tree.flutterRenderImage.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterRenderImage.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterRenderImage.colorBlendMode) : null),
          fit: (tree.flutterRenderImage.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterRenderImage.fit) : null),
          alignment: (tree.flutterRenderImage.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderImage.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterRenderImage.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterRenderImage.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterRenderImage.hasCenterSlice() ? evaluateDartRectType(tree.flutterRenderImage.centerSlice) : null),
          matchTextDirection: (tree.flutterRenderImage.hasMatchTextDirection() ? tree.flutterRenderImage.matchTextDirection : false),
          textDirection: (tree.flutterRenderImage.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderImage.textDirection) : null),
          invertColors: (tree.flutterRenderImage.hasInvertColors() ? tree.flutterRenderImage.invertColors : false),
          isAntiAlias: (tree.flutterRenderImage.hasIsAntiAlias() ? tree.flutterRenderImage.isAntiAlias : false),
          filterQuality: (tree.flutterRenderImage.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterRenderImage.filterQuality) : $dartUi.FilterQuality.low));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIndexedSemantics:
      return $flutterSrcRenderingProxyBox.RenderIndexedSemantics(
          child: (tree.flutterRenderIndexedSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIndexedSemantics.child) : null),
          index: (tree.flutterRenderIndexedSemantics.hasIndex() ? tree.flutterRenderIndexedSemantics.index : missing('index')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIndexedStack:
      return $flutterSrcRenderingStack.RenderIndexedStack(
          children: tree.flutterRenderIndexedStack.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          alignment: (tree.flutterRenderIndexedStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderIndexedStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterRenderIndexedStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderIndexedStack.textDirection) : null),
          fit: (tree.flutterRenderIndexedStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterRenderIndexedStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterRenderIndexedStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderIndexedStack.clipBehavior) : $dartUi.Clip.hardEdge),
          index: (tree.flutterRenderIndexedStack.hasIndex() ? tree.flutterRenderIndexedStack.index : 0));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIntrinsicHeight:
      return $flutterSrcRenderingProxyBox.RenderIntrinsicHeight(
          child: (tree.flutterRenderIntrinsicHeight.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIntrinsicHeight.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderIntrinsicWidth:
      return $flutterSrcRenderingProxyBox.RenderIntrinsicWidth(
          stepWidth: (tree.flutterRenderIntrinsicWidth.hasStepWidth() ? tree.flutterRenderIntrinsicWidth.stepWidth : null),
          stepHeight: (tree.flutterRenderIntrinsicWidth.hasStepHeight() ? tree.flutterRenderIntrinsicWidth.stepHeight : null),
          child: (tree.flutterRenderIntrinsicWidth.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderIntrinsicWidth.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderLeaderLayer:
      return $flutterSrcRenderingProxyBox.RenderLeaderLayer(
          link: (tree.flutterRenderLeaderLayer.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterRenderLeaderLayer.link) : missing('link')),
          child: (tree.flutterRenderLeaderLayer.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderLeaderLayer.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderLimitedBox:
      return $flutterSrcRenderingProxyBox.RenderLimitedBox(
          child: (tree.flutterRenderLimitedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderLimitedBox.child) : null),
          maxWidth: (tree.flutterRenderLimitedBox.hasMaxWidth() ? tree.flutterRenderLimitedBox.maxWidth : $dartCore.double.infinity),
          maxHeight: (tree.flutterRenderLimitedBox.hasMaxHeight() ? tree.flutterRenderLimitedBox.maxHeight : $dartCore.double.infinity));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderListBody:
      return $flutterSrcRenderingListBody.RenderListBody(
          children: tree.flutterRenderListBody.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          axisDirection: (tree.flutterRenderListBody.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderListBody.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderListWheelViewport:
      return $flutterSrcRenderingListWheelViewport.RenderListWheelViewport(
          childManager: (tree.flutterRenderListWheelViewport.hasChildManager() ? evaluateRequiredFlutterListWheelChildManagerType(tree.flutterRenderListWheelViewport.childManager) : missing('childManager')),
          offset: (tree.flutterRenderListWheelViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderListWheelViewport.offset) : missing('offset')),
          diameterRatio: (tree.flutterRenderListWheelViewport.hasDiameterRatio() ? tree.flutterRenderListWheelViewport.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterRenderListWheelViewport.hasPerspective() ? tree.flutterRenderListWheelViewport.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterRenderListWheelViewport.hasOffAxisFraction() ? tree.flutterRenderListWheelViewport.offAxisFraction : 0),
          useMagnifier: (tree.flutterRenderListWheelViewport.hasUseMagnifier() ? tree.flutterRenderListWheelViewport.useMagnifier : false),
          magnification: (tree.flutterRenderListWheelViewport.hasMagnification() ? tree.flutterRenderListWheelViewport.magnification : 1),
          overAndUnderCenterOpacity: (tree.flutterRenderListWheelViewport.hasOverAndUnderCenterOpacity() ? tree.flutterRenderListWheelViewport.overAndUnderCenterOpacity : 1),
          itemExtent: (tree.flutterRenderListWheelViewport.hasItemExtent() ? tree.flutterRenderListWheelViewport.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterRenderListWheelViewport.hasSqueeze() ? tree.flutterRenderListWheelViewport.squeeze : 1),
          renderChildrenOutsideViewport: (tree.flutterRenderListWheelViewport.hasRenderChildrenOutsideViewport() ? tree.flutterRenderListWheelViewport.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterRenderListWheelViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderListWheelViewport.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterRenderListWheelViewport.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList());
    case messages.FlutterRenderBoxType_Constructor.flutterRenderMergeSemantics:
      return $flutterSrcRenderingProxyBox.RenderMergeSemantics(
          child: (tree.flutterRenderMergeSemantics.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMergeSemantics.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderMetaData:
      return $flutterSrcRenderingProxyBox.RenderMetaData(
          behavior: (tree.flutterRenderMetaData.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderMetaData.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterRenderMetaData.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMetaData.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderMouseRegion:
      return $flutterSrcRenderingProxyBox.RenderMouseRegion(
          onEnter: null,
          onHover: null,
          onExit: null,
          validForMouseTracker: (tree.flutterRenderMouseRegion.hasValidForMouseTracker() ? tree.flutterRenderMouseRegion.validForMouseTracker : true),
          opaque: (tree.flutterRenderMouseRegion.hasOpaque() ? tree.flutterRenderMouseRegion.opaque : true),
          child: (tree.flutterRenderMouseRegion.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderMouseRegion.child) : null),
          hitTestBehavior: (tree.flutterRenderMouseRegion.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterRenderMouseRegion.hitTestBehavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.opaque));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderNestedScrollViewViewport:
      return $flutterSrcWidgetsNestedScrollView.RenderNestedScrollViewViewport(
          axisDirection: (tree.flutterRenderNestedScrollViewViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderNestedScrollViewViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderNestedScrollViewViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderNestedScrollViewViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderNestedScrollViewViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderNestedScrollViewViewport.offset) : missing('offset')),
          anchor: (tree.flutterRenderNestedScrollViewViewport.hasAnchor() ? tree.flutterRenderNestedScrollViewViewport.anchor : 0.0),
          children: tree.flutterRenderNestedScrollViewViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList(),
          center: (tree.flutterRenderNestedScrollViewViewport.hasCenter() ? evaluateFlutterRenderSliverType(tree.flutterRenderNestedScrollViewViewport.center) : null),
          handle: (tree.flutterRenderNestedScrollViewViewport.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderNestedScrollViewViewport.handle) : missing('handle')),
          clipBehavior: (tree.flutterRenderNestedScrollViewViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderNestedScrollViewViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderOffstage:
      return $flutterSrcRenderingProxyBox.RenderOffstage(
          offstage: (tree.flutterRenderOffstage.hasOffstage() ? tree.flutterRenderOffstage.offstage : true),
          child: (tree.flutterRenderOffstage.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderOffstage.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderOpacity:
      return $flutterSrcRenderingProxyBox.RenderOpacity(
          opacity: (tree.flutterRenderOpacity.hasOpacity() ? tree.flutterRenderOpacity.opacity : 1.0),
          alwaysIncludeSemantics: (tree.flutterRenderOpacity.hasAlwaysIncludeSemantics() ? tree.flutterRenderOpacity.alwaysIncludeSemantics : false),
          child: (tree.flutterRenderOpacity.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderOpacity.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderPadding:
      return $flutterSrcRenderingShiftedBox.RenderPadding(
          padding: (tree.flutterRenderPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterRenderPadding.padding) : missing('padding')),
          textDirection: (tree.flutterRenderPadding.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderPadding.textDirection) : null),
          child: (tree.flutterRenderPadding.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPadding.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderParagraph:
      return $flutterSrcRenderingParagraph.RenderParagraph(
          (tree.flutterRenderParagraph.hasText() ? evaluateRequiredFlutterInlineSpanType(tree.flutterRenderParagraph.text) : missing('text')),
          textAlign: (tree.flutterRenderParagraph.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterRenderParagraph.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterRenderParagraph.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterRenderParagraph.textDirection) : missing('textDirection')),
          softWrap: (tree.flutterRenderParagraph.hasSoftWrap() ? tree.flutterRenderParagraph.softWrap : true),
          overflow: (tree.flutterRenderParagraph.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterRenderParagraph.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          textScaler: (tree.flutterRenderParagraph.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterRenderParagraph.textScaler) : $flutterSrcPaintingTextScaler.TextScaler.noScaling),
          maxLines: (tree.flutterRenderParagraph.hasMaxLines() ? tree.flutterRenderParagraph.maxLines : null),
          locale: (tree.flutterRenderParagraph.hasLocale() ? evaluateDartLocaleType(tree.flutterRenderParagraph.locale) : null),
          strutStyle: (tree.flutterRenderParagraph.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterRenderParagraph.strutStyle) : null),
          textWidthBasis: (tree.flutterRenderParagraph.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterRenderParagraph.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterRenderParagraph.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterRenderParagraph.textHeightBehavior) : null),
          children: tree.flutterRenderParagraph.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          selectionColor: (tree.flutterRenderParagraph.hasSelectionColor() ? evaluateDartColorType(tree.flutterRenderParagraph.selectionColor) : null),
          registrar: (tree.flutterRenderParagraph.hasRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterRenderParagraph.registrar) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderPerformanceOverlay:
      return $flutterSrcRenderingPerformanceOverlay.RenderPerformanceOverlay(
          optionsMask: (tree.flutterRenderPerformanceOverlay.hasOptionsMask() ? tree.flutterRenderPerformanceOverlay.optionsMask : 0),
          rasterizerThreshold: (tree.flutterRenderPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterRenderPerformanceOverlay.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterRenderPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterRenderPerformanceOverlay.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterRenderPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterRenderPerformanceOverlay.checkerboardOffscreenLayers : false));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderPhysicalModel:
      return $flutterSrcRenderingProxyBox.RenderPhysicalModel(
          child: (tree.flutterRenderPhysicalModel.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPhysicalModel.child) : null),
          shape: (tree.flutterRenderPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterRenderPhysicalModel.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle),
          clipBehavior: (tree.flutterRenderPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderPhysicalModel.clipBehavior) : $dartUi.Clip.antiAlias),
          borderRadius: (tree.flutterRenderPhysicalModel.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.flutterRenderPhysicalModel.borderRadius) : null),
          elevation: (tree.flutterRenderPhysicalModel.hasElevation() ? tree.flutterRenderPhysicalModel.elevation : missing('elevation')),
          color: (tree.flutterRenderPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterRenderPhysicalModel.color) : missing('color')),
          shadowColor: (tree.flutterRenderPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterRenderPhysicalModel.shadowColor) : missing('shadowColor')));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderPointerListener:
      return $flutterSrcRenderingProxyBox.RenderPointerListener(
          onPointerDown: null,
          onPointerMove: null,
          onPointerUp: null,
          onPointerHover: null,
          onPointerCancel: null,
          onPointerPanZoomStart: null,
          onPointerPanZoomUpdate: null,
          onPointerPanZoomEnd: null,
          onPointerSignal: null,
          behavior: (tree.flutterRenderPointerListener.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderPointerListener.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterRenderPointerListener.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPointerListener.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderPositionedBox:
      return $flutterSrcRenderingShiftedBox.RenderPositionedBox(
          child: (tree.flutterRenderPositionedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderPositionedBox.child) : null),
          widthFactor: (tree.flutterRenderPositionedBox.hasWidthFactor() ? tree.flutterRenderPositionedBox.widthFactor : null),
          heightFactor: (tree.flutterRenderPositionedBox.hasHeightFactor() ? tree.flutterRenderPositionedBox.heightFactor : null),
          alignment: (tree.flutterRenderPositionedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderPositionedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderPositionedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderPositionedBox.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderProxyBox:
      return $flutterSrcRenderingProxyBox.RenderProxyBox(
          (tree.flutterRenderProxyBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderProxyBox.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderRepaintBoundary:
      return $flutterSrcRenderingProxyBox.RenderRepaintBoundary(
          child: (tree.flutterRenderRepaintBoundary.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderRepaintBoundary.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderRotatedBox:
      return $flutterSrcRenderingRotatedBox.RenderRotatedBox(
          quarterTurns: (tree.flutterRenderRotatedBox.hasQuarterTurns() ? tree.flutterRenderRotatedBox.quarterTurns : missing('quarterTurns')),
          child: (tree.flutterRenderRotatedBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderRotatedBox.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderSemanticsAnnotations:
      return $flutterSrcRenderingProxyBox.RenderSemanticsAnnotations(
          child: (tree.flutterRenderSemanticsAnnotations.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSemanticsAnnotations.child) : null),
          properties: (tree.flutterRenderSemanticsAnnotations.hasProperties() ? evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(tree.flutterRenderSemanticsAnnotations.properties) : missing('properties')),
          container: (tree.flutterRenderSemanticsAnnotations.hasContainer() ? tree.flutterRenderSemanticsAnnotations.container : false),
          explicitChildNodes: (tree.flutterRenderSemanticsAnnotations.hasExplicitChildNodes() ? tree.flutterRenderSemanticsAnnotations.explicitChildNodes : false),
          excludeSemantics: (tree.flutterRenderSemanticsAnnotations.hasExcludeSemantics() ? tree.flutterRenderSemanticsAnnotations.excludeSemantics : false),
          blockUserActions: (tree.flutterRenderSemanticsAnnotations.hasBlockUserActions() ? tree.flutterRenderSemanticsAnnotations.blockUserActions : false),
          textDirection: (tree.flutterRenderSemanticsAnnotations.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSemanticsAnnotations.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderSemanticsGestureHandler:
      return $flutterSrcRenderingProxyBox.RenderSemanticsGestureHandler(
          child: (tree.flutterRenderSemanticsGestureHandler.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSemanticsGestureHandler.child) : null),
          onTap: null,
          onLongPress: null,
          onHorizontalDragUpdate: null,
          onVerticalDragUpdate: null,
          scrollFactor: (tree.flutterRenderSemanticsGestureHandler.hasScrollFactor() ? tree.flutterRenderSemanticsGestureHandler.scrollFactor : 0.8),
          behavior: (tree.flutterRenderSemanticsGestureHandler.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderSemanticsGestureHandler.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderShrinkWrappingViewport:
      return $flutterSrcRenderingViewport.RenderShrinkWrappingViewport(
          axisDirection: (tree.flutterRenderShrinkWrappingViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderShrinkWrappingViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderShrinkWrappingViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderShrinkWrappingViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderShrinkWrappingViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderShrinkWrappingViewport.offset) : missing('offset')),
          clipBehavior: (tree.flutterRenderShrinkWrappingViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderShrinkWrappingViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          children: tree.flutterRenderShrinkWrappingViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList());
    case messages.FlutterRenderBoxType_Constructor.flutterRenderSizedOverflowBox:
      return $flutterSrcRenderingShiftedBox.RenderSizedOverflowBox(
          child: (tree.flutterRenderSizedOverflowBox.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSizedOverflowBox.child) : null),
          requestedSize: (tree.flutterRenderSizedOverflowBox.hasRequestedSize() ? evaluateRequiredDartSizeType(tree.flutterRenderSizedOverflowBox.requestedSize) : missing('requestedSize')),
          alignment: (tree.flutterRenderSizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderSizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          textDirection: (tree.flutterRenderSizedOverflowBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSizedOverflowBox.textDirection) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderStack:
      return $flutterSrcRenderingStack.RenderStack(
          children: tree.flutterRenderStack.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          alignment: (tree.flutterRenderStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRenderStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterRenderStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderStack.textDirection) : null),
          fit: (tree.flutterRenderStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterRenderStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterRenderStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderStack.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderTable:
      return $flutterSrcRenderingTable.RenderTable(
          columns: (tree.flutterRenderTable.hasColumns() ? tree.flutterRenderTable.columns : null),
          rows: (tree.flutterRenderTable.hasRows() ? tree.flutterRenderTable.rows : null),
          columnWidths: null,
          defaultColumnWidth: (tree.flutterRenderTable.hasDefaultColumnWidth() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterRenderTable.defaultColumnWidth) : $flutterSrcRenderingTable.FlexColumnWidth()),
          textDirection: (tree.flutterRenderTable.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterRenderTable.textDirection) : missing('textDirection')),
          border: (tree.flutterRenderTable.hasBorder() ? evaluateFlutterTableBorderType(tree.flutterRenderTable.border) : null),
          rowDecorations: tree.flutterRenderTable.rowDecorations.map((e) => evaluateRequiredFlutterDecorationType(e)).toList(),
          configuration: (tree.flutterRenderTable.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderTable.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty),
          defaultVerticalAlignment: (tree.flutterRenderTable.hasDefaultVerticalAlignment() ? enums.convertRequiredFlutterTableCellVerticalAlignmentType(tree.flutterRenderTable.defaultVerticalAlignment) : $flutterSrcRenderingTable.TableCellVerticalAlignment.top),
          textBaseline: (tree.flutterRenderTable.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRenderTable.textBaseline) : null),
          children: null);
    case messages.FlutterRenderBoxType_Constructor.flutterRenderTapRegion:
      return $flutterSrcWidgetsTapRegion.RenderTapRegion(
          registry: (tree.flutterRenderTapRegion.hasRegistry() ? evaluateFlutterTapRegionRegistryType(tree.flutterRenderTapRegion.registry) : null),
          enabled: (tree.flutterRenderTapRegion.hasEnabled() ? tree.flutterRenderTapRegion.enabled : true),
          onTapOutside: null,
          onTapInside: null,
          behavior: (tree.flutterRenderTapRegion.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterRenderTapRegion.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          groupId: null,
          debugLabel: (tree.flutterRenderTapRegion.hasDebugLabel() ? tree.flutterRenderTapRegion.debugLabel : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.RenderTapRegionSurface(
          );
    case messages.FlutterRenderBoxType_Constructor.flutterRenderTransform:
      return $flutterSrcRenderingProxyBox.RenderTransform(
          transform: (tree.flutterRenderTransform.hasTransform() ? evaluateRequiredVectorMathMatrix4Type(tree.flutterRenderTransform.transform) : missing('transform')),
          origin: (tree.flutterRenderTransform.hasOrigin() ? evaluateDartOffsetType(tree.flutterRenderTransform.origin) : null),
          alignment: (tree.flutterRenderTransform.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterRenderTransform.alignment) : null),
          textDirection: (tree.flutterRenderTransform.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderTransform.textDirection) : null),
          transformHitTests: (tree.flutterRenderTransform.hasTransformHitTests() ? tree.flutterRenderTransform.transformHitTests : true),
          filterQuality: (tree.flutterRenderTransform.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterRenderTransform.filterQuality) : null),
          child: (tree.flutterRenderTransform.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderTransform.child) : null));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderViewport:
      return $flutterSrcRenderingViewport.RenderViewport(
          axisDirection: (tree.flutterRenderViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterRenderViewport.hasCrossAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterRenderViewport.crossAxisDirection) : missing('crossAxisDirection')),
          offset: (tree.flutterRenderViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterRenderViewport.offset) : missing('offset')),
          anchor: (tree.flutterRenderViewport.hasAnchor() ? tree.flutterRenderViewport.anchor : 0.0),
          children: tree.flutterRenderViewport.children.map((e) => evaluateRequiredFlutterRenderSliverType(e)).toList(),
          center: (tree.flutterRenderViewport.hasCenter() ? evaluateFlutterRenderSliverType(tree.flutterRenderViewport.center) : null),
          cacheExtent: (tree.flutterRenderViewport.hasCacheExtent() ? tree.flutterRenderViewport.cacheExtent : null),
          cacheExtentStyle: (tree.flutterRenderViewport.hasCacheExtentStyle() ? enums.convertRequiredFlutterCacheExtentStyleType(tree.flutterRenderViewport.cacheExtentStyle) : $flutterSrcRenderingViewport.CacheExtentStyle.pixel),
          clipBehavior: (tree.flutterRenderViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterRenderBoxType_Constructor.flutterRenderWrap:
      return $flutterSrcRenderingWrap.RenderWrap(
          children: tree.flutterRenderWrap.children.map((e) => evaluateRequiredFlutterRenderBoxType(e)).toList(),
          direction: (tree.flutterRenderWrap.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterRenderWrap.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          alignment: (tree.flutterRenderWrap.hasAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterRenderWrap.alignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          spacing: (tree.flutterRenderWrap.hasSpacing() ? tree.flutterRenderWrap.spacing : 0.0),
          runAlignment: (tree.flutterRenderWrap.hasRunAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterRenderWrap.runAlignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          runSpacing: (tree.flutterRenderWrap.hasRunSpacing() ? tree.flutterRenderWrap.runSpacing : 0.0),
          crossAxisAlignment: (tree.flutterRenderWrap.hasCrossAxisAlignment() ? enums.convertRequiredFlutterWrapCrossAlignmentType(tree.flutterRenderWrap.crossAxisAlignment) : $flutterSrcRenderingWrap.WrapCrossAlignment.start),
          textDirection: (tree.flutterRenderWrap.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderWrap.textDirection) : null),
          verticalDirection: (tree.flutterRenderWrap.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRenderWrap.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          clipBehavior: (tree.flutterRenderWrap.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterRenderWrap.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterRenderBoxType_Constructor.flutterTextureBox:
      return $flutterSrcRenderingTexture.TextureBox(
          textureId: (tree.flutterTextureBox.hasTextureId() ? tree.flutterTextureBox.textureId : missing('textureId')),
          freeze: (tree.flutterTextureBox.hasFreeze_3() ? tree.flutterTextureBox.freeze_3 : false),
          filterQuality: (tree.flutterTextureBox.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTextureBox.filterQuality) : $dartUi.FilterQuality.low));
    default:
      return null;
  }
}

$flutterSrcRenderingSliverMultiBoxAdaptor.RenderSliverBoxChildManager evaluateRequiredFlutterRenderSliverBoxChildManagerType(messages.FlutterRenderSliverBoxChildManagerType tree) {
  final result = evaluateFlutterRenderSliverBoxChildManagerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingSliverMultiBoxAdaptor.RenderSliverBoxChildManager? evaluateFlutterRenderSliverBoxChildManagerType(messages.FlutterRenderSliverBoxChildManagerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRenderSliverBoxChildManagerType_Constructor.flutterSliverMultiBoxAdaptorElement:
      return $flutterSrcWidgetsSliver.SliverMultiBoxAdaptorElement(
          (tree.flutterSliverMultiBoxAdaptorElement.hasWidget() ? evaluateRequiredFlutterSliverMultiBoxAdaptorWidgetType(tree.flutterSliverMultiBoxAdaptorElement.widget) : missing('widget')),
          replaceMovedChildren: (tree.flutterSliverMultiBoxAdaptorElement.hasReplaceMovedChildren() ? tree.flutterSliverMultiBoxAdaptorElement.replaceMovedChildren : false));
    default:
      return null;
  }
}

$flutterSrcRenderingSliver.RenderSliver evaluateRequiredFlutterRenderSliverType(messages.FlutterRenderSliverType tree) {
  final result = evaluateFlutterRenderSliverType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingSliver.RenderSliver? evaluateFlutterRenderSliverType(messages.FlutterRenderSliverType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRenderSliverType_Constructor.flutterRenderDecoratedSliver:
      return $flutterSrcRenderingDecoratedSliver.RenderDecoratedSliver(
          decoration: (tree.flutterRenderDecoratedSliver.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterRenderDecoratedSliver.decoration) : missing('decoration')),
          position: (tree.flutterRenderDecoratedSliver.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterRenderDecoratedSliver.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          configuration: (tree.flutterRenderDecoratedSliver.hasConfiguration() ? evaluateRequiredFlutterImageConfigurationType(tree.flutterRenderDecoratedSliver.configuration) : $flutterSrcPaintingImageProvider.ImageConfiguration.empty));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverConstrainedCrossAxis:
      return $flutterSrcRenderingProxySliver.RenderSliverConstrainedCrossAxis(
          maxExtent: (tree.flutterRenderSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterRenderSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverCrossAxisGroup:
      return $flutterSrcRenderingSliverGroup.RenderSliverCrossAxisGroup(
          );
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverFillRemaining:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemaining(
          child: (tree.flutterRenderSliverFillRemaining.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemaining.child) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverFillRemainingAndOverscroll:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemainingAndOverscroll(
          child: (tree.flutterRenderSliverFillRemainingAndOverscroll.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemainingAndOverscroll.child) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverFillRemainingWithScrollable:
      return $flutterSrcRenderingSliverFill.RenderSliverFillRemainingWithScrollable(
          child: (tree.flutterRenderSliverFillRemainingWithScrollable.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverFillRemainingWithScrollable.child) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverFillViewport:
      return $flutterSrcRenderingSliverFill.RenderSliverFillViewport(
          childManager: (tree.flutterRenderSliverFillViewport.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverFillViewport.childManager) : missing('childManager')),
          viewportFraction: (tree.flutterRenderSliverFillViewport.hasViewportFraction() ? tree.flutterRenderSliverFillViewport.viewportFraction : 1.0));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverFixedExtentList:
      return $flutterSrcRenderingSliverFixedExtentList.RenderSliverFixedExtentList(
          childManager: (tree.flutterRenderSliverFixedExtentList.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverFixedExtentList.childManager) : missing('childManager')),
          itemExtent: (tree.flutterRenderSliverFixedExtentList.hasItemExtent() ? tree.flutterRenderSliverFixedExtentList.itemExtent : missing('itemExtent')));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverGrid:
      return $flutterSrcRenderingSliverGrid.RenderSliverGrid(
          childManager: (tree.flutterRenderSliverGrid.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverGrid.childManager) : missing('childManager')),
          gridDelegate: (tree.flutterRenderSliverGrid.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterRenderSliverGrid.gridDelegate) : missing('gridDelegate')));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverIgnorePointer:
      return $flutterSrcRenderingProxySliver.RenderSliverIgnorePointer(
          sliver: (tree.flutterRenderSliverIgnorePointer.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverIgnorePointer.sliver) : null),
          ignoring: (tree.flutterRenderSliverIgnorePointer.hasIgnoring() ? tree.flutterRenderSliverIgnorePointer.ignoring : true));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverList:
      return $flutterSrcRenderingSliverList.RenderSliverList(
          childManager: (tree.flutterRenderSliverList.hasChildManager() ? evaluateRequiredFlutterRenderSliverBoxChildManagerType(tree.flutterRenderSliverList.childManager) : missing('childManager')));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverMainAxisGroup:
      return $flutterSrcRenderingSliverGroup.RenderSliverMainAxisGroup(
          );
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverOffstage:
      return $flutterSrcRenderingProxySliver.RenderSliverOffstage(
          offstage: (tree.flutterRenderSliverOffstage.hasOffstage() ? tree.flutterRenderSliverOffstage.offstage : true),
          sliver: (tree.flutterRenderSliverOffstage.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOffstage.sliver) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverOpacity:
      return $flutterSrcRenderingProxySliver.RenderSliverOpacity(
          opacity: (tree.flutterRenderSliverOpacity.hasOpacity() ? tree.flutterRenderSliverOpacity.opacity : 1.0),
          alwaysIncludeSemantics: (tree.flutterRenderSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterRenderSliverOpacity.alwaysIncludeSemantics : false),
          sliver: (tree.flutterRenderSliverOpacity.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOpacity.sliver) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverOverlapAbsorber:
      return $flutterSrcWidgetsNestedScrollView.RenderSliverOverlapAbsorber(
          handle: (tree.flutterRenderSliverOverlapAbsorber.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderSliverOverlapAbsorber.handle) : missing('handle')),
          sliver: (tree.flutterRenderSliverOverlapAbsorber.hasSliver() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverOverlapAbsorber.sliver) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverOverlapInjector:
      return $flutterSrcWidgetsNestedScrollView.RenderSliverOverlapInjector(
          handle: (tree.flutterRenderSliverOverlapInjector.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterRenderSliverOverlapInjector.handle) : missing('handle')));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverPadding:
      return $flutterSrcRenderingSliverPadding.RenderSliverPadding(
          padding: (tree.flutterRenderSliverPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterRenderSliverPadding.padding) : missing('padding')),
          textDirection: (tree.flutterRenderSliverPadding.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRenderSliverPadding.textDirection) : null),
          child: (tree.flutterRenderSliverPadding.hasChild() ? evaluateFlutterRenderSliverType(tree.flutterRenderSliverPadding.child) : null));
    case messages.FlutterRenderSliverType_Constructor.flutterRenderSliverToBoxAdapter:
      return $flutterSrcRenderingSliver.RenderSliverToBoxAdapter(
          child: (tree.flutterRenderSliverToBoxAdapter.hasChild() ? evaluateFlutterRenderBoxType(tree.flutterRenderSliverToBoxAdapter.child) : null));
    default:
      return null;
  }
}

$flutterSrcServicesRestoration.RestorationBucket evaluateRequiredFlutterRestorationBucketType(messages.FlutterRestorationBucketType tree) {
  final result = evaluateFlutterRestorationBucketType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesRestoration.RestorationBucket? evaluateFlutterRestorationBucketType(messages.FlutterRestorationBucketType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRestorationBucketType_Constructor.flutterRestorationBucketNamedChild:
      return $flutterSrcServicesRestoration.RestorationBucket.child(
          restorationId: (tree.flutterRestorationBucketNamedChild.hasRestorationId() ? tree.flutterRestorationBucketNamedChild.restorationId : missing('restorationId')),
          parent: (tree.flutterRestorationBucketNamedChild.hasParent() ? evaluateRequiredFlutterRestorationBucketType(tree.flutterRestorationBucketNamedChild.parent) : missing('parent')),
          debugOwner: null);
    case messages.FlutterRestorationBucketType_Constructor.flutterRestorationBucketNamedEmpty:
      return $flutterSrcServicesRestoration.RestorationBucket.empty(
          restorationId: (tree.flutterRestorationBucketNamedEmpty.hasRestorationId() ? tree.flutterRestorationBucketNamedEmpty.restorationId : missing('restorationId')),
          debugOwner: null);
    case messages.FlutterRestorationBucketType_Constructor.flutterRestorationBucketNamedRoot:
      return $flutterSrcServicesRestoration.RestorationBucket.root(
          manager: (tree.flutterRestorationBucketNamedRoot.hasManager() ? evaluateRequiredFlutterRestorationManagerType(tree.flutterRestorationBucketNamedRoot.manager) : missing('manager')),
          rawData: null);
    default:
      return null;
  }
}

$flutterSrcServicesRestoration.RestorationManager evaluateRequiredFlutterRestorationManagerType(messages.FlutterRestorationManagerType tree) {
  final result = evaluateFlutterRestorationManagerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesRestoration.RestorationManager? evaluateFlutterRestorationManagerType(messages.FlutterRestorationManagerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRestorationManagerType_Constructor.flutterRestorationManager:
      return $flutterSrcServicesRestoration.RestorationManager(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsBinding.RootWidget evaluateRequiredFlutterRootWidgetType(messages.FlutterRootWidgetType tree) {
  final result = evaluateFlutterRootWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsBinding.RootWidget? evaluateFlutterRootWidgetType(messages.FlutterRootWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRootWidgetType_Constructor.flutterRootWidget:
      return $flutterSrcWidgetsBinding.RootWidget(
          key: (tree.flutterRootWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterRootWidget.key) : null),
          child: (tree.flutterRootWidget.hasChild() ? evaluateWidgetType(tree.flutterRootWidget.child) : null),
          debugShortDescription: (tree.flutterRootWidget.hasDebugShortDescription() ? tree.flutterRootWidget.debugShortDescription : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsRouter.RouteInformationProvider evaluateRequiredFlutterRouteInformationProviderType(messages.FlutterRouteInformationProviderType tree) {
  final result = evaluateFlutterRouteInformationProviderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsRouter.RouteInformationProvider? evaluateFlutterRouteInformationProviderType(messages.FlutterRouteInformationProviderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRouteInformationProviderType_Constructor.flutterPlatformRouteInformationProvider:
      return $flutterSrcWidgetsRouter.PlatformRouteInformationProvider(
          initialRouteInformation: (tree.flutterPlatformRouteInformationProvider.hasInitialRouteInformation() ? evaluateRequiredFlutterRouteInformationType(tree.flutterPlatformRouteInformationProvider.initialRouteInformation) : missing('initialRouteInformation')));
    default:
      return null;
  }
}

$flutterSrcWidgetsRouter.RouteInformation evaluateRequiredFlutterRouteInformationType(messages.FlutterRouteInformationType tree) {
  final result = evaluateFlutterRouteInformationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsRouter.RouteInformation? evaluateFlutterRouteInformationType(messages.FlutterRouteInformationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterRouteInformationType_Constructor.flutterRouteInformation:
      return $flutterSrcWidgetsRouter.RouteInformation(
          uri: (tree.flutterRouteInformation.hasUri() ? evaluateDartUriType(tree.flutterRouteInformation.uri) : null),
          state: null);
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollConfiguration.ScrollBehavior evaluateRequiredFlutterScrollBehaviorType(messages.FlutterScrollBehaviorType tree) {
  final result = evaluateFlutterScrollBehaviorType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollConfiguration.ScrollBehavior? evaluateFlutterScrollBehaviorType(messages.FlutterScrollBehaviorType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterScrollBehaviorType_Constructor.cupertinoScrollBehavior:
      return $flutterSrcCupertinoApp.CupertinoScrollBehavior(
          );
    case messages.FlutterScrollBehaviorType_Constructor.flutterScrollBehavior:
      return $flutterSrcWidgetsScrollConfiguration.ScrollBehavior(
          );
    case messages.FlutterScrollBehaviorType_Constructor.materialMaterialScrollBehavior:
      return $flutterSrcMaterialApp.MaterialScrollBehavior(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollContext.ScrollContext evaluateRequiredFlutterScrollContextType(messages.FlutterScrollContextType tree) {
  final result = evaluateFlutterScrollContextType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollContext.ScrollContext? evaluateFlutterScrollContextType(messages.FlutterScrollContextType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterScrollContextType_Constructor.flutterScrollableState:
      return $flutterSrcWidgetsScrollable.ScrollableState(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollController.ScrollController evaluateRequiredFlutterScrollControllerType(messages.FlutterScrollControllerType tree) {
  final result = evaluateFlutterScrollControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollController.ScrollController? evaluateFlutterScrollControllerType(messages.FlutterScrollControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterScrollControllerType_Constructor.flutterFixedExtentScrollController:
      return $flutterSrcWidgetsListWheelScrollView.FixedExtentScrollController(
          initialItem: (tree.flutterFixedExtentScrollController.hasInitialItem() ? tree.flutterFixedExtentScrollController.initialItem : 0));
    case messages.FlutterScrollControllerType_Constructor.flutterPageController:
      return $flutterSrcWidgetsPageView.PageController(
          initialPage: (tree.flutterPageController.hasInitialPage() ? tree.flutterPageController.initialPage : 0),
          keepPage: (tree.flutterPageController.hasKeepPage() ? tree.flutterPageController.keepPage : true),
          viewportFraction: (tree.flutterPageController.hasViewportFraction() ? tree.flutterPageController.viewportFraction : 1.0));
    case messages.FlutterScrollControllerType_Constructor.flutterScrollController:
      return $flutterSrcWidgetsScrollController.ScrollController(
          initialScrollOffset: (tree.flutterScrollController.hasInitialScrollOffset() ? tree.flutterScrollController.initialScrollOffset : 0.0),
          keepScrollOffset: (tree.flutterScrollController.hasKeepScrollOffset() ? tree.flutterScrollController.keepScrollOffset : true),
          debugLabel: (tree.flutterScrollController.hasDebugLabel() ? tree.flutterScrollController.debugLabel : null),
          onAttach: null,
          onDetach: null);
    case messages.FlutterScrollControllerType_Constructor.flutterTrackingScrollController:
      return $flutterSrcWidgetsScrollController.TrackingScrollController(
          initialScrollOffset: (tree.flutterTrackingScrollController.hasInitialScrollOffset() ? tree.flutterTrackingScrollController.initialScrollOffset : 0.0),
          keepScrollOffset: (tree.flutterTrackingScrollController.hasKeepScrollOffset() ? tree.flutterTrackingScrollController.keepScrollOffset : true),
          debugLabel: (tree.flutterTrackingScrollController.hasDebugLabel() ? tree.flutterTrackingScrollController.debugLabel : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollPhysics.ScrollPhysics evaluateRequiredFlutterScrollPhysicsType(messages.FlutterScrollPhysicsType tree) {
  final result = evaluateFlutterScrollPhysicsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollPhysics.ScrollPhysics? evaluateFlutterScrollPhysicsType(messages.FlutterScrollPhysicsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterScrollPhysicsType_Constructor.flutterAlwaysScrollableScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.AlwaysScrollableScrollPhysics(
          parent: (tree.flutterAlwaysScrollableScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterAlwaysScrollableScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterBouncingScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.BouncingScrollPhysics(
          decelerationRate: (tree.flutterBouncingScrollPhysics.hasDecelerationRate() ? enums.convertRequiredFlutterScrollDecelerationRateType(tree.flutterBouncingScrollPhysics.decelerationRate) : $flutterSrcWidgetsScrollPhysics.ScrollDecelerationRate.normal),
          parent: (tree.flutterBouncingScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterBouncingScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterClampingScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.ClampingScrollPhysics(
          parent: (tree.flutterClampingScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterClampingScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterFixedExtentScrollPhysics:
      return $flutterSrcWidgetsListWheelScrollView.FixedExtentScrollPhysics(
          parent: (tree.flutterFixedExtentScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterFixedExtentScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterNeverScrollableScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.NeverScrollableScrollPhysics(
          parent: (tree.flutterNeverScrollableScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterNeverScrollableScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterPageScrollPhysics:
      return $flutterSrcWidgetsPageView.PageScrollPhysics(
          parent: (tree.flutterPageScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterPageScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterRangeMaintainingScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.RangeMaintainingScrollPhysics(
          parent: (tree.flutterRangeMaintainingScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterRangeMaintainingScrollPhysics.parent) : null));
    case messages.FlutterScrollPhysicsType_Constructor.flutterScrollPhysics:
      return $flutterSrcWidgetsScrollPhysics.ScrollPhysics(
          parent: (tree.flutterScrollPhysics.hasParent() ? evaluateFlutterScrollPhysicsType(tree.flutterScrollPhysics.parent) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollPosition.ScrollPosition evaluateRequiredFlutterScrollPositionType(messages.FlutterScrollPositionType tree) {
  final result = evaluateFlutterScrollPositionType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollPosition.ScrollPosition? evaluateFlutterScrollPositionType(messages.FlutterScrollPositionType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterScrollPositionType_Constructor.flutterScrollPositionWithSingleContext:
      return $flutterSrcWidgetsScrollPositionWithSingleContext.ScrollPositionWithSingleContext(
          physics: (tree.flutterScrollPositionWithSingleContext.hasPhysics() ? evaluateRequiredFlutterScrollPhysicsType(tree.flutterScrollPositionWithSingleContext.physics) : missing('physics')),
          context: (tree.flutterScrollPositionWithSingleContext.hasContext() ? evaluateRequiredFlutterScrollContextType(tree.flutterScrollPositionWithSingleContext.context) : missing('context')),
          initialPixels: (tree.flutterScrollPositionWithSingleContext.hasInitialPixels() ? tree.flutterScrollPositionWithSingleContext.initialPixels : 0.0),
          keepScrollOffset: (tree.flutterScrollPositionWithSingleContext.hasKeepScrollOffset() ? tree.flutterScrollPositionWithSingleContext.keepScrollOffset : true),
          oldPosition: (tree.flutterScrollPositionWithSingleContext.hasOldPosition() ? evaluateFlutterScrollPositionType(tree.flutterScrollPositionWithSingleContext.oldPosition) : null),
          debugLabel: (tree.flutterScrollPositionWithSingleContext.hasDebugLabel() ? tree.flutterScrollPositionWithSingleContext.debugLabel : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsSelectableRegion.SelectableRegionState evaluateRequiredFlutterSelectableRegionStateType(messages.FlutterSelectableRegionStateType tree) {
  final result = evaluateFlutterSelectableRegionStateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsSelectableRegion.SelectableRegionState? evaluateFlutterSelectableRegionStateType(messages.FlutterSelectableRegionStateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSelectableRegionStateType_Constructor.flutterSelectableRegionState:
      return $flutterSrcWidgetsSelectableRegion.SelectableRegionState(
          );
    default:
      return null;
  }
}

$flutterSrcRenderingSelection.SelectionRegistrar evaluateRequiredFlutterSelectionRegistrarType(messages.FlutterSelectionRegistrarType tree) {
  final result = evaluateFlutterSelectionRegistrarType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingSelection.SelectionRegistrar? evaluateFlutterSelectionRegistrarType(messages.FlutterSelectionRegistrarType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSelectionRegistrarType_Constructor.flutterSelectableRegionState:
      return $flutterSrcWidgetsSelectableRegion.SelectableRegionState(
          );
    default:
      return null;
  }
}

$flutterSrcPaintingBorders.ShapeBorder evaluateRequiredFlutterShapeBorderType(messages.FlutterShapeBorderType tree) {
  final result = evaluateFlutterShapeBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingBorders.ShapeBorder? evaluateFlutterShapeBorderType(messages.FlutterShapeBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterShapeBorderType_Constructor.flutterBeveledRectangleBorder:
      return $flutterSrcPaintingBeveledRectangleBorder.BeveledRectangleBorder(
          side: (tree.flutterBeveledRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterBeveledRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterBeveledRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterBeveledRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterShapeBorderType_Constructor.flutterBorder:
      return $flutterSrcPaintingBoxBorder.Border(
          top: (tree.flutterBorder.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.top) : $flutterSrcPaintingBorders.BorderSide.none),
          right: (tree.flutterBorder.hasRight() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.right) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterBorder.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.bottom) : $flutterSrcPaintingBorders.BorderSide.none),
          left: (tree.flutterBorder.hasLeft() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorder.left) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterShapeBorderType_Constructor.flutterBorderDirectional:
      return $flutterSrcPaintingBoxBorder.BorderDirectional(
          top: (tree.flutterBorderDirectional.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.top) : $flutterSrcPaintingBorders.BorderSide.none),
          start: (tree.flutterBorderDirectional.hasStart() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.start) : $flutterSrcPaintingBorders.BorderSide.none),
          end: (tree.flutterBorderDirectional.hasEnd() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.end) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterBorderDirectional.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderDirectional.bottom) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterShapeBorderType_Constructor.flutterBorderNamedAll:
      return $flutterSrcPaintingBoxBorder.Border.all(
          color: (tree.flutterBorderNamedAll.hasColor() ? evaluateRequiredDartColorType(tree.flutterBorderNamedAll.color) : $dartUi.Color(0xFF000000)),
          width: (tree.flutterBorderNamedAll.hasWidth() ? tree.flutterBorderNamedAll.width : 1.0),
          style: (tree.flutterBorderNamedAll.hasStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.flutterBorderNamedAll.style) : $flutterSrcPaintingBorders.BorderStyle.solid),
          strokeAlign: (tree.flutterBorderNamedAll.hasStrokeAlign() ? tree.flutterBorderNamedAll.strokeAlign : $flutterSrcPaintingBorders.BorderSide.strokeAlignInside));
    case messages.FlutterShapeBorderType_Constructor.flutterBorderNamedFromBorderSide:
      return $flutterSrcPaintingBoxBorder.Border.fromBorderSide(
          (tree.flutterBorderNamedFromBorderSide.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedFromBorderSide.side) : missing('side')));
    case messages.FlutterShapeBorderType_Constructor.flutterBorderNamedSymmetric:
      return $flutterSrcPaintingBoxBorder.Border.symmetric(
          vertical: (tree.flutterBorderNamedSymmetric.hasVertical() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.vertical) : $flutterSrcPaintingBorders.BorderSide.none),
          horizontal: (tree.flutterBorderNamedSymmetric.hasHorizontal() ? evaluateRequiredFlutterBorderSideType(tree.flutterBorderNamedSymmetric.horizontal) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterShapeBorderType_Constructor.flutterCircleBorder:
      return $flutterSrcPaintingCircleBorder.CircleBorder(
          side: (tree.flutterCircleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterCircleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          eccentricity: (tree.flutterCircleBorder.hasEccentricity() ? tree.flutterCircleBorder.eccentricity : 0.0));
    case messages.FlutterShapeBorderType_Constructor.flutterContinuousRectangleBorder:
      return $flutterSrcPaintingContinuousRectangleBorder.ContinuousRectangleBorder(
          side: (tree.flutterContinuousRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterContinuousRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterContinuousRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterContinuousRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterShapeBorderType_Constructor.flutterLinearBorder:
      return $flutterSrcPaintingLinearBorder.LinearBorder(
          side: (tree.flutterLinearBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          start: (tree.flutterLinearBorder.hasStart() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.start) : null),
          end: (tree.flutterLinearBorder.hasEnd() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.end) : null),
          top: (tree.flutterLinearBorder.hasTop() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.top) : null),
          bottom: (tree.flutterLinearBorder.hasBottom() ? evaluateFlutterLinearBorderEdgeType(tree.flutterLinearBorder.bottom) : null));
    case messages.FlutterShapeBorderType_Constructor.flutterLinearBorderNamedBottom:
      return $flutterSrcPaintingLinearBorder.LinearBorder.bottom(
          side: (tree.flutterLinearBorderNamedBottom.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedBottom.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedBottom.hasAlignment() ? tree.flutterLinearBorderNamedBottom.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedBottom.hasSize() ? tree.flutterLinearBorderNamedBottom.size : 1.0));
    case messages.FlutterShapeBorderType_Constructor.flutterLinearBorderNamedEnd:
      return $flutterSrcPaintingLinearBorder.LinearBorder.end(
          side: (tree.flutterLinearBorderNamedEnd.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedEnd.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedEnd.hasAlignment() ? tree.flutterLinearBorderNamedEnd.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedEnd.hasSize() ? tree.flutterLinearBorderNamedEnd.size : 1.0));
    case messages.FlutterShapeBorderType_Constructor.flutterLinearBorderNamedStart:
      return $flutterSrcPaintingLinearBorder.LinearBorder.start(
          side: (tree.flutterLinearBorderNamedStart.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedStart.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedStart.hasAlignment() ? tree.flutterLinearBorderNamedStart.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedStart.hasSize() ? tree.flutterLinearBorderNamedStart.size : 1.0));
    case messages.FlutterShapeBorderType_Constructor.flutterLinearBorderNamedTop:
      return $flutterSrcPaintingLinearBorder.LinearBorder.top(
          side: (tree.flutterLinearBorderNamedTop.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterLinearBorderNamedTop.side) : $flutterSrcPaintingBorders.BorderSide.none),
          alignment: (tree.flutterLinearBorderNamedTop.hasAlignment() ? tree.flutterLinearBorderNamedTop.alignment : 0.0),
          size: (tree.flutterLinearBorderNamedTop.hasSize() ? tree.flutterLinearBorderNamedTop.size : 1.0));
    case messages.FlutterShapeBorderType_Constructor.flutterOvalBorder:
      return $flutterSrcPaintingOvalBorder.OvalBorder(
          side: (tree.flutterOvalBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterOvalBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          eccentricity: (tree.flutterOvalBorder.hasEccentricity() ? tree.flutterOvalBorder.eccentricity : 0.0));
    case messages.FlutterShapeBorderType_Constructor.flutterRoundedRectangleBorder:
      return $flutterSrcPaintingRoundedRectangleBorder.RoundedRectangleBorder(
          side: (tree.flutterRoundedRectangleBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterRoundedRectangleBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterRoundedRectangleBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterRoundedRectangleBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterShapeBorderType_Constructor.flutterStadiumBorder:
      return $flutterSrcPaintingStadiumBorder.StadiumBorder(
          side: (tree.flutterStadiumBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStadiumBorder.side) : $flutterSrcPaintingBorders.BorderSide.none));
    case messages.FlutterShapeBorderType_Constructor.flutterStarBorder:
      return $flutterSrcPaintingStarBorder.StarBorder(
          side: (tree.flutterStarBorder.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStarBorder.side) : $flutterSrcPaintingBorders.BorderSide.none),
          points: (tree.flutterStarBorder.hasPoints() ? tree.flutterStarBorder.points : 5),
          innerRadiusRatio: (tree.flutterStarBorder.hasInnerRadiusRatio() ? tree.flutterStarBorder.innerRadiusRatio : 0.4),
          pointRounding: (tree.flutterStarBorder.hasPointRounding() ? tree.flutterStarBorder.pointRounding : 0),
          valleyRounding: (tree.flutterStarBorder.hasValleyRounding() ? tree.flutterStarBorder.valleyRounding : 0),
          rotation: (tree.flutterStarBorder.hasRotation() ? tree.flutterStarBorder.rotation : 0),
          squash: (tree.flutterStarBorder.hasSquash() ? tree.flutterStarBorder.squash : 0));
    case messages.FlutterShapeBorderType_Constructor.flutterStarBorderNamedPolygon:
      return $flutterSrcPaintingStarBorder.StarBorder.polygon(
          side: (tree.flutterStarBorderNamedPolygon.hasSide() ? evaluateRequiredFlutterBorderSideType(tree.flutterStarBorderNamedPolygon.side) : $flutterSrcPaintingBorders.BorderSide.none),
          sides: (tree.flutterStarBorderNamedPolygon.hasSides() ? tree.flutterStarBorderNamedPolygon.sides : 5),
          pointRounding: (tree.flutterStarBorderNamedPolygon.hasPointRounding() ? tree.flutterStarBorderNamedPolygon.pointRounding : 0),
          rotation: (tree.flutterStarBorderNamedPolygon.hasRotation() ? tree.flutterStarBorderNamedPolygon.rotation : 0),
          squash: (tree.flutterStarBorderNamedPolygon.hasSquash() ? tree.flutterStarBorderNamedPolygon.squash : 0));
    case messages.FlutterShapeBorderType_Constructor.materialOutlineInputBorder:
      return $flutterSrcMaterialInputBorder.OutlineInputBorder(
          borderSide: (tree.materialOutlineInputBorder.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.materialOutlineInputBorder.borderSide) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.materialOutlineInputBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialOutlineInputBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(4.0))),
          gapPadding: (tree.materialOutlineInputBorder.hasGapPadding() ? tree.materialOutlineInputBorder.gapPadding : 4.0));
    case messages.FlutterShapeBorderType_Constructor.materialUnderlineInputBorder:
      return $flutterSrcMaterialInputBorder.UnderlineInputBorder(
          borderSide: (tree.materialUnderlineInputBorder.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.materialUnderlineInputBorder.borderSide) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.materialUnderlineInputBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialUnderlineInputBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.only(topLeft: $dartUi.Radius.circular(4.0), topRight: $dartUi.Radius.circular(4.0))));
    default:
      return null;
  }
}

$flutterSrcWidgetsShortcuts.ShortcutManager evaluateRequiredFlutterShortcutManagerType(messages.FlutterShortcutManagerType tree) {
  final result = evaluateFlutterShortcutManagerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsShortcuts.ShortcutManager? evaluateFlutterShortcutManagerType(messages.FlutterShortcutManagerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterShortcutManagerType_Constructor.flutterShortcutManager:
      return $flutterSrcWidgetsShortcuts.ShortcutManager(
          modal: (tree.flutterShortcutManager.hasModal() ? tree.flutterShortcutManager.modal : false));
    default:
      return null;
  }
}

$flutterSrcRenderingShiftedBox.SingleChildLayoutDelegate evaluateRequiredFlutterSingleChildLayoutDelegateType(messages.FlutterSingleChildLayoutDelegateType tree) {
  final result = evaluateFlutterSingleChildLayoutDelegateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingShiftedBox.SingleChildLayoutDelegate? evaluateFlutterSingleChildLayoutDelegateType(messages.FlutterSingleChildLayoutDelegateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSingleChildLayoutDelegateType_Constructor.flutterDesktopTextSelectionToolbarLayoutDelegate:
      return $flutterSrcWidgetsDesktopTextSelectionToolbarLayoutDelegate.DesktopTextSelectionToolbarLayoutDelegate(
          anchor: (tree.flutterDesktopTextSelectionToolbarLayoutDelegate.hasAnchor() ? evaluateRequiredDartOffsetType(tree.flutterDesktopTextSelectionToolbarLayoutDelegate.anchor) : missing('anchor')));
    case messages.FlutterSingleChildLayoutDelegateType_Constructor.flutterTextSelectionToolbarLayoutDelegate:
      return $flutterSrcWidgetsTextSelectionToolbarLayoutDelegate.TextSelectionToolbarLayoutDelegate(
          anchorAbove: (tree.flutterTextSelectionToolbarLayoutDelegate.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.flutterTextSelectionToolbarLayoutDelegate.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.flutterTextSelectionToolbarLayoutDelegate.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.flutterTextSelectionToolbarLayoutDelegate.anchorBelow) : missing('anchorBelow')),
          fitsAbove: (tree.flutterTextSelectionToolbarLayoutDelegate.hasFitsAbove() ? tree.flutterTextSelectionToolbarLayoutDelegate.fitsAbove : null));
    case messages.FlutterSingleChildLayoutDelegateType_Constructor.materialSpellCheckSuggestionsToolbarLayoutDelegate:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbarLayoutDelegate.SpellCheckSuggestionsToolbarLayoutDelegate(
          anchor: (tree.materialSpellCheckSuggestionsToolbarLayoutDelegate.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialSpellCheckSuggestionsToolbarLayoutDelegate.anchor) : missing('anchor')));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.SingleChildRenderObjectWidget evaluateRequiredFlutterSingleChildRenderObjectWidgetType(messages.FlutterSingleChildRenderObjectWidgetType tree) {
  final result = evaluateFlutterSingleChildRenderObjectWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.SingleChildRenderObjectWidget? evaluateFlutterSingleChildRenderObjectWidgetType(messages.FlutterSingleChildRenderObjectWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterAbsorbPointer:
      return $flutterSrcWidgetsBasic.AbsorbPointer(
          key: (tree.flutterAbsorbPointer.hasKey() ? evaluateFlutterKeyType(tree.flutterAbsorbPointer.key) : null),
          absorbing: (tree.flutterAbsorbPointer.hasAbsorbing() ? tree.flutterAbsorbPointer.absorbing : true),
          child: (tree.flutterAbsorbPointer.hasChild() ? evaluateWidgetType(tree.flutterAbsorbPointer.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterAlign:
      return $flutterSrcWidgetsBasic.Align(
          key: (tree.flutterAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAlign.key) : null),
          alignment: (tree.flutterAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAlign.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterAlign.hasWidthFactor() ? tree.flutterAlign.widthFactor : null),
          heightFactor: (tree.flutterAlign.hasHeightFactor() ? tree.flutterAlign.heightFactor : null),
          child: (tree.flutterAlign.hasChild() ? evaluateWidgetType(tree.flutterAlign.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterAspectRatio:
      return $flutterSrcWidgetsBasic.AspectRatio(
          key: (tree.flutterAspectRatio.hasKey() ? evaluateFlutterKeyType(tree.flutterAspectRatio.key) : null),
          aspectRatio: (tree.flutterAspectRatio.hasAspectRatio() ? tree.flutterAspectRatio.aspectRatio : missing('aspectRatio')),
          child: (tree.flutterAspectRatio.hasChild() ? evaluateWidgetType(tree.flutterAspectRatio.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterBackdropFilter:
      return $flutterSrcWidgetsBasic.BackdropFilter(
          key: (tree.flutterBackdropFilter.hasKey() ? evaluateFlutterKeyType(tree.flutterBackdropFilter.key) : null),
          filter: (tree.flutterBackdropFilter.hasFilter() ? evaluateRequiredDartImageFilterType(tree.flutterBackdropFilter.filter) : missing('filter')),
          child: (tree.flutterBackdropFilter.hasChild() ? evaluateWidgetType(tree.flutterBackdropFilter.child) : null),
          blendMode: (tree.flutterBackdropFilter.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterBackdropFilter.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterBaseline:
      return $flutterSrcWidgetsBasic.Baseline(
          key: (tree.flutterBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterBaseline.key) : null),
          baseline: (tree.flutterBaseline.hasBaseline() ? tree.flutterBaseline.baseline : missing('baseline')),
          baselineType: (tree.flutterBaseline.hasBaselineType() ? enums.convertRequiredDartTextBaselineType(tree.flutterBaseline.baselineType) : missing('baselineType')),
          child: (tree.flutterBaseline.hasChild() ? evaluateWidgetType(tree.flutterBaseline.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterBlockSemantics:
      return $flutterSrcWidgetsBasic.BlockSemantics(
          key: (tree.flutterBlockSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterBlockSemantics.key) : null),
          blocking: (tree.flutterBlockSemantics.hasBlocking() ? tree.flutterBlockSemantics.blocking : true),
          child: (tree.flutterBlockSemantics.hasChild() ? evaluateWidgetType(tree.flutterBlockSemantics.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterCenter:
      return $flutterSrcWidgetsBasic.Center(
          key: (tree.flutterCenter.hasKey() ? evaluateFlutterKeyType(tree.flutterCenter.key) : null),
          widthFactor: (tree.flutterCenter.hasWidthFactor() ? tree.flutterCenter.widthFactor : null),
          heightFactor: (tree.flutterCenter.hasHeightFactor() ? tree.flutterCenter.heightFactor : null),
          child: (tree.flutterCenter.hasChild() ? evaluateWidgetType(tree.flutterCenter.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterClipOval:
      return $flutterSrcWidgetsBasic.ClipOval(
          key: (tree.flutterClipOval.hasKey() ? evaluateFlutterKeyType(tree.flutterClipOval.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipOval.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipOval.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipOval.hasChild() ? evaluateWidgetType(tree.flutterClipOval.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterClipPath:
      return $flutterSrcWidgetsBasic.ClipPath(
          key: (tree.flutterClipPath.hasKey() ? evaluateFlutterKeyType(tree.flutterClipPath.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipPath.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipPath.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipPath.hasChild() ? evaluateWidgetType(tree.flutterClipPath.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterClipRRect:
      return $flutterSrcWidgetsBasic.ClipRRect(
          key: (tree.flutterClipRRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRRect.key) : null),
          borderRadius: (tree.flutterClipRRect.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterClipRRect.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          clipper: null,
          clipBehavior: (tree.flutterClipRRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRRect.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipRRect.hasChild() ? evaluateWidgetType(tree.flutterClipRRect.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterClipRect:
      return $flutterSrcWidgetsBasic.ClipRect(
          key: (tree.flutterClipRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRect.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRect.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterClipRect.hasChild() ? evaluateWidgetType(tree.flutterClipRect.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterColorFiltered:
      return $flutterSrcWidgetsColorFilter.ColorFiltered(
          colorFilter: (tree.flutterColorFiltered.hasColorFilter() ? evaluateRequiredDartColorFilterType(tree.flutterColorFiltered.colorFilter) : missing('colorFilter')),
          child: (tree.flutterColorFiltered.hasChild() ? evaluateWidgetType(tree.flutterColorFiltered.child) : null),
          key: (tree.flutterColorFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterColorFiltered.key) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterColoredBox:
      return $flutterSrcWidgetsBasic.ColoredBox(
          color: (tree.flutterColoredBox.hasColor() ? evaluateRequiredDartColorType(tree.flutterColoredBox.color) : missing('color')),
          child: (tree.flutterColoredBox.hasChild() ? evaluateWidgetType(tree.flutterColoredBox.child) : null),
          key: (tree.flutterColoredBox.hasKey() ? evaluateFlutterKeyType(tree.flutterColoredBox.key) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterCompositedTransformFollower:
      return $flutterSrcWidgetsBasic.CompositedTransformFollower(
          key: (tree.flutterCompositedTransformFollower.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformFollower.key) : null),
          link: (tree.flutterCompositedTransformFollower.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformFollower.link) : missing('link')),
          showWhenUnlinked: (tree.flutterCompositedTransformFollower.hasShowWhenUnlinked() ? tree.flutterCompositedTransformFollower.showWhenUnlinked : true),
          offset: (tree.flutterCompositedTransformFollower.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterCompositedTransformFollower.offset) : $dartUi.Offset.zero),
          targetAnchor: (tree.flutterCompositedTransformFollower.hasTargetAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.targetAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          followerAnchor: (tree.flutterCompositedTransformFollower.hasFollowerAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.followerAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          child: (tree.flutterCompositedTransformFollower.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformFollower.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterCompositedTransformTarget:
      return $flutterSrcWidgetsBasic.CompositedTransformTarget(
          key: (tree.flutterCompositedTransformTarget.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformTarget.key) : null),
          link: (tree.flutterCompositedTransformTarget.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformTarget.link) : missing('link')),
          child: (tree.flutterCompositedTransformTarget.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformTarget.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterConstrainedBox:
      return $flutterSrcWidgetsBasic.ConstrainedBox(
          key: (tree.flutterConstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterConstrainedBox.key) : null),
          constraints: (tree.flutterConstrainedBox.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.flutterConstrainedBox.constraints) : missing('constraints')),
          child: (tree.flutterConstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterConstrainedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterCustomPaint:
      return $flutterSrcWidgetsBasic.CustomPaint(
          key: (tree.flutterCustomPaint.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomPaint.key) : null),
          painter: (tree.flutterCustomPaint.hasPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.painter) : null),
          foregroundPainter: (tree.flutterCustomPaint.hasForegroundPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.foregroundPainter) : null),
          size: (tree.flutterCustomPaint.hasSize() ? evaluateRequiredDartSizeType(tree.flutterCustomPaint.size) : $dartUi.Size.zero),
          isComplex: (tree.flutterCustomPaint.hasIsComplex() ? tree.flutterCustomPaint.isComplex : false),
          willChange: (tree.flutterCustomPaint.hasWillChange() ? tree.flutterCustomPaint.willChange : false),
          child: (tree.flutterCustomPaint.hasChild() ? evaluateWidgetType(tree.flutterCustomPaint.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterCustomSingleChildLayout:
      return $flutterSrcWidgetsBasic.CustomSingleChildLayout(
          key: (tree.flutterCustomSingleChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomSingleChildLayout.key) : null),
          delegate: (tree.flutterCustomSingleChildLayout.hasDelegate() ? evaluateRequiredFlutterSingleChildLayoutDelegateType(tree.flutterCustomSingleChildLayout.delegate) : missing('delegate')),
          child: (tree.flutterCustomSingleChildLayout.hasChild() ? evaluateWidgetType(tree.flutterCustomSingleChildLayout.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterDecoratedBox:
      return $flutterSrcWidgetsContainer.DecoratedBox(
          key: (tree.flutterDecoratedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedBox.key) : null),
          decoration: (tree.flutterDecoratedBox.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedBox.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedBox.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedBox.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          child: (tree.flutterDecoratedBox.hasChild() ? evaluateWidgetType(tree.flutterDecoratedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterDecoratedSliver:
      return $flutterSrcWidgetsDecoratedSliver.DecoratedSliver(
          key: (tree.flutterDecoratedSliver.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedSliver.key) : null),
          decoration: (tree.flutterDecoratedSliver.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedSliver.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedSliver.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedSliver.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          sliver: (tree.flutterDecoratedSliver.hasSliver() ? evaluateWidgetType(tree.flutterDecoratedSliver.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterExcludeSemantics:
      return $flutterSrcWidgetsBasic.ExcludeSemantics(
          key: (tree.flutterExcludeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeSemantics.key) : null),
          excluding: (tree.flutterExcludeSemantics.hasExcluding() ? tree.flutterExcludeSemantics.excluding : true),
          child: (tree.flutterExcludeSemantics.hasChild() ? evaluateWidgetType(tree.flutterExcludeSemantics.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterFittedBox:
      return $flutterSrcWidgetsBasic.FittedBox(
          key: (tree.flutterFittedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFittedBox.key) : null),
          fit: (tree.flutterFittedBox.hasFit() ? enums.convertRequiredFlutterBoxFitType(tree.flutterFittedBox.fit) : $flutterSrcPaintingBoxFit.BoxFit.contain),
          alignment: (tree.flutterFittedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFittedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          clipBehavior: (tree.flutterFittedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFittedBox.clipBehavior) : $dartUi.Clip.none),
          child: (tree.flutterFittedBox.hasChild() ? evaluateWidgetType(tree.flutterFittedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterFractionalTranslation:
      return $flutterSrcWidgetsBasic.FractionalTranslation(
          key: (tree.flutterFractionalTranslation.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionalTranslation.key) : null),
          translation: (tree.flutterFractionalTranslation.hasTranslation() ? evaluateRequiredDartOffsetType(tree.flutterFractionalTranslation.translation) : missing('translation')),
          transformHitTests: (tree.flutterFractionalTranslation.hasTransformHitTests() ? tree.flutterFractionalTranslation.transformHitTests : true),
          child: (tree.flutterFractionalTranslation.hasChild() ? evaluateWidgetType(tree.flutterFractionalTranslation.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterFractionallySizedBox:
      return $flutterSrcWidgetsBasic.FractionallySizedBox(
          key: (tree.flutterFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionallySizedBox.key) : null),
          alignment: (tree.flutterFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterFractionallySizedBox.hasWidthFactor() ? tree.flutterFractionallySizedBox.widthFactor : null),
          heightFactor: (tree.flutterFractionallySizedBox.hasHeightFactor() ? tree.flutterFractionallySizedBox.heightFactor : null),
          child: (tree.flutterFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterFractionallySizedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterIgnoreBaseline:
      return $flutterSrcWidgetsBasic.IgnoreBaseline(
          key: (tree.flutterIgnoreBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnoreBaseline.key) : null),
          child: (tree.flutterIgnoreBaseline.hasChild() ? evaluateWidgetType(tree.flutterIgnoreBaseline.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterIgnorePointer:
      return $flutterSrcWidgetsBasic.IgnorePointer(
          key: (tree.flutterIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnorePointer.key) : null),
          ignoring: (tree.flutterIgnorePointer.hasIgnoring() ? tree.flutterIgnorePointer.ignoring : true),
          child: (tree.flutterIgnorePointer.hasChild() ? evaluateWidgetType(tree.flutterIgnorePointer.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterImageFiltered:
      return $flutterSrcWidgetsImageFilter.ImageFiltered(
          key: (tree.flutterImageFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterImageFiltered.key) : null),
          imageFilter: (tree.flutterImageFiltered.hasImageFilter() ? evaluateRequiredDartImageFilterType(tree.flutterImageFiltered.imageFilter) : missing('imageFilter')),
          child: (tree.flutterImageFiltered.hasChild() ? evaluateWidgetType(tree.flutterImageFiltered.child) : null),
          enabled: (tree.flutterImageFiltered.hasEnabled() ? tree.flutterImageFiltered.enabled : true));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterIndexedSemantics:
      return $flutterSrcWidgetsBasic.IndexedSemantics(
          key: (tree.flutterIndexedSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedSemantics.key) : null),
          index: (tree.flutterIndexedSemantics.hasIndex() ? tree.flutterIndexedSemantics.index : missing('index')),
          child: (tree.flutterIndexedSemantics.hasChild() ? evaluateWidgetType(tree.flutterIndexedSemantics.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterIntrinsicHeight:
      return $flutterSrcWidgetsBasic.IntrinsicHeight(
          key: (tree.flutterIntrinsicHeight.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicHeight.key) : null),
          child: (tree.flutterIntrinsicHeight.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicHeight.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterIntrinsicWidth:
      return $flutterSrcWidgetsBasic.IntrinsicWidth(
          key: (tree.flutterIntrinsicWidth.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicWidth.key) : null),
          stepWidth: (tree.flutterIntrinsicWidth.hasStepWidth() ? tree.flutterIntrinsicWidth.stepWidth : null),
          stepHeight: (tree.flutterIntrinsicWidth.hasStepHeight() ? tree.flutterIntrinsicWidth.stepHeight : null),
          child: (tree.flutterIntrinsicWidth.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicWidth.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterLimitedBox:
      return $flutterSrcWidgetsBasic.LimitedBox(
          key: (tree.flutterLimitedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterLimitedBox.key) : null),
          maxWidth: (tree.flutterLimitedBox.hasMaxWidth() ? tree.flutterLimitedBox.maxWidth : $dartCore.double.infinity),
          maxHeight: (tree.flutterLimitedBox.hasMaxHeight() ? tree.flutterLimitedBox.maxHeight : $dartCore.double.infinity),
          child: (tree.flutterLimitedBox.hasChild() ? evaluateWidgetType(tree.flutterLimitedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterListener:
      return $flutterSrcWidgetsBasic.Listener(
          key: (tree.flutterListener.hasKey() ? evaluateFlutterKeyType(tree.flutterListener.key) : null),
          onPointerDown: null,
          onPointerMove: null,
          onPointerUp: null,
          onPointerHover: null,
          onPointerCancel: null,
          onPointerPanZoomStart: null,
          onPointerPanZoomUpdate: null,
          onPointerPanZoomEnd: null,
          onPointerSignal: null,
          behavior: (tree.flutterListener.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterListener.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterListener.hasChild() ? evaluateWidgetType(tree.flutterListener.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterMergeSemantics:
      return $flutterSrcWidgetsBasic.MergeSemantics(
          key: (tree.flutterMergeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterMergeSemantics.key) : null),
          child: (tree.flutterMergeSemantics.hasChild() ? evaluateWidgetType(tree.flutterMergeSemantics.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterMetaData:
      return $flutterSrcWidgetsBasic.MetaData(
          key: (tree.flutterMetaData.hasKey() ? evaluateFlutterKeyType(tree.flutterMetaData.key) : null),
          behavior: (tree.flutterMetaData.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterMetaData.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterMetaData.hasChild() ? evaluateWidgetType(tree.flutterMetaData.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterMouseRegion:
      return $flutterSrcWidgetsBasic.MouseRegion(
          key: (tree.flutterMouseRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterMouseRegion.key) : null),
          onEnter: null,
          onExit: null,
          onHover: null,
          opaque: (tree.flutterMouseRegion.hasOpaque() ? tree.flutterMouseRegion.opaque : true),
          hitTestBehavior: (tree.flutterMouseRegion.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterMouseRegion.hitTestBehavior) : null),
          child: (tree.flutterMouseRegion.hasChild() ? evaluateWidgetType(tree.flutterMouseRegion.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterOffstage:
      return $flutterSrcWidgetsBasic.Offstage(
          key: (tree.flutterOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterOffstage.key) : null),
          offstage: (tree.flutterOffstage.hasOffstage() ? tree.flutterOffstage.offstage : true),
          child: (tree.flutterOffstage.hasChild() ? evaluateWidgetType(tree.flutterOffstage.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterOpacity:
      return $flutterSrcWidgetsBasic.Opacity(
          key: (tree.flutterOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterOpacity.key) : null),
          opacity: (tree.flutterOpacity.hasOpacity() ? tree.flutterOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterOpacity.hasAlwaysIncludeSemantics() ? tree.flutterOpacity.alwaysIncludeSemantics : false),
          child: (tree.flutterOpacity.hasChild() ? evaluateWidgetType(tree.flutterOpacity.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterOverflowBox:
      return $flutterSrcWidgetsBasic.OverflowBox(
          key: (tree.flutterOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBox.key) : null),
          alignment: (tree.flutterOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          minWidth: (tree.flutterOverflowBox.hasMinWidth() ? tree.flutterOverflowBox.minWidth : null),
          maxWidth: (tree.flutterOverflowBox.hasMaxWidth() ? tree.flutterOverflowBox.maxWidth : null),
          minHeight: (tree.flutterOverflowBox.hasMinHeight() ? tree.flutterOverflowBox.minHeight : null),
          maxHeight: (tree.flutterOverflowBox.hasMaxHeight() ? tree.flutterOverflowBox.maxHeight : null),
          child: (tree.flutterOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterOverflowBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterPadding:
      return $flutterSrcWidgetsBasic.Padding(
          key: (tree.flutterPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterPadding.key) : null),
          padding: (tree.flutterPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterPadding.padding) : missing('padding')),
          child: (tree.flutterPadding.hasChild() ? evaluateWidgetType(tree.flutterPadding.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterPhysicalModel:
      return $flutterSrcWidgetsBasic.PhysicalModel(
          key: (tree.flutterPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterPhysicalModel.key) : null),
          shape: (tree.flutterPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterPhysicalModel.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle),
          clipBehavior: (tree.flutterPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterPhysicalModel.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.flutterPhysicalModel.borderRadius) : null),
          elevation: (tree.flutterPhysicalModel.hasElevation() ? tree.flutterPhysicalModel.elevation : 0.0),
          color: (tree.flutterPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.color) : missing('color')),
          shadowColor: (tree.flutterPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.shadowColor) : $dartUi.Color(0xFF000000)),
          child: (tree.flutterPhysicalModel.hasChild() ? evaluateWidgetType(tree.flutterPhysicalModel.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterRepaintBoundary:
      return $flutterSrcWidgetsBasic.RepaintBoundary(
          key: (tree.flutterRepaintBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterRepaintBoundary.key) : null),
          child: (tree.flutterRepaintBoundary.hasChild() ? evaluateWidgetType(tree.flutterRepaintBoundary.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterRepaintBoundaryNamedWrap:
      return $flutterSrcWidgetsBasic.RepaintBoundary.wrap(
          (tree.flutterRepaintBoundaryNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterRepaintBoundaryNamedWrap.child) : missing('child')),
          (tree.flutterRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterRotatedBox:
      return $flutterSrcWidgetsBasic.RotatedBox(
          key: (tree.flutterRotatedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterRotatedBox.key) : null),
          quarterTurns: (tree.flutterRotatedBox.hasQuarterTurns() ? tree.flutterRotatedBox.quarterTurns : missing('quarterTurns')),
          child: (tree.flutterRotatedBox.hasChild() ? evaluateWidgetType(tree.flutterRotatedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSemantics:
      return $flutterSrcWidgetsBasic.Semantics(
          key: (tree.flutterSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterSemantics.key) : null),
          child: (tree.flutterSemantics.hasChild() ? evaluateWidgetType(tree.flutterSemantics.child) : null),
          container: (tree.flutterSemantics.hasContainer() ? tree.flutterSemantics.container : false),
          explicitChildNodes: (tree.flutterSemantics.hasExplicitChildNodes() ? tree.flutterSemantics.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemantics.hasExcludeSemantics() ? tree.flutterSemantics.excludeSemantics : false),
          blockUserActions: (tree.flutterSemantics.hasBlockUserActions() ? tree.flutterSemantics.blockUserActions : false),
          enabled: (tree.flutterSemantics.hasEnabled() ? tree.flutterSemantics.enabled : null),
          checked: (tree.flutterSemantics.hasChecked() ? tree.flutterSemantics.checked : null),
          mixed: (tree.flutterSemantics.hasMixed() ? tree.flutterSemantics.mixed : null),
          selected: (tree.flutterSemantics.hasSelected() ? tree.flutterSemantics.selected : null),
          toggled: (tree.flutterSemantics.hasToggled() ? tree.flutterSemantics.toggled : null),
          button: (tree.flutterSemantics.hasButton() ? tree.flutterSemantics.button : null),
          slider: (tree.flutterSemantics.hasSlider() ? tree.flutterSemantics.slider : null),
          keyboardKey: (tree.flutterSemantics.hasKeyboardKey() ? tree.flutterSemantics.keyboardKey : null),
          link: (tree.flutterSemantics.hasLink() ? tree.flutterSemantics.link : null),
          header: (tree.flutterSemantics.hasHeader() ? tree.flutterSemantics.header : null),
          textField: (tree.flutterSemantics.hasTextField() ? tree.flutterSemantics.textField : null),
          readOnly: (tree.flutterSemantics.hasReadOnly() ? tree.flutterSemantics.readOnly : null),
          focusable: (tree.flutterSemantics.hasFocusable() ? tree.flutterSemantics.focusable : null),
          focused: (tree.flutterSemantics.hasFocused() ? tree.flutterSemantics.focused : null),
          inMutuallyExclusiveGroup: (tree.flutterSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterSemantics.inMutuallyExclusiveGroup : null),
          obscured: (tree.flutterSemantics.hasObscured() ? tree.flutterSemantics.obscured : null),
          multiline: (tree.flutterSemantics.hasMultiline() ? tree.flutterSemantics.multiline : null),
          scopesRoute: (tree.flutterSemantics.hasScopesRoute() ? tree.flutterSemantics.scopesRoute : null),
          namesRoute: (tree.flutterSemantics.hasNamesRoute() ? tree.flutterSemantics.namesRoute : null),
          hidden: (tree.flutterSemantics.hasHidden() ? tree.flutterSemantics.hidden : null),
          image: (tree.flutterSemantics.hasImage() ? tree.flutterSemantics.image : null),
          liveRegion: (tree.flutterSemantics.hasLiveRegion() ? tree.flutterSemantics.liveRegion : null),
          expanded: (tree.flutterSemantics.hasExpanded() ? tree.flutterSemantics.expanded : null),
          maxValueLength: (tree.flutterSemantics.hasMaxValueLength() ? tree.flutterSemantics.maxValueLength : null),
          currentValueLength: (tree.flutterSemantics.hasCurrentValueLength() ? tree.flutterSemantics.currentValueLength : null),
          label: (tree.flutterSemantics.hasLabel() ? tree.flutterSemantics.label : null),
          attributedLabel: (tree.flutterSemantics.hasAttributedLabel() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedLabel) : null),
          value: (tree.flutterSemantics.hasValue() ? tree.flutterSemantics.value : null),
          attributedValue: (tree.flutterSemantics.hasAttributedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedValue) : null),
          increasedValue: (tree.flutterSemantics.hasIncreasedValue() ? tree.flutterSemantics.increasedValue : null),
          attributedIncreasedValue: (tree.flutterSemantics.hasAttributedIncreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedIncreasedValue) : null),
          decreasedValue: (tree.flutterSemantics.hasDecreasedValue() ? tree.flutterSemantics.decreasedValue : null),
          attributedDecreasedValue: (tree.flutterSemantics.hasAttributedDecreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedDecreasedValue) : null),
          hint: (tree.flutterSemantics.hasHint() ? tree.flutterSemantics.hint : null),
          attributedHint: (tree.flutterSemantics.hasAttributedHint() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedHint) : null),
          tooltip: (tree.flutterSemantics.hasTooltip() ? tree.flutterSemantics.tooltip : null),
          onTapHint: (tree.flutterSemantics.hasOnTapHint() ? tree.flutterSemantics.onTapHint : null),
          onLongPressHint: (tree.flutterSemantics.hasOnLongPressHint() ? tree.flutterSemantics.onLongPressHint : null),
          textDirection: (tree.flutterSemantics.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterSemantics.textDirection) : null),
          sortKey: (tree.flutterSemantics.hasSortKey() ? evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree.flutterSemantics.sortKey) : null),
          tagForChildren: (tree.flutterSemantics.hasTagForChildren() ? evaluateFlutterSrcSemanticsSemanticsTagType(tree.flutterSemantics.tagForChildren) : null),
          onTap: null,
          onLongPress: null,
          onScrollLeft: null,
          onScrollRight: null,
          onScrollUp: null,
          onScrollDown: null,
          onIncrease: null,
          onDecrease: null,
          onCopy: null,
          onCut: null,
          onPaste: null,
          onDismiss: null,
          onMoveCursorForwardByCharacter: null,
          onMoveCursorBackwardByCharacter: null,
          onSetSelection: null,
          onSetText: null,
          onDidGainAccessibilityFocus: null,
          onDidLoseAccessibilityFocus: null,
          customSemanticsActions: null);
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSemanticsNamedFromProperties:
      return $flutterSrcWidgetsBasic.Semantics.fromProperties(
          key: (tree.flutterSemanticsNamedFromProperties.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsNamedFromProperties.key) : null),
          child: (tree.flutterSemanticsNamedFromProperties.hasChild() ? evaluateWidgetType(tree.flutterSemanticsNamedFromProperties.child) : null),
          container: (tree.flutterSemanticsNamedFromProperties.hasContainer() ? tree.flutterSemanticsNamedFromProperties.container : false),
          explicitChildNodes: (tree.flutterSemanticsNamedFromProperties.hasExplicitChildNodes() ? tree.flutterSemanticsNamedFromProperties.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemanticsNamedFromProperties.hasExcludeSemantics() ? tree.flutterSemanticsNamedFromProperties.excludeSemantics : false),
          blockUserActions: (tree.flutterSemanticsNamedFromProperties.hasBlockUserActions() ? tree.flutterSemanticsNamedFromProperties.blockUserActions : false),
          properties: (tree.flutterSemanticsNamedFromProperties.hasProperties() ? evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(tree.flutterSemanticsNamedFromProperties.properties) : missing('properties')));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizeChangedLayoutNotifier:
      return $flutterSrcWidgetsSizeChangedLayoutNotifier.SizeChangedLayoutNotifier(
          key: (tree.flutterSizeChangedLayoutNotifier.hasKey() ? evaluateFlutterKeyType(tree.flutterSizeChangedLayoutNotifier.key) : null),
          child: (tree.flutterSizeChangedLayoutNotifier.hasChild() ? evaluateWidgetType(tree.flutterSizeChangedLayoutNotifier.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedBox:
      return $flutterSrcWidgetsBasic.SizedBox(
          key: (tree.flutterSizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBox.key) : null),
          width: (tree.flutterSizedBox.hasWidth() ? tree.flutterSizedBox.width : null),
          height: (tree.flutterSizedBox.hasHeight() ? tree.flutterSizedBox.height : null),
          child: (tree.flutterSizedBox.hasChild() ? evaluateWidgetType(tree.flutterSizedBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedBoxNamedExpand:
      return $flutterSrcWidgetsBasic.SizedBox.expand(
          key: (tree.flutterSizedBoxNamedExpand.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedExpand.key) : null),
          child: (tree.flutterSizedBoxNamedExpand.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedExpand.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedBoxNamedFromSize:
      return $flutterSrcWidgetsBasic.SizedBox.fromSize(
          key: (tree.flutterSizedBoxNamedFromSize.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedFromSize.key) : null),
          child: (tree.flutterSizedBoxNamedFromSize.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedFromSize.child) : null),
          size: (tree.flutterSizedBoxNamedFromSize.hasSize() ? evaluateDartSizeType(tree.flutterSizedBoxNamedFromSize.size) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedBoxNamedShrink:
      return $flutterSrcWidgetsBasic.SizedBox.shrink(
          key: (tree.flutterSizedBoxNamedShrink.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedShrink.key) : null),
          child: (tree.flutterSizedBoxNamedShrink.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedShrink.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedBoxNamedSquare:
      return $flutterSrcWidgetsBasic.SizedBox.square(
          key: (tree.flutterSizedBoxNamedSquare.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedSquare.key) : null),
          child: (tree.flutterSizedBoxNamedSquare.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedSquare.child) : null),
          dimension: (tree.flutterSizedBoxNamedSquare.hasDimension() ? tree.flutterSizedBoxNamedSquare.dimension : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSizedOverflowBox:
      return $flutterSrcWidgetsBasic.SizedOverflowBox(
          key: (tree.flutterSizedOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedOverflowBox.key) : null),
          size: (tree.flutterSizedOverflowBox.hasSize() ? evaluateRequiredDartSizeType(tree.flutterSizedOverflowBox.size) : missing('size')),
          alignment: (tree.flutterSizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterSizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterSizedOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterSizedOverflowBox.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverIgnorePointer:
      return $flutterSrcWidgetsSliver.SliverIgnorePointer(
          key: (tree.flutterSliverIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverIgnorePointer.key) : null),
          ignoring: (tree.flutterSliverIgnorePointer.hasIgnoring() ? tree.flutterSliverIgnorePointer.ignoring : true),
          sliver: (tree.flutterSliverIgnorePointer.hasSliver() ? evaluateWidgetType(tree.flutterSliverIgnorePointer.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverOffstage:
      return $flutterSrcWidgetsSliver.SliverOffstage(
          key: (tree.flutterSliverOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOffstage.key) : null),
          offstage: (tree.flutterSliverOffstage.hasOffstage() ? tree.flutterSliverOffstage.offstage : true),
          sliver: (tree.flutterSliverOffstage.hasSliver() ? evaluateWidgetType(tree.flutterSliverOffstage.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverOpacity:
      return $flutterSrcWidgetsSliver.SliverOpacity(
          key: (tree.flutterSliverOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOpacity.key) : null),
          opacity: (tree.flutterSliverOpacity.hasOpacity() ? tree.flutterSliverOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverOpacity.alwaysIncludeSemantics : false),
          sliver: (tree.flutterSliverOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverOpacity.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverOverlapAbsorber:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorber(
          key: (tree.flutterSliverOverlapAbsorber.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapAbsorber.key) : null),
          handle: (tree.flutterSliverOverlapAbsorber.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapAbsorber.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapAbsorber.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapAbsorber.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverOverlapInjector:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapInjector(
          key: (tree.flutterSliverOverlapInjector.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapInjector.key) : null),
          handle: (tree.flutterSliverOverlapInjector.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapInjector.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapInjector.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapInjector.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverPadding:
      return $flutterSrcWidgetsBasic.SliverPadding(
          key: (tree.flutterSliverPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPadding.key) : null),
          padding: (tree.flutterSliverPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterSliverPadding.padding) : missing('padding')),
          sliver: (tree.flutterSliverPadding.hasSliver() ? evaluateWidgetType(tree.flutterSliverPadding.sliver) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSliverToBoxAdapter:
      return $flutterSrcWidgetsBasic.SliverToBoxAdapter(
          key: (tree.flutterSliverToBoxAdapter.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverToBoxAdapter.key) : null),
          child: (tree.flutterSliverToBoxAdapter.hasChild() ? evaluateWidgetType(tree.flutterSliverToBoxAdapter.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterSnapshotWidget:
      return $flutterSrcWidgetsSnapshotWidget.SnapshotWidget(
          key: (tree.flutterSnapshotWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterSnapshotWidget.key) : null),
          mode: (tree.flutterSnapshotWidget.hasMode() ? enums.convertRequiredFlutterSnapshotModeType(tree.flutterSnapshotWidget.mode) : $flutterSrcWidgetsSnapshotWidget.SnapshotMode.normal),
          autoresize: (tree.flutterSnapshotWidget.hasAutoresize() ? tree.flutterSnapshotWidget.autoresize : false),
          controller: (tree.flutterSnapshotWidget.hasController() ? evaluateRequiredFlutterSnapshotControllerType(tree.flutterSnapshotWidget.controller) : missing('controller')),
          child: (tree.flutterSnapshotWidget.hasChild() ? evaluateWidgetType(tree.flutterSnapshotWidget.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTapRegion:
      return $flutterSrcWidgetsTapRegion.TapRegion(
          key: (tree.flutterTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegion.key) : null),
          child: (tree.flutterTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTapRegion.child) : null),
          enabled: (tree.flutterTapRegion.hasEnabled() ? tree.flutterTapRegion.enabled : true),
          behavior: (tree.flutterTapRegion.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterTapRegion.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          onTapOutside: null,
          onTapInside: null,
          groupId: null,
          debugLabel: (tree.flutterTapRegion.hasDebugLabel() ? tree.flutterTapRegion.debugLabel : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.TapRegionSurface(
          key: (tree.flutterTapRegionSurface.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegionSurface.key) : null),
          child: (tree.flutterTapRegionSurface.hasChild() ? evaluateRequiredWidgetType(tree.flutterTapRegionSurface.child) : missing('child')));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTextFieldTapRegion:
      return $flutterSrcWidgetsTapRegion.TextFieldTapRegion(
          key: (tree.flutterTextFieldTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTextFieldTapRegion.key) : null),
          child: (tree.flutterTextFieldTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTextFieldTapRegion.child) : null),
          enabled: (tree.flutterTextFieldTapRegion.hasEnabled() ? tree.flutterTextFieldTapRegion.enabled : true),
          onTapOutside: null,
          onTapInside: null,
          debugLabel: (tree.flutterTextFieldTapRegion.hasDebugLabel() ? tree.flutterTextFieldTapRegion.debugLabel : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTransform:
      return $flutterSrcWidgetsBasic.Transform(
          key: (tree.flutterTransform.hasKey() ? evaluateFlutterKeyType(tree.flutterTransform.key) : null),
          transform: (tree.flutterTransform.hasTransform() ? evaluateRequiredVectorMathMatrix4Type(tree.flutterTransform.transform) : missing('transform')),
          origin: (tree.flutterTransform.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransform.origin) : null),
          alignment: (tree.flutterTransform.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransform.alignment) : null),
          transformHitTests: (tree.flutterTransform.hasTransformHitTests() ? tree.flutterTransform.transformHitTests : true),
          filterQuality: (tree.flutterTransform.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransform.filterQuality) : null),
          child: (tree.flutterTransform.hasChild() ? evaluateWidgetType(tree.flutterTransform.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTransformNamedFlip:
      return $flutterSrcWidgetsBasic.Transform.flip(
          key: (tree.flutterTransformNamedFlip.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedFlip.key) : null),
          flipX: (tree.flutterTransformNamedFlip.hasFlipX() ? tree.flutterTransformNamedFlip.flipX : false),
          flipY: (tree.flutterTransformNamedFlip.hasFlipY() ? tree.flutterTransformNamedFlip.flipY : false),
          origin: (tree.flutterTransformNamedFlip.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedFlip.origin) : null),
          transformHitTests: (tree.flutterTransformNamedFlip.hasTransformHitTests() ? tree.flutterTransformNamedFlip.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedFlip.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedFlip.filterQuality) : null),
          child: (tree.flutterTransformNamedFlip.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedFlip.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTransformNamedRotate:
      return $flutterSrcWidgetsBasic.Transform.rotate(
          key: (tree.flutterTransformNamedRotate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedRotate.key) : null),
          angle: (tree.flutterTransformNamedRotate.hasAngle() ? tree.flutterTransformNamedRotate.angle : missing('angle')),
          origin: (tree.flutterTransformNamedRotate.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedRotate.origin) : null),
          alignment: (tree.flutterTransformNamedRotate.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedRotate.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedRotate.hasTransformHitTests() ? tree.flutterTransformNamedRotate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedRotate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedRotate.filterQuality) : null),
          child: (tree.flutterTransformNamedRotate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedRotate.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTransformNamedScale:
      return $flutterSrcWidgetsBasic.Transform.scale(
          key: (tree.flutterTransformNamedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedScale.key) : null),
          scale: (tree.flutterTransformNamedScale.hasScale() ? tree.flutterTransformNamedScale.scale : null),
          scaleX: (tree.flutterTransformNamedScale.hasScaleX() ? tree.flutterTransformNamedScale.scaleX : null),
          scaleY: (tree.flutterTransformNamedScale.hasScaleY() ? tree.flutterTransformNamedScale.scaleY : null),
          origin: (tree.flutterTransformNamedScale.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedScale.origin) : null),
          alignment: (tree.flutterTransformNamedScale.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedScale.hasTransformHitTests() ? tree.flutterTransformNamedScale.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedScale.filterQuality) : null),
          child: (tree.flutterTransformNamedScale.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedScale.child) : null));
    case messages.FlutterSingleChildRenderObjectWidgetType_Constructor.flutterTransformNamedTranslate:
      return $flutterSrcWidgetsBasic.Transform.translate(
          key: (tree.flutterTransformNamedTranslate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedTranslate.key) : null),
          offset: (tree.flutterTransformNamedTranslate.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterTransformNamedTranslate.offset) : missing('offset')),
          transformHitTests: (tree.flutterTransformNamedTranslate.hasTransformHitTests() ? tree.flutterTransformNamedTranslate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedTranslate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedTranslate.filterQuality) : null),
          child: (tree.flutterTransformNamedTranslate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedTranslate.child) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsScrollDelegate.SliverChildDelegate evaluateRequiredFlutterSliverChildDelegateType(messages.FlutterSliverChildDelegateType tree) {
  final result = evaluateFlutterSliverChildDelegateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsScrollDelegate.SliverChildDelegate? evaluateFlutterSliverChildDelegateType(messages.FlutterSliverChildDelegateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSliverChildDelegateType_Constructor.flutterSliverChildListDelegate:
      return $flutterSrcWidgetsScrollDelegate.SliverChildListDelegate(
          tree.flutterSliverChildListDelegate.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          addAutomaticKeepAlives: (tree.flutterSliverChildListDelegate.hasAddAutomaticKeepAlives() ? tree.flutterSliverChildListDelegate.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverChildListDelegate.hasAddRepaintBoundaries() ? tree.flutterSliverChildListDelegate.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverChildListDelegate.hasAddSemanticIndexes() ? tree.flutterSliverChildListDelegate.addSemanticIndexes : true),
          semanticIndexOffset: (tree.flutterSliverChildListDelegate.hasSemanticIndexOffset() ? tree.flutterSliverChildListDelegate.semanticIndexOffset : 0));
    case messages.FlutterSliverChildDelegateType_Constructor.flutterSliverChildListDelegateNamedFixed:
      return $flutterSrcWidgetsScrollDelegate.SliverChildListDelegate.fixed(
          tree.flutterSliverChildListDelegateNamedFixed.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          addAutomaticKeepAlives: (tree.flutterSliverChildListDelegateNamedFixed.hasAddAutomaticKeepAlives() ? tree.flutterSliverChildListDelegateNamedFixed.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverChildListDelegateNamedFixed.hasAddRepaintBoundaries() ? tree.flutterSliverChildListDelegateNamedFixed.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverChildListDelegateNamedFixed.hasAddSemanticIndexes() ? tree.flutterSliverChildListDelegateNamedFixed.addSemanticIndexes : true),
          semanticIndexOffset: (tree.flutterSliverChildListDelegateNamedFixed.hasSemanticIndexOffset() ? tree.flutterSliverChildListDelegateNamedFixed.semanticIndexOffset : 0));
    default:
      return null;
  }
}

$flutterSrcRenderingSliverGrid.SliverGridDelegate evaluateRequiredFlutterSliverGridDelegateType(messages.FlutterSliverGridDelegateType tree) {
  final result = evaluateFlutterSliverGridDelegateType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingSliverGrid.SliverGridDelegate? evaluateFlutterSliverGridDelegateType(messages.FlutterSliverGridDelegateType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSliverGridDelegateType_Constructor.flutterSliverGridDelegateWithFixedCrossAxisCount:
      return $flutterSrcRenderingSliverGrid.SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: (tree.flutterSliverGridDelegateWithFixedCrossAxisCount.hasCrossAxisCount() ? tree.flutterSliverGridDelegateWithFixedCrossAxisCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterSliverGridDelegateWithFixedCrossAxisCount.hasMainAxisSpacing() ? tree.flutterSliverGridDelegateWithFixedCrossAxisCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridDelegateWithFixedCrossAxisCount.hasCrossAxisSpacing() ? tree.flutterSliverGridDelegateWithFixedCrossAxisCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridDelegateWithFixedCrossAxisCount.hasChildAspectRatio() ? tree.flutterSliverGridDelegateWithFixedCrossAxisCount.childAspectRatio : 1.0),
          mainAxisExtent: (tree.flutterSliverGridDelegateWithFixedCrossAxisCount.hasMainAxisExtent() ? tree.flutterSliverGridDelegateWithFixedCrossAxisCount.mainAxisExtent : null));
    case messages.FlutterSliverGridDelegateType_Constructor.flutterSliverGridDelegateWithMaxCrossAxisExtent:
      return $flutterSrcRenderingSliverGrid.SliverGridDelegateWithMaxCrossAxisExtent(
          maxCrossAxisExtent: (tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.hasMaxCrossAxisExtent() ? tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.hasMainAxisSpacing() ? tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.hasCrossAxisSpacing() ? tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.hasChildAspectRatio() ? tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.childAspectRatio : 1.0),
          mainAxisExtent: (tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.hasMainAxisExtent() ? tree.flutterSliverGridDelegateWithMaxCrossAxisExtent.mainAxisExtent : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsSliver.SliverMultiBoxAdaptorWidget evaluateRequiredFlutterSliverMultiBoxAdaptorWidgetType(messages.FlutterSliverMultiBoxAdaptorWidgetType tree) {
  final result = evaluateFlutterSliverMultiBoxAdaptorWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsSliver.SliverMultiBoxAdaptorWidget? evaluateFlutterSliverMultiBoxAdaptorWidgetType(messages.FlutterSliverMultiBoxAdaptorWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverFixedExtentList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList(
          key: (tree.flutterSliverFixedExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentList.key) : null),
          delegate: (tree.flutterSliverFixedExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFixedExtentList.delegate) : missing('delegate')),
          itemExtent: (tree.flutterSliverFixedExtentList.hasItemExtent() ? tree.flutterSliverFixedExtentList.itemExtent : missing('itemExtent')));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverFixedExtentListNamedList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList.list(
          key: (tree.flutterSliverFixedExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentListNamedList.key) : null),
          children: tree.flutterSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          itemExtent: (tree.flutterSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')),
          addAutomaticKeepAlives: (tree.flutterSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverFixedExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverFixedExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverGrid:
      return $flutterSrcWidgetsSliver.SliverGrid(
          key: (tree.flutterSliverGrid.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGrid.key) : null),
          delegate: (tree.flutterSliverGrid.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverGrid.delegate) : missing('delegate')),
          gridDelegate: (tree.flutterSliverGrid.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterSliverGrid.gridDelegate) : missing('gridDelegate')));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverGridNamedCount:
      return $flutterSrcWidgetsSliver.SliverGrid.count(
          key: (tree.flutterSliverGridNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedCount.key) : null),
          crossAxisCount: (tree.flutterSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterSliverGridNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterSliverGridNamedCount.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverGridNamedExtent:
      return $flutterSrcWidgetsSliver.SliverGrid.extent(
          key: (tree.flutterSliverGridNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedExtent.key) : null),
          maxCrossAxisExtent: (tree.flutterSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterSliverGridNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterSliverGridNamedExtent.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverList:
      return $flutterSrcWidgetsSliver.SliverList(
          key: (tree.flutterSliverList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverList.key) : null),
          delegate: (tree.flutterSliverList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverList.delegate) : missing('delegate')));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverListNamedList:
      return $flutterSrcWidgetsSliver.SliverList.list(
          key: (tree.flutterSliverListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverListNamedList.key) : null),
          children: tree.flutterSliverListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          addAutomaticKeepAlives: (tree.flutterSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverListNamedList.addSemanticIndexes : true));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverPrototypeExtentList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList(
          key: (tree.flutterSliverPrototypeExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentList.key) : null),
          delegate: (tree.flutterSliverPrototypeExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverPrototypeExtentList.delegate) : missing('delegate')),
          prototypeItem: (tree.flutterSliverPrototypeExtentList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentList.prototypeItem) : missing('prototypeItem')));
    case messages.FlutterSliverMultiBoxAdaptorWidgetType_Constructor.flutterSliverPrototypeExtentListNamedList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList.list(
          key: (tree.flutterSliverPrototypeExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentListNamedList.key) : null),
          children: tree.flutterSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          prototypeItem: (tree.flutterSliverPrototypeExtentListNamedList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentListNamedList.prototypeItem) : missing('prototypeItem')),
          addAutomaticKeepAlives: (tree.flutterSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverPrototypeExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    default:
      return null;
  }
}

$flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorberHandle evaluateRequiredFlutterSliverOverlapAbsorberHandleType(messages.FlutterSliverOverlapAbsorberHandleType tree) {
  final result = evaluateFlutterSliverOverlapAbsorberHandleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorberHandle? evaluateFlutterSliverOverlapAbsorberHandleType(messages.FlutterSliverOverlapAbsorberHandleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSliverOverlapAbsorberHandleType_Constructor.flutterSliverOverlapAbsorberHandle:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorberHandle(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsSnapshotWidget.SnapshotController evaluateRequiredFlutterSnapshotControllerType(messages.FlutterSnapshotControllerType tree) {
  final result = evaluateFlutterSnapshotControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsSnapshotWidget.SnapshotController? evaluateFlutterSnapshotControllerType(messages.FlutterSnapshotControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSnapshotControllerType_Constructor.flutterSnapshotController:
      return $flutterSrcWidgetsSnapshotWidget.SnapshotController(
          allowSnapshotting: (tree.flutterSnapshotController.hasAllowSnapshotting() ? tree.flutterSnapshotController.allowSnapshotting : false));
    default:
      return null;
  }
}

$flutterSrcWidgetsSpellCheck.SpellCheckConfiguration evaluateRequiredFlutterSpellCheckConfigurationType(messages.FlutterSpellCheckConfigurationType tree) {
  final result = evaluateFlutterSpellCheckConfigurationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsSpellCheck.SpellCheckConfiguration? evaluateFlutterSpellCheckConfigurationType(messages.FlutterSpellCheckConfigurationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSpellCheckConfigurationType_Constructor.flutterSpellCheckConfiguration:
      return $flutterSrcWidgetsSpellCheck.SpellCheckConfiguration(
          spellCheckService: (tree.flutterSpellCheckConfiguration.hasSpellCheckService() ? evaluateFlutterSpellCheckServiceType(tree.flutterSpellCheckConfiguration.spellCheckService) : null),
          misspelledSelectionColor: (tree.flutterSpellCheckConfiguration.hasMisspelledSelectionColor() ? evaluateDartColorType(tree.flutterSpellCheckConfiguration.misspelledSelectionColor) : null),
          misspelledTextStyle: (tree.flutterSpellCheckConfiguration.hasMisspelledTextStyle() ? evaluateFlutterTextStyleType(tree.flutterSpellCheckConfiguration.misspelledTextStyle) : null),
          spellCheckSuggestionsToolbarBuilder: null);
    case messages.FlutterSpellCheckConfigurationType_Constructor.flutterSpellCheckConfigurationNamedDisabled:
      return $flutterSrcWidgetsSpellCheck.SpellCheckConfiguration.disabled(
          );
    default:
      return null;
  }
}

$flutterSrcServicesSpellCheck.SpellCheckService evaluateRequiredFlutterSpellCheckServiceType(messages.FlutterSpellCheckServiceType tree) {
  final result = evaluateFlutterSpellCheckServiceType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesSpellCheck.SpellCheckService? evaluateFlutterSpellCheckServiceType(messages.FlutterSpellCheckServiceType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSpellCheckServiceType_Constructor.flutterDefaultSpellCheckService:
      return $flutterSrcServicesSpellCheck.DefaultSpellCheckService(
          );
    default:
      return null;
  }
}

$flutterSrcAnimationCurves.Curve evaluateRequiredFlutterSrcAnimationCurveType(messages.FlutterSrcAnimationCurveType tree) {
  final result = evaluateFlutterSrcAnimationCurveType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcAnimationCurves.Curve? evaluateFlutterSrcAnimationCurveType(messages.FlutterSrcAnimationCurveType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationCatmullRomCurve:
      return $flutterSrcAnimationCurves.CatmullRomCurve(
          tree.flutterSrcAnimationCatmullRomCurve.controlPoints.map((e) => evaluateRequiredDartOffsetType(e)).toList(),
          tension: (tree.flutterSrcAnimationCatmullRomCurve.hasTension() ? tree.flutterSrcAnimationCatmullRomCurve.tension : 0.0));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationCatmullRomCurveNamedPrecompute:
      return $flutterSrcAnimationCurves.CatmullRomCurve.precompute(
          tree.flutterSrcAnimationCatmullRomCurveNamedPrecompute.controlPoints.map((e) => evaluateRequiredDartOffsetType(e)).toList(),
          tension: (tree.flutterSrcAnimationCatmullRomCurveNamedPrecompute.hasTension() ? tree.flutterSrcAnimationCatmullRomCurveNamedPrecompute.tension : 0.0));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationCubic:
      return $flutterSrcAnimationCurves.Cubic(
          (tree.flutterSrcAnimationCubic.hasA() ? tree.flutterSrcAnimationCubic.a : missing('a')),
          (tree.flutterSrcAnimationCubic.hasB() ? tree.flutterSrcAnimationCubic.b : missing('b')),
          (tree.flutterSrcAnimationCubic.hasC() ? tree.flutterSrcAnimationCubic.c : missing('c')),
          (tree.flutterSrcAnimationCubic.hasD() ? tree.flutterSrcAnimationCubic.d : missing('d')));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationElasticInCurve:
      return $flutterSrcAnimationCurves.ElasticInCurve(
          (tree.flutterSrcAnimationElasticInCurve.hasPeriod() ? tree.flutterSrcAnimationElasticInCurve.period : 0.4));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationElasticInOutCurve:
      return $flutterSrcAnimationCurves.ElasticInOutCurve(
          (tree.flutterSrcAnimationElasticInOutCurve.hasPeriod() ? tree.flutterSrcAnimationElasticInOutCurve.period : 0.4));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationElasticOutCurve:
      return $flutterSrcAnimationCurves.ElasticOutCurve(
          (tree.flutterSrcAnimationElasticOutCurve.hasPeriod() ? tree.flutterSrcAnimationElasticOutCurve.period : 0.4));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationFlippedCurve:
      return $flutterSrcAnimationCurves.FlippedCurve(
          (tree.flutterSrcAnimationFlippedCurve.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterSrcAnimationFlippedCurve.curve) : missing('curve')));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationInterval:
      return $flutterSrcAnimationCurves.Interval(
          (tree.flutterSrcAnimationInterval.hasBegin() ? tree.flutterSrcAnimationInterval.begin : missing('begin')),
          (tree.flutterSrcAnimationInterval.hasEnd() ? tree.flutterSrcAnimationInterval.end : missing('end')),
          curve: (tree.flutterSrcAnimationInterval.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterSrcAnimationInterval.curve) : $flutterSrcAnimationCurves.Curves.linear));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationSawTooth:
      return $flutterSrcAnimationCurves.SawTooth(
          (tree.flutterSrcAnimationSawTooth.hasCount() ? tree.flutterSrcAnimationSawTooth.count : missing('count')));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationThreePointCubic:
      return $flutterSrcAnimationCurves.ThreePointCubic(
          (tree.flutterSrcAnimationThreePointCubic.hasA1() ? evaluateRequiredDartOffsetType(tree.flutterSrcAnimationThreePointCubic.a1) : missing('a1')),
          (tree.flutterSrcAnimationThreePointCubic.hasB1() ? evaluateRequiredDartOffsetType(tree.flutterSrcAnimationThreePointCubic.b1) : missing('b1')),
          (tree.flutterSrcAnimationThreePointCubic.hasMidpoint() ? evaluateRequiredDartOffsetType(tree.flutterSrcAnimationThreePointCubic.midpoint) : missing('midpoint')),
          (tree.flutterSrcAnimationThreePointCubic.hasA2() ? evaluateRequiredDartOffsetType(tree.flutterSrcAnimationThreePointCubic.a2) : missing('a2')),
          (tree.flutterSrcAnimationThreePointCubic.hasB2() ? evaluateRequiredDartOffsetType(tree.flutterSrcAnimationThreePointCubic.b2) : missing('b2')));
    case messages.FlutterSrcAnimationCurveType_Constructor.flutterSrcAnimationThreshold:
      return $flutterSrcAnimationCurves.Threshold(
          (tree.flutterSrcAnimationThreshold.hasThreshold() ? tree.flutterSrcAnimationThreshold.threshold : missing('threshold')));
    default:
      return null;
  }
}

$flutterSrcSchedulerTicker.TickerProvider evaluateRequiredFlutterSrcSchedulerTickerProviderType(messages.FlutterSrcSchedulerTickerProviderType tree) {
  final result = evaluateFlutterSrcSchedulerTickerProviderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSchedulerTicker.TickerProvider? evaluateFlutterSrcSchedulerTickerProviderType(messages.FlutterSrcSchedulerTickerProviderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterAnimatedGridState:
      return $flutterSrcWidgetsAnimatedScrollView.AnimatedGridState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterAnimatedListState:
      return $flutterSrcWidgetsAnimatedScrollView.AnimatedListState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterEditableTextState:
      return $flutterSrcWidgetsEditableText.EditableTextState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterNavigatorState:
      return $flutterSrcWidgetsNavigator.NavigatorState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterOverlayState:
      return $flutterSrcWidgetsOverlay.OverlayState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterRawScrollbarState:
      return $flutterSrcWidgetsScrollbar.RawScrollbarState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterScrollableState:
      return $flutterSrcWidgetsScrollable.ScrollableState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterSliverAnimatedGridState:
      return $flutterSrcWidgetsAnimatedScrollView.SliverAnimatedGridState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterSliverAnimatedListState:
      return $flutterSrcWidgetsAnimatedScrollView.SliverAnimatedListState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.flutterSliverReorderableListState:
      return $flutterSrcWidgetsReorderableList.SliverReorderableListState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.materialDrawerControllerState:
      return $flutterSrcMaterialDrawer.DrawerControllerState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.materialRefreshIndicatorState:
      return $flutterSrcMaterialRefreshIndicator.RefreshIndicatorState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.materialScaffoldMessengerState:
      return $flutterSrcMaterialScaffold.ScaffoldMessengerState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.materialScaffoldState:
      return $flutterSrcMaterialScaffold.ScaffoldState(
          );
    case messages.FlutterSrcSchedulerTickerProviderType_Constructor.materialTooltipState:
      return $flutterSrcMaterialTooltip.TooltipState(
          );
    default:
      return null;
  }
}

$flutterSrcSemanticsSemantics.AttributedString evaluateRequiredFlutterSrcSemanticsAttributedStringType(messages.FlutterSrcSemanticsAttributedStringType tree) {
  final result = evaluateFlutterSrcSemanticsAttributedStringType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSemanticsSemantics.AttributedString? evaluateFlutterSrcSemanticsAttributedStringType(messages.FlutterSrcSemanticsAttributedStringType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSemanticsAttributedStringType_Constructor.flutterSrcSemanticsAttributedString:
      return $flutterSrcSemanticsSemantics.AttributedString(
          (tree.flutterSrcSemanticsAttributedString.hasString() ? tree.flutterSrcSemanticsAttributedString.string : missing('string')),
          attributes: tree.flutterSrcSemanticsAttributedString.attributes.map((e) => evaluateRequiredDartStringAttributeType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcSemanticsSemantics.SemanticsHintOverrides evaluateRequiredFlutterSrcSemanticsSemanticsHintOverridesType(messages.FlutterSrcSemanticsSemanticsHintOverridesType tree) {
  final result = evaluateFlutterSrcSemanticsSemanticsHintOverridesType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSemanticsSemantics.SemanticsHintOverrides? evaluateFlutterSrcSemanticsSemanticsHintOverridesType(messages.FlutterSrcSemanticsSemanticsHintOverridesType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSemanticsSemanticsHintOverridesType_Constructor.flutterSrcSemanticsSemanticsHintOverrides:
      return $flutterSrcSemanticsSemantics.SemanticsHintOverrides(
          onTapHint: (tree.flutterSrcSemanticsSemanticsHintOverrides.hasOnTapHint() ? tree.flutterSrcSemanticsSemanticsHintOverrides.onTapHint : null),
          onLongPressHint: (tree.flutterSrcSemanticsSemanticsHintOverrides.hasOnLongPressHint() ? tree.flutterSrcSemanticsSemanticsHintOverrides.onLongPressHint : null));
    default:
      return null;
  }
}

$flutterSrcSemanticsSemantics.SemanticsProperties evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(messages.FlutterSrcSemanticsSemanticsPropertiesType tree) {
  final result = evaluateFlutterSrcSemanticsSemanticsPropertiesType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSemanticsSemantics.SemanticsProperties? evaluateFlutterSrcSemanticsSemanticsPropertiesType(messages.FlutterSrcSemanticsSemanticsPropertiesType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSemanticsSemanticsPropertiesType_Constructor.flutterSrcSemanticsSemanticsProperties:
      return $flutterSrcSemanticsSemantics.SemanticsProperties(
          enabled: (tree.flutterSrcSemanticsSemanticsProperties.hasEnabled() ? tree.flutterSrcSemanticsSemanticsProperties.enabled : null),
          checked: (tree.flutterSrcSemanticsSemanticsProperties.hasChecked() ? tree.flutterSrcSemanticsSemanticsProperties.checked : null),
          mixed: (tree.flutterSrcSemanticsSemanticsProperties.hasMixed() ? tree.flutterSrcSemanticsSemanticsProperties.mixed : null),
          expanded: (tree.flutterSrcSemanticsSemanticsProperties.hasExpanded() ? tree.flutterSrcSemanticsSemanticsProperties.expanded : null),
          selected: (tree.flutterSrcSemanticsSemanticsProperties.hasSelected() ? tree.flutterSrcSemanticsSemanticsProperties.selected : null),
          toggled: (tree.flutterSrcSemanticsSemanticsProperties.hasToggled() ? tree.flutterSrcSemanticsSemanticsProperties.toggled : null),
          button: (tree.flutterSrcSemanticsSemanticsProperties.hasButton() ? tree.flutterSrcSemanticsSemanticsProperties.button : null),
          link: (tree.flutterSrcSemanticsSemanticsProperties.hasLink() ? tree.flutterSrcSemanticsSemanticsProperties.link : null),
          header: (tree.flutterSrcSemanticsSemanticsProperties.hasHeader() ? tree.flutterSrcSemanticsSemanticsProperties.header : null),
          textField: (tree.flutterSrcSemanticsSemanticsProperties.hasTextField() ? tree.flutterSrcSemanticsSemanticsProperties.textField : null),
          slider: (tree.flutterSrcSemanticsSemanticsProperties.hasSlider() ? tree.flutterSrcSemanticsSemanticsProperties.slider : null),
          keyboardKey: (tree.flutterSrcSemanticsSemanticsProperties.hasKeyboardKey() ? tree.flutterSrcSemanticsSemanticsProperties.keyboardKey : null),
          readOnly: (tree.flutterSrcSemanticsSemanticsProperties.hasReadOnly() ? tree.flutterSrcSemanticsSemanticsProperties.readOnly : null),
          focusable: (tree.flutterSrcSemanticsSemanticsProperties.hasFocusable() ? tree.flutterSrcSemanticsSemanticsProperties.focusable : null),
          focused: (tree.flutterSrcSemanticsSemanticsProperties.hasFocused() ? tree.flutterSrcSemanticsSemanticsProperties.focused : null),
          inMutuallyExclusiveGroup: (tree.flutterSrcSemanticsSemanticsProperties.hasInMutuallyExclusiveGroup() ? tree.flutterSrcSemanticsSemanticsProperties.inMutuallyExclusiveGroup : null),
          hidden: (tree.flutterSrcSemanticsSemanticsProperties.hasHidden() ? tree.flutterSrcSemanticsSemanticsProperties.hidden : null),
          obscured: (tree.flutterSrcSemanticsSemanticsProperties.hasObscured() ? tree.flutterSrcSemanticsSemanticsProperties.obscured : null),
          multiline: (tree.flutterSrcSemanticsSemanticsProperties.hasMultiline() ? tree.flutterSrcSemanticsSemanticsProperties.multiline : null),
          scopesRoute: (tree.flutterSrcSemanticsSemanticsProperties.hasScopesRoute() ? tree.flutterSrcSemanticsSemanticsProperties.scopesRoute : null),
          namesRoute: (tree.flutterSrcSemanticsSemanticsProperties.hasNamesRoute() ? tree.flutterSrcSemanticsSemanticsProperties.namesRoute : null),
          image: (tree.flutterSrcSemanticsSemanticsProperties.hasImage() ? tree.flutterSrcSemanticsSemanticsProperties.image : null),
          liveRegion: (tree.flutterSrcSemanticsSemanticsProperties.hasLiveRegion() ? tree.flutterSrcSemanticsSemanticsProperties.liveRegion : null),
          maxValueLength: (tree.flutterSrcSemanticsSemanticsProperties.hasMaxValueLength() ? tree.flutterSrcSemanticsSemanticsProperties.maxValueLength : null),
          currentValueLength: (tree.flutterSrcSemanticsSemanticsProperties.hasCurrentValueLength() ? tree.flutterSrcSemanticsSemanticsProperties.currentValueLength : null),
          label: (tree.flutterSrcSemanticsSemanticsProperties.hasLabel() ? tree.flutterSrcSemanticsSemanticsProperties.label : null),
          attributedLabel: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedLabel() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedLabel) : null),
          value: (tree.flutterSrcSemanticsSemanticsProperties.hasValue() ? tree.flutterSrcSemanticsSemanticsProperties.value : null),
          attributedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedValue) : null),
          increasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasIncreasedValue() ? tree.flutterSrcSemanticsSemanticsProperties.increasedValue : null),
          attributedIncreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedIncreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedIncreasedValue) : null),
          decreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasDecreasedValue() ? tree.flutterSrcSemanticsSemanticsProperties.decreasedValue : null),
          attributedDecreasedValue: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedDecreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedDecreasedValue) : null),
          hint: (tree.flutterSrcSemanticsSemanticsProperties.hasHint() ? tree.flutterSrcSemanticsSemanticsProperties.hint : null),
          tooltip: (tree.flutterSrcSemanticsSemanticsProperties.hasTooltip() ? tree.flutterSrcSemanticsSemanticsProperties.tooltip : null),
          attributedHint: (tree.flutterSrcSemanticsSemanticsProperties.hasAttributedHint() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSrcSemanticsSemanticsProperties.attributedHint) : null),
          hintOverrides: (tree.flutterSrcSemanticsSemanticsProperties.hasHintOverrides() ? evaluateFlutterSrcSemanticsSemanticsHintOverridesType(tree.flutterSrcSemanticsSemanticsProperties.hintOverrides) : null),
          textDirection: (tree.flutterSrcSemanticsSemanticsProperties.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterSrcSemanticsSemanticsProperties.textDirection) : null),
          sortKey: (tree.flutterSrcSemanticsSemanticsProperties.hasSortKey() ? evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree.flutterSrcSemanticsSemanticsProperties.sortKey) : null),
          tagForChildren: (tree.flutterSrcSemanticsSemanticsProperties.hasTagForChildren() ? evaluateFlutterSrcSemanticsSemanticsTagType(tree.flutterSrcSemanticsSemanticsProperties.tagForChildren) : null),
          onTap: null,
          onLongPress: null,
          onScrollLeft: null,
          onScrollRight: null,
          onScrollUp: null,
          onScrollDown: null,
          onIncrease: null,
          onDecrease: null,
          onCopy: null,
          onCut: null,
          onPaste: null,
          onMoveCursorForwardByCharacter: null,
          onMoveCursorBackwardByCharacter: null,
          onMoveCursorForwardByWord: null,
          onMoveCursorBackwardByWord: null,
          onSetSelection: null,
          onSetText: null,
          onDidGainAccessibilityFocus: null,
          onDidLoseAccessibilityFocus: null,
          onDismiss: null,
          customSemanticsActions: null);
    default:
      return null;
  }
}

$flutterSrcSemanticsSemantics.SemanticsSortKey evaluateRequiredFlutterSrcSemanticsSemanticsSortKeyType(messages.FlutterSrcSemanticsSemanticsSortKeyType tree) {
  final result = evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSemanticsSemantics.SemanticsSortKey? evaluateFlutterSrcSemanticsSemanticsSortKeyType(messages.FlutterSrcSemanticsSemanticsSortKeyType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSemanticsSemanticsSortKeyType_Constructor.flutterSrcSemanticsOrdinalSortKey:
      return $flutterSrcSemanticsSemantics.OrdinalSortKey(
          (tree.flutterSrcSemanticsOrdinalSortKey.hasOrder() ? tree.flutterSrcSemanticsOrdinalSortKey.order : missing('order')),
          name: (tree.flutterSrcSemanticsOrdinalSortKey.hasName() ? tree.flutterSrcSemanticsOrdinalSortKey.name : null));
    default:
      return null;
  }
}

$flutterSrcSemanticsSemantics.SemanticsTag evaluateRequiredFlutterSrcSemanticsSemanticsTagType(messages.FlutterSrcSemanticsSemanticsTagType tree) {
  final result = evaluateFlutterSrcSemanticsSemanticsTagType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcSemanticsSemantics.SemanticsTag? evaluateFlutterSrcSemanticsSemanticsTagType(messages.FlutterSrcSemanticsSemanticsTagType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSrcSemanticsSemanticsTagType_Constructor.flutterPlaceholderSpanIndexSemanticsTag:
      return $flutterSrcRenderingParagraph.PlaceholderSpanIndexSemanticsTag(
          (tree.flutterPlaceholderSpanIndexSemanticsTag.hasIndex() ? tree.flutterPlaceholderSpanIndexSemanticsTag.index : missing('index')));
    case messages.FlutterSrcSemanticsSemanticsTagType_Constructor.flutterSrcSemanticsSemanticsTag:
      return $flutterSrcSemanticsSemantics.SemanticsTag(
          (tree.flutterSrcSemanticsSemanticsTag.hasName() ? tree.flutterSrcSemanticsSemanticsTag.name : missing('name')));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.StatefulWidget evaluateRequiredFlutterStatefulWidgetType(messages.FlutterStatefulWidgetType tree) {
  final result = evaluateFlutterStatefulWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.StatefulWidget? evaluateFlutterStatefulWidgetType(messages.FlutterStatefulWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoActionSheet:
      return $flutterSrcCupertinoDialog.CupertinoActionSheet(
          key: (tree.cupertinoActionSheet.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActionSheet.key) : null),
          title: (tree.cupertinoActionSheet.hasTitle() ? evaluateWidgetType(tree.cupertinoActionSheet.title) : null),
          message: (tree.cupertinoActionSheet.hasMessage() ? evaluateWidgetType(tree.cupertinoActionSheet.message) : null),
          actions: tree.cupertinoActionSheet.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          messageScrollController: (tree.cupertinoActionSheet.hasMessageScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.messageScrollController) : null),
          actionScrollController: (tree.cupertinoActionSheet.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.actionScrollController) : null),
          cancelButton: (tree.cupertinoActionSheet.hasCancelButton() ? evaluateWidgetType(tree.cupertinoActionSheet.cancelButton) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoActivityIndicator:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator(
          key: (tree.cupertinoActivityIndicator.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicator.key) : null),
          color: (tree.cupertinoActivityIndicator.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicator.color) : null),
          animating: (tree.cupertinoActivityIndicator.hasAnimating() ? tree.cupertinoActivityIndicator.animating : true),
          radius: (tree.cupertinoActivityIndicator.hasRadius() ? tree.cupertinoActivityIndicator.radius : 10.0));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoActivityIndicatorNamedPartiallyRevealed:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator.partiallyRevealed(
          key: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.key) : null),
          color: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.color) : null),
          radius: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasRadius() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.radius : 10.0),
          progress: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasProgress() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.progress : 1.0));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoAlertDialog:
      return $flutterSrcCupertinoDialog.CupertinoAlertDialog(
          key: (tree.cupertinoAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAlertDialog.key) : null),
          title: (tree.cupertinoAlertDialog.hasTitle() ? evaluateWidgetType(tree.cupertinoAlertDialog.title) : null),
          content: (tree.cupertinoAlertDialog.hasContent() ? evaluateWidgetType(tree.cupertinoAlertDialog.content) : null),
          actions: tree.cupertinoAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          scrollController: (tree.cupertinoAlertDialog.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.scrollController) : null),
          actionScrollController: (tree.cupertinoAlertDialog.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.actionScrollController) : null),
          insetAnimationDuration: (tree.cupertinoAlertDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.cupertinoAlertDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.cupertinoAlertDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.cupertinoAlertDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoApp:
      return $flutterSrcCupertinoApp.CupertinoApp(
          key: (tree.cupertinoApp.hasKey() ? evaluateFlutterKeyType(tree.cupertinoApp.key) : null),
          navigatorKey: null,
          home: (tree.cupertinoApp.hasHome() ? evaluateWidgetType(tree.cupertinoApp.home) : null),
          theme: (tree.cupertinoApp.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoApp.theme) : null),
          initialRoute: (tree.cupertinoApp.hasInitialRoute() ? tree.cupertinoApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.cupertinoApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.cupertinoApp.hasTitle() ? tree.cupertinoApp.title : ''),
          onGenerateTitle: null,
          color: (tree.cupertinoApp.hasColor() ? evaluateDartColorType(tree.cupertinoApp.color) : null),
          locale: (tree.cupertinoApp.hasLocale() ? evaluateDartLocaleType(tree.cupertinoApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoApp.hasShowPerformanceOverlay() ? tree.cupertinoApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoApp.hasCheckerboardRasterCacheImages() ? tree.cupertinoApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoApp.hasCheckerboardOffscreenLayers() ? tree.cupertinoApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoApp.hasShowSemanticsDebugger() ? tree.cupertinoApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoApp.hasDebugShowCheckedModeBanner() ? tree.cupertinoApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoApp.hasRestorationScopeId() ? tree.cupertinoApp.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoApp.scrollBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoAppNamedRouter:
      return $flutterSrcCupertinoApp.CupertinoApp.router(
          key: (tree.cupertinoAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAppNamedRouter.key) : null),
          routeInformationProvider: (tree.cupertinoAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.cupertinoAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          backButtonDispatcher: (tree.cupertinoAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.cupertinoAppNamedRouter.backButtonDispatcher) : null),
          routerConfig: null,
          theme: (tree.cupertinoAppNamedRouter.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoAppNamedRouter.theme) : null),
          builder: null,
          title: (tree.cupertinoAppNamedRouter.hasTitle() ? tree.cupertinoAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.cupertinoAppNamedRouter.hasColor() ? evaluateDartColorType(tree.cupertinoAppNamedRouter.color) : null),
          locale: (tree.cupertinoAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.cupertinoAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoAppNamedRouter.hasShowPerformanceOverlay() ? tree.cupertinoAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.cupertinoAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.cupertinoAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoAppNamedRouter.hasShowSemanticsDebugger() ? tree.cupertinoAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.cupertinoAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoAppNamedRouter.hasRestorationScopeId() ? tree.cupertinoAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoAppNamedRouter.scrollBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoButton:
      return $flutterSrcCupertinoButton.CupertinoButton(
          key: (tree.cupertinoButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButton.key) : null),
          child: (tree.cupertinoButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButton.child) : missing('child')),
          padding: (tree.cupertinoButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButton.padding) : null),
          color: (tree.cupertinoButton.hasColor() ? evaluateDartColorType(tree.cupertinoButton.color) : null),
          disabledColor: (tree.cupertinoButton.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButton.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButton.hasMinSize() ? tree.cupertinoButton.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButton.hasPressedOpacity() ? tree.cupertinoButton.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButton.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButton.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoButtonNamedFilled:
      return $flutterSrcCupertinoButton.CupertinoButton.filled(
          key: (tree.cupertinoButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButtonNamedFilled.key) : null),
          child: (tree.cupertinoButtonNamedFilled.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButtonNamedFilled.child) : missing('child')),
          padding: (tree.cupertinoButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButtonNamedFilled.padding) : null),
          disabledColor: (tree.cupertinoButtonNamedFilled.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButtonNamedFilled.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButtonNamedFilled.hasMinSize() ? tree.cupertinoButtonNamedFilled.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButtonNamedFilled.hasPressedOpacity() ? tree.cupertinoButtonNamedFilled.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButtonNamedFilled.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButtonNamedFilled.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButtonNamedFilled.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButtonNamedFilled.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoCheckbox:
      return $flutterSrcCupertinoCheckbox.CupertinoCheckbox(
          key: (tree.cupertinoCheckbox.hasKey() ? evaluateFlutterKeyType(tree.cupertinoCheckbox.key) : null),
          value: (tree.cupertinoCheckbox.hasValue() ? tree.cupertinoCheckbox.value : null),
          tristate: (tree.cupertinoCheckbox.hasTristate() ? tree.cupertinoCheckbox.tristate : false),
          onChanged: null,
          activeColor: (tree.cupertinoCheckbox.hasActiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.activeColor) : null),
          inactiveColor: (tree.cupertinoCheckbox.hasInactiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.inactiveColor) : null),
          checkColor: (tree.cupertinoCheckbox.hasCheckColor() ? evaluateDartColorType(tree.cupertinoCheckbox.checkColor) : null),
          focusColor: (tree.cupertinoCheckbox.hasFocusColor() ? evaluateDartColorType(tree.cupertinoCheckbox.focusColor) : null),
          focusNode: (tree.cupertinoCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoCheckbox.focusNode) : null),
          autofocus: (tree.cupertinoCheckbox.hasAutofocus() ? tree.cupertinoCheckbox.autofocus : false),
          side: (tree.cupertinoCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.cupertinoCheckbox.side) : null),
          shape: (tree.cupertinoCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.cupertinoCheckbox.shape) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoContextMenu:
      return $flutterSrcCupertinoContextMenu.CupertinoContextMenu(
          key: (tree.cupertinoContextMenu.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenu.key) : null),
          actions: tree.cupertinoContextMenu.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.cupertinoContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenu.child) : missing('child')),
          enableHapticFeedback: (tree.cupertinoContextMenu.hasEnableHapticFeedback() ? tree.cupertinoContextMenu.enableHapticFeedback : false));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoContextMenuAction:
      return $flutterSrcCupertinoContextMenuAction.CupertinoContextMenuAction(
          key: (tree.cupertinoContextMenuAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenuAction.key) : null),
          child: (tree.cupertinoContextMenuAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenuAction.child) : missing('child')),
          isDefaultAction: (tree.cupertinoContextMenuAction.hasIsDefaultAction() ? tree.cupertinoContextMenuAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoContextMenuAction.hasIsDestructiveAction() ? tree.cupertinoContextMenuAction.isDestructiveAction : false),
          onPressed: null,
          trailingIcon: (tree.cupertinoContextMenuAction.hasTrailingIcon() ? evaluateFlutterIconDataType(tree.cupertinoContextMenuAction.trailingIcon) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButton:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton(
          key: (tree.cupertinoDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.text(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.text : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoListTile:
      return $flutterSrcCupertinoListTile.CupertinoListTile(
          key: (tree.cupertinoListTile.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTile.key) : null),
          title: (tree.cupertinoListTile.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTile.title) : missing('title')),
          subtitle: (tree.cupertinoListTile.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTile.subtitle) : null),
          additionalInfo: (tree.cupertinoListTile.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTile.additionalInfo) : null),
          leading: (tree.cupertinoListTile.hasLeading() ? evaluateWidgetType(tree.cupertinoListTile.leading) : null),
          trailing: (tree.cupertinoListTile.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTile.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTile.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTile.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTile.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTile.padding) : null),
          leadingSize: (tree.cupertinoListTile.hasLeadingSize() ? tree.cupertinoListTile.leadingSize : 28.0),
          leadingToTitle: (tree.cupertinoListTile.hasLeadingToTitle() ? tree.cupertinoListTile.leadingToTitle : 16.0));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoListTileNamedNotched:
      return $flutterSrcCupertinoListTile.CupertinoListTile.notched(
          key: (tree.cupertinoListTileNamedNotched.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileNamedNotched.key) : null),
          title: (tree.cupertinoListTileNamedNotched.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTileNamedNotched.title) : missing('title')),
          subtitle: (tree.cupertinoListTileNamedNotched.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.subtitle) : null),
          additionalInfo: (tree.cupertinoListTileNamedNotched.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.additionalInfo) : null),
          leading: (tree.cupertinoListTileNamedNotched.hasLeading() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.leading) : null),
          trailing: (tree.cupertinoListTileNamedNotched.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTileNamedNotched.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTileNamedNotched.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTileNamedNotched.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTileNamedNotched.padding) : null),
          leadingSize: (tree.cupertinoListTileNamedNotched.hasLeadingSize() ? tree.cupertinoListTileNamedNotched.leadingSize : 30.0),
          leadingToTitle: (tree.cupertinoListTileNamedNotched.hasLeadingToTitle() ? tree.cupertinoListTileNamedNotched.leadingToTitle : 12.0));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBar(
          key: (tree.cupertinoNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBar.key) : null),
          leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true),
          previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoNavigationBar.middle) : null),
          trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoNavigationBar.trailing) : null),
          border: (tree.cupertinoNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoNavigationBar.brightness) : null),
          padding: (tree.cupertinoNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoPageScaffold:
      return $flutterSrcCupertinoPageScaffold.CupertinoPageScaffold(
          key: (tree.cupertinoPageScaffold.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPageScaffold.key) : null),
          navigationBar: (tree.cupertinoPageScaffold.hasNavigationBar() ? evaluateObstructingPreferredSizeWidgetType(tree.cupertinoPageScaffold.navigationBar) : null),
          backgroundColor: (tree.cupertinoPageScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPageScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.cupertinoPageScaffold.hasResizeToAvoidBottomInset() ? tree.cupertinoPageScaffold.resizeToAvoidBottomInset : true),
          child: (tree.cupertinoPageScaffold.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoPageScaffold.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoPicker:
      return $flutterSrcCupertinoPicker.CupertinoPicker(
          key: (tree.cupertinoPicker.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPicker.key) : null),
          diameterRatio: (tree.cupertinoPicker.hasDiameterRatio() ? tree.cupertinoPicker.diameterRatio : 1.07),
          backgroundColor: (tree.cupertinoPicker.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPicker.backgroundColor) : null),
          offAxisFraction: (tree.cupertinoPicker.hasOffAxisFraction() ? tree.cupertinoPicker.offAxisFraction : 0.0),
          useMagnifier: (tree.cupertinoPicker.hasUseMagnifier() ? tree.cupertinoPicker.useMagnifier : false),
          magnification: (tree.cupertinoPicker.hasMagnification() ? tree.cupertinoPicker.magnification : 1.0),
          scrollController: (tree.cupertinoPicker.hasScrollController() ? evaluateFlutterFixedExtentScrollControllerType(tree.cupertinoPicker.scrollController) : null),
          squeeze: (tree.cupertinoPicker.hasSqueeze() ? tree.cupertinoPicker.squeeze : 1.45),
          itemExtent: (tree.cupertinoPicker.hasItemExtent() ? tree.cupertinoPicker.itemExtent : missing('itemExtent')),
          onSelectedItemChanged: null,
          children: tree.cupertinoPicker.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          selectionOverlay: (tree.cupertinoPicker.hasSelectionOverlay() ? evaluateWidgetType(tree.cupertinoPicker.selectionOverlay) : $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay()),
          looping: (tree.cupertinoPicker.hasLooping() ? tree.cupertinoPicker.looping : false));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoScrollbar:
      return $flutterSrcCupertinoScrollbar.CupertinoScrollbar(
          key: (tree.cupertinoScrollbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoScrollbar.key) : null),
          child: (tree.cupertinoScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoScrollbar.child) : missing('child')),
          controller: (tree.cupertinoScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.cupertinoScrollbar.controller) : null),
          thumbVisibility: (tree.cupertinoScrollbar.hasThumbVisibility() ? tree.cupertinoScrollbar.thumbVisibility : null),
          thickness: (tree.cupertinoScrollbar.hasThickness() ? tree.cupertinoScrollbar.thickness : missing('thickness')),
          thicknessWhileDragging: (tree.cupertinoScrollbar.hasThicknessWhileDragging() ? tree.cupertinoScrollbar.thicknessWhileDragging : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultThicknessWhileDragging),
          radius: (tree.cupertinoScrollbar.hasRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radius) : missing('radius')),
          radiusWhileDragging: (tree.cupertinoScrollbar.hasRadiusWhileDragging() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radiusWhileDragging) : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultRadiusWhileDragging),
          notificationPredicate: null,
          scrollbarOrientation: (tree.cupertinoScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.cupertinoScrollbar.scrollbarOrientation) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoSearchTextField:
      return $flutterSrcCupertinoSearchField.CupertinoSearchTextField(
          key: (tree.cupertinoSearchTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSearchTextField.key) : null),
          controller: (tree.cupertinoSearchTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoSearchTextField.controller) : null),
          onChanged: null,
          onSubmitted: null,
          style: (tree.cupertinoSearchTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.style) : null),
          placeholder: (tree.cupertinoSearchTextField.hasPlaceholder() ? tree.cupertinoSearchTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoSearchTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.placeholderStyle) : null),
          decoration: (tree.cupertinoSearchTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoSearchTextField.decoration) : null),
          backgroundColor: (tree.cupertinoSearchTextField.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSearchTextField.backgroundColor) : null),
          borderRadius: (tree.cupertinoSearchTextField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoSearchTextField.borderRadius) : null),
          keyboardType: (tree.cupertinoSearchTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoSearchTextField.keyboardType) : $flutterSrcServicesTextInput.TextInputType.text),
          padding: (tree.cupertinoSearchTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(5.5, 8, 5.5, 8)),
          itemColor: (tree.cupertinoSearchTextField.hasItemColor() ? evaluateRequiredDartColorType(tree.cupertinoSearchTextField.itemColor) : $flutterSrcCupertinoColors.CupertinoColors.secondaryLabel),
          itemSize: (tree.cupertinoSearchTextField.hasItemSize() ? tree.cupertinoSearchTextField.itemSize : 20.0),
          prefixInsets: (tree.cupertinoSearchTextField.hasPrefixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.prefixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(6, 0, 0, 3)),
          prefixIcon: (tree.cupertinoSearchTextField.hasPrefixIcon() ? evaluateRequiredWidgetType(tree.cupertinoSearchTextField.prefixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.search)),
          suffixInsets: (tree.cupertinoSearchTextField.hasSuffixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.suffixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(0, 0, 5, 2)),
          suffixIcon: (tree.cupertinoSearchTextField.hasSuffixIcon() ? evaluateRequiredFlutterIconType(tree.cupertinoSearchTextField.suffixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.xmark_circle_fill)),
          suffixMode: (tree.cupertinoSearchTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoSearchTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.editing),
          onSuffixTap: null,
          restorationId: (tree.cupertinoSearchTextField.hasRestorationId() ? tree.cupertinoSearchTextField.restorationId : null),
          focusNode: (tree.cupertinoSearchTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSearchTextField.focusNode) : null),
          smartQuotesType: (tree.cupertinoSearchTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoSearchTextField.smartQuotesType) : null),
          smartDashesType: (tree.cupertinoSearchTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoSearchTextField.smartDashesType) : null),
          enableIMEPersonalizedLearning: (tree.cupertinoSearchTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoSearchTextField.enableIMEPersonalizedLearning : true),
          autofocus: (tree.cupertinoSearchTextField.hasAutofocus() ? tree.cupertinoSearchTextField.autofocus : false),
          onTap: null,
          autocorrect: (tree.cupertinoSearchTextField.hasAutocorrect() ? tree.cupertinoSearchTextField.autocorrect : true),
          enabled: (tree.cupertinoSearchTextField.hasEnabled() ? tree.cupertinoSearchTextField.enabled : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoSlider:
      return $flutterSrcCupertinoSlider.CupertinoSlider(
          key: (tree.cupertinoSlider.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSlider.key) : null),
          value: (tree.cupertinoSlider.hasValue() ? tree.cupertinoSlider.value : missing('value')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.cupertinoSlider.hasMin() ? tree.cupertinoSlider.min : 0.0),
          max: (tree.cupertinoSlider.hasMax() ? tree.cupertinoSlider.max : 1.0),
          divisions: (tree.cupertinoSlider.hasDivisions() ? tree.cupertinoSlider.divisions : null),
          activeColor: (tree.cupertinoSlider.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSlider.activeColor) : null),
          thumbColor: (tree.cupertinoSlider.hasThumbColor() ? evaluateRequiredDartColorType(tree.cupertinoSlider.thumbColor) : $flutterSrcCupertinoColors.CupertinoColors.white));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoSliverNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoSliverNavigationBar(
          key: (tree.cupertinoSliverNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverNavigationBar.key) : null),
          largeTitle: (tree.cupertinoSliverNavigationBar.hasLargeTitle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.largeTitle) : null),
          leading: (tree.cupertinoSliverNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoSliverNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyTitle: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyTitle() ? tree.cupertinoSliverNavigationBar.automaticallyImplyTitle : true),
          alwaysShowMiddle: (tree.cupertinoSliverNavigationBar.hasAlwaysShowMiddle() ? tree.cupertinoSliverNavigationBar.alwaysShowMiddle : true),
          previousPageTitle: (tree.cupertinoSliverNavigationBar.hasPreviousPageTitle() ? tree.cupertinoSliverNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoSliverNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.middle) : null),
          trailing: (tree.cupertinoSliverNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.trailing) : null),
          border: (tree.cupertinoSliverNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoSliverNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoSliverNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSliverNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoSliverNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoSliverNavigationBar.brightness) : null),
          padding: (tree.cupertinoSliverNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoSliverNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoSliverNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoSliverNavigationBar.transitionBetweenRoutes : true),
          stretch: (tree.cupertinoSliverNavigationBar.hasStretch() ? tree.cupertinoSliverNavigationBar.stretch : false));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoSliverRefreshControl:
      return $flutterSrcCupertinoRefresh.CupertinoSliverRefreshControl(
          key: (tree.cupertinoSliverRefreshControl.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverRefreshControl.key) : null),
          refreshTriggerPullDistance: (tree.cupertinoSliverRefreshControl.hasRefreshTriggerPullDistance() ? tree.cupertinoSliverRefreshControl.refreshTriggerPullDistance : 100.0),
          refreshIndicatorExtent: (tree.cupertinoSliverRefreshControl.hasRefreshIndicatorExtent() ? tree.cupertinoSliverRefreshControl.refreshIndicatorExtent : 60.0),
          builder: null,
          onRefresh: null);
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoSwitch:
      return $flutterSrcCupertinoSwitch.CupertinoSwitch(
          key: (tree.cupertinoSwitch.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSwitch.key) : null),
          value: (tree.cupertinoSwitch.hasValue() ? tree.cupertinoSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.cupertinoSwitch.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSwitch.activeColor) : null),
          trackColor: (tree.cupertinoSwitch.hasTrackColor() ? evaluateDartColorType(tree.cupertinoSwitch.trackColor) : null),
          thumbColor: (tree.cupertinoSwitch.hasThumbColor() ? evaluateDartColorType(tree.cupertinoSwitch.thumbColor) : null),
          applyTheme: (tree.cupertinoSwitch.hasApplyTheme() ? tree.cupertinoSwitch.applyTheme : null),
          focusColor: (tree.cupertinoSwitch.hasFocusColor() ? evaluateDartColorType(tree.cupertinoSwitch.focusColor) : null),
          onLabelColor: (tree.cupertinoSwitch.hasOnLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.onLabelColor) : null),
          offLabelColor: (tree.cupertinoSwitch.hasOffLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.offLabelColor) : null),
          focusNode: (tree.cupertinoSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.cupertinoSwitch.hasAutofocus() ? tree.cupertinoSwitch.autofocus : false),
          dragStartBehavior: (tree.cupertinoSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTabView:
      return $flutterSrcCupertinoTabView.CupertinoTabView(
          key: (tree.cupertinoTabView.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabView.key) : null),
          builder: null,
          navigatorKey: null,
          defaultTitle: (tree.cupertinoTabView.hasDefaultTitle() ? tree.cupertinoTabView.defaultTitle : null),
          routes: null,
          onGenerateRoute: null,
          onUnknownRoute: null,
          navigatorObservers: tree.cupertinoTabView.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          restorationScopeId: (tree.cupertinoTabView.hasRestorationScopeId() ? tree.cupertinoTabView.restorationScopeId : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextField:
      return $flutterSrcCupertinoTextField.CupertinoTextField(
          key: (tree.cupertinoTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextField.key) : null),
          controller: (tree.cupertinoTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextField.controller) : null),
          focusNode: (tree.cupertinoTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextField.focusNode) : null),
          undoController: (tree.cupertinoTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextField.undoController) : null),
          decoration: (tree.cupertinoTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextField.decoration) : $flutterSrcPaintingBoxDecoration.BoxDecoration(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $flutterSrcCupertinoColors.CupertinoColors.white, darkColor: $flutterSrcCupertinoColors.CupertinoColors.black), border: $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), bottom: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), left: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), right: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0)), borderRadius: $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(5.0)))),
          padding: (tree.cupertinoTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextField.hasPlaceholder() ? tree.cupertinoTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextField.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextField.prefix) : null),
          prefixMode: (tree.cupertinoTextField.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextField.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextField.suffix) : null),
          suffixMode: (tree.cupertinoTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextField.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextField.keyboardType) : null),
          textInputAction: (tree.cupertinoTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextField.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.style) : null),
          strutStyle: (tree.cupertinoTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextField.strutStyle) : null),
          textAlign: (tree.cupertinoTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextField.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextField.textDirection) : null),
          readOnly: (tree.cupertinoTextField.hasReadOnly() ? tree.cupertinoTextField.readOnly : false),
          showCursor: (tree.cupertinoTextField.hasShowCursor() ? tree.cupertinoTextField.showCursor : null),
          autofocus: (tree.cupertinoTextField.hasAutofocus() ? tree.cupertinoTextField.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextField.hasObscuringCharacter() ? tree.cupertinoTextField.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextField.hasObscureText() ? tree.cupertinoTextField.obscureText : false),
          autocorrect: (tree.cupertinoTextField.hasAutocorrect() ? tree.cupertinoTextField.autocorrect : true),
          smartDashesType: (tree.cupertinoTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextField.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextField.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextField.hasEnableSuggestions() ? tree.cupertinoTextField.enableSuggestions : true),
          maxLines: (tree.cupertinoTextField.hasMaxLines() ? tree.cupertinoTextField.maxLines : 1),
          minLines: (tree.cupertinoTextField.hasMinLines() ? tree.cupertinoTextField.minLines : null),
          expands: (tree.cupertinoTextField.hasExpands() ? tree.cupertinoTextField.expands : false),
          maxLength: (tree.cupertinoTextField.hasMaxLength() ? tree.cupertinoTextField.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextField.hasEnabled() ? tree.cupertinoTextField.enabled : true),
          cursorWidth: (tree.cupertinoTextField.hasCursorWidth() ? tree.cupertinoTextField.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextField.hasCursorHeight() ? tree.cupertinoTextField.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextField.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextField.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextField.hasCursorOpacityAnimates() ? tree.cupertinoTextField.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextField.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextField.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextField.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextField.hasEnableInteractiveSelection() ? tree.cupertinoTextField.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextField.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextField.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextField.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextField.hasRestorationId() ? tree.cupertinoTextField.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextField.hasScribbleEnabled() ? tree.cupertinoTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextField.magnifierConfiguration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextFieldNamedBorderless:
      return $flutterSrcCupertinoTextField.CupertinoTextField.borderless(
          key: (tree.cupertinoTextFieldNamedBorderless.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFieldNamedBorderless.key) : null),
          controller: (tree.cupertinoTextFieldNamedBorderless.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFieldNamedBorderless.controller) : null),
          focusNode: (tree.cupertinoTextFieldNamedBorderless.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFieldNamedBorderless.focusNode) : null),
          undoController: (tree.cupertinoTextFieldNamedBorderless.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextFieldNamedBorderless.undoController) : null),
          decoration: (tree.cupertinoTextFieldNamedBorderless.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFieldNamedBorderless.decoration) : null),
          padding: (tree.cupertinoTextFieldNamedBorderless.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextFieldNamedBorderless.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholder() ? tree.cupertinoTextFieldNamedBorderless.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextFieldNamedBorderless.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.prefix) : null),
          prefixMode: (tree.cupertinoTextFieldNamedBorderless.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextFieldNamedBorderless.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.suffix) : null),
          suffixMode: (tree.cupertinoTextFieldNamedBorderless.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextFieldNamedBorderless.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFieldNamedBorderless.keyboardType) : null),
          textInputAction: (tree.cupertinoTextFieldNamedBorderless.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFieldNamedBorderless.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextFieldNamedBorderless.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFieldNamedBorderless.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextFieldNamedBorderless.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.style) : null),
          strutStyle: (tree.cupertinoTextFieldNamedBorderless.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFieldNamedBorderless.strutStyle) : null),
          textAlign: (tree.cupertinoTextFieldNamedBorderless.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFieldNamedBorderless.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFieldNamedBorderless.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFieldNamedBorderless.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextFieldNamedBorderless.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFieldNamedBorderless.textDirection) : null),
          readOnly: (tree.cupertinoTextFieldNamedBorderless.hasReadOnly() ? tree.cupertinoTextFieldNamedBorderless.readOnly : false),
          showCursor: (tree.cupertinoTextFieldNamedBorderless.hasShowCursor() ? tree.cupertinoTextFieldNamedBorderless.showCursor : null),
          autofocus: (tree.cupertinoTextFieldNamedBorderless.hasAutofocus() ? tree.cupertinoTextFieldNamedBorderless.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextFieldNamedBorderless.hasObscuringCharacter() ? tree.cupertinoTextFieldNamedBorderless.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFieldNamedBorderless.hasObscureText() ? tree.cupertinoTextFieldNamedBorderless.obscureText : false),
          autocorrect: (tree.cupertinoTextFieldNamedBorderless.hasAutocorrect() ? tree.cupertinoTextFieldNamedBorderless.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFieldNamedBorderless.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFieldNamedBorderless.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFieldNamedBorderless.hasEnableSuggestions() ? tree.cupertinoTextFieldNamedBorderless.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFieldNamedBorderless.hasMaxLines() ? tree.cupertinoTextFieldNamedBorderless.maxLines : 1),
          minLines: (tree.cupertinoTextFieldNamedBorderless.hasMinLines() ? tree.cupertinoTextFieldNamedBorderless.minLines : null),
          expands: (tree.cupertinoTextFieldNamedBorderless.hasExpands() ? tree.cupertinoTextFieldNamedBorderless.expands : false),
          maxLength: (tree.cupertinoTextFieldNamedBorderless.hasMaxLength() ? tree.cupertinoTextFieldNamedBorderless.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextFieldNamedBorderless.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextFieldNamedBorderless.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextFieldNamedBorderless.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFieldNamedBorderless.hasEnabled() ? tree.cupertinoTextFieldNamedBorderless.enabled : true),
          cursorWidth: (tree.cupertinoTextFieldNamedBorderless.hasCursorWidth() ? tree.cupertinoTextFieldNamedBorderless.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFieldNamedBorderless.hasCursorHeight() ? tree.cupertinoTextFieldNamedBorderless.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextFieldNamedBorderless.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextFieldNamedBorderless.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextFieldNamedBorderless.hasCursorOpacityAnimates() ? tree.cupertinoTextFieldNamedBorderless.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextFieldNamedBorderless.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFieldNamedBorderless.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextFieldNamedBorderless.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextFieldNamedBorderless.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFieldNamedBorderless.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFieldNamedBorderless.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFieldNamedBorderless.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextFieldNamedBorderless.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextFieldNamedBorderless.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextFieldNamedBorderless.hasEnableInteractiveSelection() ? tree.cupertinoTextFieldNamedBorderless.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextFieldNamedBorderless.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFieldNamedBorderless.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextFieldNamedBorderless.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextFieldNamedBorderless.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextFieldNamedBorderless.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFieldNamedBorderless.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFieldNamedBorderless.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextFieldNamedBorderless.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextFieldNamedBorderless.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextFieldNamedBorderless.hasRestorationId() ? tree.cupertinoTextFieldNamedBorderless.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextFieldNamedBorderless.hasScribbleEnabled() ? tree.cupertinoTextFieldNamedBorderless.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextFieldNamedBorderless.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextFieldNamedBorderless.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextFieldNamedBorderless.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextFieldNamedBorderless.magnifierConfiguration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextFormFieldRow:
      return $flutterSrcCupertinoTextFormFieldRow.CupertinoTextFormFieldRow(
          key: (tree.cupertinoTextFormFieldRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFormFieldRow.key) : null),
          prefix: (tree.cupertinoTextFormFieldRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFormFieldRow.prefix) : null),
          padding: (tree.cupertinoTextFormFieldRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoTextFormFieldRow.padding) : null),
          controller: (tree.cupertinoTextFormFieldRow.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFormFieldRow.controller) : null),
          initialValue: (tree.cupertinoTextFormFieldRow.hasInitialValue() ? tree.cupertinoTextFormFieldRow.initialValue : null),
          focusNode: (tree.cupertinoTextFormFieldRow.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFormFieldRow.focusNode) : null),
          decoration: (tree.cupertinoTextFormFieldRow.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFormFieldRow.decoration) : null),
          keyboardType: (tree.cupertinoTextFormFieldRow.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFormFieldRow.keyboardType) : null),
          textCapitalization: (tree.cupertinoTextFormFieldRow.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFormFieldRow.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.cupertinoTextFormFieldRow.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFormFieldRow.textInputAction) : null),
          style: (tree.cupertinoTextFormFieldRow.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.style) : null),
          strutStyle: (tree.cupertinoTextFormFieldRow.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFormFieldRow.strutStyle) : null),
          textDirection: (tree.cupertinoTextFormFieldRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFormFieldRow.textDirection) : null),
          textAlign: (tree.cupertinoTextFormFieldRow.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFormFieldRow.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFormFieldRow.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFormFieldRow.textAlignVertical) : null),
          autofocus: (tree.cupertinoTextFormFieldRow.hasAutofocus() ? tree.cupertinoTextFormFieldRow.autofocus : false),
          readOnly: (tree.cupertinoTextFormFieldRow.hasReadOnly() ? tree.cupertinoTextFormFieldRow.readOnly : false),
          showCursor: (tree.cupertinoTextFormFieldRow.hasShowCursor() ? tree.cupertinoTextFormFieldRow.showCursor : null),
          obscuringCharacter: (tree.cupertinoTextFormFieldRow.hasObscuringCharacter() ? tree.cupertinoTextFormFieldRow.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFormFieldRow.hasObscureText() ? tree.cupertinoTextFormFieldRow.obscureText : false),
          autocorrect: (tree.cupertinoTextFormFieldRow.hasAutocorrect() ? tree.cupertinoTextFormFieldRow.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFormFieldRow.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFormFieldRow.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFormFieldRow.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFormFieldRow.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFormFieldRow.hasEnableSuggestions() ? tree.cupertinoTextFormFieldRow.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFormFieldRow.hasMaxLines() ? tree.cupertinoTextFormFieldRow.maxLines : 1),
          minLines: (tree.cupertinoTextFormFieldRow.hasMinLines() ? tree.cupertinoTextFormFieldRow.minLines : null),
          expands: (tree.cupertinoTextFormFieldRow.hasExpands() ? tree.cupertinoTextFormFieldRow.expands : false),
          maxLength: (tree.cupertinoTextFormFieldRow.hasMaxLength() ? tree.cupertinoTextFormFieldRow.maxLength : null),
          onChanged: null,
          onTap: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.cupertinoTextFormFieldRow.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFormFieldRow.hasEnabled() ? tree.cupertinoTextFormFieldRow.enabled : null),
          cursorWidth: (tree.cupertinoTextFormFieldRow.hasCursorWidth() ? tree.cupertinoTextFormFieldRow.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFormFieldRow.hasCursorHeight() ? tree.cupertinoTextFormFieldRow.cursorHeight : null),
          cursorColor: (tree.cupertinoTextFormFieldRow.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFormFieldRow.cursorColor) : null),
          keyboardAppearance: (tree.cupertinoTextFormFieldRow.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFormFieldRow.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFormFieldRow.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFormFieldRow.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.cupertinoTextFormFieldRow.hasEnableInteractiveSelection() ? tree.cupertinoTextFormFieldRow.enableInteractiveSelection : true),
          selectionControls: (tree.cupertinoTextFormFieldRow.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFormFieldRow.selectionControls) : null),
          scrollPhysics: (tree.cupertinoTextFormFieldRow.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFormFieldRow.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFormFieldRow.autofillHints,
          autovalidateMode: (tree.cupertinoTextFormFieldRow.hasAutovalidateMode() ? enums.convertRequiredFlutterAutovalidateModeType(tree.cupertinoTextFormFieldRow.autovalidateMode) : missing('autovalidateMode')),
          placeholder: (tree.cupertinoTextFormFieldRow.hasPlaceholder() ? tree.cupertinoTextFormFieldRow.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFormFieldRow.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          contextMenuBuilder: null);
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextSelectionToolbarButton:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton(
          key: (tree.cupertinoTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.FlutterStatefulWidgetType_Constructor.cupertinoTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.text(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoTextSelectionToolbarButtonNamedText.text : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAndroidView:
      return $flutterSrcWidgetsPlatformView.AndroidView(
          key: (tree.flutterAndroidView.hasKey() ? evaluateFlutterKeyType(tree.flutterAndroidView.key) : null),
          viewType: (tree.flutterAndroidView.hasViewType() ? tree.flutterAndroidView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAndroidView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAndroidView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAndroidView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAndroidView.layoutDirection) : null),
          gestureRecognizers: null,
          creationParamsCodec: null,
          clipBehavior: (tree.flutterAndroidView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAndroidView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedAlign:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedAlign(
          key: (tree.flutterAnimatedAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedAlign.key) : null),
          alignment: (tree.flutterAnimatedAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedAlign.alignment) : missing('alignment')),
          child: (tree.flutterAnimatedAlign.hasChild() ? evaluateWidgetType(tree.flutterAnimatedAlign.child) : null),
          heightFactor: (tree.flutterAnimatedAlign.hasHeightFactor() ? tree.flutterAnimatedAlign.heightFactor : null),
          widthFactor: (tree.flutterAnimatedAlign.hasWidthFactor() ? tree.flutterAnimatedAlign.widthFactor : null),
          curve: (tree.flutterAnimatedAlign.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedAlign.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedAlign.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedAlign.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedContainer:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedContainer(
          key: (tree.flutterAnimatedContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedContainer.key) : null),
          alignment: (tree.flutterAnimatedContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.alignment) : null),
          padding: (tree.flutterAnimatedContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.padding) : null),
          color: (tree.flutterAnimatedContainer.hasColor() ? evaluateDartColorType(tree.flutterAnimatedContainer.color) : null),
          decoration: (tree.flutterAnimatedContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.decoration) : null),
          foregroundDecoration: (tree.flutterAnimatedContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.foregroundDecoration) : null),
          width: (tree.flutterAnimatedContainer.hasWidth() ? tree.flutterAnimatedContainer.width : null),
          height: (tree.flutterAnimatedContainer.hasHeight() ? tree.flutterAnimatedContainer.height : null),
          constraints: (tree.flutterAnimatedContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterAnimatedContainer.constraints) : null),
          margin: (tree.flutterAnimatedContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.margin) : null),
          transform: (tree.flutterAnimatedContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterAnimatedContainer.transform) : null),
          transformAlignment: (tree.flutterAnimatedContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.transformAlignment) : null),
          child: (tree.flutterAnimatedContainer.hasChild() ? evaluateWidgetType(tree.flutterAnimatedContainer.child) : null),
          clipBehavior: (tree.flutterAnimatedContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedContainer.clipBehavior) : $dartUi.Clip.none),
          curve: (tree.flutterAnimatedContainer.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedContainer.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedContainer.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedContainer.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedCrossFade:
      return $flutterSrcWidgetsAnimatedCrossFade.AnimatedCrossFade(
          key: (tree.flutterAnimatedCrossFade.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedCrossFade.key) : null),
          firstChild: (tree.flutterAnimatedCrossFade.hasFirstChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.firstChild) : missing('firstChild')),
          secondChild: (tree.flutterAnimatedCrossFade.hasSecondChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.secondChild) : missing('secondChild')),
          firstCurve: (tree.flutterAnimatedCrossFade.hasFirstCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.firstCurve) : $flutterSrcAnimationCurves.Curves.linear),
          secondCurve: (tree.flutterAnimatedCrossFade.hasSecondCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.secondCurve) : $flutterSrcAnimationCurves.Curves.linear),
          sizeCurve: (tree.flutterAnimatedCrossFade.hasSizeCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.sizeCurve) : $flutterSrcAnimationCurves.Curves.linear),
          alignment: (tree.flutterAnimatedCrossFade.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedCrossFade.alignment) : $flutterSrcPaintingAlignment.Alignment.topCenter),
          crossFadeState: (tree.flutterAnimatedCrossFade.hasCrossFadeState() ? enums.convertRequiredFlutterCrossFadeStateType(tree.flutterAnimatedCrossFade.crossFadeState) : missing('crossFadeState')),
          duration: (tree.flutterAnimatedCrossFade.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedCrossFade.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedCrossFade.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedCrossFade.reverseDuration) : null),
          excludeBottomFocus: (tree.flutterAnimatedCrossFade.hasExcludeBottomFocus() ? tree.flutterAnimatedCrossFade.excludeBottomFocus : true));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedDefaultTextStyle:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedDefaultTextStyle(
          key: (tree.flutterAnimatedDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedDefaultTextStyle.key) : null),
          child: (tree.flutterAnimatedDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedDefaultTextStyle.child) : missing('child')),
          style: (tree.flutterAnimatedDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterAnimatedDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterAnimatedDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterAnimatedDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterAnimatedDefaultTextStyle.hasSoftWrap() ? tree.flutterAnimatedDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterAnimatedDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterAnimatedDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterAnimatedDefaultTextStyle.hasMaxLines() ? tree.flutterAnimatedDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterAnimatedDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterAnimatedDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterAnimatedDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterAnimatedDefaultTextStyle.textHeightBehavior) : null),
          curve: (tree.flutterAnimatedDefaultTextStyle.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedDefaultTextStyle.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedDefaultTextStyle.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedDefaultTextStyle.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedFractionallySizedBox:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedFractionallySizedBox(
          key: (tree.flutterAnimatedFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedFractionallySizedBox.key) : null),
          alignment: (tree.flutterAnimatedFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterAnimatedFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterAnimatedFractionallySizedBox.child) : null),
          heightFactor: (tree.flutterAnimatedFractionallySizedBox.hasHeightFactor() ? tree.flutterAnimatedFractionallySizedBox.heightFactor : null),
          widthFactor: (tree.flutterAnimatedFractionallySizedBox.hasWidthFactor() ? tree.flutterAnimatedFractionallySizedBox.widthFactor : null),
          curve: (tree.flutterAnimatedFractionallySizedBox.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedFractionallySizedBox.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedFractionallySizedBox.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedFractionallySizedBox.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedOpacity(
          key: (tree.flutterAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedOpacity.key) : null),
          child: (tree.flutterAnimatedOpacity.hasChild() ? evaluateWidgetType(tree.flutterAnimatedOpacity.child) : null),
          opacity: (tree.flutterAnimatedOpacity.hasOpacity() ? tree.flutterAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedPadding:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPadding(
          key: (tree.flutterAnimatedPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPadding.key) : null),
          padding: (tree.flutterAnimatedPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterAnimatedPadding.padding) : missing('padding')),
          child: (tree.flutterAnimatedPadding.hasChild() ? evaluateWidgetType(tree.flutterAnimatedPadding.child) : null),
          curve: (tree.flutterAnimatedPadding.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPadding.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPadding.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPadding.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedPhysicalModel:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPhysicalModel(
          key: (tree.flutterAnimatedPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPhysicalModel.key) : null),
          child: (tree.flutterAnimatedPhysicalModel.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPhysicalModel.child) : missing('child')),
          shape: (tree.flutterAnimatedPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterAnimatedPhysicalModel.shape) : missing('shape')),
          clipBehavior: (tree.flutterAnimatedPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterAnimatedPhysicalModel.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.flutterAnimatedPhysicalModel.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          elevation: (tree.flutterAnimatedPhysicalModel.hasElevation() ? tree.flutterAnimatedPhysicalModel.elevation : missing('elevation')),
          color: (tree.flutterAnimatedPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.color) : missing('color')),
          animateColor: (tree.flutterAnimatedPhysicalModel.hasAnimateColor() ? tree.flutterAnimatedPhysicalModel.animateColor : true),
          shadowColor: (tree.flutterAnimatedPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.shadowColor) : missing('shadowColor')),
          animateShadowColor: (tree.flutterAnimatedPhysicalModel.hasAnimateShadowColor() ? tree.flutterAnimatedPhysicalModel.animateShadowColor : true),
          curve: (tree.flutterAnimatedPhysicalModel.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPhysicalModel.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPhysicalModel.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPhysicalModel.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedPositioned:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned(
          key: (tree.flutterAnimatedPositioned.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositioned.key) : null),
          child: (tree.flutterAnimatedPositioned.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositioned.child) : missing('child')),
          left: (tree.flutterAnimatedPositioned.hasLeft() ? tree.flutterAnimatedPositioned.left : null),
          top: (tree.flutterAnimatedPositioned.hasTop() ? tree.flutterAnimatedPositioned.top : null),
          right: (tree.flutterAnimatedPositioned.hasRight() ? tree.flutterAnimatedPositioned.right : null),
          bottom: (tree.flutterAnimatedPositioned.hasBottom() ? tree.flutterAnimatedPositioned.bottom : null),
          width: (tree.flutterAnimatedPositioned.hasWidth() ? tree.flutterAnimatedPositioned.width : null),
          height: (tree.flutterAnimatedPositioned.hasHeight() ? tree.flutterAnimatedPositioned.height : null),
          curve: (tree.flutterAnimatedPositioned.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositioned.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositioned.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositioned.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedPositionedDirectional:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositionedDirectional(
          key: (tree.flutterAnimatedPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedDirectional.key) : null),
          child: (tree.flutterAnimatedPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedDirectional.child) : missing('child')),
          start: (tree.flutterAnimatedPositionedDirectional.hasStart() ? tree.flutterAnimatedPositionedDirectional.start : null),
          top: (tree.flutterAnimatedPositionedDirectional.hasTop() ? tree.flutterAnimatedPositionedDirectional.top : null),
          end: (tree.flutterAnimatedPositionedDirectional.hasEnd() ? tree.flutterAnimatedPositionedDirectional.end : null),
          bottom: (tree.flutterAnimatedPositionedDirectional.hasBottom() ? tree.flutterAnimatedPositionedDirectional.bottom : null),
          width: (tree.flutterAnimatedPositionedDirectional.hasWidth() ? tree.flutterAnimatedPositionedDirectional.width : null),
          height: (tree.flutterAnimatedPositionedDirectional.hasHeight() ? tree.flutterAnimatedPositionedDirectional.height : null),
          curve: (tree.flutterAnimatedPositionedDirectional.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedDirectional.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedDirectional.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedDirectional.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedPositionedNamedFromRect:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned.fromRect(
          key: (tree.flutterAnimatedPositionedNamedFromRect.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedNamedFromRect.key) : null),
          child: (tree.flutterAnimatedPositionedNamedFromRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedNamedFromRect.child) : missing('child')),
          rect: (tree.flutterAnimatedPositionedNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterAnimatedPositionedNamedFromRect.rect) : missing('rect')),
          curve: (tree.flutterAnimatedPositionedNamedFromRect.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedNamedFromRect.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedNamedFromRect.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedNamedFromRect.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedRotation:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedRotation(
          key: (tree.flutterAnimatedRotation.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedRotation.key) : null),
          child: (tree.flutterAnimatedRotation.hasChild() ? evaluateWidgetType(tree.flutterAnimatedRotation.child) : null),
          turns: (tree.flutterAnimatedRotation.hasTurns() ? tree.flutterAnimatedRotation.turns : missing('turns')),
          alignment: (tree.flutterAnimatedRotation.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedRotation.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedRotation.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedRotation.filterQuality) : null),
          curve: (tree.flutterAnimatedRotation.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedRotation.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedRotation.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedRotation.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedScale:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedScale(
          key: (tree.flutterAnimatedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedScale.key) : null),
          child: (tree.flutterAnimatedScale.hasChild() ? evaluateWidgetType(tree.flutterAnimatedScale.child) : null),
          scale: (tree.flutterAnimatedScale.hasScale() ? tree.flutterAnimatedScale.scale : missing('scale')),
          alignment: (tree.flutterAnimatedScale.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedScale.filterQuality) : null),
          curve: (tree.flutterAnimatedScale.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedScale.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedScale.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedScale.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedSize:
      return $flutterSrcWidgetsAnimatedSize.AnimatedSize(
          key: (tree.flutterAnimatedSize.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSize.key) : null),
          child: (tree.flutterAnimatedSize.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSize.child) : null),
          alignment: (tree.flutterAnimatedSize.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedSize.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          curve: (tree.flutterAnimatedSize.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSize.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSize.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSize.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSize.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSize.reverseDuration) : null),
          clipBehavior: (tree.flutterAnimatedSize.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedSize.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedSlide:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedSlide(
          key: (tree.flutterAnimatedSlide.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSlide.key) : null),
          child: (tree.flutterAnimatedSlide.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSlide.child) : null),
          offset: (tree.flutterAnimatedSlide.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterAnimatedSlide.offset) : missing('offset')),
          curve: (tree.flutterAnimatedSlide.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSlide.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSlide.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSlide.duration) : missing('duration')),
          onEnd: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAnimatedSwitcher:
      return $flutterSrcWidgetsAnimatedSwitcher.AnimatedSwitcher(
          key: (tree.flutterAnimatedSwitcher.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSwitcher.key) : null),
          child: (tree.flutterAnimatedSwitcher.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSwitcher.child) : null),
          duration: (tree.flutterAnimatedSwitcher.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSwitcher.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSwitcher.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSwitcher.reverseDuration) : null),
          switchInCurve: (tree.flutterAnimatedSwitcher.hasSwitchInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchInCurve) : $flutterSrcAnimationCurves.Curves.linear),
          switchOutCurve: (tree.flutterAnimatedSwitcher.hasSwitchOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchOutCurve) : $flutterSrcAnimationCurves.Curves.linear));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAppKitView:
      return $flutterSrcWidgetsPlatformView.AppKitView(
          key: (tree.flutterAppKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterAppKitView.key) : null),
          viewType: (tree.flutterAppKitView.hasViewType() ? tree.flutterAppKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAppKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAppKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAppKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAppKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterAutofillGroup:
      return $flutterSrcWidgetsAutofill.AutofillGroup(
          key: (tree.flutterAutofillGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterAutofillGroup.key) : null),
          child: (tree.flutterAutofillGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutofillGroup.child) : missing('child')),
          onDisposeAction: (tree.flutterAutofillGroup.hasOnDisposeAction() ? enums.convertRequiredFlutterAutofillContextActionType(tree.flutterAutofillGroup.onDisposeAction) : $flutterSrcWidgetsAutofill.AutofillContextAction.commit));
    case messages.FlutterStatefulWidgetType_Constructor.flutterAutomaticKeepAlive:
      return $flutterSrcWidgetsAutomaticKeepAlive.AutomaticKeepAlive(
          key: (tree.flutterAutomaticKeepAlive.hasKey() ? evaluateFlutterKeyType(tree.flutterAutomaticKeepAlive.key) : null),
          child: (tree.flutterAutomaticKeepAlive.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutomaticKeepAlive.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterDismissible:
      return $flutterSrcWidgetsDismissible.Dismissible(
          key: (tree.flutterDismissible.hasKey() ? evaluateRequiredFlutterKeyType(tree.flutterDismissible.key) : missing('key')),
          child: (tree.flutterDismissible.hasChild() ? evaluateRequiredWidgetType(tree.flutterDismissible.child) : missing('child')),
          background: (tree.flutterDismissible.hasBackground() ? evaluateWidgetType(tree.flutterDismissible.background) : null),
          secondaryBackground: (tree.flutterDismissible.hasSecondaryBackground() ? evaluateWidgetType(tree.flutterDismissible.secondaryBackground) : null),
          confirmDismiss: null,
          onResize: null,
          onUpdate: null,
          onDismissed: null,
          direction: (tree.flutterDismissible.hasDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.flutterDismissible.direction) : $flutterSrcWidgetsDismissible.DismissDirection.horizontal),
          resizeDuration: (tree.flutterDismissible.hasResizeDuration() ? evaluateDartDurationType(tree.flutterDismissible.resizeDuration) : $dartCore.Duration(milliseconds: 300)),
          movementDuration: (tree.flutterDismissible.hasMovementDuration() ? evaluateRequiredDartDurationType(tree.flutterDismissible.movementDuration) : $dartCore.Duration(milliseconds: 200)),
          crossAxisEndOffset: (tree.flutterDismissible.hasCrossAxisEndOffset() ? tree.flutterDismissible.crossAxisEndOffset : 0.0),
          dragStartBehavior: (tree.flutterDismissible.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterDismissible.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          behavior: (tree.flutterDismissible.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDismissible.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.opaque));
    case messages.FlutterStatefulWidgetType_Constructor.flutterDraggable:
      return $flutterSrcWidgetsDragTarget.Draggable(
          key: (tree.flutterDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggable.key) : null),
          child: (tree.flutterDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggable.child) : missing('child')),
          feedback: (tree.flutterDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterDraggable.axis) : null),
          childWhenDragging: (tree.flutterDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterDraggable.feedbackOffset) : $dartUi.Offset.zero),
          affinity: (tree.flutterDraggable.hasAffinity() ? enums.convertFlutterAxisType(tree.flutterDraggable.affinity) : null),
          maxSimultaneousDrags: (tree.flutterDraggable.hasMaxSimultaneousDrags() ? tree.flutterDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          ignoringFeedbackSemantics: (tree.flutterDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterDraggable.hasIgnoringFeedbackPointer() ? tree.flutterDraggable.ignoringFeedbackPointer : true),
          rootOverlay: (tree.flutterDraggable.hasRootOverlay() ? tree.flutterDraggable.rootOverlay : false),
          hitTestBehavior: (tree.flutterDraggable.hasHitTestBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDraggable.hitTestBehavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          allowedButtonsFilter: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterDraggableScrollableActuator:
      return $flutterSrcWidgetsDraggableScrollableSheet.DraggableScrollableActuator(
          key: (tree.flutterDraggableScrollableActuator.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggableScrollableActuator.key) : null),
          child: (tree.flutterDraggableScrollableActuator.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggableScrollableActuator.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterEditableText:
      return $flutterSrcWidgetsEditableText.EditableText(
          key: (tree.flutterEditableText.hasKey() ? evaluateFlutterKeyType(tree.flutterEditableText.key) : null),
          controller: (tree.flutterEditableText.hasController() ? evaluateRequiredFlutterTextEditingControllerType(tree.flutterEditableText.controller) : missing('controller')),
          focusNode: (tree.flutterEditableText.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterEditableText.focusNode) : missing('focusNode')),
          readOnly: (tree.flutterEditableText.hasReadOnly() ? tree.flutterEditableText.readOnly : false),
          obscuringCharacter: (tree.flutterEditableText.hasObscuringCharacter() ? tree.flutterEditableText.obscuringCharacter : '•'),
          obscureText: (tree.flutterEditableText.hasObscureText() ? tree.flutterEditableText.obscureText : false),
          autocorrect: (tree.flutterEditableText.hasAutocorrect() ? tree.flutterEditableText.autocorrect : true),
          smartDashesType: (tree.flutterEditableText.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.flutterEditableText.smartDashesType) : null),
          smartQuotesType: (tree.flutterEditableText.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.flutterEditableText.smartQuotesType) : null),
          enableSuggestions: (tree.flutterEditableText.hasEnableSuggestions() ? tree.flutterEditableText.enableSuggestions : true),
          style: (tree.flutterEditableText.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterEditableText.style) : missing('style')),
          strutStyle: (tree.flutterEditableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterEditableText.strutStyle) : null),
          cursorColor: (tree.flutterEditableText.hasCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.cursorColor) : missing('cursorColor')),
          backgroundCursorColor: (tree.flutterEditableText.hasBackgroundCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.backgroundCursorColor) : missing('backgroundCursorColor')),
          textAlign: (tree.flutterEditableText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterEditableText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterEditableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterEditableText.textDirection) : null),
          locale: (tree.flutterEditableText.hasLocale() ? evaluateDartLocaleType(tree.flutterEditableText.locale) : null),
          textScaler: (tree.flutterEditableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterEditableText.textScaler) : null),
          maxLines: (tree.flutterEditableText.hasMaxLines() ? tree.flutterEditableText.maxLines : 1),
          minLines: (tree.flutterEditableText.hasMinLines() ? tree.flutterEditableText.minLines : null),
          expands: (tree.flutterEditableText.hasExpands() ? tree.flutterEditableText.expands : false),
          forceLine: (tree.flutterEditableText.hasForceLine() ? tree.flutterEditableText.forceLine : true),
          textHeightBehavior: (tree.flutterEditableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterEditableText.textHeightBehavior) : null),
          textWidthBasis: (tree.flutterEditableText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterEditableText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          autofocus: (tree.flutterEditableText.hasAutofocus() ? tree.flutterEditableText.autofocus : false),
          showCursor: (tree.flutterEditableText.hasShowCursor() ? tree.flutterEditableText.showCursor : null),
          showSelectionHandles: (tree.flutterEditableText.hasShowSelectionHandles() ? tree.flutterEditableText.showSelectionHandles : false),
          selectionColor: (tree.flutterEditableText.hasSelectionColor() ? evaluateDartColorType(tree.flutterEditableText.selectionColor) : null),
          selectionControls: (tree.flutterEditableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.flutterEditableText.selectionControls) : null),
          keyboardType: (tree.flutterEditableText.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.flutterEditableText.keyboardType) : null),
          textInputAction: (tree.flutterEditableText.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.flutterEditableText.textInputAction) : null),
          textCapitalization: (tree.flutterEditableText.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.flutterEditableText.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          onSelectionChanged: null,
          onSelectionHandleTapped: null,
          onTapOutside: null,
          inputFormatters: tree.flutterEditableText.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          mouseCursor: null,
          rendererIgnoresPointer: (tree.flutterEditableText.hasRendererIgnoresPointer() ? tree.flutterEditableText.rendererIgnoresPointer : false),
          cursorWidth: (tree.flutterEditableText.hasCursorWidth() ? tree.flutterEditableText.cursorWidth : 2.0),
          cursorHeight: (tree.flutterEditableText.hasCursorHeight() ? tree.flutterEditableText.cursorHeight : null),
          cursorRadius: (tree.flutterEditableText.hasCursorRadius() ? evaluateDartRadiusType(tree.flutterEditableText.cursorRadius) : null),
          cursorOpacityAnimates: (tree.flutterEditableText.hasCursorOpacityAnimates() ? tree.flutterEditableText.cursorOpacityAnimates : false),
          cursorOffset: (tree.flutterEditableText.hasCursorOffset() ? evaluateDartOffsetType(tree.flutterEditableText.cursorOffset) : null),
          paintCursorAboveText: (tree.flutterEditableText.hasPaintCursorAboveText() ? tree.flutterEditableText.paintCursorAboveText : false),
          selectionHeightStyle: (tree.flutterEditableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.flutterEditableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.flutterEditableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.flutterEditableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          scrollPadding: (tree.flutterEditableText.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterEditableText.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          keyboardAppearance: (tree.flutterEditableText.hasKeyboardAppearance() ? enums.convertRequiredDartBrightnessType(tree.flutterEditableText.keyboardAppearance) : $dartUi.Brightness.light),
          dragStartBehavior: (tree.flutterEditableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterEditableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.flutterEditableText.hasEnableInteractiveSelection() ? tree.flutterEditableText.enableInteractiveSelection : null),
          scrollController: (tree.flutterEditableText.hasScrollController() ? evaluateFlutterScrollControllerType(tree.flutterEditableText.scrollController) : null),
          scrollPhysics: (tree.flutterEditableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterEditableText.scrollPhysics) : null),
          autocorrectionTextRectColor: (tree.flutterEditableText.hasAutocorrectionTextRectColor() ? evaluateDartColorType(tree.flutterEditableText.autocorrectionTextRectColor) : null),
          autofillHints: tree.flutterEditableText.autofillHints,
          autofillClient: (tree.flutterEditableText.hasAutofillClient() ? evaluateFlutterAutofillClientType(tree.flutterEditableText.autofillClient) : null),
          clipBehavior: (tree.flutterEditableText.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterEditableText.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterEditableText.hasRestorationId() ? tree.flutterEditableText.restorationId : null),
          scrollBehavior: (tree.flutterEditableText.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterEditableText.scrollBehavior) : null),
          scribbleEnabled: (tree.flutterEditableText.hasScribbleEnabled() ? tree.flutterEditableText.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.flutterEditableText.hasEnableIMEPersonalizedLearning() ? tree.flutterEditableText.enableIMEPersonalizedLearning : true),
          contentInsertionConfiguration: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.flutterEditableText.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.flutterEditableText.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.flutterEditableText.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterEditableText.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          undoController: (tree.flutterEditableText.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.flutterEditableText.undoController) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFadeInImageNamedAssetNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.assetNetwork(
          key: (tree.flutterFadeInImageNamedAssetNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedAssetNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterFadeInImageNamedAssetNetwork.image : missing('image')),
          imageErrorBuilder: null,
          bundle: (tree.flutterFadeInImageNamedAssetNetwork.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterFadeInImageNamedAssetNetwork.bundle) : null),
          placeholderScale: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderScale : null),
          imageScale: (tree.flutterFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterFadeInImageNamedAssetNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedAssetNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedAssetNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterFadeInImageNamedAssetNetwork.width : null),
          height: (tree.flutterFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterFadeInImageNamedAssetNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedAssetNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedAssetNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedAssetNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedAssetNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedAssetNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedAssetNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFadeInImageNamedMemoryNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.memoryNetwork(
          key: (tree.flutterFadeInImageNamedMemoryNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedMemoryNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholder() ? evaluateRequiredDartUint8ListType(tree.flutterFadeInImageNamedMemoryNetwork.placeholder) : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedMemoryNetwork.hasImage() ? tree.flutterFadeInImageNamedMemoryNetwork.image : missing('image')),
          imageErrorBuilder: null,
          placeholderScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderScale : 1.0),
          imageScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageScale() ? tree.flutterFadeInImageNamedMemoryNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedMemoryNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedMemoryNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedMemoryNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedMemoryNetwork.hasWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.width : null),
          height: (tree.flutterFadeInImageNamedMemoryNetwork.hasHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedMemoryNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedMemoryNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedMemoryNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedMemoryNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedMemoryNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedMemoryNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedMemoryNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocus:
      return $flutterSrcWidgetsFocusScope.Focus(
          key: (tree.flutterFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterFocus.key) : null),
          child: (tree.flutterFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocus.child) : missing('child')),
          focusNode: (tree.flutterFocus.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.focusNode) : null),
          parentNode: (tree.flutterFocus.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.parentNode) : null),
          autofocus: (tree.flutterFocus.hasAutofocus() ? tree.flutterFocus.autofocus : false),
          onFocusChange: null,
          onKeyEvent: null,
          onKey: null,
          canRequestFocus: (tree.flutterFocus.hasCanRequestFocus() ? tree.flutterFocus.canRequestFocus : null),
          skipTraversal: (tree.flutterFocus.hasSkipTraversal() ? tree.flutterFocus.skipTraversal : null),
          descendantsAreFocusable: (tree.flutterFocus.hasDescendantsAreFocusable() ? tree.flutterFocus.descendantsAreFocusable : null),
          descendantsAreTraversable: (tree.flutterFocus.hasDescendantsAreTraversable() ? tree.flutterFocus.descendantsAreTraversable : null),
          includeSemantics: (tree.flutterFocus.hasIncludeSemantics() ? tree.flutterFocus.includeSemantics : true),
          debugLabel: (tree.flutterFocus.hasDebugLabel() ? tree.flutterFocus.debugLabel : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocusNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.Focus.withExternalFocusNode(
          key: (tree.flutterFocusNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusNamedWithExternalFocusNode.child) : missing('child')),
          focusNode: (tree.flutterFocusNamedWithExternalFocusNode.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.focusNode) : missing('focusNode')),
          parentNode: (tree.flutterFocusNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null,
          includeSemantics: (tree.flutterFocusNamedWithExternalFocusNode.hasIncludeSemantics() ? tree.flutterFocusNamedWithExternalFocusNode.includeSemantics : missing('includeSemantics')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocusScope:
      return $flutterSrcWidgetsFocusScope.FocusScope(
          key: (tree.flutterFocusScope.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScope.key) : null),
          node: (tree.flutterFocusScope.hasNode() ? evaluateFlutterFocusScopeNodeType(tree.flutterFocusScope.node) : null),
          parentNode: (tree.flutterFocusScope.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScope.parentNode) : null),
          child: (tree.flutterFocusScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScope.child) : missing('child')),
          autofocus: (tree.flutterFocusScope.hasAutofocus() ? tree.flutterFocusScope.autofocus : false),
          onFocusChange: null,
          canRequestFocus: (tree.flutterFocusScope.hasCanRequestFocus() ? tree.flutterFocusScope.canRequestFocus : null),
          skipTraversal: (tree.flutterFocusScope.hasSkipTraversal() ? tree.flutterFocusScope.skipTraversal : null),
          onKeyEvent: null,
          onKey: null,
          debugLabel: (tree.flutterFocusScope.hasDebugLabel() ? tree.flutterFocusScope.debugLabel : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocusScopeNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.FocusScope.withExternalFocusNode(
          key: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScopeNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScopeNamedWithExternalFocusNode.child) : missing('child')),
          focusScopeNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasFocusScopeNode() ? evaluateRequiredFlutterFocusScopeNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.focusScopeNode) : missing('focusScopeNode')),
          parentNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusScopeNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocusTraversalGroup:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalGroup(
          key: (tree.flutterFocusTraversalGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalGroup.key) : null),
          policy: (tree.flutterFocusTraversalGroup.hasPolicy() ? evaluateFlutterFocusTraversalPolicyType(tree.flutterFocusTraversalGroup.policy) : null),
          descendantsAreFocusable: (tree.flutterFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterFocusTraversalGroup.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterFocusTraversalGroup.descendantsAreTraversable : true),
          child: (tree.flutterFocusTraversalGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalGroup.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterFocusableActionDetector:
      return $flutterSrcWidgetsActions.FocusableActionDetector(
          key: (tree.flutterFocusableActionDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusableActionDetector.key) : null),
          enabled: (tree.flutterFocusableActionDetector.hasEnabled() ? tree.flutterFocusableActionDetector.enabled : true),
          focusNode: (tree.flutterFocusableActionDetector.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusableActionDetector.focusNode) : null),
          autofocus: (tree.flutterFocusableActionDetector.hasAutofocus() ? tree.flutterFocusableActionDetector.autofocus : false),
          descendantsAreFocusable: (tree.flutterFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterFocusableActionDetector.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterFocusableActionDetector.descendantsAreTraversable : true),
          shortcuts: null,
          actions: null,
          onShowFocusHighlight: null,
          onShowHoverHighlight: null,
          onFocusChange: null,
          includeFocusSemantics: (tree.flutterFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterFocusableActionDetector.includeFocusSemantics : true),
          child: (tree.flutterFocusableActionDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusableActionDetector.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterForm:
      return $flutterSrcWidgetsForm.Form(
          key: (tree.flutterForm.hasKey() ? evaluateFlutterKeyType(tree.flutterForm.key) : null),
          child: (tree.flutterForm.hasChild() ? evaluateRequiredWidgetType(tree.flutterForm.child) : missing('child')),
          canPop: (tree.flutterForm.hasCanPop() ? tree.flutterForm.canPop : null),
          onPopInvoked: null,
          onChanged: null,
          autovalidateMode: (tree.flutterForm.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.flutterForm.autovalidateMode) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterGlowingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.GlowingOverscrollIndicator(
          key: (tree.flutterGlowingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterGlowingOverscrollIndicator.key) : null),
          showLeading: (tree.flutterGlowingOverscrollIndicator.hasShowLeading() ? tree.flutterGlowingOverscrollIndicator.showLeading : true),
          showTrailing: (tree.flutterGlowingOverscrollIndicator.hasShowTrailing() ? tree.flutterGlowingOverscrollIndicator.showTrailing : true),
          axisDirection: (tree.flutterGlowingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterGlowingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          color: (tree.flutterGlowingOverscrollIndicator.hasColor() ? evaluateRequiredDartColorType(tree.flutterGlowingOverscrollIndicator.color) : missing('color')),
          child: (tree.flutterGlowingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterGlowingOverscrollIndicator.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterImageNamedAsset:
      return $flutterSrcWidgetsImage.Image.asset(
          (tree.flutterImageNamedAsset.hasName() ? tree.flutterImageNamedAsset.name : missing('name')),
          key: (tree.flutterImageNamedAsset.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedAsset.key) : null),
          bundle: (tree.flutterImageNamedAsset.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterImageNamedAsset.bundle) : null),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedAsset.hasSemanticLabel() ? tree.flutterImageNamedAsset.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterImageNamedAsset.excludeFromSemantics : false),
          scale: (tree.flutterImageNamedAsset.hasScale() ? tree.flutterImageNamedAsset.scale : null),
          width: (tree.flutterImageNamedAsset.hasWidth() ? tree.flutterImageNamedAsset.width : null),
          height: (tree.flutterImageNamedAsset.hasHeight() ? tree.flutterImageNamedAsset.height : null),
          color: (tree.flutterImageNamedAsset.hasColor() ? evaluateDartColorType(tree.flutterImageNamedAsset.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedAsset.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedAsset.colorBlendMode) : null),
          fit: (tree.flutterImageNamedAsset.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedAsset.fit) : null),
          alignment: (tree.flutterImageNamedAsset.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedAsset.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedAsset.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedAsset.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedAsset.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedAsset.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedAsset.hasMatchTextDirection() ? tree.flutterImageNamedAsset.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedAsset.hasGaplessPlayback() ? tree.flutterImageNamedAsset.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedAsset.hasIsAntiAlias() ? tree.flutterImageNamedAsset.isAntiAlias : false),
          package: (tree.flutterImageNamedAsset.hasPackage() ? tree.flutterImageNamedAsset.package : null),
          filterQuality: (tree.flutterImageNamedAsset.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedAsset.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedAsset.hasCacheWidth() ? tree.flutterImageNamedAsset.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedAsset.hasCacheHeight() ? tree.flutterImageNamedAsset.cacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterImageNamedFile:
      return $flutterSrcWidgetsImage.Image.file(
          (tree.flutterImageNamedFile.hasFile() ? evaluateRequiredDartFileType(tree.flutterImageNamedFile.file) : missing('file')),
          key: (tree.flutterImageNamedFile.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedFile.key) : null),
          scale: (tree.flutterImageNamedFile.hasScale() ? tree.flutterImageNamedFile.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedFile.hasSemanticLabel() ? tree.flutterImageNamedFile.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedFile.hasExcludeFromSemantics() ? tree.flutterImageNamedFile.excludeFromSemantics : false),
          width: (tree.flutterImageNamedFile.hasWidth() ? tree.flutterImageNamedFile.width : null),
          height: (tree.flutterImageNamedFile.hasHeight() ? tree.flutterImageNamedFile.height : null),
          color: (tree.flutterImageNamedFile.hasColor() ? evaluateDartColorType(tree.flutterImageNamedFile.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedFile.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedFile.colorBlendMode) : null),
          fit: (tree.flutterImageNamedFile.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedFile.fit) : null),
          alignment: (tree.flutterImageNamedFile.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedFile.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedFile.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedFile.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedFile.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedFile.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedFile.hasMatchTextDirection() ? tree.flutterImageNamedFile.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedFile.hasGaplessPlayback() ? tree.flutterImageNamedFile.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedFile.hasIsAntiAlias() ? tree.flutterImageNamedFile.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedFile.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedFile.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedFile.hasCacheWidth() ? tree.flutterImageNamedFile.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedFile.hasCacheHeight() ? tree.flutterImageNamedFile.cacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterImageNamedMemory:
      return $flutterSrcWidgetsImage.Image.memory(
          (tree.flutterImageNamedMemory.hasBytes() ? evaluateRequiredDartUint8ListType(tree.flutterImageNamedMemory.bytes) : missing('bytes')),
          key: (tree.flutterImageNamedMemory.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedMemory.key) : null),
          scale: (tree.flutterImageNamedMemory.hasScale() ? tree.flutterImageNamedMemory.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedMemory.hasSemanticLabel() ? tree.flutterImageNamedMemory.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedMemory.hasExcludeFromSemantics() ? tree.flutterImageNamedMemory.excludeFromSemantics : false),
          width: (tree.flutterImageNamedMemory.hasWidth() ? tree.flutterImageNamedMemory.width : null),
          height: (tree.flutterImageNamedMemory.hasHeight() ? tree.flutterImageNamedMemory.height : null),
          color: (tree.flutterImageNamedMemory.hasColor() ? evaluateDartColorType(tree.flutterImageNamedMemory.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedMemory.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedMemory.colorBlendMode) : null),
          fit: (tree.flutterImageNamedMemory.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedMemory.fit) : null),
          alignment: (tree.flutterImageNamedMemory.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedMemory.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedMemory.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedMemory.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedMemory.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedMemory.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedMemory.hasMatchTextDirection() ? tree.flutterImageNamedMemory.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedMemory.hasGaplessPlayback() ? tree.flutterImageNamedMemory.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedMemory.hasIsAntiAlias() ? tree.flutterImageNamedMemory.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedMemory.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedMemory.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedMemory.hasCacheWidth() ? tree.flutterImageNamedMemory.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedMemory.hasCacheHeight() ? tree.flutterImageNamedMemory.cacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterImageNamedNetwork:
      return $flutterSrcWidgetsImage.Image.network(
          (tree.flutterImageNamedNetwork.hasSrc() ? tree.flutterImageNamedNetwork.src : missing('src')),
          key: (tree.flutterImageNamedNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedNetwork.key) : null),
          scale: (tree.flutterImageNamedNetwork.hasScale() ? tree.flutterImageNamedNetwork.scale : 1.0),
          frameBuilder: null,
          loadingBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedNetwork.hasSemanticLabel() ? tree.flutterImageNamedNetwork.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterImageNamedNetwork.excludeFromSemantics : false),
          width: (tree.flutterImageNamedNetwork.hasWidth() ? tree.flutterImageNamedNetwork.width : null),
          height: (tree.flutterImageNamedNetwork.hasHeight() ? tree.flutterImageNamedNetwork.height : null),
          color: (tree.flutterImageNamedNetwork.hasColor() ? evaluateDartColorType(tree.flutterImageNamedNetwork.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedNetwork.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedNetwork.colorBlendMode) : null),
          fit: (tree.flutterImageNamedNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedNetwork.fit) : null),
          alignment: (tree.flutterImageNamedNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedNetwork.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedNetwork.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedNetwork.hasMatchTextDirection() ? tree.flutterImageNamedNetwork.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedNetwork.hasGaplessPlayback() ? tree.flutterImageNamedNetwork.gaplessPlayback : false),
          filterQuality: (tree.flutterImageNamedNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedNetwork.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterImageNamedNetwork.hasIsAntiAlias() ? tree.flutterImageNamedNetwork.isAntiAlias : false),
          headers: null,
          cacheWidth: (tree.flutterImageNamedNetwork.hasCacheWidth() ? tree.flutterImageNamedNetwork.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedNetwork.hasCacheHeight() ? tree.flutterImageNamedNetwork.cacheHeight : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterInteractiveViewer:
      return $flutterSrcWidgetsInteractiveViewer.InteractiveViewer(
          key: (tree.flutterInteractiveViewer.hasKey() ? evaluateFlutterKeyType(tree.flutterInteractiveViewer.key) : null),
          clipBehavior: (tree.flutterInteractiveViewer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterInteractiveViewer.clipBehavior) : $dartUi.Clip.hardEdge),
          panAxis: (tree.flutterInteractiveViewer.hasPanAxis() ? enums.convertRequiredFlutterPanAxisType(tree.flutterInteractiveViewer.panAxis) : $flutterSrcWidgetsInteractiveViewer.PanAxis.free),
          boundaryMargin: (tree.flutterInteractiveViewer.hasBoundaryMargin() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterInteractiveViewer.boundaryMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          constrained: (tree.flutterInteractiveViewer.hasConstrained() ? tree.flutterInteractiveViewer.constrained : true),
          maxScale: (tree.flutterInteractiveViewer.hasMaxScale() ? tree.flutterInteractiveViewer.maxScale : 2.5),
          minScale: (tree.flutterInteractiveViewer.hasMinScale() ? tree.flutterInteractiveViewer.minScale : 0.8),
          interactionEndFrictionCoefficient: (tree.flutterInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterInteractiveViewer.interactionEndFrictionCoefficient : 0.0000135),
          onInteractionEnd: null,
          onInteractionStart: null,
          onInteractionUpdate: null,
          panEnabled: (tree.flutterInteractiveViewer.hasPanEnabled() ? tree.flutterInteractiveViewer.panEnabled : true),
          scaleEnabled: (tree.flutterInteractiveViewer.hasScaleEnabled() ? tree.flutterInteractiveViewer.scaleEnabled : true),
          scaleFactor: (tree.flutterInteractiveViewer.hasScaleFactor() ? tree.flutterInteractiveViewer.scaleFactor : $flutterSrcGesturesScale.kDefaultMouseScrollToScaleFactor),
          transformationController: (tree.flutterInteractiveViewer.hasTransformationController() ? evaluateFlutterTransformationControllerType(tree.flutterInteractiveViewer.transformationController) : null),
          alignment: (tree.flutterInteractiveViewer.hasAlignment() ? evaluateFlutterAlignmentType(tree.flutterInteractiveViewer.alignment) : null),
          trackpadScrollCausesScale: (tree.flutterInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterInteractiveViewer.trackpadScrollCausesScale : false),
          child: (tree.flutterInteractiveViewer.hasChild() ? evaluateRequiredWidgetType(tree.flutterInteractiveViewer.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterListWheelScrollView:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView(
          key: (tree.flutterListWheelScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollView.key) : null),
          controller: (tree.flutterListWheelScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollView.controller) : null),
          physics: (tree.flutterListWheelScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollView.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollView.hasDiameterRatio() ? tree.flutterListWheelScrollView.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollView.hasPerspective() ? tree.flutterListWheelScrollView.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollView.hasOffAxisFraction() ? tree.flutterListWheelScrollView.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollView.hasUseMagnifier() ? tree.flutterListWheelScrollView.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollView.hasMagnification() ? tree.flutterListWheelScrollView.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollView.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollView.hasItemExtent() ? tree.flutterListWheelScrollView.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollView.hasSqueeze() ? tree.flutterListWheelScrollView.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollView.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollView.hasRestorationId() ? tree.flutterListWheelScrollView.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollView.scrollBehavior) : null),
          children: tree.flutterListWheelScrollView.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatefulWidgetType_Constructor.flutterListWheelScrollViewNamedUseDelegate:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView.useDelegate(
          key: (tree.flutterListWheelScrollViewNamedUseDelegate.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollViewNamedUseDelegate.key) : null),
          controller: (tree.flutterListWheelScrollViewNamedUseDelegate.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollViewNamedUseDelegate.controller) : null),
          physics: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollViewNamedUseDelegate.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollViewNamedUseDelegate.hasDiameterRatio() ? tree.flutterListWheelScrollViewNamedUseDelegate.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPerspective() ? tree.flutterListWheelScrollViewNamedUseDelegate.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOffAxisFraction() ? tree.flutterListWheelScrollViewNamedUseDelegate.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollViewNamedUseDelegate.hasUseMagnifier() ? tree.flutterListWheelScrollViewNamedUseDelegate.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollViewNamedUseDelegate.hasMagnification() ? tree.flutterListWheelScrollViewNamedUseDelegate.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollViewNamedUseDelegate.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollViewNamedUseDelegate.hasItemExtent() ? tree.flutterListWheelScrollViewNamedUseDelegate.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollViewNamedUseDelegate.hasSqueeze() ? tree.flutterListWheelScrollViewNamedUseDelegate.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollViewNamedUseDelegate.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollViewNamedUseDelegate.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRestorationId() ? tree.flutterListWheelScrollViewNamedUseDelegate.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollViewNamedUseDelegate.scrollBehavior) : null),
          childDelegate: (tree.flutterListWheelScrollViewNamedUseDelegate.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelScrollViewNamedUseDelegate.childDelegate) : missing('childDelegate')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterLocalizationsNamedOverride:
      return $flutterSrcWidgetsLocalizations.Localizations.override(
          key: (tree.flutterLocalizationsNamedOverride.hasKey() ? evaluateFlutterKeyType(tree.flutterLocalizationsNamedOverride.key) : null),
          context: (tree.flutterLocalizationsNamedOverride.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterLocalizationsNamedOverride.context) : missing('context')),
          locale: (tree.flutterLocalizationsNamedOverride.hasLocale() ? evaluateDartLocaleType(tree.flutterLocalizationsNamedOverride.locale) : null),
          delegates: null,
          child: (tree.flutterLocalizationsNamedOverride.hasChild() ? evaluateWidgetType(tree.flutterLocalizationsNamedOverride.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterLongPressDraggable:
      return $flutterSrcWidgetsDragTarget.LongPressDraggable(
          key: (tree.flutterLongPressDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterLongPressDraggable.key) : null),
          child: (tree.flutterLongPressDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.child) : missing('child')),
          feedback: (tree.flutterLongPressDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterLongPressDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterLongPressDraggable.axis) : null),
          childWhenDragging: (tree.flutterLongPressDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterLongPressDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterLongPressDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterLongPressDraggable.feedbackOffset) : $dartUi.Offset.zero),
          maxSimultaneousDrags: (tree.flutterLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterLongPressDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          hapticFeedbackOnStart: (tree.flutterLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterLongPressDraggable.hapticFeedbackOnStart : true),
          ignoringFeedbackSemantics: (tree.flutterLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterLongPressDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterLongPressDraggable.ignoringFeedbackPointer : true),
          delay: (tree.flutterLongPressDraggable.hasDelay() ? evaluateRequiredDartDurationType(tree.flutterLongPressDraggable.delay) : $flutterSrcGesturesConstants.kLongPressTimeout),
          allowedButtonsFilter: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterNavigator:
      return $flutterSrcWidgetsNavigator.Navigator(
          key: (tree.flutterNavigator.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigator.key) : null),
          onPopPage: null,
          initialRoute: (tree.flutterNavigator.hasInitialRoute() ? tree.flutterNavigator.initialRoute : null),
          onGenerateRoute: null,
          onUnknownRoute: null,
          reportsRouteUpdateToEngine: (tree.flutterNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterNavigator.reportsRouteUpdateToEngine : false),
          clipBehavior: (tree.flutterNavigator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNavigator.clipBehavior) : $dartUi.Clip.hardEdge),
          observers: tree.flutterNavigator.observers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          requestFocus: (tree.flutterNavigator.hasRequestFocus() ? tree.flutterNavigator.requestFocus : true),
          restorationScopeId: (tree.flutterNavigator.hasRestorationScopeId() ? tree.flutterNavigator.restorationScopeId : null),
          routeTraversalEdgeBehavior: (tree.flutterNavigator.hasRouteTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterNavigator.routeTraversalEdgeBehavior) : $flutterSrcWidgetsNavigator.kDefaultRouteTraversalEdgeBehavior));
    case messages.FlutterStatefulWidgetType_Constructor.flutterNavigatorPopHandler:
      return $flutterSrcWidgetsNavigatorPopHandler.NavigatorPopHandler(
          key: (tree.flutterNavigatorPopHandler.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigatorPopHandler.key) : null),
          onPop: null,
          enabled: (tree.flutterNavigatorPopHandler.hasEnabled() ? tree.flutterNavigatorPopHandler.enabled : true),
          child: (tree.flutterNavigatorPopHandler.hasChild() ? evaluateRequiredWidgetType(tree.flutterNavigatorPopHandler.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterOverlay:
      return $flutterSrcWidgetsOverlay.Overlay(
          key: (tree.flutterOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterOverlay.key) : null),
          clipBehavior: (tree.flutterOverlay.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverlay.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatefulWidgetType_Constructor.flutterPageView:
      return $flutterSrcWidgetsPageView.PageView(
          key: (tree.flutterPageView.hasKey() ? evaluateFlutterKeyType(tree.flutterPageView.key) : null),
          scrollDirection: (tree.flutterPageView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageView.hasReverse() ? tree.flutterPageView.reverse : false),
          controller: (tree.flutterPageView.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageView.controller) : null),
          physics: (tree.flutterPageView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageView.physics) : null),
          pageSnapping: (tree.flutterPageView.hasPageSnapping() ? tree.flutterPageView.pageSnapping : true),
          onPageChanged: null,
          children: tree.flutterPageView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dragStartBehavior: (tree.flutterPageView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageView.hasAllowImplicitScrolling() ? tree.flutterPageView.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageView.hasRestorationId() ? tree.flutterPageView.restorationId : null),
          clipBehavior: (tree.flutterPageView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageView.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageView.scrollBehavior) : null),
          padEnds: (tree.flutterPageView.hasPadEnds() ? tree.flutterPageView.padEnds : true));
    case messages.FlutterStatefulWidgetType_Constructor.flutterPageViewNamedCustom:
      return $flutterSrcWidgetsPageView.PageView.custom(
          key: (tree.flutterPageViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterPageViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterPageViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageViewNamedCustom.hasReverse() ? tree.flutterPageViewNamedCustom.reverse : false),
          controller: (tree.flutterPageViewNamedCustom.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageViewNamedCustom.controller) : null),
          physics: (tree.flutterPageViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageViewNamedCustom.physics) : null),
          pageSnapping: (tree.flutterPageViewNamedCustom.hasPageSnapping() ? tree.flutterPageViewNamedCustom.pageSnapping : true),
          onPageChanged: null,
          childrenDelegate: (tree.flutterPageViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterPageViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          dragStartBehavior: (tree.flutterPageViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageViewNamedCustom.hasAllowImplicitScrolling() ? tree.flutterPageViewNamedCustom.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageViewNamedCustom.hasRestorationId() ? tree.flutterPageViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterPageViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageViewNamedCustom.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageViewNamedCustom.scrollBehavior) : null),
          padEnds: (tree.flutterPageViewNamedCustom.hasPadEnds() ? tree.flutterPageViewNamedCustom.padEnds : true));
    case messages.FlutterStatefulWidgetType_Constructor.flutterPlatformMenuBar:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenuBar(
          key: (tree.flutterPlatformMenuBar.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformMenuBar.key) : null),
          menus: tree.flutterPlatformMenuBar.menus.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList(),
          child: (tree.flutterPlatformMenuBar.hasChild() ? evaluateWidgetType(tree.flutterPlatformMenuBar.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterPopScope:
      return $flutterSrcWidgetsPopScope.PopScope(
          key: (tree.flutterPopScope.hasKey() ? evaluateFlutterKeyType(tree.flutterPopScope.key) : null),
          child: (tree.flutterPopScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterPopScope.child) : missing('child')),
          canPop: (tree.flutterPopScope.hasCanPop() ? tree.flutterPopScope.canPop : true),
          onPopInvoked: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterProjectMyHomePage:
      return $flutterProjectMain.MyHomePage(
          key: (tree.flutterProjectMyHomePage.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyHomePage.key) : null),
          title: (tree.flutterProjectMyHomePage.hasTitle() ? tree.flutterProjectMyHomePage.title : missing('title')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterRawGestureDetector:
      return $flutterSrcWidgetsGestureDetector.RawGestureDetector(
          key: (tree.flutterRawGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterRawGestureDetector.key) : null),
          child: (tree.flutterRawGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterRawGestureDetector.child) : null),
          behavior: (tree.flutterRawGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterRawGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterRawGestureDetector.excludeFromSemantics : false),
          semantics: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterRawKeyboardListener:
      return $flutterSrcWidgetsRawKeyboardListener.RawKeyboardListener(
          key: (tree.flutterRawKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterRawKeyboardListener.key) : null),
          focusNode: (tree.flutterRawKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterRawKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterRawKeyboardListener.hasAutofocus() ? tree.flutterRawKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterRawKeyboardListener.hasIncludeSemantics() ? tree.flutterRawKeyboardListener.includeSemantics : true),
          onKey: null,
          child: (tree.flutterRawKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawKeyboardListener.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterRawScrollbar:
      return $flutterSrcWidgetsScrollbar.RawScrollbar(
          key: (tree.flutterRawScrollbar.hasKey() ? evaluateFlutterKeyType(tree.flutterRawScrollbar.key) : null),
          child: (tree.flutterRawScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawScrollbar.child) : missing('child')),
          controller: (tree.flutterRawScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.flutterRawScrollbar.controller) : null),
          thumbVisibility: (tree.flutterRawScrollbar.hasThumbVisibility() ? tree.flutterRawScrollbar.thumbVisibility : null),
          shape: (tree.flutterRawScrollbar.hasShape() ? evaluateFlutterOutlinedBorderType(tree.flutterRawScrollbar.shape) : null),
          radius: (tree.flutterRawScrollbar.hasRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.radius) : null),
          thickness: (tree.flutterRawScrollbar.hasThickness() ? tree.flutterRawScrollbar.thickness : null),
          thumbColor: (tree.flutterRawScrollbar.hasThumbColor() ? evaluateDartColorType(tree.flutterRawScrollbar.thumbColor) : null),
          minThumbLength: (tree.flutterRawScrollbar.hasMinThumbLength() ? tree.flutterRawScrollbar.minThumbLength : 18.0),
          minOverscrollLength: (tree.flutterRawScrollbar.hasMinOverscrollLength() ? tree.flutterRawScrollbar.minOverscrollLength : null),
          trackVisibility: (tree.flutterRawScrollbar.hasTrackVisibility() ? tree.flutterRawScrollbar.trackVisibility : null),
          trackRadius: (tree.flutterRawScrollbar.hasTrackRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.trackRadius) : null),
          trackColor: (tree.flutterRawScrollbar.hasTrackColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackColor) : null),
          trackBorderColor: (tree.flutterRawScrollbar.hasTrackBorderColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackBorderColor) : null),
          fadeDuration: (tree.flutterRawScrollbar.hasFadeDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.fadeDuration) : $dartCore.Duration(milliseconds: 300)),
          timeToFade: (tree.flutterRawScrollbar.hasTimeToFade() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.timeToFade) : $dartCore.Duration(milliseconds: 600)),
          pressDuration: (tree.flutterRawScrollbar.hasPressDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.pressDuration) : $dartCore.Duration.zero),
          interactive: (tree.flutterRawScrollbar.hasInteractive() ? tree.flutterRawScrollbar.interactive : null),
          scrollbarOrientation: (tree.flutterRawScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.flutterRawScrollbar.scrollbarOrientation) : null),
          mainAxisMargin: (tree.flutterRawScrollbar.hasMainAxisMargin() ? tree.flutterRawScrollbar.mainAxisMargin : 0.0),
          crossAxisMargin: (tree.flutterRawScrollbar.hasCrossAxisMargin() ? tree.flutterRawScrollbar.crossAxisMargin : 0.0),
          padding: (tree.flutterRawScrollbar.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.flutterRawScrollbar.padding) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterRestorationScope:
      return $flutterSrcWidgetsRestoration.RestorationScope(
          key: (tree.flutterRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRestorationScope.key) : null),
          restorationId: (tree.flutterRestorationScope.hasRestorationId() ? tree.flutterRestorationScope.restorationId : null),
          child: (tree.flutterRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRestorationScope.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterRootRestorationScope:
      return $flutterSrcWidgetsRestoration.RootRestorationScope(
          key: (tree.flutterRootRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRootRestorationScope.key) : null),
          restorationId: (tree.flutterRootRestorationScope.hasRestorationId() ? tree.flutterRootRestorationScope.restorationId : null),
          child: (tree.flutterRootRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRootRestorationScope.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterScrollNotificationObserver:
      return $flutterSrcWidgetsScrollNotificationObserver.ScrollNotificationObserver(
          key: (tree.flutterScrollNotificationObserver.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollNotificationObserver.key) : null),
          child: (tree.flutterScrollNotificationObserver.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollNotificationObserver.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterSelectableRegion:
      return $flutterSrcWidgetsSelectableRegion.SelectableRegion(
          key: (tree.flutterSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectableRegion.key) : null),
          contextMenuBuilder: null,
          focusNode: (tree.flutterSelectableRegion.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterSelectableRegion.focusNode) : missing('focusNode')),
          selectionControls: (tree.flutterSelectableRegion.hasSelectionControls() ? evaluateRequiredFlutterTextSelectionControlsType(tree.flutterSelectableRegion.selectionControls) : missing('selectionControls')),
          child: (tree.flutterSelectableRegion.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectableRegion.child) : missing('child')),
          magnifierConfiguration: (tree.flutterSelectableRegion.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterSelectableRegion.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          onSelectionChanged: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterSelectionContainer:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer(
          key: (tree.flutterSelectionContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainer.key) : null),
          registrar: (tree.flutterSelectionContainer.hasRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterSelectionContainer.registrar) : null),
          delegate: missing('delegate'),
          child: (tree.flutterSelectionContainer.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainer.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterSelectionContainerNamedDisabled:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer.disabled(
          key: (tree.flutterSelectionContainerNamedDisabled.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainerNamedDisabled.key) : null),
          child: (tree.flutterSelectionContainerNamedDisabled.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainerNamedDisabled.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterSemanticsDebugger:
      return $flutterSrcWidgetsSemanticsDebugger.SemanticsDebugger(
          key: (tree.flutterSemanticsDebugger.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsDebugger.key) : null),
          child: (tree.flutterSemanticsDebugger.hasChild() ? evaluateRequiredWidgetType(tree.flutterSemanticsDebugger.child) : missing('child')),
          labelStyle: (tree.flutterSemanticsDebugger.hasLabelStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterSemanticsDebugger.labelStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFF000000), fontSize: 10.0, height: 0.8)));
    case messages.FlutterStatefulWidgetType_Constructor.flutterSharedAppData:
      return $flutterSrcWidgetsSharedAppData.SharedAppData(
          key: (tree.flutterSharedAppData.hasKey() ? evaluateFlutterKeyType(tree.flutterSharedAppData.key) : null),
          child: (tree.flutterSharedAppData.hasChild() ? evaluateRequiredWidgetType(tree.flutterSharedAppData.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterShortcutRegistrar:
      return $flutterSrcWidgetsShortcuts.ShortcutRegistrar(
          key: (tree.flutterShortcutRegistrar.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutRegistrar.key) : null),
          child: (tree.flutterShortcutRegistrar.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutRegistrar.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterShortcutsNamedManager:
      return $flutterSrcWidgetsShortcuts.Shortcuts.manager(
          key: (tree.flutterShortcutsNamedManager.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutsNamedManager.key) : null),
          manager: (tree.flutterShortcutsNamedManager.hasManager() ? evaluateRequiredFlutterShortcutManagerType(tree.flutterShortcutsNamedManager.manager) : missing('manager')),
          child: (tree.flutterShortcutsNamedManager.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutsNamedManager.child) : missing('child')),
          debugLabel: (tree.flutterShortcutsNamedManager.hasDebugLabel() ? tree.flutterShortcutsNamedManager.debugLabel : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterSliverAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.SliverAnimatedOpacity(
          key: (tree.flutterSliverAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverAnimatedOpacity.key) : null),
          sliver: (tree.flutterSliverAnimatedOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverAnimatedOpacity.sliver) : null),
          opacity: (tree.flutterSliverAnimatedOpacity.hasOpacity() ? tree.flutterSliverAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterSliverAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterSliverAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterSliverAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterSliverAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterSliverAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.FlutterStatefulWidgetType_Constructor.flutterStretchingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.StretchingOverscrollIndicator(
          key: (tree.flutterStretchingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterStretchingOverscrollIndicator.key) : null),
          axisDirection: (tree.flutterStretchingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterStretchingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          clipBehavior: (tree.flutterStretchingOverscrollIndicator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStretchingOverscrollIndicator.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterStretchingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterStretchingOverscrollIndicator.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterTextSelectionGestureDetector:
      return $flutterSrcWidgetsTextSelection.TextSelectionGestureDetector(
          key: (tree.flutterTextSelectionGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterTextSelectionGestureDetector.key) : null),
          onTapTrackStart: null,
          onTapTrackReset: null,
          onTapDown: null,
          onForcePressStart: null,
          onForcePressEnd: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSingleTapUp: null,
          onSingleTapCancel: null,
          onSingleLongTapStart: null,
          onSingleLongTapMoveUpdate: null,
          onSingleLongTapEnd: null,
          onDoubleTapDown: null,
          onTripleTapDown: null,
          onDragSelectionStart: null,
          onDragSelectionUpdate: null,
          onDragSelectionEnd: null,
          behavior: (tree.flutterTextSelectionGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterTextSelectionGestureDetector.behavior) : null),
          child: (tree.flutterTextSelectionGestureDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterTextSelectionGestureDetector.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterTickerMode:
      return $flutterSrcWidgetsTickerProvider.TickerMode(
          key: (tree.flutterTickerMode.hasKey() ? evaluateFlutterKeyType(tree.flutterTickerMode.key) : null),
          enabled: (tree.flutterTickerMode.hasEnabled() ? tree.flutterTickerMode.enabled : missing('enabled')),
          child: (tree.flutterTickerMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterTickerMode.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.flutterUiKitView:
      return $flutterSrcWidgetsPlatformView.UiKitView(
          key: (tree.flutterUiKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterUiKitView.key) : null),
          viewType: (tree.flutterUiKitView.hasViewType() ? tree.flutterUiKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterUiKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterUiKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterUiKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterUiKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterWidgetInspector:
      return $flutterSrcWidgetsWidgetInspector.WidgetInspector(
          key: (tree.flutterWidgetInspector.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetInspector.key) : null),
          child: (tree.flutterWidgetInspector.hasChild() ? evaluateRequiredWidgetType(tree.flutterWidgetInspector.child) : missing('child')),
          selectButtonBuilder: null);
    case messages.FlutterStatefulWidgetType_Constructor.flutterWidgetsApp:
      return $flutterSrcWidgetsApp.WidgetsApp(
          key: (tree.flutterWidgetsApp.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsApp.key) : null),
          navigatorKey: null,
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.flutterWidgetsApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          initialRoute: (tree.flutterWidgetsApp.hasInitialRoute() ? tree.flutterWidgetsApp.initialRoute : null),
          pageRouteBuilder: null,
          home: (tree.flutterWidgetsApp.hasHome() ? evaluateWidgetType(tree.flutterWidgetsApp.home) : null),
          builder: null,
          title: (tree.flutterWidgetsApp.hasTitle() ? tree.flutterWidgetsApp.title : ''),
          onGenerateTitle: null,
          textStyle: (tree.flutterWidgetsApp.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsApp.textStyle) : null),
          color: (tree.flutterWidgetsApp.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsApp.color) : missing('color')),
          locale: (tree.flutterWidgetsApp.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsApp.hasShowPerformanceOverlay() ? tree.flutterWidgetsApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsApp.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsApp.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsApp.hasShowSemanticsDebugger() ? tree.flutterWidgetsApp.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsApp.hasDebugShowWidgetInspector() ? tree.flutterWidgetsApp.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsApp.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsApp.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsApp.hasRestorationScopeId() ? tree.flutterWidgetsApp.restorationScopeId : null));
    case messages.FlutterStatefulWidgetType_Constructor.flutterWidgetsAppNamedRouter:
      return $flutterSrcWidgetsApp.WidgetsApp.router(
          key: (tree.flutterWidgetsAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsAppNamedRouter.key) : null),
          routeInformationProvider: (tree.flutterWidgetsAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.flutterWidgetsAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.flutterWidgetsAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.flutterWidgetsAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.flutterWidgetsAppNamedRouter.hasTitle() ? tree.flutterWidgetsAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          textStyle: (tree.flutterWidgetsAppNamedRouter.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsAppNamedRouter.textStyle) : null),
          color: (tree.flutterWidgetsAppNamedRouter.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsAppNamedRouter.color) : missing('color')),
          locale: (tree.flutterWidgetsAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsAppNamedRouter.hasShowPerformanceOverlay() ? tree.flutterWidgetsAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsAppNamedRouter.hasShowSemanticsDebugger() ? tree.flutterWidgetsAppNamedRouter.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsAppNamedRouter.hasDebugShowWidgetInspector() ? tree.flutterWidgetsAppNamedRouter.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsAppNamedRouter.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsAppNamedRouter.hasRestorationScopeId() ? tree.flutterWidgetsAppNamedRouter.restorationScopeId : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialAnimatedTheme:
      return $flutterSrcMaterialTheme.AnimatedTheme(
          key: (tree.materialAnimatedTheme.hasKey() ? evaluateFlutterKeyType(tree.materialAnimatedTheme.key) : null),
          data: (tree.materialAnimatedTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialAnimatedTheme.data) : missing('data')),
          curve: (tree.materialAnimatedTheme.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAnimatedTheme.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.materialAnimatedTheme.hasDuration() ? evaluateRequiredDartDurationType(tree.materialAnimatedTheme.duration) : missing('duration')),
          onEnd: null,
          child: (tree.materialAnimatedTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialAnimatedTheme.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.materialAppBar:
      return $flutterSrcMaterialAppBar.AppBar(
          key: (tree.materialAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialAppBar.key) : null),
          leading: (tree.materialAppBar.hasLeading() ? evaluateWidgetType(tree.materialAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialAppBar.hasAutomaticallyImplyLeading() ? tree.materialAppBar.automaticallyImplyLeading : true),
          title: (tree.materialAppBar.hasTitle() ? evaluateWidgetType(tree.materialAppBar.title) : null),
          actions: tree.materialAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialAppBar.flexibleSpace) : null),
          bottom: (tree.materialAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialAppBar.bottom) : null),
          elevation: (tree.materialAppBar.hasElevation() ? tree.materialAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialAppBar.hasScrolledUnderElevation() ? tree.materialAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAppBar.surfaceTintColor) : null),
          shape: (tree.materialAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAppBar.shape) : null),
          backgroundColor: (tree.materialAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialAppBar.foregroundColor) : null),
          iconTheme: (tree.materialAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.actionsIconTheme) : null),
          primary: (tree.materialAppBar.hasPrimary() ? tree.materialAppBar.primary : true),
          centerTitle: (tree.materialAppBar.hasCenterTitle() ? tree.materialAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialAppBar.hasExcludeHeaderSemantics() ? tree.materialAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialAppBar.hasTitleSpacing() ? tree.materialAppBar.titleSpacing : null),
          toolbarOpacity: (tree.materialAppBar.hasToolbarOpacity() ? tree.materialAppBar.toolbarOpacity : 1.0),
          bottomOpacity: (tree.materialAppBar.hasBottomOpacity() ? tree.materialAppBar.bottomOpacity : 1.0),
          toolbarHeight: (tree.materialAppBar.hasToolbarHeight() ? tree.materialAppBar.toolbarHeight : null),
          leadingWidth: (tree.materialAppBar.hasLeadingWidth() ? tree.materialAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialAppBar.hasForceMaterialTransparency() ? tree.materialAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialAppBar.clipBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialBottomAppBar:
      return $flutterSrcMaterialBottomAppBar.BottomAppBar(
          key: (tree.materialBottomAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomAppBar.key) : null),
          color: (tree.materialBottomAppBar.hasColor() ? evaluateDartColorType(tree.materialBottomAppBar.color) : null),
          elevation: (tree.materialBottomAppBar.hasElevation() ? tree.materialBottomAppBar.elevation : null),
          shape: (tree.materialBottomAppBar.hasShape() ? evaluateFlutterNotchedShapeType(tree.materialBottomAppBar.shape) : null),
          clipBehavior: (tree.materialBottomAppBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialBottomAppBar.clipBehavior) : $dartUi.Clip.none),
          notchMargin: (tree.materialBottomAppBar.hasNotchMargin() ? tree.materialBottomAppBar.notchMargin : 4.0),
          child: (tree.materialBottomAppBar.hasChild() ? evaluateWidgetType(tree.materialBottomAppBar.child) : null),
          padding: (tree.materialBottomAppBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBottomAppBar.padding) : null),
          surfaceTintColor: (tree.materialBottomAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialBottomAppBar.surfaceTintColor) : null),
          shadowColor: (tree.materialBottomAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialBottomAppBar.shadowColor) : null),
          height: (tree.materialBottomAppBar.hasHeight() ? tree.materialBottomAppBar.height : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialBottomNavigationBar:
      return $flutterSrcMaterialBottomNavigationBar.BottomNavigationBar(
          key: (tree.materialBottomNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBar.key) : null),
          items: tree.materialBottomNavigationBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.materialBottomNavigationBar.hasCurrentIndex() ? tree.materialBottomNavigationBar.currentIndex : 0),
          elevation: (tree.materialBottomNavigationBar.hasElevation() ? tree.materialBottomNavigationBar.elevation : null),
          type: (tree.materialBottomNavigationBar.hasType() ? enums.convertMaterialBottomNavigationBarTypeType(tree.materialBottomNavigationBar.type) : null),
          fixedColor: (tree.materialBottomNavigationBar.hasFixedColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.fixedColor) : null),
          backgroundColor: (tree.materialBottomNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.backgroundColor) : null),
          iconSize: (tree.materialBottomNavigationBar.hasIconSize() ? tree.materialBottomNavigationBar.iconSize : 24.0),
          selectedItemColor: (tree.materialBottomNavigationBar.hasSelectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.selectedItemColor) : null),
          unselectedItemColor: (tree.materialBottomNavigationBar.hasUnselectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.unselectedItemColor) : null),
          selectedIconTheme: (tree.materialBottomNavigationBar.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.selectedIconTheme) : null),
          unselectedIconTheme: (tree.materialBottomNavigationBar.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.unselectedIconTheme) : null),
          selectedFontSize: (tree.materialBottomNavigationBar.hasSelectedFontSize() ? tree.materialBottomNavigationBar.selectedFontSize : 14.0),
          unselectedFontSize: (tree.materialBottomNavigationBar.hasUnselectedFontSize() ? tree.materialBottomNavigationBar.unselectedFontSize : 12.0),
          selectedLabelStyle: (tree.materialBottomNavigationBar.hasSelectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.selectedLabelStyle) : null),
          unselectedLabelStyle: (tree.materialBottomNavigationBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.unselectedLabelStyle) : null),
          showSelectedLabels: (tree.materialBottomNavigationBar.hasShowSelectedLabels() ? tree.materialBottomNavigationBar.showSelectedLabels : null),
          showUnselectedLabels: (tree.materialBottomNavigationBar.hasShowUnselectedLabels() ? tree.materialBottomNavigationBar.showUnselectedLabels : null),
          mouseCursor: null,
          enableFeedback: (tree.materialBottomNavigationBar.hasEnableFeedback() ? tree.materialBottomNavigationBar.enableFeedback : null),
          landscapeLayout: (tree.materialBottomNavigationBar.hasLandscapeLayout() ? enums.convertMaterialBottomNavigationBarLandscapeLayoutType(tree.materialBottomNavigationBar.landscapeLayout) : null),
          useLegacyColorScheme: (tree.materialBottomNavigationBar.hasUseLegacyColorScheme() ? tree.materialBottomNavigationBar.useLegacyColorScheme : true));
    case messages.FlutterStatefulWidgetType_Constructor.materialCheckbox:
      return $flutterSrcMaterialCheckbox.Checkbox(
          key: (tree.materialCheckbox.hasKey() ? evaluateFlutterKeyType(tree.materialCheckbox.key) : null),
          value: (tree.materialCheckbox.hasValue() ? tree.materialCheckbox.value : null),
          tristate: (tree.materialCheckbox.hasTristate() ? tree.materialCheckbox.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckbox.hasActiveColor() ? evaluateDartColorType(tree.materialCheckbox.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckbox.hasCheckColor() ? evaluateDartColorType(tree.materialCheckbox.checkColor) : null),
          focusColor: (tree.materialCheckbox.hasFocusColor() ? evaluateDartColorType(tree.materialCheckbox.focusColor) : null),
          hoverColor: (tree.materialCheckbox.hasHoverColor() ? evaluateDartColorType(tree.materialCheckbox.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckbox.hasSplashRadius() ? tree.materialCheckbox.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckbox.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckbox.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckbox.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckbox.visualDensity) : null),
          focusNode: (tree.materialCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckbox.focusNode) : null),
          autofocus: (tree.materialCheckbox.hasAutofocus() ? tree.materialCheckbox.autofocus : false),
          shape: (tree.materialCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckbox.shape) : null),
          side: (tree.materialCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckbox.side) : null),
          isError: (tree.materialCheckbox.hasIsError() ? tree.materialCheckbox.isError : false),
          semanticLabel: (tree.materialCheckbox.hasSemanticLabel() ? tree.materialCheckbox.semanticLabel : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialCheckboxNamedAdaptive:
      return $flutterSrcMaterialCheckbox.Checkbox.adaptive(
          key: (tree.materialCheckboxNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxNamedAdaptive.key) : null),
          value: (tree.materialCheckboxNamedAdaptive.hasValue() ? tree.materialCheckboxNamedAdaptive.value : null),
          tristate: (tree.materialCheckboxNamedAdaptive.hasTristate() ? tree.materialCheckboxNamedAdaptive.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.checkColor) : null),
          focusColor: (tree.materialCheckboxNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialCheckboxNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxNamedAdaptive.hasAutofocus() ? tree.materialCheckboxNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxNamedAdaptive.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxNamedAdaptive.hasIsError() ? tree.materialCheckboxNamedAdaptive.isError : false),
          semanticLabel: (tree.materialCheckboxNamedAdaptive.hasSemanticLabel() ? tree.materialCheckboxNamedAdaptive.semanticLabel : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialCheckedPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.CheckedPopupMenuItem(
          key: (tree.materialCheckedPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialCheckedPopupMenuItem.key) : null),
          checked: (tree.materialCheckedPopupMenuItem.hasChecked() ? tree.materialCheckedPopupMenuItem.checked : false),
          enabled: (tree.materialCheckedPopupMenuItem.hasEnabled() ? tree.materialCheckedPopupMenuItem.enabled : true),
          padding: (tree.materialCheckedPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialCheckedPopupMenuItem.padding) : null),
          height: (tree.materialCheckedPopupMenuItem.hasHeight() ? tree.materialCheckedPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialCheckedPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialCheckedPopupMenuItem.child) : null),
          onTap: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialCircularProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator(
          key: (tree.materialCircularProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicator.key) : null),
          value: (tree.materialCircularProgressIndicator.hasValue() ? tree.materialCircularProgressIndicator.value : null),
          backgroundColor: (tree.materialCircularProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.backgroundColor) : null),
          color: (tree.materialCircularProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicator.hasStrokeWidth() ? tree.materialCircularProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialCircularProgressIndicator.hasStrokeAlign() ? tree.materialCircularProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialCircularProgressIndicator.hasSemanticsLabel() ? tree.materialCircularProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicator.hasSemanticsValue() ? tree.materialCircularProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicator.strokeCap) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialCircularProgressIndicatorNamedAdaptive:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.adaptive(
          key: (tree.materialCircularProgressIndicatorNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicatorNamedAdaptive.key) : null),
          value: (tree.materialCircularProgressIndicatorNamedAdaptive.hasValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.value : null),
          backgroundColor: (tree.materialCircularProgressIndicatorNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicatorNamedAdaptive.backgroundColor) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeWidth() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeWidth : 4.0),
          semanticsLabel: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsLabel() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicatorNamedAdaptive.strokeCap) : null),
          strokeAlign: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeAlign() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter));
    case messages.FlutterStatefulWidgetType_Constructor.materialDatePickerDialog:
      return $flutterSrcMaterialDatePicker.DatePickerDialog(
          key: (tree.materialDatePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerDialog.key) : null),
          initialDate: (tree.materialDatePickerDialog.hasInitialDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.initialDate) : null),
          firstDate: (tree.materialDatePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDatePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDatePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDatePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDatePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          selectableDayPredicate: null,
          cancelText: (tree.materialDatePickerDialog.hasCancelText() ? tree.materialDatePickerDialog.cancelText : null),
          confirmText: (tree.materialDatePickerDialog.hasConfirmText() ? tree.materialDatePickerDialog.confirmText : null),
          helpText: (tree.materialDatePickerDialog.hasHelpText() ? tree.materialDatePickerDialog.helpText : null),
          initialCalendarMode: (tree.materialDatePickerDialog.hasInitialCalendarMode() ? enums.convertRequiredMaterialDatePickerModeType(tree.materialDatePickerDialog.initialCalendarMode) : $flutterSrcMaterialDate.DatePickerMode.day),
          errorFormatText: (tree.materialDatePickerDialog.hasErrorFormatText() ? tree.materialDatePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDatePickerDialog.hasErrorInvalidText() ? tree.materialDatePickerDialog.errorInvalidText : null),
          fieldHintText: (tree.materialDatePickerDialog.hasFieldHintText() ? tree.materialDatePickerDialog.fieldHintText : null),
          fieldLabelText: (tree.materialDatePickerDialog.hasFieldLabelText() ? tree.materialDatePickerDialog.fieldLabelText : null),
          keyboardType: (tree.materialDatePickerDialog.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialDatePickerDialog.keyboardType) : null),
          restorationId: (tree.materialDatePickerDialog.hasRestorationId() ? tree.materialDatePickerDialog.restorationId : null),
          onDatePickerModeChange: null,
          switchToInputEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialDateRangePickerDialog:
      return $flutterSrcMaterialDatePicker.DateRangePickerDialog(
          key: (tree.materialDateRangePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDateRangePickerDialog.key) : null),
          initialDateRange: (tree.materialDateRangePickerDialog.hasInitialDateRange() ? evaluateMaterialDateTimeRangeType(tree.materialDateRangePickerDialog.initialDateRange) : null),
          firstDate: (tree.materialDateRangePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDateRangePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDateRangePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDateRangePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDateRangePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDateRangePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          helpText: (tree.materialDateRangePickerDialog.hasHelpText() ? tree.materialDateRangePickerDialog.helpText : null),
          cancelText: (tree.materialDateRangePickerDialog.hasCancelText() ? tree.materialDateRangePickerDialog.cancelText : null),
          confirmText: (tree.materialDateRangePickerDialog.hasConfirmText() ? tree.materialDateRangePickerDialog.confirmText : null),
          saveText: (tree.materialDateRangePickerDialog.hasSaveText() ? tree.materialDateRangePickerDialog.saveText : null),
          errorInvalidRangeText: (tree.materialDateRangePickerDialog.hasErrorInvalidRangeText() ? tree.materialDateRangePickerDialog.errorInvalidRangeText : null),
          errorFormatText: (tree.materialDateRangePickerDialog.hasErrorFormatText() ? tree.materialDateRangePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDateRangePickerDialog.hasErrorInvalidText() ? tree.materialDateRangePickerDialog.errorInvalidText : null),
          fieldStartHintText: (tree.materialDateRangePickerDialog.hasFieldStartHintText() ? tree.materialDateRangePickerDialog.fieldStartHintText : null),
          fieldEndHintText: (tree.materialDateRangePickerDialog.hasFieldEndHintText() ? tree.materialDateRangePickerDialog.fieldEndHintText : null),
          fieldStartLabelText: (tree.materialDateRangePickerDialog.hasFieldStartLabelText() ? tree.materialDateRangePickerDialog.fieldStartLabelText : null),
          fieldEndLabelText: (tree.materialDateRangePickerDialog.hasFieldEndLabelText() ? tree.materialDateRangePickerDialog.fieldEndLabelText : null),
          keyboardType: (tree.materialDateRangePickerDialog.hasKeyboardType() ? evaluateRequiredFlutterTextInputTypeType(tree.materialDateRangePickerDialog.keyboardType) : $flutterSrcServicesTextInput.TextInputType.datetime),
          restorationId: (tree.materialDateRangePickerDialog.hasRestorationId() ? tree.materialDateRangePickerDialog.restorationId : null),
          switchToInputEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialDefaultTabController:
      return $flutterSrcMaterialTabController.DefaultTabController(
          key: (tree.materialDefaultTabController.hasKey() ? evaluateFlutterKeyType(tree.materialDefaultTabController.key) : null),
          length: (tree.materialDefaultTabController.hasLength() ? tree.materialDefaultTabController.length : missing('length')),
          initialIndex: (tree.materialDefaultTabController.hasInitialIndex() ? tree.materialDefaultTabController.initialIndex : 0),
          child: (tree.materialDefaultTabController.hasChild() ? evaluateRequiredWidgetType(tree.materialDefaultTabController.child) : missing('child')),
          animationDuration: (tree.materialDefaultTabController.hasAnimationDuration() ? evaluateDartDurationType(tree.materialDefaultTabController.animationDuration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialDrawerController:
      return $flutterSrcMaterialDrawer.DrawerController(
          key: null,
          child: (tree.materialDrawerController.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerController.child) : missing('child')),
          alignment: (tree.materialDrawerController.hasAlignment() ? enums.convertRequiredMaterialDrawerAlignmentType(tree.materialDrawerController.alignment) : missing('alignment')),
          isDrawerOpen: (tree.materialDrawerController.hasIsDrawerOpen() ? tree.materialDrawerController.isDrawerOpen : false),
          drawerCallback: null,
          dragStartBehavior: (tree.materialDrawerController.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialDrawerController.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          scrimColor: (tree.materialDrawerController.hasScrimColor() ? evaluateDartColorType(tree.materialDrawerController.scrimColor) : null),
          edgeDragWidth: (tree.materialDrawerController.hasEdgeDragWidth() ? tree.materialDrawerController.edgeDragWidth : null),
          enableOpenDragGesture: (tree.materialDrawerController.hasEnableOpenDragGesture() ? tree.materialDrawerController.enableOpenDragGesture : true));
    case messages.FlutterStatefulWidgetType_Constructor.materialDropdownButton:
      return $flutterSrcMaterialDropdown.DropdownButton(
          key: (tree.materialDropdownButton.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButton.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButton.hasHint() ? evaluateWidgetType(tree.materialDropdownButton.hint) : null),
          disabledHint: (tree.materialDropdownButton.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButton.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButton.hasElevation() ? tree.materialDropdownButton.elevation : 8),
          style: (tree.materialDropdownButton.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButton.style) : null),
          underline: (tree.materialDropdownButton.hasUnderline() ? evaluateWidgetType(tree.materialDropdownButton.underline) : null),
          icon: (tree.materialDropdownButton.hasIcon() ? evaluateWidgetType(tree.materialDropdownButton.icon) : null),
          iconDisabledColor: (tree.materialDropdownButton.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButton.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButton.hasIconSize() ? tree.materialDropdownButton.iconSize : 24.0),
          isDense: (tree.materialDropdownButton.hasIsDense() ? tree.materialDropdownButton.isDense : false),
          isExpanded: (tree.materialDropdownButton.hasIsExpanded() ? tree.materialDropdownButton.isExpanded : false),
          itemHeight: (tree.materialDropdownButton.hasItemHeight() ? tree.materialDropdownButton.itemHeight : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          focusColor: (tree.materialDropdownButton.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButton.focusColor) : null),
          focusNode: (tree.materialDropdownButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButton.focusNode) : null),
          autofocus: (tree.materialDropdownButton.hasAutofocus() ? tree.materialDropdownButton.autofocus : false),
          dropdownColor: (tree.materialDropdownButton.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButton.dropdownColor) : null),
          menuMaxHeight: (tree.materialDropdownButton.hasMenuMaxHeight() ? tree.materialDropdownButton.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButton.hasEnableFeedback() ? tree.materialDropdownButton.enableFeedback : null),
          alignment: (tree.materialDropdownButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButton.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButton.borderRadius) : null),
          padding: (tree.materialDropdownButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButton.padding) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialDropdownButtonFormField:
      return $flutterSrcMaterialDropdown.DropdownButtonFormField(
          key: (tree.materialDropdownButtonFormField.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonFormField.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButtonFormField.hasHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.hint) : null),
          disabledHint: (tree.materialDropdownButtonFormField.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButtonFormField.hasElevation() ? tree.materialDropdownButtonFormField.elevation : 8),
          style: (tree.materialDropdownButtonFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButtonFormField.style) : null),
          icon: (tree.materialDropdownButtonFormField.hasIcon() ? evaluateWidgetType(tree.materialDropdownButtonFormField.icon) : null),
          iconDisabledColor: (tree.materialDropdownButtonFormField.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButtonFormField.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButtonFormField.hasIconSize() ? tree.materialDropdownButtonFormField.iconSize : 24.0),
          isDense: (tree.materialDropdownButtonFormField.hasIsDense() ? tree.materialDropdownButtonFormField.isDense : true),
          isExpanded: (tree.materialDropdownButtonFormField.hasIsExpanded() ? tree.materialDropdownButtonFormField.isExpanded : false),
          itemHeight: (tree.materialDropdownButtonFormField.hasItemHeight() ? tree.materialDropdownButtonFormField.itemHeight : null),
          focusColor: (tree.materialDropdownButtonFormField.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.focusColor) : null),
          focusNode: (tree.materialDropdownButtonFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButtonFormField.focusNode) : null),
          autofocus: (tree.materialDropdownButtonFormField.hasAutofocus() ? tree.materialDropdownButtonFormField.autofocus : false),
          dropdownColor: (tree.materialDropdownButtonFormField.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.dropdownColor) : null),
          decoration: (tree.materialDropdownButtonFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialDropdownButtonFormField.decoration) : null),
          onSaved: null,
          validator: null,
          autovalidateMode: (tree.materialDropdownButtonFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialDropdownButtonFormField.autovalidateMode) : null),
          menuMaxHeight: (tree.materialDropdownButtonFormField.hasMenuMaxHeight() ? tree.materialDropdownButtonFormField.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButtonFormField.hasEnableFeedback() ? tree.materialDropdownButtonFormField.enableFeedback : null),
          alignment: (tree.materialDropdownButtonFormField.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButtonFormField.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButtonFormField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButtonFormField.borderRadius) : null),
          padding: (tree.materialDropdownButtonFormField.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButtonFormField.padding) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialElevatedButton:
      return $flutterSrcMaterialElevatedButton.ElevatedButton(
          key: (tree.materialElevatedButton.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButton.style) : null),
          focusNode: (tree.materialElevatedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButton.focusNode) : null),
          autofocus: (tree.materialElevatedButton.hasAutofocus() ? tree.materialElevatedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialElevatedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialElevatedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialElevatedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButton.statesController) : null),
          child: (tree.materialElevatedButton.hasChild() ? evaluateWidgetType(tree.materialElevatedButton.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialElevatedButtonNamedIcon:
      return $flutterSrcMaterialElevatedButton.ElevatedButton.icon(
          key: (tree.materialElevatedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButtonNamedIcon.style) : null),
          focusNode: (tree.materialElevatedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialElevatedButtonNamedIcon.hasAutofocus() ? tree.materialElevatedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialElevatedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialElevatedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialElevatedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButtonNamedIcon.statesController) : null),
          icon: (tree.materialElevatedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialElevatedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.label) : missing('label')));
    case messages.FlutterStatefulWidgetType_Constructor.materialExpandIcon:
      return $flutterSrcMaterialExpandIcon.ExpandIcon(
          key: (tree.materialExpandIcon.hasKey() ? evaluateFlutterKeyType(tree.materialExpandIcon.key) : null),
          isExpanded: (tree.materialExpandIcon.hasIsExpanded() ? tree.materialExpandIcon.isExpanded : false),
          size: (tree.materialExpandIcon.hasSize() ? tree.materialExpandIcon.size : 24.0),
          onPressed: null,
          padding: (tree.materialExpandIcon.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialExpandIcon.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(8.0)),
          color: (tree.materialExpandIcon.hasColor() ? evaluateDartColorType(tree.materialExpandIcon.color) : null),
          disabledColor: (tree.materialExpandIcon.hasDisabledColor() ? evaluateDartColorType(tree.materialExpandIcon.disabledColor) : null),
          expandedColor: (tree.materialExpandIcon.hasExpandedColor() ? evaluateDartColorType(tree.materialExpandIcon.expandedColor) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialExpansionPanelList:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList(
          key: (tree.materialExpansionPanelList.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelList.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelList.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelList.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          expandedHeaderPadding: (tree.materialExpansionPanelList.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelList.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelList.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelList.dividerColor) : null),
          elevation: (tree.materialExpansionPanelList.hasElevation() ? tree.materialExpansionPanelList.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelList.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelList.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelList.hasMaterialGapSize() ? tree.materialExpansionPanelList.materialGapSize : 16.0));
    case messages.FlutterStatefulWidgetType_Constructor.materialExpansionPanelListNamedRadio:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList.radio(
          key: (tree.materialExpansionPanelListNamedRadio.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelListNamedRadio.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelListNamedRadio.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelListNamedRadio.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          initialOpenPanelValue: null,
          expandedHeaderPadding: (tree.materialExpansionPanelListNamedRadio.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelListNamedRadio.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelListNamedRadio.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.dividerColor) : null),
          elevation: (tree.materialExpansionPanelListNamedRadio.hasElevation() ? tree.materialExpansionPanelListNamedRadio.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelListNamedRadio.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelListNamedRadio.hasMaterialGapSize() ? tree.materialExpansionPanelListNamedRadio.materialGapSize : 16.0));
    case messages.FlutterStatefulWidgetType_Constructor.materialExpansionTile:
      return $flutterSrcMaterialExpansionTile.ExpansionTile(
          key: (tree.materialExpansionTile.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTile.key) : null),
          leading: (tree.materialExpansionTile.hasLeading() ? evaluateWidgetType(tree.materialExpansionTile.leading) : null),
          title: (tree.materialExpansionTile.hasTitle() ? evaluateRequiredWidgetType(tree.materialExpansionTile.title) : missing('title')),
          subtitle: (tree.materialExpansionTile.hasSubtitle() ? evaluateWidgetType(tree.materialExpansionTile.subtitle) : null),
          onExpansionChanged: null,
          children: tree.materialExpansionTile.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          trailing: (tree.materialExpansionTile.hasTrailing() ? evaluateWidgetType(tree.materialExpansionTile.trailing) : null),
          initiallyExpanded: (tree.materialExpansionTile.hasInitiallyExpanded() ? tree.materialExpansionTile.initiallyExpanded : false),
          maintainState: (tree.materialExpansionTile.hasMaintainState() ? tree.materialExpansionTile.maintainState : false),
          tilePadding: (tree.materialExpansionTile.hasTilePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.tilePadding) : null),
          expandedCrossAxisAlignment: (tree.materialExpansionTile.hasExpandedCrossAxisAlignment() ? enums.convertFlutterCrossAxisAlignmentType(tree.materialExpansionTile.expandedCrossAxisAlignment) : null),
          expandedAlignment: (tree.materialExpansionTile.hasExpandedAlignment() ? evaluateFlutterAlignmentType(tree.materialExpansionTile.expandedAlignment) : null),
          childrenPadding: (tree.materialExpansionTile.hasChildrenPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.childrenPadding) : null),
          backgroundColor: (tree.materialExpansionTile.hasBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.backgroundColor) : null),
          collapsedBackgroundColor: (tree.materialExpansionTile.hasCollapsedBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedBackgroundColor) : null),
          textColor: (tree.materialExpansionTile.hasTextColor() ? evaluateDartColorType(tree.materialExpansionTile.textColor) : null),
          collapsedTextColor: (tree.materialExpansionTile.hasCollapsedTextColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedTextColor) : null),
          iconColor: (tree.materialExpansionTile.hasIconColor() ? evaluateDartColorType(tree.materialExpansionTile.iconColor) : null),
          collapsedIconColor: (tree.materialExpansionTile.hasCollapsedIconColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedIconColor) : null),
          shape: (tree.materialExpansionTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.shape) : null),
          collapsedShape: (tree.materialExpansionTile.hasCollapsedShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.collapsedShape) : null),
          clipBehavior: (tree.materialExpansionTile.hasClipBehavior() ? enums.convertDartClipType(tree.materialExpansionTile.clipBehavior) : null),
          controlAffinity: (tree.materialExpansionTile.hasControlAffinity() ? enums.convertMaterialListTileControlAffinityType(tree.materialExpansionTile.controlAffinity) : null),
          controller: (tree.materialExpansionTile.hasController() ? evaluateMaterialExpansionTileControllerType(tree.materialExpansionTile.controller) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialFilledButton:
      return $flutterSrcMaterialFilledButton.FilledButton(
          key: (tree.materialFilledButton.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButton.style) : null),
          focusNode: (tree.materialFilledButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButton.focusNode) : null),
          autofocus: (tree.materialFilledButton.hasAutofocus() ? tree.materialFilledButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButton.statesController) : null),
          child: (tree.materialFilledButton.hasChild() ? evaluateWidgetType(tree.materialFilledButton.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialFilledButtonNamedIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.icon(
          key: (tree.materialFilledButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedIcon.hasAutofocus() ? tree.materialFilledButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.label) : missing('label')));
    case messages.FlutterStatefulWidgetType_Constructor.materialFilledButtonNamedTonal:
      return $flutterSrcMaterialFilledButton.FilledButton.tonal(
          key: (tree.materialFilledButtonNamedTonal.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonal.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonal.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonal.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonal.hasAutofocus() ? tree.materialFilledButtonNamedTonal.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButtonNamedTonal.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButtonNamedTonal.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButtonNamedTonal.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonal.statesController) : null),
          child: (tree.materialFilledButtonNamedTonal.hasChild() ? evaluateWidgetType(tree.materialFilledButtonNamedTonal.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialFilledButtonNamedTonalIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.tonalIcon(
          key: (tree.materialFilledButtonNamedTonalIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonalIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonalIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonalIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonalIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonalIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonalIcon.hasAutofocus() ? tree.materialFilledButtonNamedTonalIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedTonalIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedTonalIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedTonalIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonalIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedTonalIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedTonalIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.label) : missing('label')));
    case messages.FlutterStatefulWidgetType_Constructor.materialFlexibleSpaceBar:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBar(
          key: (tree.materialFlexibleSpaceBar.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBar.key) : null),
          title: (tree.materialFlexibleSpaceBar.hasTitle() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.title) : null),
          background: (tree.materialFlexibleSpaceBar.hasBackground() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.background) : null),
          centerTitle: (tree.materialFlexibleSpaceBar.hasCenterTitle() ? tree.materialFlexibleSpaceBar.centerTitle : null),
          titlePadding: (tree.materialFlexibleSpaceBar.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFlexibleSpaceBar.titlePadding) : null),
          collapseMode: (tree.materialFlexibleSpaceBar.hasCollapseMode() ? enums.convertRequiredMaterialCollapseModeType(tree.materialFlexibleSpaceBar.collapseMode) : $flutterSrcMaterialFlexibleSpaceBar.CollapseMode.parallax),
          stretchModes: tree.materialFlexibleSpaceBar.stretchModes.map((e) => enums.convertRequiredMaterialStretchModeType(e)).toList(),
          expandedTitleScale: (tree.materialFlexibleSpaceBar.hasExpandedTitleScale() ? tree.materialFlexibleSpaceBar.expandedTitleScale : 1.5));
    case messages.FlutterStatefulWidgetType_Constructor.materialInk:
      return $flutterSrcMaterialInkDecoration.Ink(
          key: (tree.materialInk.hasKey() ? evaluateFlutterKeyType(tree.materialInk.key) : null),
          padding: (tree.materialInk.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInk.padding) : null),
          color: (tree.materialInk.hasColor() ? evaluateDartColorType(tree.materialInk.color) : null),
          decoration: (tree.materialInk.hasDecoration() ? evaluateFlutterDecorationType(tree.materialInk.decoration) : null),
          width: (tree.materialInk.hasWidth() ? tree.materialInk.width : null),
          height: (tree.materialInk.hasHeight() ? tree.materialInk.height : null),
          child: (tree.materialInk.hasChild() ? evaluateWidgetType(tree.materialInk.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialInputDatePickerFormField:
      return $flutterSrcMaterialInputDatePickerFormField.InputDatePickerFormField(
          key: (tree.materialInputDatePickerFormField.hasKey() ? evaluateFlutterKeyType(tree.materialInputDatePickerFormField.key) : null),
          initialDate: (tree.materialInputDatePickerFormField.hasInitialDate() ? evaluateDartDateTimeType(tree.materialInputDatePickerFormField.initialDate) : null),
          firstDate: (tree.materialInputDatePickerFormField.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.firstDate) : missing('firstDate')),
          lastDate: (tree.materialInputDatePickerFormField.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.lastDate) : missing('lastDate')),
          onDateSubmitted: null,
          onDateSaved: null,
          selectableDayPredicate: null,
          errorFormatText: (tree.materialInputDatePickerFormField.hasErrorFormatText() ? tree.materialInputDatePickerFormField.errorFormatText : null),
          errorInvalidText: (tree.materialInputDatePickerFormField.hasErrorInvalidText() ? tree.materialInputDatePickerFormField.errorInvalidText : null),
          fieldHintText: (tree.materialInputDatePickerFormField.hasFieldHintText() ? tree.materialInputDatePickerFormField.fieldHintText : null),
          fieldLabelText: (tree.materialInputDatePickerFormField.hasFieldLabelText() ? tree.materialInputDatePickerFormField.fieldLabelText : null),
          keyboardType: (tree.materialInputDatePickerFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialInputDatePickerFormField.keyboardType) : null),
          autofocus: (tree.materialInputDatePickerFormField.hasAutofocus() ? tree.materialInputDatePickerFormField.autofocus : false),
          acceptEmptyDate: (tree.materialInputDatePickerFormField.hasAcceptEmptyDate() ? tree.materialInputDatePickerFormField.acceptEmptyDate : false));
    case messages.FlutterStatefulWidgetType_Constructor.materialInputDecorator:
      return $flutterSrcMaterialInputDecorator.InputDecorator(
          key: (tree.materialInputDecorator.hasKey() ? evaluateFlutterKeyType(tree.materialInputDecorator.key) : null),
          decoration: (tree.materialInputDecorator.hasDecoration() ? evaluateRequiredMaterialInputDecorationType(tree.materialInputDecorator.decoration) : missing('decoration')),
          baseStyle: (tree.materialInputDecorator.hasBaseStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorator.baseStyle) : null),
          textAlign: (tree.materialInputDecorator.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialInputDecorator.textAlign) : null),
          textAlignVertical: (tree.materialInputDecorator.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialInputDecorator.textAlignVertical) : null),
          isFocused: (tree.materialInputDecorator.hasIsFocused() ? tree.materialInputDecorator.isFocused : false),
          isHovering: (tree.materialInputDecorator.hasIsHovering() ? tree.materialInputDecorator.isHovering : false),
          expands: (tree.materialInputDecorator.hasExpands() ? tree.materialInputDecorator.expands : false),
          isEmpty: (tree.materialInputDecorator.hasIsEmpty() ? tree.materialInputDecorator.isEmpty : false),
          child: (tree.materialInputDecorator.hasChild() ? evaluateWidgetType(tree.materialInputDecorator.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialLicensePage:
      return $flutterSrcMaterialAbout.LicensePage(
          key: (tree.materialLicensePage.hasKey() ? evaluateFlutterKeyType(tree.materialLicensePage.key) : null),
          applicationName: (tree.materialLicensePage.hasApplicationName() ? tree.materialLicensePage.applicationName : null),
          applicationVersion: (tree.materialLicensePage.hasApplicationVersion() ? tree.materialLicensePage.applicationVersion : null),
          applicationIcon: (tree.materialLicensePage.hasApplicationIcon() ? evaluateWidgetType(tree.materialLicensePage.applicationIcon) : null),
          applicationLegalese: (tree.materialLicensePage.hasApplicationLegalese() ? tree.materialLicensePage.applicationLegalese : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialLinearProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.LinearProgressIndicator(
          key: (tree.materialLinearProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialLinearProgressIndicator.key) : null),
          value: (tree.materialLinearProgressIndicator.hasValue() ? tree.materialLinearProgressIndicator.value : null),
          backgroundColor: (tree.materialLinearProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.backgroundColor) : null),
          color: (tree.materialLinearProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.color) : null),
          valueColor: null,
          minHeight: (tree.materialLinearProgressIndicator.hasMinHeight() ? tree.materialLinearProgressIndicator.minHeight : null),
          semanticsLabel: (tree.materialLinearProgressIndicator.hasSemanticsLabel() ? tree.materialLinearProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialLinearProgressIndicator.hasSemanticsValue() ? tree.materialLinearProgressIndicator.semanticsValue : null),
          borderRadius: (tree.materialLinearProgressIndicator.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.materialLinearProgressIndicator.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterStatefulWidgetType_Constructor.materialMaterial:
      return $flutterSrcMaterialMaterial.Material(
          key: (tree.materialMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMaterial.key) : null),
          type: (tree.materialMaterial.hasType() ? enums.convertRequiredMaterialMaterialTypeType(tree.materialMaterial.type) : $flutterSrcMaterialMaterial.MaterialType.canvas),
          elevation: (tree.materialMaterial.hasElevation() ? tree.materialMaterial.elevation : 0.0),
          color: (tree.materialMaterial.hasColor() ? evaluateDartColorType(tree.materialMaterial.color) : null),
          shadowColor: (tree.materialMaterial.hasShadowColor() ? evaluateDartColorType(tree.materialMaterial.shadowColor) : null),
          surfaceTintColor: (tree.materialMaterial.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterial.surfaceTintColor) : null),
          textStyle: (tree.materialMaterial.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterial.textStyle) : null),
          borderRadius: (tree.materialMaterial.hasBorderRadius() ? evaluateFlutterBorderRadiusGeometryType(tree.materialMaterial.borderRadius) : null),
          shape: (tree.materialMaterial.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterial.shape) : null),
          borderOnForeground: (tree.materialMaterial.hasBorderOnForeground() ? tree.materialMaterial.borderOnForeground : true),
          clipBehavior: (tree.materialMaterial.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterial.clipBehavior) : $dartUi.Clip.none),
          animationDuration: (tree.materialMaterial.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterial.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          child: (tree.materialMaterial.hasChild() ? evaluateWidgetType(tree.materialMaterial.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMaterialApp:
      return $flutterSrcMaterialApp.MaterialApp(
          key: (tree.materialMaterialApp.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialApp.key) : null),
          navigatorKey: null,
          scaffoldMessengerKey: null,
          home: (tree.materialMaterialApp.hasHome() ? evaluateWidgetType(tree.materialMaterialApp.home) : null),
          initialRoute: (tree.materialMaterialApp.hasInitialRoute() ? tree.materialMaterialApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.materialMaterialApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.materialMaterialApp.hasTitle() ? tree.materialMaterialApp.title : ''),
          onGenerateTitle: null,
          color: (tree.materialMaterialApp.hasColor() ? evaluateDartColorType(tree.materialMaterialApp.color) : null),
          theme: (tree.materialMaterialApp.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.theme) : null),
          darkTheme: (tree.materialMaterialApp.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialApp.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialApp.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialApp.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialApp.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialApp.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialApp.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialApp.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialApp.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialApp.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialApp.hasDebugShowMaterialGrid() ? tree.materialMaterialApp.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialApp.hasShowPerformanceOverlay() ? tree.materialMaterialApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialApp.hasCheckerboardRasterCacheImages() ? tree.materialMaterialApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialApp.hasCheckerboardOffscreenLayers() ? tree.materialMaterialApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialApp.hasShowSemanticsDebugger() ? tree.materialMaterialApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialApp.hasDebugShowCheckedModeBanner() ? tree.materialMaterialApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialApp.hasRestorationScopeId() ? tree.materialMaterialApp.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialApp.scrollBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMaterialAppNamedRouter:
      return $flutterSrcMaterialApp.MaterialApp.router(
          key: (tree.materialMaterialAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialAppNamedRouter.key) : null),
          scaffoldMessengerKey: null,
          routeInformationProvider: (tree.materialMaterialAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.materialMaterialAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.materialMaterialAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.materialMaterialAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.materialMaterialAppNamedRouter.hasTitle() ? tree.materialMaterialAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.materialMaterialAppNamedRouter.hasColor() ? evaluateDartColorType(tree.materialMaterialAppNamedRouter.color) : null),
          theme: (tree.materialMaterialAppNamedRouter.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.theme) : null),
          darkTheme: (tree.materialMaterialAppNamedRouter.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialAppNamedRouter.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialAppNamedRouter.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialAppNamedRouter.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialAppNamedRouter.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialAppNamedRouter.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialAppNamedRouter.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialAppNamedRouter.hasDebugShowMaterialGrid() ? tree.materialMaterialAppNamedRouter.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialAppNamedRouter.hasShowPerformanceOverlay() ? tree.materialMaterialAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.materialMaterialAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.materialMaterialAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialAppNamedRouter.hasShowSemanticsDebugger() ? tree.materialMaterialAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.materialMaterialAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialAppNamedRouter.hasRestorationScopeId() ? tree.materialMaterialAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialAppNamedRouter.scrollBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMaterialBanner:
      return $flutterSrcMaterialBanner.MaterialBanner(
          key: (tree.materialMaterialBanner.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBanner.key) : null),
          content: (tree.materialMaterialBanner.hasContent() ? evaluateRequiredWidgetType(tree.materialMaterialBanner.content) : missing('content')),
          contentTextStyle: (tree.materialMaterialBanner.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterialBanner.contentTextStyle) : null),
          actions: tree.materialMaterialBanner.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          elevation: (tree.materialMaterialBanner.hasElevation() ? tree.materialMaterialBanner.elevation : null),
          leading: (tree.materialMaterialBanner.hasLeading() ? evaluateWidgetType(tree.materialMaterialBanner.leading) : null),
          backgroundColor: (tree.materialMaterialBanner.hasBackgroundColor() ? evaluateDartColorType(tree.materialMaterialBanner.backgroundColor) : null),
          surfaceTintColor: (tree.materialMaterialBanner.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterialBanner.surfaceTintColor) : null),
          shadowColor: (tree.materialMaterialBanner.hasShadowColor() ? evaluateDartColorType(tree.materialMaterialBanner.shadowColor) : null),
          dividerColor: (tree.materialMaterialBanner.hasDividerColor() ? evaluateDartColorType(tree.materialMaterialBanner.dividerColor) : null),
          padding: (tree.materialMaterialBanner.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.padding) : null),
          margin: (tree.materialMaterialBanner.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.margin) : null),
          leadingPadding: (tree.materialMaterialBanner.hasLeadingPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.leadingPadding) : null),
          forceActionsBelow: (tree.materialMaterialBanner.hasForceActionsBelow() ? tree.materialMaterialBanner.forceActionsBelow : false),
          overflowAlignment: (tree.materialMaterialBanner.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.materialMaterialBanner.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.end),
          animation: null,
          onVisible: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialMenuAcceleratorLabel:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorLabel(
          (tree.materialMenuAcceleratorLabel.hasLabel() ? tree.materialMenuAcceleratorLabel.label : missing('label')),
          key: (tree.materialMenuAcceleratorLabel.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorLabel.key) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMenuAnchor:
      return $flutterSrcMaterialMenuAnchor.MenuAnchor(
          key: (tree.materialMenuAnchor.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAnchor.key) : null),
          controller: (tree.materialMenuAnchor.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuAnchor.controller) : null),
          childFocusNode: (tree.materialMenuAnchor.hasChildFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuAnchor.childFocusNode) : null),
          style: (tree.materialMenuAnchor.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuAnchor.style) : null),
          alignmentOffset: (tree.materialMenuAnchor.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialMenuAnchor.alignmentOffset) : $dartUi.Offset.zero),
          clipBehavior: (tree.materialMenuAnchor.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuAnchor.clipBehavior) : $dartUi.Clip.hardEdge),
          anchorTapClosesMenu: (tree.materialMenuAnchor.hasAnchorTapClosesMenu() ? tree.materialMenuAnchor.anchorTapClosesMenu : false),
          onOpen: null,
          onClose: null,
          crossAxisUnconstrained: (tree.materialMenuAnchor.hasCrossAxisUnconstrained() ? tree.materialMenuAnchor.crossAxisUnconstrained : true),
          menuChildren: tree.materialMenuAnchor.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          builder: null,
          child: (tree.materialMenuAnchor.hasChild() ? evaluateWidgetType(tree.materialMenuAnchor.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMenuItemButton:
      return $flutterSrcMaterialMenuAnchor.MenuItemButton(
          key: (tree.materialMenuItemButton.hasKey() ? evaluateFlutterKeyType(tree.materialMenuItemButton.key) : null),
          onPressed: null,
          onHover: null,
          requestFocusOnHover: (tree.materialMenuItemButton.hasRequestFocusOnHover() ? tree.materialMenuItemButton.requestFocusOnHover : true),
          onFocusChange: null,
          focusNode: (tree.materialMenuItemButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuItemButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialMenuItemButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialMenuItemButton.style) : null),
          statesController: (tree.materialMenuItemButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialMenuItemButton.statesController) : null),
          clipBehavior: (tree.materialMenuItemButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuItemButton.clipBehavior) : $dartUi.Clip.none),
          leadingIcon: (tree.materialMenuItemButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.leadingIcon) : null),
          trailingIcon: (tree.materialMenuItemButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.trailingIcon) : null),
          closeOnActivate: (tree.materialMenuItemButton.hasCloseOnActivate() ? tree.materialMenuItemButton.closeOnActivate : true),
          child: (tree.materialMenuItemButton.hasChild() ? evaluateWidgetType(tree.materialMenuItemButton.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialMergeableMaterial:
      return $flutterSrcMaterialMergeableMaterial.MergeableMaterial(
          key: (tree.materialMergeableMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMergeableMaterial.key) : null),
          mainAxis: (tree.materialMergeableMaterial.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.materialMergeableMaterial.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          elevation: (tree.materialMergeableMaterial.hasElevation() ? tree.materialMergeableMaterial.elevation : 2),
          hasDividers: (tree.materialMergeableMaterial.hasHasDividers() ? tree.materialMergeableMaterial.hasDividers : false),
          children: tree.materialMergeableMaterial.children.map((e) => evaluateRequiredMaterialMergeableMaterialItemType(e)).toList(),
          dividerColor: (tree.materialMergeableMaterial.hasDividerColor() ? evaluateDartColorType(tree.materialMergeableMaterial.dividerColor) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialNavigationRail:
      return $flutterSrcMaterialNavigationRail.NavigationRail(
          key: (tree.materialNavigationRail.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRail.key) : null),
          backgroundColor: (tree.materialNavigationRail.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationRail.backgroundColor) : null),
          extended: (tree.materialNavigationRail.hasExtended() ? tree.materialNavigationRail.extended : false),
          leading: (tree.materialNavigationRail.hasLeading() ? evaluateWidgetType(tree.materialNavigationRail.leading) : null),
          trailing: (tree.materialNavigationRail.hasTrailing() ? evaluateWidgetType(tree.materialNavigationRail.trailing) : null),
          destinations: tree.materialNavigationRail.destinations.map((e) => evaluateRequiredMaterialNavigationRailDestinationType(e)).toList(),
          selectedIndex: (tree.materialNavigationRail.hasSelectedIndex() ? tree.materialNavigationRail.selectedIndex : null),
          onDestinationSelected: null,
          elevation: (tree.materialNavigationRail.hasElevation() ? tree.materialNavigationRail.elevation : null),
          groupAlignment: (tree.materialNavigationRail.hasGroupAlignment() ? tree.materialNavigationRail.groupAlignment : null),
          labelType: (tree.materialNavigationRail.hasLabelType() ? enums.convertMaterialNavigationRailLabelTypeType(tree.materialNavigationRail.labelType) : null),
          unselectedLabelTextStyle: (tree.materialNavigationRail.hasUnselectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.unselectedLabelTextStyle) : null),
          selectedLabelTextStyle: (tree.materialNavigationRail.hasSelectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.selectedLabelTextStyle) : null),
          unselectedIconTheme: (tree.materialNavigationRail.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.unselectedIconTheme) : null),
          selectedIconTheme: (tree.materialNavigationRail.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.selectedIconTheme) : null),
          minWidth: (tree.materialNavigationRail.hasMinWidth() ? tree.materialNavigationRail.minWidth : null),
          minExtendedWidth: (tree.materialNavigationRail.hasMinExtendedWidth() ? tree.materialNavigationRail.minExtendedWidth : null),
          useIndicator: (tree.materialNavigationRail.hasUseIndicator() ? tree.materialNavigationRail.useIndicator : null),
          indicatorColor: (tree.materialNavigationRail.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationRail.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationRail.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationRail.indicatorShape) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialOutlinedButton:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton(
          key: (tree.materialOutlinedButton.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialOutlinedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButton.style) : null),
          focusNode: (tree.materialOutlinedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButton.focusNode) : null),
          autofocus: (tree.materialOutlinedButton.hasAutofocus() ? tree.materialOutlinedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialOutlinedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialOutlinedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialOutlinedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButton.statesController) : null),
          child: (tree.materialOutlinedButton.hasChild() ? evaluateWidgetType(tree.materialOutlinedButton.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialOutlinedButtonNamedIcon:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton.icon(
          key: (tree.materialOutlinedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          style: (tree.materialOutlinedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButtonNamedIcon.style) : null),
          focusNode: (tree.materialOutlinedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialOutlinedButtonNamedIcon.hasAutofocus() ? tree.materialOutlinedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialOutlinedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialOutlinedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialOutlinedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButtonNamedIcon.statesController) : null),
          icon: (tree.materialOutlinedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialOutlinedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.label) : missing('label')));
    case messages.FlutterStatefulWidgetType_Constructor.materialPaginatedDataTable:
      return $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable(
          key: (tree.materialPaginatedDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialPaginatedDataTable.key) : null),
          header: (tree.materialPaginatedDataTable.hasHeader() ? evaluateWidgetType(tree.materialPaginatedDataTable.header) : null),
          actions: tree.materialPaginatedDataTable.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          columns: tree.materialPaginatedDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialPaginatedDataTable.hasSortColumnIndex() ? tree.materialPaginatedDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialPaginatedDataTable.hasSortAscending() ? tree.materialPaginatedDataTable.sortAscending : true),
          onSelectAll: null,
          dataRowMinHeight: (tree.materialPaginatedDataTable.hasDataRowMinHeight() ? tree.materialPaginatedDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialPaginatedDataTable.hasDataRowMaxHeight() ? tree.materialPaginatedDataTable.dataRowMaxHeight : null),
          headingRowHeight: (tree.materialPaginatedDataTable.hasHeadingRowHeight() ? tree.materialPaginatedDataTable.headingRowHeight : 56.0),
          horizontalMargin: (tree.materialPaginatedDataTable.hasHorizontalMargin() ? tree.materialPaginatedDataTable.horizontalMargin : 24.0),
          columnSpacing: (tree.materialPaginatedDataTable.hasColumnSpacing() ? tree.materialPaginatedDataTable.columnSpacing : 56.0),
          showCheckboxColumn: (tree.materialPaginatedDataTable.hasShowCheckboxColumn() ? tree.materialPaginatedDataTable.showCheckboxColumn : true),
          showFirstLastButtons: (tree.materialPaginatedDataTable.hasShowFirstLastButtons() ? tree.materialPaginatedDataTable.showFirstLastButtons : false),
          initialFirstRowIndex: (tree.materialPaginatedDataTable.hasInitialFirstRowIndex() ? tree.materialPaginatedDataTable.initialFirstRowIndex : 0),
          onPageChanged: null,
          rowsPerPage: (tree.materialPaginatedDataTable.hasRowsPerPage() ? tree.materialPaginatedDataTable.rowsPerPage : $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable.defaultRowsPerPage),
          availableRowsPerPage: tree.materialPaginatedDataTable.availableRowsPerPage,
          onRowsPerPageChanged: null,
          dragStartBehavior: (tree.materialPaginatedDataTable.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialPaginatedDataTable.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          arrowHeadColor: (tree.materialPaginatedDataTable.hasArrowHeadColor() ? evaluateDartColorType(tree.materialPaginatedDataTable.arrowHeadColor) : null),
          source: missing('source'),
          checkboxHorizontalMargin: (tree.materialPaginatedDataTable.hasCheckboxHorizontalMargin() ? tree.materialPaginatedDataTable.checkboxHorizontalMargin : null),
          controller: (tree.materialPaginatedDataTable.hasController() ? evaluateFlutterScrollControllerType(tree.materialPaginatedDataTable.controller) : null),
          primary: (tree.materialPaginatedDataTable.hasPrimary() ? tree.materialPaginatedDataTable.primary : null),
          headingRowColor: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialPopupMenuDivider:
      return $flutterSrcMaterialPopupMenu.PopupMenuDivider(
          key: (tree.materialPopupMenuDivider.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuDivider.key) : null),
          height: (tree.materialPopupMenuDivider.hasHeight() ? tree.materialPopupMenuDivider.height : 16.0));
    case messages.FlutterStatefulWidgetType_Constructor.materialPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.PopupMenuItem(
          key: (tree.materialPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialPopupMenuItem.hasEnabled() ? tree.materialPopupMenuItem.enabled : true),
          height: (tree.materialPopupMenuItem.hasHeight() ? tree.materialPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          padding: (tree.materialPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialPopupMenuItem.padding) : null),
          textStyle: (tree.materialPopupMenuItem.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialPopupMenuItem.textStyle) : null),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialPopupMenuItem.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialRangeSlider:
      return $flutterSrcMaterialRangeSlider.RangeSlider(
          key: (tree.materialRangeSlider.hasKey() ? evaluateFlutterKeyType(tree.materialRangeSlider.key) : null),
          values: (tree.materialRangeSlider.hasValues() ? evaluateRequiredMaterialRangeValuesType(tree.materialRangeSlider.values) : missing('values')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialRangeSlider.hasMin() ? tree.materialRangeSlider.min : 0.0),
          max: (tree.materialRangeSlider.hasMax() ? tree.materialRangeSlider.max : 1.0),
          divisions: (tree.materialRangeSlider.hasDivisions() ? tree.materialRangeSlider.divisions : null),
          labels: (tree.materialRangeSlider.hasLabels() ? evaluateMaterialRangeLabelsType(tree.materialRangeSlider.labels) : null),
          activeColor: (tree.materialRangeSlider.hasActiveColor() ? evaluateDartColorType(tree.materialRangeSlider.activeColor) : null),
          inactiveColor: (tree.materialRangeSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialRangeSlider.inactiveColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialRawChip:
      return $flutterSrcMaterialChip.RawChip(
          key: (tree.materialRawChip.hasKey() ? evaluateFlutterKeyType(tree.materialRawChip.key) : null),
          defaultProperties: (tree.materialRawChip.hasDefaultProperties() ? evaluateMaterialChipThemeDataType(tree.materialRawChip.defaultProperties) : null),
          avatar: (tree.materialRawChip.hasAvatar() ? evaluateWidgetType(tree.materialRawChip.avatar) : null),
          label: (tree.materialRawChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialRawChip.label) : missing('label')),
          labelStyle: (tree.materialRawChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialRawChip.labelStyle) : null),
          padding: (tree.materialRawChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.padding) : null),
          visualDensity: (tree.materialRawChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialRawChip.visualDensity) : null),
          labelPadding: (tree.materialRawChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.labelPadding) : null),
          deleteIcon: (tree.materialRawChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialRawChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialRawChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialRawChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialRawChip.hasDeleteButtonTooltipMessage() ? tree.materialRawChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          onSelected: null,
          pressElevation: (tree.materialRawChip.hasPressElevation() ? tree.materialRawChip.pressElevation : null),
          tapEnabled: (tree.materialRawChip.hasTapEnabled() ? tree.materialRawChip.tapEnabled : true),
          selected: (tree.materialRawChip.hasSelected() ? tree.materialRawChip.selected : false),
          isEnabled: (tree.materialRawChip.hasIsEnabled() ? tree.materialRawChip.isEnabled : true),
          disabledColor: (tree.materialRawChip.hasDisabledColor() ? evaluateDartColorType(tree.materialRawChip.disabledColor) : null),
          selectedColor: (tree.materialRawChip.hasSelectedColor() ? evaluateDartColorType(tree.materialRawChip.selectedColor) : null),
          tooltip: (tree.materialRawChip.hasTooltip() ? tree.materialRawChip.tooltip : null),
          side: (tree.materialRawChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialRawChip.side) : null),
          shape: (tree.materialRawChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialRawChip.shape) : null),
          clipBehavior: (tree.materialRawChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawChip.focusNode) : null),
          autofocus: (tree.materialRawChip.hasAutofocus() ? tree.materialRawChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialRawChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialRawChip.backgroundColor) : null),
          materialTapTargetSize: (tree.materialRawChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawChip.materialTapTargetSize) : null),
          elevation: (tree.materialRawChip.hasElevation() ? tree.materialRawChip.elevation : null),
          shadowColor: (tree.materialRawChip.hasShadowColor() ? evaluateDartColorType(tree.materialRawChip.shadowColor) : null),
          surfaceTintColor: (tree.materialRawChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialRawChip.surfaceTintColor) : null),
          iconTheme: (tree.materialRawChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialRawChip.iconTheme) : null),
          selectedShadowColor: (tree.materialRawChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialRawChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialRawChip.hasShowCheckmark() ? tree.materialRawChip.showCheckmark : null),
          checkmarkColor: (tree.materialRawChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialRawChip.checkmarkColor) : null),
          avatarBorder: (tree.materialRawChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatefulWidgetType_Constructor.materialRawMaterialButton:
      return $flutterSrcMaterialButton.RawMaterialButton(
          key: (tree.materialRawMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialRawMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textStyle: (tree.materialRawMaterialButton.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialRawMaterialButton.textStyle) : null),
          fillColor: (tree.materialRawMaterialButton.hasFillColor() ? evaluateDartColorType(tree.materialRawMaterialButton.fillColor) : null),
          focusColor: (tree.materialRawMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialRawMaterialButton.focusColor) : null),
          hoverColor: (tree.materialRawMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialRawMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialRawMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialRawMaterialButton.highlightColor) : null),
          splashColor: (tree.materialRawMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialRawMaterialButton.splashColor) : null),
          elevation: (tree.materialRawMaterialButton.hasElevation() ? tree.materialRawMaterialButton.elevation : 2.0),
          focusElevation: (tree.materialRawMaterialButton.hasFocusElevation() ? tree.materialRawMaterialButton.focusElevation : 4.0),
          hoverElevation: (tree.materialRawMaterialButton.hasHoverElevation() ? tree.materialRawMaterialButton.hoverElevation : 4.0),
          highlightElevation: (tree.materialRawMaterialButton.hasHighlightElevation() ? tree.materialRawMaterialButton.highlightElevation : 8.0),
          disabledElevation: (tree.materialRawMaterialButton.hasDisabledElevation() ? tree.materialRawMaterialButton.disabledElevation : 0.0),
          padding: (tree.materialRawMaterialButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRawMaterialButton.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          visualDensity: (tree.materialRawMaterialButton.hasVisualDensity() ? evaluateRequiredMaterialVisualDensityType(tree.materialRawMaterialButton.visualDensity) : $flutterSrcMaterialThemeData.VisualDensity.standard),
          constraints: (tree.materialRawMaterialButton.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.materialRawMaterialButton.constraints) : $flutterSrcRenderingBox.BoxConstraints(minWidth: 88.0, minHeight: 36.0)),
          shape: (tree.materialRawMaterialButton.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawMaterialButton.shape) : $flutterSrcPaintingRoundedRectangleBorder.RoundedRectangleBorder()),
          animationDuration: (tree.materialRawMaterialButton.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialRawMaterialButton.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          clipBehavior: (tree.materialRawMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawMaterialButton.focusNode) : null),
          autofocus: (tree.materialRawMaterialButton.hasAutofocus() ? tree.materialRawMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialRawMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawMaterialButton.materialTapTargetSize) : null),
          child: (tree.materialRawMaterialButton.hasChild() ? evaluateWidgetType(tree.materialRawMaterialButton.child) : null),
          enableFeedback: (tree.materialRawMaterialButton.hasEnableFeedback() ? tree.materialRawMaterialButton.enableFeedback : true));
    case messages.FlutterStatefulWidgetType_Constructor.materialRefreshProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.RefreshProgressIndicator(
          key: (tree.materialRefreshProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialRefreshProgressIndicator.key) : null),
          value: (tree.materialRefreshProgressIndicator.hasValue() ? tree.materialRefreshProgressIndicator.value : null),
          backgroundColor: (tree.materialRefreshProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.backgroundColor) : null),
          color: (tree.materialRefreshProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialRefreshProgressIndicator.hasStrokeWidth() ? tree.materialRefreshProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialRefreshProgressIndicator.hasStrokeAlign() ? tree.materialRefreshProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialRefreshProgressIndicator.hasSemanticsLabel() ? tree.materialRefreshProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialRefreshProgressIndicator.hasSemanticsValue() ? tree.materialRefreshProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialRefreshProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialRefreshProgressIndicator.strokeCap) : null),
          elevation: (tree.materialRefreshProgressIndicator.hasElevation() ? tree.materialRefreshProgressIndicator.elevation : 2.0),
          indicatorMargin: (tree.materialRefreshProgressIndicator.hasIndicatorMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(4.0)),
          indicatorPadding: (tree.materialRefreshProgressIndicator.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(12.0)));
    case messages.FlutterStatefulWidgetType_Constructor.materialScaffold:
      return $flutterSrcMaterialScaffold.Scaffold(
          key: (tree.materialScaffold.hasKey() ? evaluateFlutterKeyType(tree.materialScaffold.key) : null),
          appBar: (tree.materialScaffold.hasAppBar() ? evaluateFlutterPreferredSizeWidgetType(tree.materialScaffold.appBar) : null),
          body: (tree.materialScaffold.hasBody() ? evaluateWidgetType(tree.materialScaffold.body) : null),
          floatingActionButton: (tree.materialScaffold.hasFloatingActionButton() ? evaluateWidgetType(tree.materialScaffold.floatingActionButton) : null),
          floatingActionButtonLocation: null,
          floatingActionButtonAnimator: null,
          persistentFooterButtons: tree.materialScaffold.persistentFooterButtons.map((e) => evaluateRequiredWidgetType(e)).toList(),
          persistentFooterAlignment: (tree.materialScaffold.hasPersistentFooterAlignment() ? evaluateRequiredFlutterAlignmentDirectionalType(tree.materialScaffold.persistentFooterAlignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerEnd),
          drawer: (tree.materialScaffold.hasDrawer() ? evaluateWidgetType(tree.materialScaffold.drawer) : null),
          onDrawerChanged: null,
          endDrawer: (tree.materialScaffold.hasEndDrawer() ? evaluateWidgetType(tree.materialScaffold.endDrawer) : null),
          onEndDrawerChanged: null,
          bottomNavigationBar: (tree.materialScaffold.hasBottomNavigationBar() ? evaluateWidgetType(tree.materialScaffold.bottomNavigationBar) : null),
          bottomSheet: (tree.materialScaffold.hasBottomSheet() ? evaluateWidgetType(tree.materialScaffold.bottomSheet) : null),
          backgroundColor: (tree.materialScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.materialScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.materialScaffold.hasResizeToAvoidBottomInset() ? tree.materialScaffold.resizeToAvoidBottomInset : null),
          primary: (tree.materialScaffold.hasPrimary() ? tree.materialScaffold.primary : true),
          drawerDragStartBehavior: (tree.materialScaffold.hasDrawerDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialScaffold.drawerDragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          extendBody: (tree.materialScaffold.hasExtendBody() ? tree.materialScaffold.extendBody : false),
          extendBodyBehindAppBar: (tree.materialScaffold.hasExtendBodyBehindAppBar() ? tree.materialScaffold.extendBodyBehindAppBar : false),
          drawerScrimColor: (tree.materialScaffold.hasDrawerScrimColor() ? evaluateDartColorType(tree.materialScaffold.drawerScrimColor) : null),
          drawerEdgeDragWidth: (tree.materialScaffold.hasDrawerEdgeDragWidth() ? tree.materialScaffold.drawerEdgeDragWidth : null),
          drawerEnableOpenDragGesture: (tree.materialScaffold.hasDrawerEnableOpenDragGesture() ? tree.materialScaffold.drawerEnableOpenDragGesture : true),
          endDrawerEnableOpenDragGesture: (tree.materialScaffold.hasEndDrawerEnableOpenDragGesture() ? tree.materialScaffold.endDrawerEnableOpenDragGesture : true),
          restorationId: (tree.materialScaffold.hasRestorationId() ? tree.materialScaffold.restorationId : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialScaffoldMessenger:
      return $flutterSrcMaterialScaffold.ScaffoldMessenger(
          key: (tree.materialScaffoldMessenger.hasKey() ? evaluateFlutterKeyType(tree.materialScaffoldMessenger.key) : null),
          child: (tree.materialScaffoldMessenger.hasChild() ? evaluateRequiredWidgetType(tree.materialScaffoldMessenger.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.materialSearchBar:
      return $flutterSrcMaterialSearchAnchor.SearchBar(
          key: (tree.materialSearchBar.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBar.key) : null),
          controller: (tree.materialSearchBar.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialSearchBar.controller) : null),
          focusNode: (tree.materialSearchBar.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSearchBar.focusNode) : null),
          hintText: (tree.materialSearchBar.hasHintText() ? tree.materialSearchBar.hintText : null),
          leading: (tree.materialSearchBar.hasLeading() ? evaluateWidgetType(tree.materialSearchBar.leading) : null),
          trailing: tree.materialSearchBar.trailing.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onTap: null,
          onChanged: null,
          onSubmitted: null,
          constraints: (tree.materialSearchBar.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialSearchBar.constraints) : null),
          elevation: null,
          backgroundColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          overlayColor: null,
          side: null,
          shape: null,
          padding: null,
          textStyle: null,
          hintStyle: null,
          textCapitalization: (tree.materialSearchBar.hasTextCapitalization() ? enums.convertFlutterTextCapitalizationType(tree.materialSearchBar.textCapitalization) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSelectableText:
      return $flutterSrcMaterialSelectableText.SelectableText(
          (tree.materialSelectableText.hasData() ? tree.materialSelectableText.data : missing('data')),
          key: (tree.materialSelectableText.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableText.key) : null),
          focusNode: (tree.materialSelectableText.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableText.focusNode) : null),
          style: (tree.materialSelectableText.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableText.style) : null),
          strutStyle: (tree.materialSelectableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableText.strutStyle) : null),
          textAlign: (tree.materialSelectableText.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableText.textAlign) : null),
          textDirection: (tree.materialSelectableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableText.textDirection) : null),
          textScaler: (tree.materialSelectableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableText.textScaler) : null),
          showCursor: (tree.materialSelectableText.hasShowCursor() ? tree.materialSelectableText.showCursor : false),
          autofocus: (tree.materialSelectableText.hasAutofocus() ? tree.materialSelectableText.autofocus : false),
          minLines: (tree.materialSelectableText.hasMinLines() ? tree.materialSelectableText.minLines : null),
          maxLines: (tree.materialSelectableText.hasMaxLines() ? tree.materialSelectableText.maxLines : null),
          cursorWidth: (tree.materialSelectableText.hasCursorWidth() ? tree.materialSelectableText.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableText.hasCursorHeight() ? tree.materialSelectableText.cursorHeight : null),
          cursorRadius: (tree.materialSelectableText.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableText.cursorRadius) : null),
          cursorColor: (tree.materialSelectableText.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableText.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableText.hasEnableInteractiveSelection() ? tree.materialSelectableText.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableText.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableText.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableText.hasSemanticsLabel() ? tree.materialSelectableText.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableText.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableText.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableText.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableText.magnifierConfiguration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSelectableTextNamedRich:
      return $flutterSrcMaterialSelectableText.SelectableText.rich(
          (tree.materialSelectableTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterTextSpanType(tree.materialSelectableTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.materialSelectableTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableTextNamedRich.key) : null),
          focusNode: (tree.materialSelectableTextNamedRich.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableTextNamedRich.focusNode) : null),
          style: (tree.materialSelectableTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableTextNamedRich.style) : null),
          strutStyle: (tree.materialSelectableTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableTextNamedRich.strutStyle) : null),
          textAlign: (tree.materialSelectableTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableTextNamedRich.textAlign) : null),
          textDirection: (tree.materialSelectableTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableTextNamedRich.textDirection) : null),
          textScaler: (tree.materialSelectableTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableTextNamedRich.textScaler) : null),
          showCursor: (tree.materialSelectableTextNamedRich.hasShowCursor() ? tree.materialSelectableTextNamedRich.showCursor : false),
          autofocus: (tree.materialSelectableTextNamedRich.hasAutofocus() ? tree.materialSelectableTextNamedRich.autofocus : false),
          minLines: (tree.materialSelectableTextNamedRich.hasMinLines() ? tree.materialSelectableTextNamedRich.minLines : null),
          maxLines: (tree.materialSelectableTextNamedRich.hasMaxLines() ? tree.materialSelectableTextNamedRich.maxLines : null),
          cursorWidth: (tree.materialSelectableTextNamedRich.hasCursorWidth() ? tree.materialSelectableTextNamedRich.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableTextNamedRich.hasCursorHeight() ? tree.materialSelectableTextNamedRich.cursorHeight : null),
          cursorRadius: (tree.materialSelectableTextNamedRich.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableTextNamedRich.cursorRadius) : null),
          cursorColor: (tree.materialSelectableTextNamedRich.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableTextNamedRich.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableTextNamedRich.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableTextNamedRich.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableTextNamedRich.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableTextNamedRich.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableTextNamedRich.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableTextNamedRich.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableTextNamedRich.hasEnableInteractiveSelection() ? tree.materialSelectableTextNamedRich.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableTextNamedRich.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableTextNamedRich.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableTextNamedRich.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableTextNamedRich.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableTextNamedRich.hasSemanticsLabel() ? tree.materialSelectableTextNamedRich.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableTextNamedRich.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableTextNamedRich.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableTextNamedRich.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableTextNamedRich.magnifierConfiguration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSelectionArea:
      return $flutterSrcMaterialSelectionArea.SelectionArea(
          key: (tree.materialSelectionArea.hasKey() ? evaluateFlutterKeyType(tree.materialSelectionArea.key) : null),
          focusNode: (tree.materialSelectionArea.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectionArea.focusNode) : null),
          selectionControls: (tree.materialSelectionArea.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectionArea.selectionControls) : null),
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectionArea.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectionArea.magnifierConfiguration) : null),
          onSelectionChanged: null,
          child: (tree.materialSelectionArea.hasChild() ? evaluateRequiredWidgetType(tree.materialSelectionArea.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.materialSlider:
      return $flutterSrcMaterialSlider.Slider(
          key: (tree.materialSlider.hasKey() ? evaluateFlutterKeyType(tree.materialSlider.key) : null),
          value: (tree.materialSlider.hasValue() ? tree.materialSlider.value : missing('value')),
          secondaryTrackValue: (tree.materialSlider.hasSecondaryTrackValue() ? tree.materialSlider.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSlider.hasMin() ? tree.materialSlider.min : 0.0),
          max: (tree.materialSlider.hasMax() ? tree.materialSlider.max : 1.0),
          divisions: (tree.materialSlider.hasDivisions() ? tree.materialSlider.divisions : null),
          label: (tree.materialSlider.hasLabel() ? tree.materialSlider.label : null),
          activeColor: (tree.materialSlider.hasActiveColor() ? evaluateDartColorType(tree.materialSlider.activeColor) : null),
          inactiveColor: (tree.materialSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialSlider.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSlider.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSlider.secondaryActiveColor) : null),
          thumbColor: (tree.materialSlider.hasThumbColor() ? evaluateDartColorType(tree.materialSlider.thumbColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSlider.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSlider.focusNode) : null),
          autofocus: (tree.materialSlider.hasAutofocus() ? tree.materialSlider.autofocus : false),
          allowedInteraction: (tree.materialSlider.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSlider.allowedInteraction) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSliderNamedAdaptive:
      return $flutterSrcMaterialSlider.Slider.adaptive(
          key: (tree.materialSliderNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSliderNamedAdaptive.key) : null),
          value: (tree.materialSliderNamedAdaptive.hasValue() ? tree.materialSliderNamedAdaptive.value : missing('value')),
          secondaryTrackValue: (tree.materialSliderNamedAdaptive.hasSecondaryTrackValue() ? tree.materialSliderNamedAdaptive.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSliderNamedAdaptive.hasMin() ? tree.materialSliderNamedAdaptive.min : 0.0),
          max: (tree.materialSliderNamedAdaptive.hasMax() ? tree.materialSliderNamedAdaptive.max : 1.0),
          divisions: (tree.materialSliderNamedAdaptive.hasDivisions() ? tree.materialSliderNamedAdaptive.divisions : null),
          label: (tree.materialSliderNamedAdaptive.hasLabel() ? tree.materialSliderNamedAdaptive.label : null),
          mouseCursor: null,
          activeColor: (tree.materialSliderNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.activeColor) : null),
          inactiveColor: (tree.materialSliderNamedAdaptive.hasInactiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSliderNamedAdaptive.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.secondaryActiveColor) : null),
          thumbColor: (tree.materialSliderNamedAdaptive.hasThumbColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.thumbColor) : null),
          overlayColor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSliderNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSliderNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialSliderNamedAdaptive.hasAutofocus() ? tree.materialSliderNamedAdaptive.autofocus : false),
          allowedInteraction: (tree.materialSliderNamedAdaptive.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSliderNamedAdaptive.allowedInteraction) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSliverAppBar:
      return $flutterSrcMaterialAppBar.SliverAppBar(
          key: (tree.materialSliverAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBar.key) : null),
          leading: (tree.materialSliverAppBar.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBar.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBar.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBar.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBar.title) : null),
          actions: tree.materialSliverAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBar.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBar.bottom) : null),
          elevation: (tree.materialSliverAppBar.hasElevation() ? tree.materialSliverAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBar.hasScrolledUnderElevation() ? tree.materialSliverAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBar.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBar.hasForceElevated() ? tree.materialSliverAppBar.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBar.hasPrimary() ? tree.materialSliverAppBar.primary : true),
          centerTitle: (tree.materialSliverAppBar.hasCenterTitle() ? tree.materialSliverAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBar.hasExcludeHeaderSemantics() ? tree.materialSliverAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBar.hasTitleSpacing() ? tree.materialSliverAppBar.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBar.hasCollapsedHeight() ? tree.materialSliverAppBar.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBar.hasExpandedHeight() ? tree.materialSliverAppBar.expandedHeight : null),
          floating: (tree.materialSliverAppBar.hasFloating() ? tree.materialSliverAppBar.floating : false),
          pinned: (tree.materialSliverAppBar.hasPinned() ? tree.materialSliverAppBar.pinned : false),
          snap: (tree.materialSliverAppBar.hasSnap() ? tree.materialSliverAppBar.snap : false),
          stretch: (tree.materialSliverAppBar.hasStretch() ? tree.materialSliverAppBar.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBar.hasStretchTriggerOffset() ? tree.materialSliverAppBar.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBar.shape) : null),
          toolbarHeight: (tree.materialSliverAppBar.hasToolbarHeight() ? tree.materialSliverAppBar.toolbarHeight : $flutterSrcMaterialConstants.kToolbarHeight),
          leadingWidth: (tree.materialSliverAppBar.hasLeadingWidth() ? tree.materialSliverAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBar.hasForceMaterialTransparency() ? tree.materialSliverAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBar.clipBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSliverAppBarNamedLarge:
      return $flutterSrcMaterialAppBar.SliverAppBar.large(
          key: (tree.materialSliverAppBarNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedLarge.key) : null),
          leading: (tree.materialSliverAppBarNamedLarge.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedLarge.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedLarge.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedLarge.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.title) : null),
          actions: tree.materialSliverAppBarNamedLarge.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedLarge.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedLarge.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedLarge.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedLarge.hasElevation() ? tree.materialSliverAppBarNamedLarge.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedLarge.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedLarge.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedLarge.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedLarge.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedLarge.hasForceElevated() ? tree.materialSliverAppBarNamedLarge.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedLarge.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedLarge.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedLarge.hasPrimary() ? tree.materialSliverAppBarNamedLarge.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedLarge.hasCenterTitle() ? tree.materialSliverAppBarNamedLarge.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedLarge.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedLarge.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedLarge.hasTitleSpacing() ? tree.materialSliverAppBarNamedLarge.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedLarge.hasCollapsedHeight() ? tree.materialSliverAppBarNamedLarge.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedLarge.hasExpandedHeight() ? tree.materialSliverAppBarNamedLarge.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedLarge.hasFloating() ? tree.materialSliverAppBarNamedLarge.floating : false),
          pinned: (tree.materialSliverAppBarNamedLarge.hasPinned() ? tree.materialSliverAppBarNamedLarge.pinned : true),
          snap: (tree.materialSliverAppBarNamedLarge.hasSnap() ? tree.materialSliverAppBarNamedLarge.snap : false),
          stretch: (tree.materialSliverAppBarNamedLarge.hasStretch() ? tree.materialSliverAppBarNamedLarge.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedLarge.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedLarge.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedLarge.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedLarge.hasToolbarHeight() ? tree.materialSliverAppBarNamedLarge.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedLarge.hasLeadingWidth() ? tree.materialSliverAppBarNamedLarge.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedLarge.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedLarge.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedLarge.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedLarge.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedLarge.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedLarge.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedLarge.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedLarge.clipBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSliverAppBarNamedMedium:
      return $flutterSrcMaterialAppBar.SliverAppBar.medium(
          key: (tree.materialSliverAppBarNamedMedium.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedMedium.key) : null),
          leading: (tree.materialSliverAppBarNamedMedium.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedMedium.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedMedium.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedMedium.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.title) : null),
          actions: tree.materialSliverAppBarNamedMedium.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedMedium.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedMedium.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedMedium.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedMedium.hasElevation() ? tree.materialSliverAppBarNamedMedium.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedMedium.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedMedium.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedMedium.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedMedium.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedMedium.hasForceElevated() ? tree.materialSliverAppBarNamedMedium.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedMedium.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedMedium.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedMedium.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedMedium.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedMedium.hasPrimary() ? tree.materialSliverAppBarNamedMedium.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedMedium.hasCenterTitle() ? tree.materialSliverAppBarNamedMedium.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedMedium.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedMedium.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedMedium.hasTitleSpacing() ? tree.materialSliverAppBarNamedMedium.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedMedium.hasCollapsedHeight() ? tree.materialSliverAppBarNamedMedium.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedMedium.hasExpandedHeight() ? tree.materialSliverAppBarNamedMedium.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedMedium.hasFloating() ? tree.materialSliverAppBarNamedMedium.floating : false),
          pinned: (tree.materialSliverAppBarNamedMedium.hasPinned() ? tree.materialSliverAppBarNamedMedium.pinned : true),
          snap: (tree.materialSliverAppBarNamedMedium.hasSnap() ? tree.materialSliverAppBarNamedMedium.snap : false),
          stretch: (tree.materialSliverAppBarNamedMedium.hasStretch() ? tree.materialSliverAppBarNamedMedium.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedMedium.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedMedium.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedMedium.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedMedium.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedMedium.hasToolbarHeight() ? tree.materialSliverAppBarNamedMedium.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedMedium.hasLeadingWidth() ? tree.materialSliverAppBarNamedMedium.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedMedium.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedMedium.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedMedium.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedMedium.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedMedium.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedMedium.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedMedium.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedMedium.clipBehavior) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialSnackBar:
      return $flutterSrcMaterialSnackBar.SnackBar(
          key: (tree.materialSnackBar.hasKey() ? evaluateFlutterKeyType(tree.materialSnackBar.key) : null),
          content: (tree.materialSnackBar.hasContent() ? evaluateRequiredWidgetType(tree.materialSnackBar.content) : missing('content')),
          backgroundColor: (tree.materialSnackBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSnackBar.backgroundColor) : null),
          elevation: (tree.materialSnackBar.hasElevation() ? tree.materialSnackBar.elevation : null),
          margin: (tree.materialSnackBar.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.margin) : null),
          padding: (tree.materialSnackBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.padding) : null),
          width: (tree.materialSnackBar.hasWidth() ? tree.materialSnackBar.width : null),
          shape: (tree.materialSnackBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSnackBar.shape) : null),
          hitTestBehavior: (tree.materialSnackBar.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.materialSnackBar.hitTestBehavior) : null),
          behavior: (tree.materialSnackBar.hasBehavior() ? enums.convertMaterialSnackBarBehaviorType(tree.materialSnackBar.behavior) : null),
          action: null,
          actionOverflowThreshold: (tree.materialSnackBar.hasActionOverflowThreshold() ? tree.materialSnackBar.actionOverflowThreshold : null),
          showCloseIcon: (tree.materialSnackBar.hasShowCloseIcon() ? tree.materialSnackBar.showCloseIcon : null),
          closeIconColor: (tree.materialSnackBar.hasCloseIconColor() ? evaluateDartColorType(tree.materialSnackBar.closeIconColor) : null),
          duration: (tree.materialSnackBar.hasDuration() ? evaluateRequiredDartDurationType(tree.materialSnackBar.duration) : $dartCore.Duration(milliseconds: 4000)),
          animation: null,
          onVisible: null,
          dismissDirection: (tree.materialSnackBar.hasDismissDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.materialSnackBar.dismissDirection) : $flutterSrcWidgetsDismissible.DismissDirection.down),
          clipBehavior: (tree.materialSnackBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSnackBar.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatefulWidgetType_Constructor.materialStepper:
      return $flutterSrcMaterialStepper.Stepper(
          key: (tree.materialStepper.hasKey() ? evaluateFlutterKeyType(tree.materialStepper.key) : null),
          steps: tree.materialStepper.steps.map((e) => evaluateRequiredMaterialStepType(e)).toList(),
          controller: (tree.materialStepper.hasController() ? evaluateFlutterScrollControllerType(tree.materialStepper.controller) : null),
          physics: (tree.materialStepper.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialStepper.physics) : null),
          type: (tree.materialStepper.hasType() ? enums.convertRequiredMaterialStepperTypeType(tree.materialStepper.type) : $flutterSrcMaterialStepper.StepperType.vertical),
          currentStep: (tree.materialStepper.hasCurrentStep() ? tree.materialStepper.currentStep : 0),
          onStepTapped: null,
          onStepContinue: null,
          onStepCancel: null,
          controlsBuilder: null,
          elevation: (tree.materialStepper.hasElevation() ? tree.materialStepper.elevation : null),
          margin: (tree.materialStepper.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialStepper.margin) : null),
          connectorColor: null,
          connectorThickness: (tree.materialStepper.hasConnectorThickness() ? tree.materialStepper.connectorThickness : null),
          stepIconBuilder: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialSubmenuButton:
      return $flutterSrcMaterialMenuAnchor.SubmenuButton(
          key: (tree.materialSubmenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialSubmenuButton.key) : null),
          onHover: null,
          onFocusChange: null,
          onOpen: null,
          onClose: null,
          controller: (tree.materialSubmenuButton.hasController() ? evaluateMaterialMenuControllerType(tree.materialSubmenuButton.controller) : null),
          style: (tree.materialSubmenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialSubmenuButton.style) : null),
          menuStyle: (tree.materialSubmenuButton.hasMenuStyle() ? evaluateMaterialMenuStyleType(tree.materialSubmenuButton.menuStyle) : null),
          alignmentOffset: (tree.materialSubmenuButton.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialSubmenuButton.alignmentOffset) : null),
          clipBehavior: (tree.materialSubmenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSubmenuButton.clipBehavior) : $dartUi.Clip.hardEdge),
          focusNode: (tree.materialSubmenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSubmenuButton.focusNode) : null),
          statesController: (tree.materialSubmenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialSubmenuButton.statesController) : null),
          leadingIcon: (tree.materialSubmenuButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.leadingIcon) : null),
          trailingIcon: (tree.materialSubmenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.trailingIcon) : null),
          menuChildren: tree.materialSubmenuButton.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.materialSubmenuButton.hasChild() ? evaluateWidgetType(tree.materialSubmenuButton.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialTabBar:
      return $flutterSrcMaterialTabs.TabBar(
          key: (tree.materialTabBar.hasKey() ? evaluateFlutterKeyType(tree.materialTabBar.key) : null),
          tabs: tree.materialTabBar.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBar.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBar.controller) : null),
          isScrollable: (tree.materialTabBar.hasIsScrollable() ? tree.materialTabBar.isScrollable : false),
          padding: (tree.materialTabBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.padding) : null),
          indicatorColor: (tree.materialTabBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBar.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBar.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBar.hasIndicatorWeight() ? tree.materialTabBar.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBar.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBar.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBar.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBar.indicator) : null),
          indicatorSize: (tree.materialTabBar.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBar.indicatorSize) : null),
          dividerColor: (tree.materialTabBar.hasDividerColor() ? evaluateDartColorType(tree.materialTabBar.dividerColor) : null),
          dividerHeight: (tree.materialTabBar.hasDividerHeight() ? tree.materialTabBar.dividerHeight : null),
          labelColor: (tree.materialTabBar.hasLabelColor() ? evaluateDartColorType(tree.materialTabBar.labelColor) : null),
          labelStyle: (tree.materialTabBar.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.labelStyle) : null),
          labelPadding: (tree.materialTabBar.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBar.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBar.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBar.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBar.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBar.hasEnableFeedback() ? tree.materialTabBar.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBar.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBar.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBar.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBar.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBar.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBar.tabAlignment) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialTabBarNamedSecondary:
      return $flutterSrcMaterialTabs.TabBar.secondary(
          key: (tree.materialTabBarNamedSecondary.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarNamedSecondary.key) : null),
          tabs: tree.materialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarNamedSecondary.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarNamedSecondary.controller) : null),
          isScrollable: (tree.materialTabBarNamedSecondary.hasIsScrollable() ? tree.materialTabBarNamedSecondary.isScrollable : false),
          padding: (tree.materialTabBarNamedSecondary.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.padding) : null),
          indicatorColor: (tree.materialTabBarNamedSecondary.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBarNamedSecondary.hasIndicatorWeight() ? tree.materialTabBarNamedSecondary.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBarNamedSecondary.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBarNamedSecondary.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBarNamedSecondary.indicator) : null),
          indicatorSize: (tree.materialTabBarNamedSecondary.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBarNamedSecondary.indicatorSize) : null),
          dividerColor: (tree.materialTabBarNamedSecondary.hasDividerColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.dividerColor) : null),
          dividerHeight: (tree.materialTabBarNamedSecondary.hasDividerHeight() ? tree.materialTabBarNamedSecondary.dividerHeight : null),
          labelColor: (tree.materialTabBarNamedSecondary.hasLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.labelColor) : null),
          labelStyle: (tree.materialTabBarNamedSecondary.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.labelStyle) : null),
          labelPadding: (tree.materialTabBarNamedSecondary.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBarNamedSecondary.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBarNamedSecondary.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBarNamedSecondary.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarNamedSecondary.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBarNamedSecondary.hasEnableFeedback() ? tree.materialTabBarNamedSecondary.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBarNamedSecondary.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarNamedSecondary.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBarNamedSecondary.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBarNamedSecondary.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBarNamedSecondary.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBarNamedSecondary.tabAlignment) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialTabBarView:
      return $flutterSrcMaterialTabs.TabBarView(
          key: (tree.materialTabBarView.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarView.key) : null),
          children: tree.materialTabBarView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarView.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarView.controller) : null),
          physics: (tree.materialTabBarView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarView.physics) : null),
          dragStartBehavior: (tree.materialTabBarView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          viewportFraction: (tree.materialTabBarView.hasViewportFraction() ? tree.materialTabBarView.viewportFraction : 1.0),
          clipBehavior: (tree.materialTabBarView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTabBarView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatefulWidgetType_Constructor.materialTextButton:
      return $flutterSrcMaterialTextButton.TextButton(
          key: (tree.materialTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButton.style) : null),
          focusNode: (tree.materialTextButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButton.focusNode) : null),
          autofocus: (tree.materialTextButton.hasAutofocus() ? tree.materialTextButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialTextButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialTextButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButton.statesController) : null),
          isSemanticButton: (tree.materialTextButton.hasIsSemanticButton() ? tree.materialTextButton.isSemanticButton : true),
          child: (tree.materialTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButton.child) : missing('child')));
    case messages.FlutterStatefulWidgetType_Constructor.materialTextButtonNamedIcon:
      return $flutterSrcMaterialTextButton.TextButton.icon(
          key: (tree.materialTextButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButtonNamedIcon.style) : null),
          focusNode: (tree.materialTextButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialTextButtonNamedIcon.hasAutofocus() ? tree.materialTextButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialTextButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialTextButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialTextButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButtonNamedIcon.statesController) : null),
          icon: (tree.materialTextButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialTextButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.label) : missing('label')));
    case messages.FlutterStatefulWidgetType_Constructor.materialTextField:
      return $flutterSrcMaterialTextField.TextField(
          key: (tree.materialTextField.hasKey() ? evaluateFlutterKeyType(tree.materialTextField.key) : null),
          controller: (tree.materialTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextField.controller) : null),
          focusNode: (tree.materialTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextField.focusNode) : null),
          undoController: (tree.materialTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextField.undoController) : null),
          decoration: (tree.materialTextField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextField.keyboardType) : null),
          textInputAction: (tree.materialTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextField.textInputAction) : null),
          textCapitalization: (tree.materialTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.materialTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextField.style) : null),
          strutStyle: (tree.materialTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextField.strutStyle) : null),
          textAlign: (tree.materialTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextField.textAlignVertical) : null),
          textDirection: (tree.materialTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextField.textDirection) : null),
          readOnly: (tree.materialTextField.hasReadOnly() ? tree.materialTextField.readOnly : false),
          showCursor: (tree.materialTextField.hasShowCursor() ? tree.materialTextField.showCursor : null),
          autofocus: (tree.materialTextField.hasAutofocus() ? tree.materialTextField.autofocus : false),
          obscuringCharacter: (tree.materialTextField.hasObscuringCharacter() ? tree.materialTextField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextField.hasObscureText() ? tree.materialTextField.obscureText : false),
          autocorrect: (tree.materialTextField.hasAutocorrect() ? tree.materialTextField.autocorrect : true),
          smartDashesType: (tree.materialTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextField.hasEnableSuggestions() ? tree.materialTextField.enableSuggestions : true),
          maxLines: (tree.materialTextField.hasMaxLines() ? tree.materialTextField.maxLines : 1),
          minLines: (tree.materialTextField.hasMinLines() ? tree.materialTextField.minLines : null),
          expands: (tree.materialTextField.hasExpands() ? tree.materialTextField.expands : false),
          maxLength: (tree.materialTextField.hasMaxLength() ? tree.materialTextField.maxLength : null),
          maxLengthEnforcement: (tree.materialTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          inputFormatters: tree.materialTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextField.hasEnabled() ? tree.materialTextField.enabled : null),
          cursorWidth: (tree.materialTextField.hasCursorWidth() ? tree.materialTextField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextField.hasCursorHeight() ? tree.materialTextField.cursorHeight : null),
          cursorRadius: (tree.materialTextField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextField.cursorRadius) : null),
          cursorOpacityAnimates: (tree.materialTextField.hasCursorOpacityAnimates() ? tree.materialTextField.cursorOpacityAnimates : null),
          cursorColor: (tree.materialTextField.hasCursorColor() ? evaluateDartColorType(tree.materialTextField.cursorColor) : null),
          selectionHeightStyle: (tree.materialTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.materialTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.materialTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialTextField.hasEnableInteractiveSelection() ? tree.materialTextField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextField.selectionControls) : null),
          onTap: null,
          onTapOutside: null,
          mouseCursor: null,
          buildCounter: null,
          scrollController: (tree.materialTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextField.scrollController) : null),
          scrollPhysics: (tree.materialTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextField.scrollPhysics) : null),
          autofillHints: tree.materialTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.materialTextField.hasRestorationId() ? tree.materialTextField.restorationId : null),
          scribbleEnabled: (tree.materialTextField.hasScribbleEnabled() ? tree.materialTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.materialTextField.hasEnableIMEPersonalizedLearning() ? tree.materialTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          canRequestFocus: (tree.materialTextField.hasCanRequestFocus() ? tree.materialTextField.canRequestFocus : true),
          spellCheckConfiguration: (tree.materialTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextField.magnifierConfiguration) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialTextFormField:
      return $flutterSrcMaterialTextFormField.TextFormField(
          key: (tree.materialTextFormField.hasKey() ? evaluateFlutterKeyType(tree.materialTextFormField.key) : null),
          controller: (tree.materialTextFormField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextFormField.controller) : null),
          initialValue: (tree.materialTextFormField.hasInitialValue() ? tree.materialTextFormField.initialValue : null),
          focusNode: (tree.materialTextFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextFormField.focusNode) : null),
          decoration: (tree.materialTextFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextFormField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextFormField.keyboardType) : null),
          textCapitalization: (tree.materialTextFormField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextFormField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.materialTextFormField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextFormField.textInputAction) : null),
          style: (tree.materialTextFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextFormField.style) : null),
          strutStyle: (tree.materialTextFormField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextFormField.strutStyle) : null),
          textDirection: (tree.materialTextFormField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextFormField.textDirection) : null),
          textAlign: (tree.materialTextFormField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextFormField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextFormField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextFormField.textAlignVertical) : null),
          autofocus: (tree.materialTextFormField.hasAutofocus() ? tree.materialTextFormField.autofocus : false),
          readOnly: (tree.materialTextFormField.hasReadOnly() ? tree.materialTextFormField.readOnly : false),
          showCursor: (tree.materialTextFormField.hasShowCursor() ? tree.materialTextFormField.showCursor : null),
          obscuringCharacter: (tree.materialTextFormField.hasObscuringCharacter() ? tree.materialTextFormField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextFormField.hasObscureText() ? tree.materialTextFormField.obscureText : false),
          autocorrect: (tree.materialTextFormField.hasAutocorrect() ? tree.materialTextFormField.autocorrect : true),
          smartDashesType: (tree.materialTextFormField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextFormField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextFormField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextFormField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextFormField.hasEnableSuggestions() ? tree.materialTextFormField.enableSuggestions : true),
          maxLengthEnforcement: (tree.materialTextFormField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextFormField.maxLengthEnforcement) : null),
          maxLines: (tree.materialTextFormField.hasMaxLines() ? tree.materialTextFormField.maxLines : 1),
          minLines: (tree.materialTextFormField.hasMinLines() ? tree.materialTextFormField.minLines : null),
          expands: (tree.materialTextFormField.hasExpands() ? tree.materialTextFormField.expands : false),
          maxLength: (tree.materialTextFormField.hasMaxLength() ? tree.materialTextFormField.maxLength : null),
          onChanged: null,
          onTap: null,
          onTapOutside: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.materialTextFormField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextFormField.hasEnabled() ? tree.materialTextFormField.enabled : null),
          cursorWidth: (tree.materialTextFormField.hasCursorWidth() ? tree.materialTextFormField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextFormField.hasCursorHeight() ? tree.materialTextFormField.cursorHeight : null),
          cursorRadius: (tree.materialTextFormField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextFormField.cursorRadius) : null),
          cursorColor: (tree.materialTextFormField.hasCursorColor() ? evaluateDartColorType(tree.materialTextFormField.cursorColor) : null),
          keyboardAppearance: (tree.materialTextFormField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextFormField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextFormField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextFormField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.materialTextFormField.hasEnableInteractiveSelection() ? tree.materialTextFormField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextFormField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextFormField.selectionControls) : null),
          buildCounter: null,
          scrollPhysics: (tree.materialTextFormField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextFormField.scrollPhysics) : null),
          autofillHints: tree.materialTextFormField.autofillHints,
          autovalidateMode: (tree.materialTextFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialTextFormField.autovalidateMode) : null),
          scrollController: (tree.materialTextFormField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextFormField.scrollController) : null),
          restorationId: (tree.materialTextFormField.hasRestorationId() ? tree.materialTextFormField.restorationId : null),
          enableIMEPersonalizedLearning: (tree.materialTextFormField.hasEnableIMEPersonalizedLearning() ? tree.materialTextFormField.enableIMEPersonalizedLearning : true),
          mouseCursor: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.materialTextFormField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextFormField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextFormField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextFormField.magnifierConfiguration) : null),
          undoController: (tree.materialTextFormField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextFormField.undoController) : null),
          onAppPrivateCommand: null,
          cursorOpacityAnimates: (tree.materialTextFormField.hasCursorOpacityAnimates() ? tree.materialTextFormField.cursorOpacityAnimates : null),
          selectionHeightStyle: (tree.materialTextFormField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextFormField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextFormField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextFormField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialTextFormField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextFormField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextFormField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextFormField.clipBehavior) : $dartUi.Clip.hardEdge),
          scribbleEnabled: (tree.materialTextFormField.hasScribbleEnabled() ? tree.materialTextFormField.scribbleEnabled : true),
          canRequestFocus: (tree.materialTextFormField.hasCanRequestFocus() ? tree.materialTextFormField.canRequestFocus : true));
    case messages.FlutterStatefulWidgetType_Constructor.materialTimePickerDialog:
      return $flutterSrcMaterialTimePicker.TimePickerDialog(
          key: (tree.materialTimePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerDialog.key) : null),
          initialTime: (tree.materialTimePickerDialog.hasInitialTime() ? evaluateRequiredMaterialTimeOfDayType(tree.materialTimePickerDialog.initialTime) : missing('initialTime')),
          cancelText: (tree.materialTimePickerDialog.hasCancelText() ? tree.materialTimePickerDialog.cancelText : null),
          confirmText: (tree.materialTimePickerDialog.hasConfirmText() ? tree.materialTimePickerDialog.confirmText : null),
          helpText: (tree.materialTimePickerDialog.hasHelpText() ? tree.materialTimePickerDialog.helpText : null),
          errorInvalidText: (tree.materialTimePickerDialog.hasErrorInvalidText() ? tree.materialTimePickerDialog.errorInvalidText : null),
          hourLabelText: (tree.materialTimePickerDialog.hasHourLabelText() ? tree.materialTimePickerDialog.hourLabelText : null),
          minuteLabelText: (tree.materialTimePickerDialog.hasMinuteLabelText() ? tree.materialTimePickerDialog.minuteLabelText : null),
          restorationId: (tree.materialTimePickerDialog.hasRestorationId() ? tree.materialTimePickerDialog.restorationId : null),
          initialEntryMode: (tree.materialTimePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialTimePickerEntryModeType(tree.materialTimePickerDialog.initialEntryMode) : $flutterSrcMaterialTimePicker.TimePickerEntryMode.dial),
          orientation: (tree.materialTimePickerDialog.hasOrientation() ? enums.convertFlutterOrientationType(tree.materialTimePickerDialog.orientation) : null),
          onEntryModeChanged: null);
    case messages.FlutterStatefulWidgetType_Constructor.materialTooltip:
      return $flutterSrcMaterialTooltip.Tooltip(
          key: (tree.materialTooltip.hasKey() ? evaluateFlutterKeyType(tree.materialTooltip.key) : null),
          message: (tree.materialTooltip.hasMessage() ? tree.materialTooltip.message : null),
          richMessage: (tree.materialTooltip.hasRichMessage() ? evaluateFlutterInlineSpanType(tree.materialTooltip.richMessage) : null),
          height: (tree.materialTooltip.hasHeight() ? tree.materialTooltip.height : null),
          padding: (tree.materialTooltip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.padding) : null),
          margin: (tree.materialTooltip.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.margin) : null),
          verticalOffset: (tree.materialTooltip.hasVerticalOffset() ? tree.materialTooltip.verticalOffset : null),
          preferBelow: (tree.materialTooltip.hasPreferBelow() ? tree.materialTooltip.preferBelow : null),
          excludeFromSemantics: (tree.materialTooltip.hasExcludeFromSemantics() ? tree.materialTooltip.excludeFromSemantics : null),
          decoration: (tree.materialTooltip.hasDecoration() ? evaluateFlutterDecorationType(tree.materialTooltip.decoration) : null),
          textStyle: (tree.materialTooltip.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialTooltip.textStyle) : null),
          textAlign: (tree.materialTooltip.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialTooltip.textAlign) : null),
          waitDuration: (tree.materialTooltip.hasWaitDuration() ? evaluateDartDurationType(tree.materialTooltip.waitDuration) : null),
          showDuration: (tree.materialTooltip.hasShowDuration() ? evaluateDartDurationType(tree.materialTooltip.showDuration) : null),
          triggerMode: (tree.materialTooltip.hasTriggerMode() ? enums.convertMaterialTooltipTriggerModeType(tree.materialTooltip.triggerMode) : null),
          enableFeedback: (tree.materialTooltip.hasEnableFeedback() ? tree.materialTooltip.enableFeedback : null),
          onTriggered: null,
          child: (tree.materialTooltip.hasChild() ? evaluateWidgetType(tree.materialTooltip.child) : null));
    case messages.FlutterStatefulWidgetType_Constructor.materialUserAccountsDrawerHeader:
      return $flutterSrcMaterialUserAccountsDrawerHeader.UserAccountsDrawerHeader(
          key: (tree.materialUserAccountsDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialUserAccountsDrawerHeader.key) : null),
          decoration: (tree.materialUserAccountsDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialUserAccountsDrawerHeader.decoration) : null),
          margin: (tree.materialUserAccountsDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialUserAccountsDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          currentAccountPicture: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPicture() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.currentAccountPicture) : null),
          otherAccountsPictures: tree.materialUserAccountsDrawerHeader.otherAccountsPictures.map((e) => evaluateRequiredWidgetType(e)).toList(),
          currentAccountPictureSize: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPictureSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.currentAccountPictureSize) : $dartUi.Size.square(72.0)),
          otherAccountsPicturesSize: (tree.materialUserAccountsDrawerHeader.hasOtherAccountsPicturesSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.otherAccountsPicturesSize) : $dartUi.Size.square(40.0)),
          accountName: (tree.materialUserAccountsDrawerHeader.hasAccountName() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountName) : null),
          accountEmail: (tree.materialUserAccountsDrawerHeader.hasAccountEmail() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountEmail) : null),
          onDetailsPressed: null,
          arrowColor: (tree.materialUserAccountsDrawerHeader.hasArrowColor() ? evaluateRequiredDartColorType(tree.materialUserAccountsDrawerHeader.arrowColor) : $flutterSrcMaterialColors.Colors.white));
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.StatelessWidget evaluateRequiredFlutterStatelessWidgetType(messages.FlutterStatelessWidgetType tree) {
  final result = evaluateFlutterStatelessWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.StatelessWidget? evaluateFlutterStatelessWidgetType(messages.FlutterStatelessWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbar:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar(
          key: (tree.cupertinoAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbar.key) : null),
          children: tree.cupertinoAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editable(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editableText(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoDesktopTextSelectionToolbar:
      return $flutterSrcCupertinoDesktopTextSelectionToolbar.CupertinoDesktopTextSelectionToolbar(
          key: (tree.cupertinoDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.cupertinoDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.cupertinoDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.cupertinoDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoDialogAction:
      return $flutterSrcCupertinoDialog.CupertinoDialogAction(
          key: (tree.cupertinoDialogAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDialogAction.key) : null),
          onPressed: null,
          isDefaultAction: (tree.cupertinoDialogAction.hasIsDefaultAction() ? tree.cupertinoDialogAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoDialogAction.hasIsDestructiveAction() ? tree.cupertinoDialogAction.isDestructiveAction : false),
          textStyle: (tree.cupertinoDialogAction.hasTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoDialogAction.textStyle) : null),
          child: (tree.cupertinoDialogAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDialogAction.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoFormRow:
      return $flutterSrcCupertinoFormRow.CupertinoFormRow(
          key: (tree.cupertinoFormRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormRow.key) : null),
          child: (tree.cupertinoFormRow.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoFormRow.child) : missing('child')),
          prefix: (tree.cupertinoFormRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoFormRow.prefix) : null),
          padding: (tree.cupertinoFormRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoFormRow.padding) : null),
          helper: (tree.cupertinoFormRow.hasHelper() ? evaluateWidgetType(tree.cupertinoFormRow.helper) : null),
          error: (tree.cupertinoFormRow.hasError() ? evaluateWidgetType(tree.cupertinoFormRow.error) : null));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoFormSection:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection(
          key: (tree.cupertinoFormSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSection.key) : null),
          children: tree.cupertinoFormSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSection.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSection.header) : null),
          footer: (tree.cupertinoFormSection.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSection.footer) : null),
          margin: (tree.cupertinoFormSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          backgroundColor: (tree.cupertinoFormSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSection.decoration) : null),
          clipBehavior: (tree.cupertinoFormSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSection.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoFormSectionNamedInsetGrouped:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection.insetGrouped(
          key: (tree.cupertinoFormSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoFormSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoFormSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoFormSectionNamedInsetGrouped.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSectionNamedInsetGrouped.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(20.0, 0.0, 20.0, 10.0)),
          backgroundColor: (tree.cupertinoFormSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoFormSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoListSection:
      return $flutterSrcCupertinoListSection.CupertinoListSection(
          key: (tree.cupertinoListSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSection.key) : null),
          children: tree.cupertinoListSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSection.hasHeader() ? evaluateWidgetType(tree.cupertinoListSection.header) : null),
          footer: (tree.cupertinoListSection.hasFooter() ? evaluateWidgetType(tree.cupertinoListSection.footer) : null),
          margin: (tree.cupertinoListSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoListSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          backgroundColor: (tree.cupertinoListSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSection.decoration) : null),
          clipBehavior: (tree.cupertinoListSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSection.clipBehavior) : $dartUi.Clip.none),
          dividerMargin: (tree.cupertinoListSection.hasDividerMargin() ? tree.cupertinoListSection.dividerMargin : 20.0),
          additionalDividerMargin: (tree.cupertinoListSection.hasAdditionalDividerMargin() ? tree.cupertinoListSection.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSection.hasTopMargin() ? tree.cupertinoListSection.topMargin : 22.0),
          hasLeading: (tree.cupertinoListSection.hasHasLeading() ? tree.cupertinoListSection.hasLeading : true),
          separatorColor: (tree.cupertinoListSection.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSection.separatorColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoListSectionNamedInsetGrouped:
      return $flutterSrcCupertinoListSection.CupertinoListSection.insetGrouped(
          key: (tree.cupertinoListSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoListSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoListSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoListSectionNamedInsetGrouped.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListSectionNamedInsetGrouped.margin) : null),
          backgroundColor: (tree.cupertinoListSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoListSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.hardEdge),
          dividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.dividerMargin : 14.0),
          additionalDividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasAdditionalDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasTopMargin() ? tree.cupertinoListSectionNamedInsetGrouped.topMargin : null),
          hasLeading: (tree.cupertinoListSectionNamedInsetGrouped.hasHasLeading() ? tree.cupertinoListSectionNamedInsetGrouped.hasLeading : true),
          separatorColor: (tree.cupertinoListSectionNamedInsetGrouped.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSectionNamedInsetGrouped.separatorColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoListTileChevron:
      return $flutterSrcCupertinoListTile.CupertinoListTileChevron(
          key: (tree.cupertinoListTileChevron.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileChevron.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoMagnifier:
      return $flutterSrcCupertinoMagnifier.CupertinoMagnifier(
          key: (tree.cupertinoMagnifier.hasKey() ? evaluateFlutterKeyType(tree.cupertinoMagnifier.key) : null),
          size: (tree.cupertinoMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.cupertinoMagnifier.size) : $dartUi.Size(80, 47.5)),
          borderRadius: (tree.cupertinoMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.cupertinoMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.elliptical(60, 50))),
          additionalFocalPointOffset: (tree.cupertinoMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.cupertinoMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          shadows: tree.cupertinoMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          borderSide: (tree.cupertinoMagnifier.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.cupertinoMagnifier.borderSide) : $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color.fromARGB(255, 232, 232, 232))),
          inOutAnimation: null);
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoNavigationBarBackButton:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBarBackButton(
          key: (tree.cupertinoNavigationBarBackButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBarBackButton.key) : null),
          color: (tree.cupertinoNavigationBarBackButton.hasColor() ? evaluateDartColorType(tree.cupertinoNavigationBarBackButton.color) : null),
          previousPageTitle: (tree.cupertinoNavigationBarBackButton.hasPreviousPageTitle() ? tree.cupertinoNavigationBarBackButton.previousPageTitle : null),
          onPressed: null);
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoPickerDefaultSelectionOverlay:
      return $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay(
          key: (tree.cupertinoPickerDefaultSelectionOverlay.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPickerDefaultSelectionOverlay.key) : null),
          background: (tree.cupertinoPickerDefaultSelectionOverlay.hasBackground() ? evaluateRequiredDartColorType(tree.cupertinoPickerDefaultSelectionOverlay.background) : $flutterSrcCupertinoColors.CupertinoColors.tertiarySystemFill),
          capStartEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapStartEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capStartEdge : true),
          capEndEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapEndEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capEndEdge : true));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoPopupSurface:
      return $flutterSrcCupertinoDialog.CupertinoPopupSurface(
          key: (tree.cupertinoPopupSurface.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPopupSurface.key) : null),
          isSurfacePainted: (tree.cupertinoPopupSurface.hasIsSurfacePainted() ? tree.cupertinoPopupSurface.isSurfacePainted : true),
          child: (tree.cupertinoPopupSurface.hasChild() ? evaluateWidgetType(tree.cupertinoPopupSurface.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoSpellCheckSuggestionsToolbar:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar(
          key: (tree.cupertinoSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbar.key) : null),
          anchors: (tree.cupertinoSpellCheckSuggestionsToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoSpellCheckSuggestionsToolbar.anchors) : missing('anchors')),
          buttonItems: tree.cupertinoSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar.editableText(
          key: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoTabBar:
      return $flutterSrcCupertinoBottomTabBar.CupertinoTabBar(
          key: (tree.cupertinoTabBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabBar.key) : null),
          items: tree.cupertinoTabBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.cupertinoTabBar.hasCurrentIndex() ? tree.cupertinoTabBar.currentIndex : 0),
          backgroundColor: (tree.cupertinoTabBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoTabBar.backgroundColor) : null),
          activeColor: (tree.cupertinoTabBar.hasActiveColor() ? evaluateDartColorType(tree.cupertinoTabBar.activeColor) : null),
          inactiveColor: (tree.cupertinoTabBar.hasInactiveColor() ? evaluateRequiredDartColorType(tree.cupertinoTabBar.inactiveColor) : $flutterSrcCupertinoColors.CupertinoColors.inactiveGray),
          iconSize: (tree.cupertinoTabBar.hasIconSize() ? tree.cupertinoTabBar.iconSize : 30.0),
          height: (tree.cupertinoTabBar.hasHeight() ? tree.cupertinoTabBar.height : 50.0),
          border: (tree.cupertinoTabBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoTabBar.border) : $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x4D000000), darkColor: $dartUi.Color(0x29000000)), width: 0.0))));
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoTextSelectionToolbar:
      return $flutterSrcCupertinoTextSelectionToolbar.CupertinoTextSelectionToolbar(
          key: (tree.cupertinoTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbar.key) : null),
          anchorAbove: (tree.cupertinoTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.cupertinoTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.cupertinoTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.cupertinoTheme:
      return $flutterSrcCupertinoTheme.CupertinoTheme(
          key: (tree.cupertinoTheme.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTheme.key) : null),
          data: (tree.cupertinoTheme.hasData() ? evaluateRequiredCupertinoThemeDataType(tree.cupertinoTheme.data) : missing('data')),
          child: (tree.cupertinoTheme.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTheme.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterBanner:
      return $flutterSrcWidgetsBanner.Banner(
          key: (tree.flutterBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterBanner.key) : null),
          child: (tree.flutterBanner.hasChild() ? evaluateWidgetType(tree.flutterBanner.child) : null),
          message: (tree.flutterBanner.hasMessage() ? tree.flutterBanner.message : missing('message')),
          textDirection: (tree.flutterBanner.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.textDirection) : null),
          location: (tree.flutterBanner.hasLocation() ? enums.convertRequiredFlutterBannerLocationType(tree.flutterBanner.location) : missing('location')),
          layoutDirection: (tree.flutterBanner.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.layoutDirection) : null),
          color: (tree.flutterBanner.hasColor() ? evaluateRequiredDartColorType(tree.flutterBanner.color) : $dartUi.Color(0xA0B71C1C)),
          textStyle: (tree.flutterBanner.hasTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterBanner.textStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFFFFFFFF), fontSize: 12.0 * 0.85, fontWeight: $dartUi.FontWeight.w900, height: 1.0)));
    case messages.FlutterStatelessWidgetType_Constructor.flutterCheckedModeBanner:
      return $flutterSrcWidgetsBanner.CheckedModeBanner(
          key: (tree.flutterCheckedModeBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterCheckedModeBanner.key) : null),
          child: (tree.flutterCheckedModeBanner.hasChild() ? evaluateRequiredWidgetType(tree.flutterCheckedModeBanner.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterContainer:
      return $flutterSrcWidgetsContainer.Container(
          key: (tree.flutterContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterContainer.key) : null),
          alignment: (tree.flutterContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.alignment) : null),
          padding: (tree.flutterContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.padding) : null),
          color: (tree.flutterContainer.hasColor() ? evaluateDartColorType(tree.flutterContainer.color) : null),
          decoration: (tree.flutterContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.decoration) : null),
          foregroundDecoration: (tree.flutterContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.foregroundDecoration) : null),
          width: (tree.flutterContainer.hasWidth() ? tree.flutterContainer.width : null),
          height: (tree.flutterContainer.hasHeight() ? tree.flutterContainer.height : null),
          constraints: (tree.flutterContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterContainer.constraints) : null),
          margin: (tree.flutterContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.margin) : null),
          transform: (tree.flutterContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterContainer.transform) : null),
          transformAlignment: (tree.flutterContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.transformAlignment) : null),
          child: (tree.flutterContainer.hasChild() ? evaluateWidgetType(tree.flutterContainer.child) : null),
          clipBehavior: (tree.flutterContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterContainer.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterStatelessWidgetType_Constructor.flutterCustomScrollView:
      return $flutterSrcWidgetsScrollView.CustomScrollView(
          key: (tree.flutterCustomScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.key) : null),
          scrollDirection: (tree.flutterCustomScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterCustomScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterCustomScrollView.hasReverse() ? tree.flutterCustomScrollView.reverse : false),
          controller: (tree.flutterCustomScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterCustomScrollView.controller) : null),
          primary: (tree.flutterCustomScrollView.hasPrimary() ? tree.flutterCustomScrollView.primary : null),
          physics: (tree.flutterCustomScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterCustomScrollView.physics) : null),
          scrollBehavior: (tree.flutterCustomScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterCustomScrollView.scrollBehavior) : null),
          shrinkWrap: (tree.flutterCustomScrollView.hasShrinkWrap() ? tree.flutterCustomScrollView.shrinkWrap : false),
          center: (tree.flutterCustomScrollView.hasCenter() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.center) : null),
          anchor: (tree.flutterCustomScrollView.hasAnchor() ? tree.flutterCustomScrollView.anchor : 0.0),
          cacheExtent: (tree.flutterCustomScrollView.hasCacheExtent() ? tree.flutterCustomScrollView.cacheExtent : null),
          slivers: tree.flutterCustomScrollView.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterCustomScrollView.hasSemanticChildCount() ? tree.flutterCustomScrollView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterCustomScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterCustomScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterCustomScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterCustomScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterCustomScrollView.hasRestorationId() ? tree.flutterCustomScrollView.restorationId : null),
          clipBehavior: (tree.flutterCustomScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterCustomScrollView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterDefaultTextEditingShortcuts:
      return $flutterSrcWidgetsDefaultTextEditingShortcuts.DefaultTextEditingShortcuts(
          key: (tree.flutterDefaultTextEditingShortcuts.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextEditingShortcuts.key) : null),
          child: (tree.flutterDefaultTextEditingShortcuts.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextEditingShortcuts.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterDisplayFeatureSubScreen:
      return $flutterSrcWidgetsDisplayFeatureSubScreen.DisplayFeatureSubScreen(
          key: (tree.flutterDisplayFeatureSubScreen.hasKey() ? evaluateFlutterKeyType(tree.flutterDisplayFeatureSubScreen.key) : null),
          anchorPoint: (tree.flutterDisplayFeatureSubScreen.hasAnchorPoint() ? evaluateDartOffsetType(tree.flutterDisplayFeatureSubScreen.anchorPoint) : null),
          child: (tree.flutterDisplayFeatureSubScreen.hasChild() ? evaluateRequiredWidgetType(tree.flutterDisplayFeatureSubScreen.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterExcludeFocus:
      return $flutterSrcWidgetsFocusScope.ExcludeFocus(
          key: (tree.flutterExcludeFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocus.key) : null),
          excluding: (tree.flutterExcludeFocus.hasExcluding() ? tree.flutterExcludeFocus.excluding : true),
          child: (tree.flutterExcludeFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocus.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterExcludeFocusTraversal:
      return $flutterSrcWidgetsFocusTraversal.ExcludeFocusTraversal(
          key: (tree.flutterExcludeFocusTraversal.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocusTraversal.key) : null),
          excluding: (tree.flutterExcludeFocusTraversal.hasExcluding() ? tree.flutterExcludeFocusTraversal.excluding : true),
          child: (tree.flutterExcludeFocusTraversal.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocusTraversal.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterGestureDetector:
      return $flutterSrcWidgetsGestureDetector.GestureDetector(
          key: (tree.flutterGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterGestureDetector.key) : null),
          child: (tree.flutterGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterGestureDetector.child) : null),
          onTapDown: null,
          onTapUp: null,
          onTap: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSecondaryTapUp: null,
          onSecondaryTapCancel: null,
          onTertiaryTapDown: null,
          onTertiaryTapUp: null,
          onTertiaryTapCancel: null,
          onDoubleTapDown: null,
          onDoubleTap: null,
          onDoubleTapCancel: null,
          onLongPressDown: null,
          onLongPressCancel: null,
          onLongPress: null,
          onLongPressStart: null,
          onLongPressMoveUpdate: null,
          onLongPressUp: null,
          onLongPressEnd: null,
          onSecondaryLongPressDown: null,
          onSecondaryLongPressCancel: null,
          onSecondaryLongPress: null,
          onSecondaryLongPressStart: null,
          onSecondaryLongPressMoveUpdate: null,
          onSecondaryLongPressUp: null,
          onSecondaryLongPressEnd: null,
          onTertiaryLongPressDown: null,
          onTertiaryLongPressCancel: null,
          onTertiaryLongPress: null,
          onTertiaryLongPressStart: null,
          onTertiaryLongPressMoveUpdate: null,
          onTertiaryLongPressUp: null,
          onTertiaryLongPressEnd: null,
          onVerticalDragDown: null,
          onVerticalDragStart: null,
          onVerticalDragUpdate: null,
          onVerticalDragEnd: null,
          onVerticalDragCancel: null,
          onHorizontalDragDown: null,
          onHorizontalDragStart: null,
          onHorizontalDragUpdate: null,
          onHorizontalDragEnd: null,
          onHorizontalDragCancel: null,
          onForcePressStart: null,
          onForcePressPeak: null,
          onForcePressUpdate: null,
          onForcePressEnd: null,
          onPanDown: null,
          onPanStart: null,
          onPanUpdate: null,
          onPanEnd: null,
          onPanCancel: null,
          onScaleStart: null,
          onScaleUpdate: null,
          onScaleEnd: null,
          behavior: (tree.flutterGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterGestureDetector.hasExcludeFromSemantics() ? tree.flutterGestureDetector.excludeFromSemantics : false),
          dragStartBehavior: (tree.flutterGestureDetector.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGestureDetector.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          trackpadScrollCausesScale: (tree.flutterGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterGestureDetector.trackpadScrollCausesScale : false),
          trackpadScrollToScaleFactor: (tree.flutterGestureDetector.hasTrackpadScrollToScaleFactor() ? evaluateRequiredDartOffsetType(tree.flutterGestureDetector.trackpadScrollToScaleFactor) : $flutterSrcGesturesScale.kDefaultTrackpadScrollToScaleFactor),
          supportedDevices: null);
    case messages.FlutterStatelessWidgetType_Constructor.flutterGridPaper:
      return $flutterSrcWidgetsGridPaper.GridPaper(
          key: (tree.flutterGridPaper.hasKey() ? evaluateFlutterKeyType(tree.flutterGridPaper.key) : null),
          color: (tree.flutterGridPaper.hasColor() ? evaluateRequiredDartColorType(tree.flutterGridPaper.color) : $dartUi.Color(0x7FC3E8F3)),
          interval: (tree.flutterGridPaper.hasInterval() ? tree.flutterGridPaper.interval : 100.0),
          divisions: (tree.flutterGridPaper.hasDivisions() ? tree.flutterGridPaper.divisions : 2),
          subdivisions: (tree.flutterGridPaper.hasSubdivisions() ? tree.flutterGridPaper.subdivisions : 5),
          child: (tree.flutterGridPaper.hasChild() ? evaluateWidgetType(tree.flutterGridPaper.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterGridView:
      return $flutterSrcWidgetsScrollView.GridView(
          key: (tree.flutterGridView.hasKey() ? evaluateFlutterKeyType(tree.flutterGridView.key) : null),
          scrollDirection: (tree.flutterGridView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridView.hasReverse() ? tree.flutterGridView.reverse : false),
          controller: (tree.flutterGridView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridView.controller) : null),
          primary: (tree.flutterGridView.hasPrimary() ? tree.flutterGridView.primary : null),
          physics: (tree.flutterGridView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridView.physics) : null),
          shrinkWrap: (tree.flutterGridView.hasShrinkWrap() ? tree.flutterGridView.shrinkWrap : false),
          padding: (tree.flutterGridView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridView.padding) : null),
          gridDelegate: (tree.flutterGridView.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridView.gridDelegate) : missing('gridDelegate')),
          addAutomaticKeepAlives: (tree.flutterGridView.hasAddAutomaticKeepAlives() ? tree.flutterGridView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridView.hasAddRepaintBoundaries() ? tree.flutterGridView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridView.hasAddSemanticIndexes() ? tree.flutterGridView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridView.hasCacheExtent() ? tree.flutterGridView.cacheExtent : null),
          children: tree.flutterGridView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridView.hasSemanticChildCount() ? tree.flutterGridView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterGridView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridView.clipBehavior) : $dartUi.Clip.hardEdge),
          keyboardDismissBehavior: (tree.flutterGridView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridView.hasRestorationId() ? tree.flutterGridView.restorationId : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterGridViewNamedCount:
      return $flutterSrcWidgetsScrollView.GridView.count(
          key: (tree.flutterGridViewNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCount.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCount.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCount.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCount.hasReverse() ? tree.flutterGridViewNamedCount.reverse : false),
          controller: (tree.flutterGridViewNamedCount.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCount.controller) : null),
          primary: (tree.flutterGridViewNamedCount.hasPrimary() ? tree.flutterGridViewNamedCount.primary : null),
          physics: (tree.flutterGridViewNamedCount.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCount.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCount.hasShrinkWrap() ? tree.flutterGridViewNamedCount.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCount.padding) : null),
          crossAxisCount: (tree.flutterGridViewNamedCount.hasCrossAxisCount() ? tree.flutterGridViewNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterGridViewNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterGridViewNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedCount.hasChildAspectRatio() ? tree.flutterGridViewNamedCount.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedCount.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedCount.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterGridViewNamedCount.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedCount.hasCacheExtent() ? tree.flutterGridViewNamedCount.cacheExtent : null),
          children: tree.flutterGridViewNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedCount.hasSemanticChildCount() ? tree.flutterGridViewNamedCount.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCount.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCount.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCount.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCount.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCount.hasRestorationId() ? tree.flutterGridViewNamedCount.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCount.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCount.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterGridViewNamedCustom:
      return $flutterSrcWidgetsScrollView.GridView.custom(
          key: (tree.flutterGridViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCustom.hasReverse() ? tree.flutterGridViewNamedCustom.reverse : false),
          controller: (tree.flutterGridViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCustom.controller) : null),
          primary: (tree.flutterGridViewNamedCustom.hasPrimary() ? tree.flutterGridViewNamedCustom.primary : null),
          physics: (tree.flutterGridViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCustom.hasShrinkWrap() ? tree.flutterGridViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCustom.padding) : null),
          gridDelegate: (tree.flutterGridViewNamedCustom.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridViewNamedCustom.gridDelegate) : missing('gridDelegate')),
          childrenDelegate: (tree.flutterGridViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterGridViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterGridViewNamedCustom.hasCacheExtent() ? tree.flutterGridViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterGridViewNamedCustom.hasSemanticChildCount() ? tree.flutterGridViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCustom.hasRestorationId() ? tree.flutterGridViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterGridViewNamedExtent:
      return $flutterSrcWidgetsScrollView.GridView.extent(
          key: (tree.flutterGridViewNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedExtent.key) : null),
          scrollDirection: (tree.flutterGridViewNamedExtent.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedExtent.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedExtent.hasReverse() ? tree.flutterGridViewNamedExtent.reverse : false),
          controller: (tree.flutterGridViewNamedExtent.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedExtent.controller) : null),
          primary: (tree.flutterGridViewNamedExtent.hasPrimary() ? tree.flutterGridViewNamedExtent.primary : null),
          physics: (tree.flutterGridViewNamedExtent.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedExtent.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedExtent.hasShrinkWrap() ? tree.flutterGridViewNamedExtent.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedExtent.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedExtent.padding) : null),
          maxCrossAxisExtent: (tree.flutterGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterGridViewNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterGridViewNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterGridViewNamedExtent.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedExtent.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedExtent.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterGridViewNamedExtent.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedExtent.hasCacheExtent() ? tree.flutterGridViewNamedExtent.cacheExtent : null),
          children: tree.flutterGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterGridViewNamedExtent.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedExtent.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedExtent.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedExtent.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedExtent.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedExtent.hasRestorationId() ? tree.flutterGridViewNamedExtent.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedExtent.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedExtent.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterHeroMode:
      return $flutterSrcWidgetsHeroes.HeroMode(
          key: (tree.flutterHeroMode.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroMode.key) : null),
          child: (tree.flutterHeroMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroMode.child) : missing('child')),
          enabled: (tree.flutterHeroMode.hasEnabled() ? tree.flutterHeroMode.enabled : true));
    case messages.FlutterStatelessWidgetType_Constructor.flutterHtmlElementView:
      return $flutterSrcWidgetsPlatformView.HtmlElementView(
          key: (tree.flutterHtmlElementView.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementView.key) : null),
          viewType: (tree.flutterHtmlElementView.hasViewType() ? tree.flutterHtmlElementView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          creationParams: null);
    case messages.FlutterStatelessWidgetType_Constructor.flutterHtmlElementViewNamedFromTagName:
      return $flutterSrcWidgetsPlatformView.HtmlElementView.fromTagName(
          key: (tree.flutterHtmlElementViewNamedFromTagName.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementViewNamedFromTagName.key) : null),
          tagName: (tree.flutterHtmlElementViewNamedFromTagName.hasTagName() ? tree.flutterHtmlElementViewNamedFromTagName.tagName : missing('tagName')),
          isVisible: (tree.flutterHtmlElementViewNamedFromTagName.hasIsVisible() ? tree.flutterHtmlElementViewNamedFromTagName.isVisible : true),
          onElementCreated: null);
    case messages.FlutterStatelessWidgetType_Constructor.flutterIcon:
      return $flutterSrcWidgetsIcon.Icon(
          (tree.flutterIcon.hasIcon() ? evaluateFlutterIconDataType(tree.flutterIcon.icon) : null),
          key: (tree.flutterIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterIcon.key) : null),
          size: (tree.flutterIcon.hasSize() ? tree.flutterIcon.size : null),
          fill: (tree.flutterIcon.hasFill() ? tree.flutterIcon.fill : null),
          weight: (tree.flutterIcon.hasWeight() ? tree.flutterIcon.weight : null),
          grade: (tree.flutterIcon.hasGrade() ? tree.flutterIcon.grade : null),
          opticalSize: (tree.flutterIcon.hasOpticalSize() ? tree.flutterIcon.opticalSize : null),
          color: (tree.flutterIcon.hasColor() ? evaluateDartColorType(tree.flutterIcon.color) : null),
          shadows: tree.flutterIcon.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList(),
          semanticLabel: (tree.flutterIcon.hasSemanticLabel() ? tree.flutterIcon.semanticLabel : null),
          textDirection: (tree.flutterIcon.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIcon.textDirection) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterImageIcon:
      return $flutterSrcWidgetsImageIcon.ImageIcon(
          null,
          key: (tree.flutterImageIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterImageIcon.key) : null),
          size: (tree.flutterImageIcon.hasSize() ? tree.flutterImageIcon.size : null),
          color: (tree.flutterImageIcon.hasColor() ? evaluateDartColorType(tree.flutterImageIcon.color) : null),
          semanticLabel: (tree.flutterImageIcon.hasSemanticLabel() ? tree.flutterImageIcon.semanticLabel : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterIndexedStack:
      return $flutterSrcWidgetsBasic.IndexedStack(
          key: (tree.flutterIndexedStack.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedStack.key) : null),
          alignment: (tree.flutterIndexedStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterIndexedStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterIndexedStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIndexedStack.textDirection) : null),
          clipBehavior: (tree.flutterIndexedStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterIndexedStack.clipBehavior) : $dartUi.Clip.hardEdge),
          sizing: (tree.flutterIndexedStack.hasSizing() ? enums.convertRequiredFlutterStackFitType(tree.flutterIndexedStack.sizing) : $flutterSrcRenderingStack.StackFit.loose),
          index: (tree.flutterIndexedStack.hasIndex() ? tree.flutterIndexedStack.index : 0),
          children: tree.flutterIndexedStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.flutterKeyboardListener:
      return $flutterSrcWidgetsKeyboardListener.KeyboardListener(
          key: (tree.flutterKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyboardListener.key) : null),
          focusNode: (tree.flutterKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterKeyboardListener.hasAutofocus() ? tree.flutterKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterKeyboardListener.hasIncludeSemantics() ? tree.flutterKeyboardListener.includeSemantics : true),
          onKeyEvent: null,
          child: (tree.flutterKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyboardListener.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterKeyedSubtree:
      return $flutterSrcWidgetsBasic.KeyedSubtree(
          key: (tree.flutterKeyedSubtree.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyedSubtree.key) : null),
          child: (tree.flutterKeyedSubtree.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtree.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterKeyedSubtreeNamedWrap:
      return $flutterSrcWidgetsBasic.KeyedSubtree.wrap(
          (tree.flutterKeyedSubtreeNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtreeNamedWrap.child) : missing('child')),
          (tree.flutterKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterListView:
      return $flutterSrcWidgetsScrollView.ListView(
          key: (tree.flutterListView.hasKey() ? evaluateFlutterKeyType(tree.flutterListView.key) : null),
          scrollDirection: (tree.flutterListView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListView.hasReverse() ? tree.flutterListView.reverse : false),
          controller: (tree.flutterListView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListView.controller) : null),
          primary: (tree.flutterListView.hasPrimary() ? tree.flutterListView.primary : null),
          physics: (tree.flutterListView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListView.physics) : null),
          shrinkWrap: (tree.flutterListView.hasShrinkWrap() ? tree.flutterListView.shrinkWrap : false),
          padding: (tree.flutterListView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListView.padding) : null),
          itemExtent: (tree.flutterListView.hasItemExtent() ? tree.flutterListView.itemExtent : null),
          itemExtentBuilder: null,
          prototypeItem: (tree.flutterListView.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListView.prototypeItem) : null),
          addAutomaticKeepAlives: (tree.flutterListView.hasAddAutomaticKeepAlives() ? tree.flutterListView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterListView.hasAddRepaintBoundaries() ? tree.flutterListView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterListView.hasAddSemanticIndexes() ? tree.flutterListView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterListView.hasCacheExtent() ? tree.flutterListView.cacheExtent : null),
          children: tree.flutterListView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterListView.hasSemanticChildCount() ? tree.flutterListView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListView.hasRestorationId() ? tree.flutterListView.restorationId : null),
          clipBehavior: (tree.flutterListView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterListViewNamedCustom:
      return $flutterSrcWidgetsScrollView.ListView.custom(
          key: (tree.flutterListViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterListViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterListViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListViewNamedCustom.hasReverse() ? tree.flutterListViewNamedCustom.reverse : false),
          controller: (tree.flutterListViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListViewNamedCustom.controller) : null),
          primary: (tree.flutterListViewNamedCustom.hasPrimary() ? tree.flutterListViewNamedCustom.primary : null),
          physics: (tree.flutterListViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterListViewNamedCustom.hasShrinkWrap() ? tree.flutterListViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterListViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListViewNamedCustom.padding) : null),
          itemExtent: (tree.flutterListViewNamedCustom.hasItemExtent() ? tree.flutterListViewNamedCustom.itemExtent : null),
          prototypeItem: (tree.flutterListViewNamedCustom.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListViewNamedCustom.prototypeItem) : null),
          itemExtentBuilder: null,
          childrenDelegate: (tree.flutterListViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterListViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterListViewNamedCustom.hasCacheExtent() ? tree.flutterListViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterListViewNamedCustom.hasSemanticChildCount() ? tree.flutterListViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListViewNamedCustom.hasRestorationId() ? tree.flutterListViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterListViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.FlutterStatelessWidgetType_Constructor.flutterModalBarrier:
      return $flutterSrcWidgetsModalBarrier.ModalBarrier(
          key: (tree.flutterModalBarrier.hasKey() ? evaluateFlutterKeyType(tree.flutterModalBarrier.key) : null),
          color: (tree.flutterModalBarrier.hasColor() ? evaluateDartColorType(tree.flutterModalBarrier.color) : null),
          dismissible: (tree.flutterModalBarrier.hasDismissible() ? tree.flutterModalBarrier.dismissible : true),
          onDismiss: null,
          semanticsLabel: (tree.flutterModalBarrier.hasSemanticsLabel() ? tree.flutterModalBarrier.semanticsLabel : null),
          barrierSemanticsDismissible: (tree.flutterModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterModalBarrier.barrierSemanticsDismissible : true),
          clipDetailsNotifier: null,
          semanticsOnTapHint: (tree.flutterModalBarrier.hasSemanticsOnTapHint() ? tree.flutterModalBarrier.semanticsOnTapHint : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterNavigationToolbar:
      return $flutterSrcWidgetsNavigationToolbar.NavigationToolbar(
          key: (tree.flutterNavigationToolbar.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigationToolbar.key) : null),
          leading: (tree.flutterNavigationToolbar.hasLeading() ? evaluateWidgetType(tree.flutterNavigationToolbar.leading) : null),
          middle: (tree.flutterNavigationToolbar.hasMiddle() ? evaluateWidgetType(tree.flutterNavigationToolbar.middle) : null),
          trailing: (tree.flutterNavigationToolbar.hasTrailing() ? evaluateWidgetType(tree.flutterNavigationToolbar.trailing) : null),
          centerMiddle: (tree.flutterNavigationToolbar.hasCenterMiddle() ? tree.flutterNavigationToolbar.centerMiddle : true),
          middleSpacing: (tree.flutterNavigationToolbar.hasMiddleSpacing() ? tree.flutterNavigationToolbar.middleSpacing : $flutterSrcWidgetsNavigationToolbar.NavigationToolbar.kMiddleSpacing));
    case messages.FlutterStatelessWidgetType_Constructor.flutterPageStorage:
      return $flutterSrcWidgetsPageStorage.PageStorage(
          key: (tree.flutterPageStorage.hasKey() ? evaluateFlutterKeyType(tree.flutterPageStorage.key) : null),
          bucket: (tree.flutterPageStorage.hasBucket() ? evaluateRequiredFlutterPageStorageBucketType(tree.flutterPageStorage.bucket) : missing('bucket')),
          child: (tree.flutterPageStorage.hasChild() ? evaluateRequiredWidgetType(tree.flutterPageStorage.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterPlaceholder:
      return $flutterSrcWidgetsPlaceholder.Placeholder(
          key: (tree.flutterPlaceholder.hasKey() ? evaluateFlutterKeyType(tree.flutterPlaceholder.key) : null),
          color: (tree.flutterPlaceholder.hasColor() ? evaluateRequiredDartColorType(tree.flutterPlaceholder.color) : $dartUi.Color(0xFF455A64)),
          strokeWidth: (tree.flutterPlaceholder.hasStrokeWidth() ? tree.flutterPlaceholder.strokeWidth : 2.0),
          fallbackWidth: (tree.flutterPlaceholder.hasFallbackWidth() ? tree.flutterPlaceholder.fallbackWidth : 400.0),
          fallbackHeight: (tree.flutterPlaceholder.hasFallbackHeight() ? tree.flutterPlaceholder.fallbackHeight : 400.0),
          child: (tree.flutterPlaceholder.hasChild() ? evaluateWidgetType(tree.flutterPlaceholder.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterPlatformSelectableRegionContextMenu:
      return $flutterSrcWidgetsPlatformSelectableRegionContextMenuIo.PlatformSelectableRegionContextMenu(
          child: (tree.flutterPlatformSelectableRegionContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.flutterPlatformSelectableRegionContextMenu.child) : missing('child')),
          key: (tree.flutterPlatformSelectableRegionContextMenu.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformSelectableRegionContextMenu.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterPositionedDirectional:
      return $flutterSrcWidgetsBasic.PositionedDirectional(
          key: (tree.flutterPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedDirectional.key) : null),
          start: (tree.flutterPositionedDirectional.hasStart() ? tree.flutterPositionedDirectional.start : null),
          top: (tree.flutterPositionedDirectional.hasTop() ? tree.flutterPositionedDirectional.top : null),
          end: (tree.flutterPositionedDirectional.hasEnd() ? tree.flutterPositionedDirectional.end : null),
          bottom: (tree.flutterPositionedDirectional.hasBottom() ? tree.flutterPositionedDirectional.bottom : null),
          width: (tree.flutterPositionedDirectional.hasWidth() ? tree.flutterPositionedDirectional.width : null),
          height: (tree.flutterPositionedDirectional.hasHeight() ? tree.flutterPositionedDirectional.height : null),
          child: (tree.flutterPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedDirectional.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterPreferredSize:
      return $flutterSrcWidgetsPreferredSize.PreferredSize(
          key: (tree.flutterPreferredSize.hasKey() ? evaluateFlutterKeyType(tree.flutterPreferredSize.key) : null),
          preferredSize: (tree.flutterPreferredSize.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterPreferredSize.preferredSize) : missing('preferredSize')),
          child: (tree.flutterPreferredSize.hasChild() ? evaluateRequiredWidgetType(tree.flutterPreferredSize.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterProjectMyApp:
      return $flutterProjectMain.MyApp(
          key: (tree.flutterProjectMyApp.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyApp.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterRawMagnifier:
      return $flutterSrcWidgetsMagnifier.RawMagnifier(
          key: (tree.flutterRawMagnifier.hasKey() ? evaluateFlutterKeyType(tree.flutterRawMagnifier.key) : null),
          child: (tree.flutterRawMagnifier.hasChild() ? evaluateWidgetType(tree.flutterRawMagnifier.child) : null),
          decoration: (tree.flutterRawMagnifier.hasDecoration() ? evaluateRequiredFlutterMagnifierDecorationType(tree.flutterRawMagnifier.decoration) : $flutterSrcWidgetsMagnifier.MagnifierDecoration()),
          focalPointOffset: (tree.flutterRawMagnifier.hasFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.flutterRawMagnifier.focalPointOffset) : $dartUi.Offset.zero),
          magnificationScale: (tree.flutterRawMagnifier.hasMagnificationScale() ? tree.flutterRawMagnifier.magnificationScale : 1),
          size: (tree.flutterRawMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.flutterRawMagnifier.size) : missing('size')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterReorderableDelayedDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDelayedDragStartListener(
          key: (tree.flutterReorderableDelayedDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDelayedDragStartListener.key) : null),
          child: (tree.flutterReorderableDelayedDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDelayedDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDelayedDragStartListener.hasIndex() ? tree.flutterReorderableDelayedDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterReorderableDelayedDragStartListener.enabled : true));
    case messages.FlutterStatelessWidgetType_Constructor.flutterReorderableDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDragStartListener(
          key: (tree.flutterReorderableDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDragStartListener.key) : null),
          child: (tree.flutterReorderableDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDragStartListener.hasIndex() ? tree.flutterReorderableDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDragStartListener.hasEnabled() ? tree.flutterReorderableDragStartListener.enabled : true));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSafeArea:
      return $flutterSrcWidgetsSafeArea.SafeArea(
          key: (tree.flutterSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSafeArea.key) : null),
          left: (tree.flutterSafeArea.hasLeft() ? tree.flutterSafeArea.left : true),
          top: (tree.flutterSafeArea.hasTop() ? tree.flutterSafeArea.top : true),
          right: (tree.flutterSafeArea.hasRight() ? tree.flutterSafeArea.right : true),
          bottom: (tree.flutterSafeArea.hasBottom() ? tree.flutterSafeArea.bottom : true),
          minimum: (tree.flutterSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          maintainBottomViewPadding: (tree.flutterSafeArea.hasMaintainBottomViewPadding() ? tree.flutterSafeArea.maintainBottomViewPadding : false),
          child: (tree.flutterSafeArea.hasChild() ? evaluateRequiredWidgetType(tree.flutterSafeArea.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSingleChildScrollView:
      return $flutterSrcWidgetsSingleChildScrollView.SingleChildScrollView(
          key: (tree.flutterSingleChildScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterSingleChildScrollView.key) : null),
          scrollDirection: (tree.flutterSingleChildScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterSingleChildScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterSingleChildScrollView.hasReverse() ? tree.flutterSingleChildScrollView.reverse : false),
          padding: (tree.flutterSingleChildScrollView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterSingleChildScrollView.padding) : null),
          primary: (tree.flutterSingleChildScrollView.hasPrimary() ? tree.flutterSingleChildScrollView.primary : null),
          physics: (tree.flutterSingleChildScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterSingleChildScrollView.physics) : null),
          controller: (tree.flutterSingleChildScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterSingleChildScrollView.controller) : null),
          child: (tree.flutterSingleChildScrollView.hasChild() ? evaluateWidgetType(tree.flutterSingleChildScrollView.child) : null),
          dragStartBehavior: (tree.flutterSingleChildScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterSingleChildScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterSingleChildScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterSingleChildScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterSingleChildScrollView.hasRestorationId() ? tree.flutterSingleChildScrollView.restorationId : null),
          keyboardDismissBehavior: (tree.flutterSingleChildScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterSingleChildScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverConstrainedCrossAxis:
      return $flutterSrcWidgetsSliver.SliverConstrainedCrossAxis(
          key: (tree.flutterSliverConstrainedCrossAxis.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverConstrainedCrossAxis.key) : null),
          maxExtent: (tree.flutterSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')),
          sliver: (tree.flutterSliverConstrainedCrossAxis.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverConstrainedCrossAxis.sliver) : missing('sliver')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverFillRemaining:
      return $flutterSrcWidgetsSliverFill.SliverFillRemaining(
          key: (tree.flutterSliverFillRemaining.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillRemaining.key) : null),
          child: (tree.flutterSliverFillRemaining.hasChild() ? evaluateWidgetType(tree.flutterSliverFillRemaining.child) : null),
          hasScrollBody: (tree.flutterSliverFillRemaining.hasHasScrollBody() ? tree.flutterSliverFillRemaining.hasScrollBody : true),
          fillOverscroll: (tree.flutterSliverFillRemaining.hasFillOverscroll() ? tree.flutterSliverFillRemaining.fillOverscroll : false));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverFillViewport:
      return $flutterSrcWidgetsSliverFill.SliverFillViewport(
          key: (tree.flutterSliverFillViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillViewport.key) : null),
          delegate: (tree.flutterSliverFillViewport.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFillViewport.delegate) : missing('delegate')),
          viewportFraction: (tree.flutterSliverFillViewport.hasViewportFraction() ? tree.flutterSliverFillViewport.viewportFraction : 1.0),
          padEnds: (tree.flutterSliverFillViewport.hasPadEnds() ? tree.flutterSliverFillViewport.padEnds : true));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverPersistentHeader:
      return $flutterSrcWidgetsSliverPersistentHeader.SliverPersistentHeader(
          key: (tree.flutterSliverPersistentHeader.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPersistentHeader.key) : null),
          delegate: missing('delegate'),
          pinned: (tree.flutterSliverPersistentHeader.hasPinned() ? tree.flutterSliverPersistentHeader.pinned : false),
          floating: (tree.flutterSliverPersistentHeader.hasFloating() ? tree.flutterSliverPersistentHeader.floating : false));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverSafeArea:
      return $flutterSrcWidgetsSafeArea.SliverSafeArea(
          key: (tree.flutterSliverSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverSafeArea.key) : null),
          left: (tree.flutterSliverSafeArea.hasLeft() ? tree.flutterSliverSafeArea.left : true),
          top: (tree.flutterSliverSafeArea.hasTop() ? tree.flutterSliverSafeArea.top : true),
          right: (tree.flutterSliverSafeArea.hasRight() ? tree.flutterSliverSafeArea.right : true),
          bottom: (tree.flutterSliverSafeArea.hasBottom() ? tree.flutterSliverSafeArea.bottom : true),
          minimum: (tree.flutterSliverSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSliverSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          sliver: (tree.flutterSliverSafeArea.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverSafeArea.sliver) : missing('sliver')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverVisibility:
      return $flutterSrcWidgetsVisibility.SliverVisibility(
          key: (tree.flutterSliverVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibility.key) : null),
          sliver: (tree.flutterSliverVisibility.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibility.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibility.hasVisible() ? tree.flutterSliverVisibility.visible : true),
          maintainState: (tree.flutterSliverVisibility.hasMaintainState() ? tree.flutterSliverVisibility.maintainState : false),
          maintainAnimation: (tree.flutterSliverVisibility.hasMaintainAnimation() ? tree.flutterSliverVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterSliverVisibility.hasMaintainSize() ? tree.flutterSliverVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterSliverVisibility.hasMaintainSemantics() ? tree.flutterSliverVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterSliverVisibility.hasMaintainInteractivity() ? tree.flutterSliverVisibility.maintainInteractivity : false));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSliverVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.SliverVisibility.maintain(
          key: (tree.flutterSliverVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibilityNamedMaintain.key) : null),
          sliver: (tree.flutterSliverVisibilityNamedMaintain.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibilityNamedMaintain.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterSliverVisibilityNamedMaintain.visible : true));
    case messages.FlutterStatelessWidgetType_Constructor.flutterSpacer:
      return $flutterSrcWidgetsSpacer.Spacer(
          key: (tree.flutterSpacer.hasKey() ? evaluateFlutterKeyType(tree.flutterSpacer.key) : null),
          flex: (tree.flutterSpacer.hasFlex() ? tree.flutterSpacer.flex : 1));
    case messages.FlutterStatelessWidgetType_Constructor.flutterText:
      return $flutterSrcWidgetsText.Text(
          (tree.flutterText.hasData() ? tree.flutterText.data : missing('data')),
          key: (tree.flutterText.hasKey() ? evaluateFlutterKeyType(tree.flutterText.key) : null),
          style: (tree.flutterText.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterText.style) : null),
          strutStyle: (tree.flutterText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterText.strutStyle) : null),
          textAlign: (tree.flutterText.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterText.textAlign) : null),
          textDirection: (tree.flutterText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterText.textDirection) : null),
          locale: (tree.flutterText.hasLocale() ? evaluateDartLocaleType(tree.flutterText.locale) : null),
          softWrap: (tree.flutterText.hasSoftWrap() ? tree.flutterText.softWrap : null),
          overflow: (tree.flutterText.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterText.overflow) : null),
          textScaler: (tree.flutterText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterText.textScaler) : null),
          maxLines: (tree.flutterText.hasMaxLines() ? tree.flutterText.maxLines : null),
          semanticsLabel: (tree.flutterText.hasSemanticsLabel() ? tree.flutterText.semanticsLabel : null),
          textWidthBasis: (tree.flutterText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterText.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterText.textHeightBehavior) : null),
          selectionColor: (tree.flutterText.hasSelectionColor() ? evaluateDartColorType(tree.flutterText.selectionColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterTextNamedRich:
      return $flutterSrcWidgetsText.Text.rich(
          (tree.flutterTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterInlineSpanType(tree.flutterTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.flutterTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.flutterTextNamedRich.key) : null),
          style: (tree.flutterTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextNamedRich.style) : null),
          strutStyle: (tree.flutterTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterTextNamedRich.strutStyle) : null),
          textAlign: (tree.flutterTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterTextNamedRich.textAlign) : null),
          textDirection: (tree.flutterTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterTextNamedRich.textDirection) : null),
          locale: (tree.flutterTextNamedRich.hasLocale() ? evaluateDartLocaleType(tree.flutterTextNamedRich.locale) : null),
          softWrap: (tree.flutterTextNamedRich.hasSoftWrap() ? tree.flutterTextNamedRich.softWrap : null),
          overflow: (tree.flutterTextNamedRich.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterTextNamedRich.overflow) : null),
          textScaler: (tree.flutterTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterTextNamedRich.textScaler) : null),
          maxLines: (tree.flutterTextNamedRich.hasMaxLines() ? tree.flutterTextNamedRich.maxLines : null),
          semanticsLabel: (tree.flutterTextNamedRich.hasSemanticsLabel() ? tree.flutterTextNamedRich.semanticsLabel : null),
          textWidthBasis: (tree.flutterTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterTextNamedRich.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterTextNamedRich.textHeightBehavior) : null),
          selectionColor: (tree.flutterTextNamedRich.hasSelectionColor() ? evaluateDartColorType(tree.flutterTextNamedRich.selectionColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.flutterTitle:
      return $flutterSrcWidgetsTitle.Title(
          key: (tree.flutterTitle.hasKey() ? evaluateFlutterKeyType(tree.flutterTitle.key) : null),
          title: (tree.flutterTitle.hasTitle() ? tree.flutterTitle.title : ''),
          color: (tree.flutterTitle.hasColor() ? evaluateRequiredDartColorType(tree.flutterTitle.color) : missing('color')),
          child: (tree.flutterTitle.hasChild() ? evaluateRequiredWidgetType(tree.flutterTitle.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterUnconstrainedBox:
      return $flutterSrcWidgetsBasic.UnconstrainedBox(
          key: (tree.flutterUnconstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterUnconstrainedBox.key) : null),
          child: (tree.flutterUnconstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterUnconstrainedBox.child) : null),
          textDirection: (tree.flutterUnconstrainedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterUnconstrainedBox.textDirection) : null),
          alignment: (tree.flutterUnconstrainedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterUnconstrainedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          constrainedAxis: (tree.flutterUnconstrainedBox.hasConstrainedAxis() ? enums.convertFlutterAxisType(tree.flutterUnconstrainedBox.constrainedAxis) : null),
          clipBehavior: (tree.flutterUnconstrainedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterUnconstrainedBox.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterStatelessWidgetType_Constructor.flutterView:
      return $flutterSrcWidgetsView.View(
          key: (tree.flutterView.hasKey() ? evaluateFlutterKeyType(tree.flutterView.key) : null),
          view: missing('view'),
          child: (tree.flutterView.hasChild() ? evaluateRequiredWidgetType(tree.flutterView.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterViewAnchor:
      return $flutterSrcWidgetsView.ViewAnchor(
          key: (tree.flutterViewAnchor.hasKey() ? evaluateFlutterKeyType(tree.flutterViewAnchor.key) : null),
          view: (tree.flutterViewAnchor.hasView() ? evaluateWidgetType(tree.flutterViewAnchor.view) : null),
          child: (tree.flutterViewAnchor.hasChild() ? evaluateRequiredWidgetType(tree.flutterViewAnchor.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.flutterVisibility:
      return $flutterSrcWidgetsVisibility.Visibility(
          key: (tree.flutterVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibility.key) : null),
          child: (tree.flutterVisibility.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibility.child) : missing('child')),
          replacement: (tree.flutterVisibility.hasReplacement() ? evaluateRequiredWidgetType(tree.flutterVisibility.replacement) : $flutterSrcWidgetsBasic.SizedBox.shrink()),
          visible: (tree.flutterVisibility.hasVisible() ? tree.flutterVisibility.visible : true),
          maintainState: (tree.flutterVisibility.hasMaintainState() ? tree.flutterVisibility.maintainState : false),
          maintainAnimation: (tree.flutterVisibility.hasMaintainAnimation() ? tree.flutterVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterVisibility.hasMaintainSize() ? tree.flutterVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterVisibility.hasMaintainSemantics() ? tree.flutterVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterVisibility.hasMaintainInteractivity() ? tree.flutterVisibility.maintainInteractivity : false));
    case messages.FlutterStatelessWidgetType_Constructor.flutterVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.Visibility.maintain(
          key: (tree.flutterVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibilityNamedMaintain.key) : null),
          child: (tree.flutterVisibilityNamedMaintain.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibilityNamedMaintain.child) : missing('child')),
          visible: (tree.flutterVisibilityNamedMaintain.hasVisible() ? tree.flutterVisibilityNamedMaintain.visible : true));
    case messages.FlutterStatelessWidgetType_Constructor.materialAboutDialog:
      return $flutterSrcMaterialAbout.AboutDialog(
          key: (tree.materialAboutDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAboutDialog.key) : null),
          applicationName: (tree.materialAboutDialog.hasApplicationName() ? tree.materialAboutDialog.applicationName : null),
          applicationVersion: (tree.materialAboutDialog.hasApplicationVersion() ? tree.materialAboutDialog.applicationVersion : null),
          applicationIcon: (tree.materialAboutDialog.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutDialog.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutDialog.hasApplicationLegalese() ? tree.materialAboutDialog.applicationLegalese : null),
          children: tree.materialAboutDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialAboutListTile:
      return $flutterSrcMaterialAbout.AboutListTile(
          key: (tree.materialAboutListTile.hasKey() ? evaluateFlutterKeyType(tree.materialAboutListTile.key) : null),
          icon: (tree.materialAboutListTile.hasIcon() ? evaluateWidgetType(tree.materialAboutListTile.icon) : null),
          child: (tree.materialAboutListTile.hasChild() ? evaluateWidgetType(tree.materialAboutListTile.child) : null),
          applicationName: (tree.materialAboutListTile.hasApplicationName() ? tree.materialAboutListTile.applicationName : null),
          applicationVersion: (tree.materialAboutListTile.hasApplicationVersion() ? tree.materialAboutListTile.applicationVersion : null),
          applicationIcon: (tree.materialAboutListTile.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutListTile.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutListTile.hasApplicationLegalese() ? tree.materialAboutListTile.applicationLegalese : null),
          aboutBoxChildren: tree.materialAboutListTile.aboutBoxChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dense: (tree.materialAboutListTile.hasDense() ? tree.materialAboutListTile.dense : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialActionChip:
      return $flutterSrcMaterialActionChip.ActionChip(
          key: (tree.materialActionChip.hasKey() ? evaluateFlutterKeyType(tree.materialActionChip.key) : null),
          avatar: (tree.materialActionChip.hasAvatar() ? evaluateWidgetType(tree.materialActionChip.avatar) : null),
          label: (tree.materialActionChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChip.label) : missing('label')),
          labelStyle: (tree.materialActionChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChip.labelStyle) : null),
          labelPadding: (tree.materialActionChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChip.hasPressElevation() ? tree.materialActionChip.pressElevation : null),
          tooltip: (tree.materialActionChip.hasTooltip() ? tree.materialActionChip.tooltip : null),
          side: (tree.materialActionChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChip.side) : null),
          shape: (tree.materialActionChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChip.shape) : null),
          clipBehavior: (tree.materialActionChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChip.focusNode) : null),
          autofocus: (tree.materialActionChip.hasAutofocus() ? tree.materialActionChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChip.backgroundColor) : null),
          disabledColor: (tree.materialActionChip.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChip.disabledColor) : null),
          padding: (tree.materialActionChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.padding) : null),
          visualDensity: (tree.materialActionChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChip.materialTapTargetSize) : null),
          elevation: (tree.materialActionChip.hasElevation() ? tree.materialActionChip.elevation : null),
          shadowColor: (tree.materialActionChip.hasShadowColor() ? evaluateDartColorType(tree.materialActionChip.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChip.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChip.iconTheme) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialActionChipNamedElevated:
      return $flutterSrcMaterialActionChip.ActionChip.elevated(
          key: (tree.materialActionChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialActionChipNamedElevated.key) : null),
          avatar: (tree.materialActionChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialActionChipNamedElevated.avatar) : null),
          label: (tree.materialActionChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialActionChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialActionChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChipNamedElevated.hasPressElevation() ? tree.materialActionChipNamedElevated.pressElevation : null),
          tooltip: (tree.materialActionChipNamedElevated.hasTooltip() ? tree.materialActionChipNamedElevated.tooltip : null),
          side: (tree.materialActionChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChipNamedElevated.side) : null),
          shape: (tree.materialActionChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialActionChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialActionChipNamedElevated.hasAutofocus() ? tree.materialActionChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.backgroundColor) : null),
          disabledColor: (tree.materialActionChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.disabledColor) : null),
          padding: (tree.materialActionChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.padding) : null),
          visualDensity: (tree.materialActionChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialActionChipNamedElevated.hasElevation() ? tree.materialActionChipNamedElevated.elevation : null),
          shadowColor: (tree.materialActionChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChipNamedElevated.iconTheme) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialAdaptiveTextSelectionToolbar:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar(
          key: (tree.materialAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbar.key) : null),
          children: tree.materialAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editable(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.FlutterStatelessWidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editableText(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterStatelessWidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedSelectableRegion:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.selectableRegion(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.key) : null),
          selectableRegionState: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasSelectableRegionState() ? evaluateRequiredFlutterSelectableRegionStateType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.selectableRegionState) : missing('selectableRegionState')));
    case messages.FlutterStatelessWidgetType_Constructor.materialAlertDialog:
      return $flutterSrcMaterialDialog.AlertDialog(
          key: (tree.materialAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialog.key) : null),
          icon: (tree.materialAlertDialog.hasIcon() ? evaluateWidgetType(tree.materialAlertDialog.icon) : null),
          iconPadding: (tree.materialAlertDialog.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.iconPadding) : null),
          iconColor: (tree.materialAlertDialog.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialog.iconColor) : null),
          title: (tree.materialAlertDialog.hasTitle() ? evaluateWidgetType(tree.materialAlertDialog.title) : null),
          titlePadding: (tree.materialAlertDialog.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.titleTextStyle) : null),
          content: (tree.materialAlertDialog.hasContent() ? evaluateWidgetType(tree.materialAlertDialog.content) : null),
          contentPadding: (tree.materialAlertDialog.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialog.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.contentTextStyle) : null),
          actions: tree.materialAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialog.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialog.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialog.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialog.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialog.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialog.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialog.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialog.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialog.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialog.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialog.backgroundColor) : null),
          elevation: (tree.materialAlertDialog.hasElevation() ? tree.materialAlertDialog.elevation : null),
          shadowColor: (tree.materialAlertDialog.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialog.hasSemanticLabel() ? tree.materialAlertDialog.semanticLabel : null),
          insetPadding: (tree.materialAlertDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialAlertDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialAlertDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialog.shape) : null),
          alignment: (tree.materialAlertDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialog.alignment) : null),
          scrollable: (tree.materialAlertDialog.hasScrollable() ? tree.materialAlertDialog.scrollable : false));
    case messages.FlutterStatelessWidgetType_Constructor.materialAlertDialogNamedAdaptive:
      return $flutterSrcMaterialDialog.AlertDialog.adaptive(
          key: (tree.materialAlertDialogNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialogNamedAdaptive.key) : null),
          icon: (tree.materialAlertDialogNamedAdaptive.hasIcon() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.icon) : null),
          iconPadding: (tree.materialAlertDialogNamedAdaptive.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.iconPadding) : null),
          iconColor: (tree.materialAlertDialogNamedAdaptive.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.iconColor) : null),
          title: (tree.materialAlertDialogNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.title) : null),
          titlePadding: (tree.materialAlertDialogNamedAdaptive.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialogNamedAdaptive.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.titleTextStyle) : null),
          content: (tree.materialAlertDialogNamedAdaptive.hasContent() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.content) : null),
          contentPadding: (tree.materialAlertDialogNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialogNamedAdaptive.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.contentTextStyle) : null),
          actions: tree.materialAlertDialogNamedAdaptive.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialogNamedAdaptive.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialogNamedAdaptive.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialogNamedAdaptive.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialogNamedAdaptive.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialogNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.backgroundColor) : null),
          elevation: (tree.materialAlertDialogNamedAdaptive.hasElevation() ? tree.materialAlertDialogNamedAdaptive.elevation : null),
          shadowColor: (tree.materialAlertDialogNamedAdaptive.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialogNamedAdaptive.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialogNamedAdaptive.hasSemanticLabel() ? tree.materialAlertDialogNamedAdaptive.semanticLabel : null),
          insetPadding: (tree.materialAlertDialogNamedAdaptive.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialogNamedAdaptive.insetPadding) : missing('insetPadding')),
          clipBehavior: (tree.materialAlertDialogNamedAdaptive.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialogNamedAdaptive.clipBehavior) : missing('clipBehavior')),
          shape: (tree.materialAlertDialogNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialogNamedAdaptive.shape) : null),
          alignment: (tree.materialAlertDialogNamedAdaptive.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialogNamedAdaptive.alignment) : null),
          scrollable: (tree.materialAlertDialogNamedAdaptive.hasScrollable() ? tree.materialAlertDialogNamedAdaptive.scrollable : missing('scrollable')),
          scrollController: (tree.materialAlertDialogNamedAdaptive.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.scrollController) : null),
          actionScrollController: (tree.materialAlertDialogNamedAdaptive.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.actionScrollController) : null),
          insetAnimationDuration: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialAlertDialogNamedAdaptive.insetAnimationDuration) : missing('insetAnimationDuration')),
          insetAnimationCurve: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAlertDialogNamedAdaptive.insetAnimationCurve) : missing('insetAnimationCurve')));
    case messages.FlutterStatelessWidgetType_Constructor.materialBackButton:
      return $flutterSrcMaterialActionButtons.BackButton(
          key: (tree.materialBackButton.hasKey() ? evaluateFlutterKeyType(tree.materialBackButton.key) : null),
          color: (tree.materialBackButton.hasColor() ? evaluateDartColorType(tree.materialBackButton.color) : null),
          style: (tree.materialBackButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialBackButton.style) : null),
          onPressed: null);
    case messages.FlutterStatelessWidgetType_Constructor.materialBackButtonIcon:
      return $flutterSrcMaterialActionButtons.BackButtonIcon(
          key: (tree.materialBackButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialBackButtonIcon.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialBadge:
      return $flutterSrcMaterialBadge.Badge(
          key: (tree.materialBadge.hasKey() ? evaluateFlutterKeyType(tree.materialBadge.key) : null),
          backgroundColor: (tree.materialBadge.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadge.backgroundColor) : null),
          textColor: (tree.materialBadge.hasTextColor() ? evaluateDartColorType(tree.materialBadge.textColor) : null),
          smallSize: (tree.materialBadge.hasSmallSize() ? tree.materialBadge.smallSize : null),
          largeSize: (tree.materialBadge.hasLargeSize() ? tree.materialBadge.largeSize : null),
          textStyle: (tree.materialBadge.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadge.textStyle) : null),
          padding: (tree.materialBadge.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadge.padding) : null),
          alignment: (tree.materialBadge.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadge.alignment) : null),
          offset: (tree.materialBadge.hasOffset() ? evaluateDartOffsetType(tree.materialBadge.offset) : null),
          label: (tree.materialBadge.hasLabel() ? evaluateWidgetType(tree.materialBadge.label) : null),
          isLabelVisible: (tree.materialBadge.hasIsLabelVisible() ? tree.materialBadge.isLabelVisible : true),
          child: (tree.materialBadge.hasChild() ? evaluateWidgetType(tree.materialBadge.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialBadgeNamedCount:
      return $flutterSrcMaterialBadge.Badge.count(
          key: (tree.materialBadgeNamedCount.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeNamedCount.key) : null),
          backgroundColor: (tree.materialBadgeNamedCount.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.backgroundColor) : null),
          textColor: (tree.materialBadgeNamedCount.hasTextColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.textColor) : null),
          smallSize: (tree.materialBadgeNamedCount.hasSmallSize() ? tree.materialBadgeNamedCount.smallSize : null),
          largeSize: (tree.materialBadgeNamedCount.hasLargeSize() ? tree.materialBadgeNamedCount.largeSize : null),
          textStyle: (tree.materialBadgeNamedCount.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadgeNamedCount.textStyle) : null),
          padding: (tree.materialBadgeNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadgeNamedCount.padding) : null),
          alignment: (tree.materialBadgeNamedCount.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadgeNamedCount.alignment) : null),
          offset: (tree.materialBadgeNamedCount.hasOffset() ? evaluateDartOffsetType(tree.materialBadgeNamedCount.offset) : null),
          count: (tree.materialBadgeNamedCount.hasCount() ? tree.materialBadgeNamedCount.count : missing('count')),
          isLabelVisible: (tree.materialBadgeNamedCount.hasIsLabelVisible() ? tree.materialBadgeNamedCount.isLabelVisible : true),
          child: (tree.materialBadgeNamedCount.hasChild() ? evaluateWidgetType(tree.materialBadgeNamedCount.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialButtonBar:
      return $flutterSrcMaterialButtonBar.ButtonBar(
          key: (tree.materialButtonBar.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBar.key) : null),
          alignment: (tree.materialButtonBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialButtonBar.alignment) : null),
          mainAxisSize: (tree.materialButtonBar.hasMainAxisSize() ? enums.convertFlutterMainAxisSizeType(tree.materialButtonBar.mainAxisSize) : null),
          buttonTextTheme: (tree.materialButtonBar.hasButtonTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialButtonBar.buttonTextTheme) : null),
          buttonMinWidth: (tree.materialButtonBar.hasButtonMinWidth() ? tree.materialButtonBar.buttonMinWidth : null),
          buttonHeight: (tree.materialButtonBar.hasButtonHeight() ? tree.materialButtonBar.buttonHeight : null),
          buttonPadding: (tree.materialButtonBar.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonBar.buttonPadding) : null),
          buttonAlignedDropdown: (tree.materialButtonBar.hasButtonAlignedDropdown() ? tree.materialButtonBar.buttonAlignedDropdown : null),
          layoutBehavior: (tree.materialButtonBar.hasLayoutBehavior() ? enums.convertMaterialButtonBarLayoutBehaviorType(tree.materialButtonBar.layoutBehavior) : null),
          overflowDirection: (tree.materialButtonBar.hasOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialButtonBar.overflowDirection) : null),
          overflowButtonSpacing: (tree.materialButtonBar.hasOverflowButtonSpacing() ? tree.materialButtonBar.overflowButtonSpacing : null),
          children: tree.materialButtonBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialCard:
      return $flutterSrcMaterialCard.Card(
          key: (tree.materialCard.hasKey() ? evaluateFlutterKeyType(tree.materialCard.key) : null),
          color: (tree.materialCard.hasColor() ? evaluateDartColorType(tree.materialCard.color) : null),
          shadowColor: (tree.materialCard.hasShadowColor() ? evaluateDartColorType(tree.materialCard.shadowColor) : null),
          surfaceTintColor: (tree.materialCard.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialCard.surfaceTintColor) : null),
          elevation: (tree.materialCard.hasElevation() ? tree.materialCard.elevation : null),
          shape: (tree.materialCard.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCard.shape) : null),
          borderOnForeground: (tree.materialCard.hasBorderOnForeground() ? tree.materialCard.borderOnForeground : true),
          margin: (tree.materialCard.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCard.margin) : null),
          clipBehavior: (tree.materialCard.hasClipBehavior() ? enums.convertDartClipType(tree.materialCard.clipBehavior) : null),
          child: (tree.materialCard.hasChild() ? evaluateWidgetType(tree.materialCard.child) : null),
          semanticContainer: (tree.materialCard.hasSemanticContainer() ? tree.materialCard.semanticContainer : true));
    case messages.FlutterStatelessWidgetType_Constructor.materialCheckboxListTile:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile(
          key: (tree.materialCheckboxListTile.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTile.key) : null),
          value: (tree.materialCheckboxListTile.hasValue() ? tree.materialCheckboxListTile.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTile.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTile.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTile.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTile.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTile.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTile.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTile.hasSplashRadius() ? tree.materialCheckboxListTile.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTile.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTile.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTile.focusNode) : null),
          autofocus: (tree.materialCheckboxListTile.hasAutofocus() ? tree.materialCheckboxListTile.autofocus : false),
          shape: (tree.materialCheckboxListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTile.shape) : null),
          side: (tree.materialCheckboxListTile.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTile.side) : null),
          isError: (tree.materialCheckboxListTile.hasIsError() ? tree.materialCheckboxListTile.isError : false),
          enabled: (tree.materialCheckboxListTile.hasEnabled() ? tree.materialCheckboxListTile.enabled : null),
          tileColor: (tree.materialCheckboxListTile.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.tileColor) : null),
          title: (tree.materialCheckboxListTile.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTile.title) : null),
          subtitle: (tree.materialCheckboxListTile.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTile.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTile.hasIsThreeLine() ? tree.materialCheckboxListTile.isThreeLine : false),
          dense: (tree.materialCheckboxListTile.hasDense() ? tree.materialCheckboxListTile.dense : null),
          secondary: (tree.materialCheckboxListTile.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTile.secondary) : null),
          selected: (tree.materialCheckboxListTile.hasSelected() ? tree.materialCheckboxListTile.selected : false),
          controlAffinity: (tree.materialCheckboxListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTile.contentPadding) : null),
          tristate: (tree.materialCheckboxListTile.hasTristate() ? tree.materialCheckboxListTile.tristate : false),
          checkboxShape: (tree.materialCheckboxListTile.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTile.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTile.hasEnableFeedback() ? tree.materialCheckboxListTile.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTile.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTile.checkboxSemanticLabel : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialCheckboxListTileNamedAdaptive:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile.adaptive(
          key: (tree.materialCheckboxListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTileNamedAdaptive.key) : null),
          value: (tree.materialCheckboxListTileNamedAdaptive.hasValue() ? tree.materialCheckboxListTileNamedAdaptive.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTileNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTileNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxListTileNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTileNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTileNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTileNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxListTileNamedAdaptive.hasAutofocus() ? tree.materialCheckboxListTileNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTileNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxListTileNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTileNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxListTileNamedAdaptive.hasIsError() ? tree.materialCheckboxListTileNamedAdaptive.isError : false),
          enabled: (tree.materialCheckboxListTileNamedAdaptive.hasEnabled() ? tree.materialCheckboxListTileNamedAdaptive.enabled : null),
          tileColor: (tree.materialCheckboxListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialCheckboxListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialCheckboxListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTileNamedAdaptive.hasIsThreeLine() ? tree.materialCheckboxListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialCheckboxListTileNamedAdaptive.hasDense() ? tree.materialCheckboxListTileNamedAdaptive.dense : null),
          secondary: (tree.materialCheckboxListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialCheckboxListTileNamedAdaptive.hasSelected() ? tree.materialCheckboxListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialCheckboxListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTileNamedAdaptive.contentPadding) : null),
          tristate: (tree.materialCheckboxListTileNamedAdaptive.hasTristate() ? tree.materialCheckboxListTileNamedAdaptive.tristate : false),
          checkboxShape: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTileNamedAdaptive.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTileNamedAdaptive.hasEnableFeedback() ? tree.materialCheckboxListTileNamedAdaptive.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTileNamedAdaptive.checkboxSemanticLabel : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialCheckboxMenuButton:
      return $flutterSrcMaterialMenuAnchor.CheckboxMenuButton(
          key: (tree.materialCheckboxMenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxMenuButton.key) : null),
          value: (tree.materialCheckboxMenuButton.hasValue() ? tree.materialCheckboxMenuButton.value : null),
          tristate: (tree.materialCheckboxMenuButton.hasTristate() ? tree.materialCheckboxMenuButton.tristate : false),
          isError: (tree.materialCheckboxMenuButton.hasIsError() ? tree.materialCheckboxMenuButton.isError : false),
          onChanged: null,
          onHover: null,
          onFocusChange: null,
          focusNode: (tree.materialCheckboxMenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxMenuButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialCheckboxMenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCheckboxMenuButton.style) : null),
          statesController: (tree.materialCheckboxMenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialCheckboxMenuButton.statesController) : null),
          clipBehavior: (tree.materialCheckboxMenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialCheckboxMenuButton.clipBehavior) : $dartUi.Clip.none),
          trailingIcon: (tree.materialCheckboxMenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialCheckboxMenuButton.trailingIcon) : null),
          closeOnActivate: (tree.materialCheckboxMenuButton.hasCloseOnActivate() ? tree.materialCheckboxMenuButton.closeOnActivate : true),
          child: (tree.materialCheckboxMenuButton.hasChild() ? evaluateWidgetType(tree.materialCheckboxMenuButton.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialChip:
      return $flutterSrcMaterialChip.Chip(
          key: (tree.materialChip.hasKey() ? evaluateFlutterKeyType(tree.materialChip.key) : null),
          avatar: (tree.materialChip.hasAvatar() ? evaluateWidgetType(tree.materialChip.avatar) : null),
          label: (tree.materialChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChip.label) : missing('label')),
          labelStyle: (tree.materialChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChip.labelStyle) : null),
          labelPadding: (tree.materialChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.labelPadding) : null),
          deleteIcon: (tree.materialChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialChip.hasDeleteButtonTooltipMessage() ? tree.materialChip.deleteButtonTooltipMessage : null),
          side: (tree.materialChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChip.side) : null),
          shape: (tree.materialChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChip.shape) : null),
          clipBehavior: (tree.materialChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChip.focusNode) : null),
          autofocus: (tree.materialChip.hasAutofocus() ? tree.materialChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChip.backgroundColor) : null),
          padding: (tree.materialChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.padding) : null),
          visualDensity: (tree.materialChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChip.materialTapTargetSize) : null),
          elevation: (tree.materialChip.hasElevation() ? tree.materialChip.elevation : null),
          shadowColor: (tree.materialChip.hasShadowColor() ? evaluateDartColorType(tree.materialChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChip.iconTheme) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialChoiceChip:
      return $flutterSrcMaterialChoiceChip.ChoiceChip(
          key: (tree.materialChoiceChip.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChip.key) : null),
          avatar: (tree.materialChoiceChip.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChip.avatar) : null),
          label: (tree.materialChoiceChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChip.label) : missing('label')),
          labelStyle: (tree.materialChoiceChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChip.labelStyle) : null),
          labelPadding: (tree.materialChoiceChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChip.hasPressElevation() ? tree.materialChoiceChip.pressElevation : null),
          selected: (tree.materialChoiceChip.hasSelected() ? tree.materialChoiceChip.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChip.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedColor) : null),
          disabledColor: (tree.materialChoiceChip.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChip.disabledColor) : null),
          tooltip: (tree.materialChoiceChip.hasTooltip() ? tree.materialChoiceChip.tooltip : null),
          side: (tree.materialChoiceChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChip.side) : null),
          shape: (tree.materialChoiceChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChip.shape) : null),
          clipBehavior: (tree.materialChoiceChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChip.focusNode) : null),
          autofocus: (tree.materialChoiceChip.hasAutofocus() ? tree.materialChoiceChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChip.backgroundColor) : null),
          padding: (tree.materialChoiceChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.padding) : null),
          visualDensity: (tree.materialChoiceChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChip.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChip.hasElevation() ? tree.materialChoiceChip.elevation : null),
          shadowColor: (tree.materialChoiceChip.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChip.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChip.hasShowCheckmark() ? tree.materialChoiceChip.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChip.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatelessWidgetType_Constructor.materialChoiceChipNamedElevated:
      return $flutterSrcMaterialChoiceChip.ChoiceChip.elevated(
          key: (tree.materialChoiceChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChipNamedElevated.key) : null),
          avatar: (tree.materialChoiceChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChipNamedElevated.avatar) : null),
          label: (tree.materialChoiceChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialChoiceChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialChoiceChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChipNamedElevated.hasPressElevation() ? tree.materialChoiceChipNamedElevated.pressElevation : null),
          selected: (tree.materialChoiceChipNamedElevated.hasSelected() ? tree.materialChoiceChipNamedElevated.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedColor) : null),
          disabledColor: (tree.materialChoiceChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.disabledColor) : null),
          tooltip: (tree.materialChoiceChipNamedElevated.hasTooltip() ? tree.materialChoiceChipNamedElevated.tooltip : null),
          side: (tree.materialChoiceChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChipNamedElevated.side) : null),
          shape: (tree.materialChoiceChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialChoiceChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialChoiceChipNamedElevated.hasAutofocus() ? tree.materialChoiceChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialChoiceChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.padding) : null),
          visualDensity: (tree.materialChoiceChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChipNamedElevated.hasElevation() ? tree.materialChoiceChipNamedElevated.elevation : null),
          shadowColor: (tree.materialChoiceChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChipNamedElevated.hasShowCheckmark() ? tree.materialChoiceChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatelessWidgetType_Constructor.materialCircleAvatar:
      return $flutterSrcMaterialCircleAvatar.CircleAvatar(
          key: (tree.materialCircleAvatar.hasKey() ? evaluateFlutterKeyType(tree.materialCircleAvatar.key) : null),
          child: (tree.materialCircleAvatar.hasChild() ? evaluateWidgetType(tree.materialCircleAvatar.child) : null),
          backgroundColor: (tree.materialCircleAvatar.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.backgroundColor) : null),
          backgroundImage: null,
          foregroundImage: null,
          onBackgroundImageError: null,
          onForegroundImageError: null,
          foregroundColor: (tree.materialCircleAvatar.hasForegroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.foregroundColor) : null),
          radius: (tree.materialCircleAvatar.hasRadius() ? tree.materialCircleAvatar.radius : null),
          minRadius: (tree.materialCircleAvatar.hasMinRadius() ? tree.materialCircleAvatar.minRadius : null),
          maxRadius: (tree.materialCircleAvatar.hasMaxRadius() ? tree.materialCircleAvatar.maxRadius : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialCloseButton:
      return $flutterSrcMaterialActionButtons.CloseButton(
          key: (tree.materialCloseButton.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButton.key) : null),
          color: (tree.materialCloseButton.hasColor() ? evaluateDartColorType(tree.materialCloseButton.color) : null),
          onPressed: null,
          style: (tree.materialCloseButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCloseButton.style) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialCloseButtonIcon:
      return $flutterSrcMaterialActionButtons.CloseButtonIcon(
          key: (tree.materialCloseButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButtonIcon.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDataTable:
      return $flutterSrcMaterialDataTable.DataTable(
          key: (tree.materialDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialDataTable.key) : null),
          columns: tree.materialDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialDataTable.hasSortColumnIndex() ? tree.materialDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialDataTable.hasSortAscending() ? tree.materialDataTable.sortAscending : true),
          onSelectAll: null,
          decoration: (tree.materialDataTable.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDataTable.decoration) : null),
          dataRowColor: null,
          dataRowMinHeight: (tree.materialDataTable.hasDataRowMinHeight() ? tree.materialDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialDataTable.hasDataRowMaxHeight() ? tree.materialDataTable.dataRowMaxHeight : null),
          dataTextStyle: (tree.materialDataTable.hasDataTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.dataTextStyle) : null),
          headingRowColor: null,
          headingRowHeight: (tree.materialDataTable.hasHeadingRowHeight() ? tree.materialDataTable.headingRowHeight : null),
          headingTextStyle: (tree.materialDataTable.hasHeadingTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.headingTextStyle) : null),
          horizontalMargin: (tree.materialDataTable.hasHorizontalMargin() ? tree.materialDataTable.horizontalMargin : null),
          columnSpacing: (tree.materialDataTable.hasColumnSpacing() ? tree.materialDataTable.columnSpacing : null),
          showCheckboxColumn: (tree.materialDataTable.hasShowCheckboxColumn() ? tree.materialDataTable.showCheckboxColumn : true),
          showBottomBorder: (tree.materialDataTable.hasShowBottomBorder() ? tree.materialDataTable.showBottomBorder : false),
          dividerThickness: (tree.materialDataTable.hasDividerThickness() ? tree.materialDataTable.dividerThickness : null),
          rows: tree.materialDataTable.rows.map((e) => evaluateRequiredMaterialDataRowType(e)).toList(),
          checkboxHorizontalMargin: (tree.materialDataTable.hasCheckboxHorizontalMargin() ? tree.materialDataTable.checkboxHorizontalMargin : null),
          border: (tree.materialDataTable.hasBorder() ? evaluateFlutterTableBorderType(tree.materialDataTable.border) : null),
          clipBehavior: (tree.materialDataTable.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDataTable.clipBehavior) : $dartUi.Clip.none));
    case messages.FlutterStatelessWidgetType_Constructor.materialDesktopTextSelectionToolbar:
      return $flutterSrcMaterialDesktopTextSelectionToolbar.DesktopTextSelectionToolbar(
          key: (tree.materialDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.materialDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.materialDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialDesktopTextSelectionToolbarButton:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton(
          key: (tree.materialDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.materialDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.materialDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.materialDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton.text(
          key: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButtonNamedText.key) : null),
          context: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.materialDesktopTextSelectionToolbarButtonNamedText.context) : missing('context')),
          onPressed: null,
          text: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.materialDesktopTextSelectionToolbarButtonNamedText.text : missing('text')));
    case messages.FlutterStatelessWidgetType_Constructor.materialDialog:
      return $flutterSrcMaterialDialog.Dialog(
          key: (tree.materialDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDialog.key) : null),
          backgroundColor: (tree.materialDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialog.backgroundColor) : null),
          elevation: (tree.materialDialog.hasElevation() ? tree.materialDialog.elevation : null),
          shadowColor: (tree.materialDialog.hasShadowColor() ? evaluateDartColorType(tree.materialDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDialog.surfaceTintColor) : null),
          insetAnimationDuration: (tree.materialDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.materialDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          insetPadding: (tree.materialDialog.hasInsetPadding() ? evaluateFlutterEdgeInsetsType(tree.materialDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDialog.shape) : null),
          alignment: (tree.materialDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialDialog.alignment) : null),
          child: (tree.materialDialog.hasChild() ? evaluateWidgetType(tree.materialDialog.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDialogNamedFullscreen:
      return $flutterSrcMaterialDialog.Dialog.fullscreen(
          key: (tree.materialDialogNamedFullscreen.hasKey() ? evaluateFlutterKeyType(tree.materialDialogNamedFullscreen.key) : null),
          backgroundColor: (tree.materialDialogNamedFullscreen.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialogNamedFullscreen.backgroundColor) : null),
          insetAnimationDuration: (tree.materialDialogNamedFullscreen.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialogNamedFullscreen.insetAnimationDuration) : $dartCore.Duration.zero),
          insetAnimationCurve: (tree.materialDialogNamedFullscreen.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialogNamedFullscreen.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          child: (tree.materialDialogNamedFullscreen.hasChild() ? evaluateWidgetType(tree.materialDialogNamedFullscreen.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDivider:
      return $flutterSrcMaterialDivider.Divider(
          key: (tree.materialDivider.hasKey() ? evaluateFlutterKeyType(tree.materialDivider.key) : null),
          height: (tree.materialDivider.hasHeight() ? tree.materialDivider.height : null),
          thickness: (tree.materialDivider.hasThickness() ? tree.materialDivider.thickness : null),
          indent: (tree.materialDivider.hasIndent() ? tree.materialDivider.indent : null),
          endIndent: (tree.materialDivider.hasEndIndent() ? tree.materialDivider.endIndent : null),
          color: (tree.materialDivider.hasColor() ? evaluateDartColorType(tree.materialDivider.color) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDrawer:
      return $flutterSrcMaterialDrawer.Drawer(
          key: (tree.materialDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialDrawer.key) : null),
          backgroundColor: (tree.materialDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialDrawer.backgroundColor) : null),
          elevation: (tree.materialDrawer.hasElevation() ? tree.materialDrawer.elevation : null),
          shadowColor: (tree.materialDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDrawer.surfaceTintColor) : null),
          shape: (tree.materialDrawer.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDrawer.shape) : null),
          width: (tree.materialDrawer.hasWidth() ? tree.materialDrawer.width : null),
          child: (tree.materialDrawer.hasChild() ? evaluateWidgetType(tree.materialDrawer.child) : null),
          semanticLabel: (tree.materialDrawer.hasSemanticLabel() ? tree.materialDrawer.semanticLabel : null),
          clipBehavior: (tree.materialDrawer.hasClipBehavior() ? enums.convertDartClipType(tree.materialDrawer.clipBehavior) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDrawerButton:
      return $flutterSrcMaterialActionButtons.DrawerButton(
          key: (tree.materialDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButton.key) : null),
          style: (tree.materialDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialDrawerButton.style) : null),
          onPressed: null);
    case messages.FlutterStatelessWidgetType_Constructor.materialDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.DrawerButtonIcon(
          key: (tree.materialDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButtonIcon.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDrawerHeader:
      return $flutterSrcMaterialDrawerHeader.DrawerHeader(
          key: (tree.materialDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerHeader.key) : null),
          decoration: (tree.materialDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDrawerHeader.decoration) : null),
          margin: (tree.materialDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          padding: (tree.materialDrawerHeader.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0)),
          duration: (tree.materialDrawerHeader.hasDuration() ? evaluateRequiredDartDurationType(tree.materialDrawerHeader.duration) : $dartCore.Duration(milliseconds: 250)),
          curve: (tree.materialDrawerHeader.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDrawerHeader.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn),
          child: (tree.materialDrawerHeader.hasChild() ? evaluateWidgetType(tree.materialDrawerHeader.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialDropdownMenuItem:
      return $flutterSrcMaterialDropdown.DropdownMenuItem(
          key: (tree.materialDropdownMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialDropdownMenuItem.hasEnabled() ? tree.materialDropdownMenuItem.enabled : true),
          alignment: (tree.materialDropdownMenuItem.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownMenuItem.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          child: (tree.materialDropdownMenuItem.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuItem.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.materialEndDrawerButton:
      return $flutterSrcMaterialActionButtons.EndDrawerButton(
          key: (tree.materialEndDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButton.key) : null),
          style: (tree.materialEndDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialEndDrawerButton.style) : null),
          onPressed: null);
    case messages.FlutterStatelessWidgetType_Constructor.materialEndDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.EndDrawerButtonIcon(
          key: (tree.materialEndDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButtonIcon.key) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialFilterChip:
      return $flutterSrcMaterialFilterChip.FilterChip(
          key: (tree.materialFilterChip.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChip.key) : null),
          avatar: (tree.materialFilterChip.hasAvatar() ? evaluateWidgetType(tree.materialFilterChip.avatar) : null),
          label: (tree.materialFilterChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChip.label) : missing('label')),
          labelStyle: (tree.materialFilterChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChip.labelStyle) : null),
          labelPadding: (tree.materialFilterChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.labelPadding) : null),
          selected: (tree.materialFilterChip.hasSelected() ? tree.materialFilterChip.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChip.hasPressElevation() ? tree.materialFilterChip.pressElevation : null),
          disabledColor: (tree.materialFilterChip.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChip.disabledColor) : null),
          selectedColor: (tree.materialFilterChip.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChip.selectedColor) : null),
          tooltip: (tree.materialFilterChip.hasTooltip() ? tree.materialFilterChip.tooltip : null),
          side: (tree.materialFilterChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChip.side) : null),
          shape: (tree.materialFilterChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChip.shape) : null),
          clipBehavior: (tree.materialFilterChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChip.focusNode) : null),
          autofocus: (tree.materialFilterChip.hasAutofocus() ? tree.materialFilterChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChip.backgroundColor) : null),
          padding: (tree.materialFilterChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.padding) : null),
          visualDensity: (tree.materialFilterChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChip.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChip.hasElevation() ? tree.materialFilterChip.elevation : null),
          shadowColor: (tree.materialFilterChip.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChip.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChip.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChip.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChip.hasShowCheckmark() ? tree.materialFilterChip.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChip.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatelessWidgetType_Constructor.materialFilterChipNamedElevated:
      return $flutterSrcMaterialFilterChip.FilterChip.elevated(
          key: (tree.materialFilterChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChipNamedElevated.key) : null),
          avatar: (tree.materialFilterChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialFilterChipNamedElevated.avatar) : null),
          label: (tree.materialFilterChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialFilterChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialFilterChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.labelPadding) : null),
          selected: (tree.materialFilterChipNamedElevated.hasSelected() ? tree.materialFilterChipNamedElevated.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChipNamedElevated.hasPressElevation() ? tree.materialFilterChipNamedElevated.pressElevation : null),
          disabledColor: (tree.materialFilterChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.disabledColor) : null),
          selectedColor: (tree.materialFilterChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedColor) : null),
          tooltip: (tree.materialFilterChipNamedElevated.hasTooltip() ? tree.materialFilterChipNamedElevated.tooltip : null),
          side: (tree.materialFilterChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChipNamedElevated.side) : null),
          shape: (tree.materialFilterChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialFilterChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialFilterChipNamedElevated.hasAutofocus() ? tree.materialFilterChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialFilterChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.padding) : null),
          visualDensity: (tree.materialFilterChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChipNamedElevated.hasElevation() ? tree.materialFilterChipNamedElevated.elevation : null),
          shadowColor: (tree.materialFilterChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChipNamedElevated.hasShowCheckmark() ? tree.materialFilterChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatelessWidgetType_Constructor.materialFloatingActionButton:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton(
          key: (tree.materialFloatingActionButton.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButton.key) : null),
          child: (tree.materialFloatingActionButton.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButton.child) : null),
          tooltip: (tree.materialFloatingActionButton.hasTooltip() ? tree.materialFloatingActionButton.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButton.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButton.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButton.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButton.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButton.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButton.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButton.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButton.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButton.hasElevation() ? tree.materialFloatingActionButton.elevation : null),
          focusElevation: (tree.materialFloatingActionButton.hasFocusElevation() ? tree.materialFloatingActionButton.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButton.hasHoverElevation() ? tree.materialFloatingActionButton.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButton.hasHighlightElevation() ? tree.materialFloatingActionButton.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButton.hasDisabledElevation() ? tree.materialFloatingActionButton.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          mini: (tree.materialFloatingActionButton.hasMini() ? tree.materialFloatingActionButton.mini : false),
          shape: (tree.materialFloatingActionButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButton.shape) : null),
          clipBehavior: (tree.materialFloatingActionButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButton.focusNode) : null),
          autofocus: (tree.materialFloatingActionButton.hasAutofocus() ? tree.materialFloatingActionButton.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButton.materialTapTargetSize) : null),
          isExtended: (tree.materialFloatingActionButton.hasIsExtended() ? tree.materialFloatingActionButton.isExtended : false),
          enableFeedback: (tree.materialFloatingActionButton.hasEnableFeedback() ? tree.materialFloatingActionButton.enableFeedback : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialFloatingActionButtonNamedExtended:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.extended(
          key: (tree.materialFloatingActionButtonNamedExtended.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedExtended.key) : null),
          tooltip: (tree.materialFloatingActionButtonNamedExtended.hasTooltip() ? tree.materialFloatingActionButtonNamedExtended.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedExtended.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedExtended.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedExtended.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedExtended.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.hoverColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedExtended.hasElevation() ? tree.materialFloatingActionButtonNamedExtended.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedExtended.hasFocusElevation() ? tree.materialFloatingActionButtonNamedExtended.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedExtended.hasHoverElevation() ? tree.materialFloatingActionButtonNamedExtended.hoverElevation : null),
          splashColor: (tree.materialFloatingActionButtonNamedExtended.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.splashColor) : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedExtended.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedExtended.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedExtended.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedExtended.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedExtended.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedExtended.shape) : null),
          isExtended: (tree.materialFloatingActionButtonNamedExtended.hasIsExtended() ? tree.materialFloatingActionButtonNamedExtended.isExtended : true),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedExtended.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedExtended.materialTapTargetSize) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedExtended.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedExtended.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedExtended.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedExtended.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedExtended.hasAutofocus() ? tree.materialFloatingActionButtonNamedExtended.autofocus : false),
          extendedIconLabelSpacing: (tree.materialFloatingActionButtonNamedExtended.hasExtendedIconLabelSpacing() ? tree.materialFloatingActionButtonNamedExtended.extendedIconLabelSpacing : null),
          extendedPadding: (tree.materialFloatingActionButtonNamedExtended.hasExtendedPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFloatingActionButtonNamedExtended.extendedPadding) : null),
          extendedTextStyle: (tree.materialFloatingActionButtonNamedExtended.hasExtendedTextStyle() ? evaluateFlutterTextStyleType(tree.materialFloatingActionButtonNamedExtended.extendedTextStyle) : null),
          icon: (tree.materialFloatingActionButtonNamedExtended.hasIcon() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedExtended.icon) : null),
          label: (tree.materialFloatingActionButtonNamedExtended.hasLabel() ? evaluateRequiredWidgetType(tree.materialFloatingActionButtonNamedExtended.label) : missing('label')),
          enableFeedback: (tree.materialFloatingActionButtonNamedExtended.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedExtended.enableFeedback : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialFloatingActionButtonNamedLarge:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.large(
          key: (tree.materialFloatingActionButtonNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedLarge.key) : null),
          child: (tree.materialFloatingActionButtonNamedLarge.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedLarge.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedLarge.hasTooltip() ? tree.materialFloatingActionButtonNamedLarge.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedLarge.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedLarge.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedLarge.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedLarge.hasElevation() ? tree.materialFloatingActionButtonNamedLarge.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedLarge.hasFocusElevation() ? tree.materialFloatingActionButtonNamedLarge.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedLarge.hasHoverElevation() ? tree.materialFloatingActionButtonNamedLarge.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedLarge.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedLarge.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedLarge.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedLarge.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedLarge.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedLarge.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedLarge.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedLarge.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedLarge.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedLarge.hasAutofocus() ? tree.materialFloatingActionButtonNamedLarge.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedLarge.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedLarge.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedLarge.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedLarge.enableFeedback : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialFloatingActionButtonNamedSmall:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.small(
          key: (tree.materialFloatingActionButtonNamedSmall.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedSmall.key) : null),
          child: (tree.materialFloatingActionButtonNamedSmall.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedSmall.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedSmall.hasTooltip() ? tree.materialFloatingActionButtonNamedSmall.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedSmall.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedSmall.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedSmall.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedSmall.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedSmall.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedSmall.hasElevation() ? tree.materialFloatingActionButtonNamedSmall.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedSmall.hasFocusElevation() ? tree.materialFloatingActionButtonNamedSmall.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedSmall.hasHoverElevation() ? tree.materialFloatingActionButtonNamedSmall.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedSmall.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedSmall.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedSmall.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedSmall.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedSmall.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedSmall.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedSmall.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedSmall.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedSmall.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedSmall.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedSmall.hasAutofocus() ? tree.materialFloatingActionButtonNamedSmall.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedSmall.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedSmall.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedSmall.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedSmall.enableFeedback : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialFlutterLogo:
      return $flutterSrcMaterialFlutterLogo.FlutterLogo(
          key: (tree.materialFlutterLogo.hasKey() ? evaluateFlutterKeyType(tree.materialFlutterLogo.key) : null),
          size: (tree.materialFlutterLogo.hasSize() ? tree.materialFlutterLogo.size : null),
          textColor: (tree.materialFlutterLogo.hasTextColor() ? evaluateRequiredDartColorType(tree.materialFlutterLogo.textColor) : $dartUi.Color(0xFF757575)),
          style: (tree.materialFlutterLogo.hasStyle() ? enums.convertRequiredFlutterFlutterLogoStyleType(tree.materialFlutterLogo.style) : $flutterSrcPaintingFlutterLogo.FlutterLogoStyle.markOnly),
          duration: (tree.materialFlutterLogo.hasDuration() ? evaluateRequiredDartDurationType(tree.materialFlutterLogo.duration) : $dartCore.Duration(milliseconds: 750)),
          curve: (tree.materialFlutterLogo.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialFlutterLogo.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn));
    case messages.FlutterStatelessWidgetType_Constructor.materialGridTile:
      return $flutterSrcMaterialGridTile.GridTile(
          key: (tree.materialGridTile.hasKey() ? evaluateFlutterKeyType(tree.materialGridTile.key) : null),
          header: (tree.materialGridTile.hasHeader() ? evaluateWidgetType(tree.materialGridTile.header) : null),
          footer: (tree.materialGridTile.hasFooter() ? evaluateWidgetType(tree.materialGridTile.footer) : null),
          child: (tree.materialGridTile.hasChild() ? evaluateRequiredWidgetType(tree.materialGridTile.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.materialGridTileBar:
      return $flutterSrcMaterialGridTileBar.GridTileBar(
          key: (tree.materialGridTileBar.hasKey() ? evaluateFlutterKeyType(tree.materialGridTileBar.key) : null),
          backgroundColor: (tree.materialGridTileBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialGridTileBar.backgroundColor) : null),
          leading: (tree.materialGridTileBar.hasLeading() ? evaluateWidgetType(tree.materialGridTileBar.leading) : null),
          title: (tree.materialGridTileBar.hasTitle() ? evaluateWidgetType(tree.materialGridTileBar.title) : null),
          subtitle: (tree.materialGridTileBar.hasSubtitle() ? evaluateWidgetType(tree.materialGridTileBar.subtitle) : null),
          trailing: (tree.materialGridTileBar.hasTrailing() ? evaluateWidgetType(tree.materialGridTileBar.trailing) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialIconButton:
      return $flutterSrcMaterialIconButton.IconButton(
          key: (tree.materialIconButton.hasKey() ? evaluateFlutterKeyType(tree.materialIconButton.key) : null),
          iconSize: (tree.materialIconButton.hasIconSize() ? tree.materialIconButton.iconSize : null),
          visualDensity: (tree.materialIconButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButton.visualDensity) : null),
          padding: (tree.materialIconButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButton.padding) : null),
          alignment: (tree.materialIconButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButton.alignment) : null),
          splashRadius: (tree.materialIconButton.hasSplashRadius() ? tree.materialIconButton.splashRadius : null),
          color: (tree.materialIconButton.hasColor() ? evaluateDartColorType(tree.materialIconButton.color) : null),
          focusColor: (tree.materialIconButton.hasFocusColor() ? evaluateDartColorType(tree.materialIconButton.focusColor) : null),
          hoverColor: (tree.materialIconButton.hasHoverColor() ? evaluateDartColorType(tree.materialIconButton.hoverColor) : null),
          highlightColor: (tree.materialIconButton.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButton.highlightColor) : null),
          splashColor: (tree.materialIconButton.hasSplashColor() ? evaluateDartColorType(tree.materialIconButton.splashColor) : null),
          disabledColor: (tree.materialIconButton.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButton.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButton.focusNode) : null),
          autofocus: (tree.materialIconButton.hasAutofocus() ? tree.materialIconButton.autofocus : false),
          tooltip: (tree.materialIconButton.hasTooltip() ? tree.materialIconButton.tooltip : null),
          enableFeedback: (tree.materialIconButton.hasEnableFeedback() ? tree.materialIconButton.enableFeedback : null),
          constraints: (tree.materialIconButton.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButton.constraints) : null),
          style: (tree.materialIconButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButton.style) : null),
          isSelected: (tree.materialIconButton.hasIsSelected() ? tree.materialIconButton.isSelected : null),
          selectedIcon: (tree.materialIconButton.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButton.selectedIcon) : null),
          icon: (tree.materialIconButton.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButton.icon) : missing('icon')));
    case messages.FlutterStatelessWidgetType_Constructor.materialIconButtonNamedFilled:
      return $flutterSrcMaterialIconButton.IconButton.filled(
          key: (tree.materialIconButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilled.key) : null),
          iconSize: (tree.materialIconButtonNamedFilled.hasIconSize() ? tree.materialIconButtonNamedFilled.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilled.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilled.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilled.padding) : null),
          alignment: (tree.materialIconButtonNamedFilled.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilled.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilled.hasSplashRadius() ? tree.materialIconButtonNamedFilled.splashRadius : null),
          color: (tree.materialIconButtonNamedFilled.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.color) : null),
          focusColor: (tree.materialIconButtonNamedFilled.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilled.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilled.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilled.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilled.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilled.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilled.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilled.hasAutofocus() ? tree.materialIconButtonNamedFilled.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilled.hasTooltip() ? tree.materialIconButtonNamedFilled.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilled.hasEnableFeedback() ? tree.materialIconButtonNamedFilled.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilled.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilled.constraints) : null),
          style: (tree.materialIconButtonNamedFilled.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilled.style) : null),
          isSelected: (tree.materialIconButtonNamedFilled.hasIsSelected() ? tree.materialIconButtonNamedFilled.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilled.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilled.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilled.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilled.icon) : missing('icon')));
    case messages.FlutterStatelessWidgetType_Constructor.materialIconButtonNamedFilledTonal:
      return $flutterSrcMaterialIconButton.IconButton.filledTonal(
          key: (tree.materialIconButtonNamedFilledTonal.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilledTonal.key) : null),
          iconSize: (tree.materialIconButtonNamedFilledTonal.hasIconSize() ? tree.materialIconButtonNamedFilledTonal.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilledTonal.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilledTonal.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilledTonal.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilledTonal.padding) : null),
          alignment: (tree.materialIconButtonNamedFilledTonal.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilledTonal.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilledTonal.hasSplashRadius() ? tree.materialIconButtonNamedFilledTonal.splashRadius : null),
          color: (tree.materialIconButtonNamedFilledTonal.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.color) : null),
          focusColor: (tree.materialIconButtonNamedFilledTonal.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilledTonal.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilledTonal.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilledTonal.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilledTonal.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilledTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilledTonal.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilledTonal.hasAutofocus() ? tree.materialIconButtonNamedFilledTonal.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilledTonal.hasTooltip() ? tree.materialIconButtonNamedFilledTonal.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilledTonal.hasEnableFeedback() ? tree.materialIconButtonNamedFilledTonal.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilledTonal.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilledTonal.constraints) : null),
          style: (tree.materialIconButtonNamedFilledTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilledTonal.style) : null),
          isSelected: (tree.materialIconButtonNamedFilledTonal.hasIsSelected() ? tree.materialIconButtonNamedFilledTonal.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilledTonal.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilledTonal.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilledTonal.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilledTonal.icon) : missing('icon')));
    case messages.FlutterStatelessWidgetType_Constructor.materialIconButtonNamedOutlined:
      return $flutterSrcMaterialIconButton.IconButton.outlined(
          key: (tree.materialIconButtonNamedOutlined.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedOutlined.key) : null),
          iconSize: (tree.materialIconButtonNamedOutlined.hasIconSize() ? tree.materialIconButtonNamedOutlined.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedOutlined.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedOutlined.visualDensity) : null),
          padding: (tree.materialIconButtonNamedOutlined.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedOutlined.padding) : null),
          alignment: (tree.materialIconButtonNamedOutlined.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedOutlined.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedOutlined.hasSplashRadius() ? tree.materialIconButtonNamedOutlined.splashRadius : null),
          color: (tree.materialIconButtonNamedOutlined.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.color) : null),
          focusColor: (tree.materialIconButtonNamedOutlined.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedOutlined.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedOutlined.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedOutlined.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedOutlined.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedOutlined.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedOutlined.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedOutlined.hasAutofocus() ? tree.materialIconButtonNamedOutlined.autofocus : false),
          tooltip: (tree.materialIconButtonNamedOutlined.hasTooltip() ? tree.materialIconButtonNamedOutlined.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedOutlined.hasEnableFeedback() ? tree.materialIconButtonNamedOutlined.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedOutlined.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedOutlined.constraints) : null),
          style: (tree.materialIconButtonNamedOutlined.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedOutlined.style) : null),
          isSelected: (tree.materialIconButtonNamedOutlined.hasIsSelected() ? tree.materialIconButtonNamedOutlined.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedOutlined.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedOutlined.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedOutlined.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedOutlined.icon) : missing('icon')));
    case messages.FlutterStatelessWidgetType_Constructor.materialInkResponse:
      return $flutterSrcMaterialInkWell.InkResponse(
          key: (tree.materialInkResponse.hasKey() ? evaluateFlutterKeyType(tree.materialInkResponse.key) : null),
          child: (tree.materialInkResponse.hasChild() ? evaluateWidgetType(tree.materialInkResponse.child) : null),
          onTap: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onDoubleTap: null,
          onLongPress: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          containedInkWell: (tree.materialInkResponse.hasContainedInkWell() ? tree.materialInkResponse.containedInkWell : false),
          highlightShape: (tree.materialInkResponse.hasHighlightShape() ? enums.convertRequiredFlutterBoxShapeType(tree.materialInkResponse.highlightShape) : $flutterSrcPaintingBoxBorder.BoxShape.circle),
          radius: (tree.materialInkResponse.hasRadius() ? tree.materialInkResponse.radius : null),
          borderRadius: (tree.materialInkResponse.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkResponse.borderRadius) : null),
          customBorder: (tree.materialInkResponse.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkResponse.customBorder) : null),
          focusColor: (tree.materialInkResponse.hasFocusColor() ? evaluateDartColorType(tree.materialInkResponse.focusColor) : null),
          hoverColor: (tree.materialInkResponse.hasHoverColor() ? evaluateDartColorType(tree.materialInkResponse.hoverColor) : null),
          highlightColor: (tree.materialInkResponse.hasHighlightColor() ? evaluateDartColorType(tree.materialInkResponse.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkResponse.hasSplashColor() ? evaluateDartColorType(tree.materialInkResponse.splashColor) : null),
          splashFactory: null,
          enableFeedback: (tree.materialInkResponse.hasEnableFeedback() ? tree.materialInkResponse.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkResponse.hasExcludeFromSemantics() ? tree.materialInkResponse.excludeFromSemantics : false),
          focusNode: (tree.materialInkResponse.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkResponse.focusNode) : null),
          canRequestFocus: (tree.materialInkResponse.hasCanRequestFocus() ? tree.materialInkResponse.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkResponse.hasAutofocus() ? tree.materialInkResponse.autofocus : false),
          statesController: (tree.materialInkResponse.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkResponse.statesController) : null),
          hoverDuration: (tree.materialInkResponse.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkResponse.hoverDuration) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialInkWell:
      return $flutterSrcMaterialInkWell.InkWell(
          key: (tree.materialInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialInkWell.key) : null),
          child: (tree.materialInkWell.hasChild() ? evaluateWidgetType(tree.materialInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          focusColor: (tree.materialInkWell.hasFocusColor() ? evaluateDartColorType(tree.materialInkWell.focusColor) : null),
          hoverColor: (tree.materialInkWell.hasHoverColor() ? evaluateDartColorType(tree.materialInkWell.hoverColor) : null),
          highlightColor: (tree.materialInkWell.hasHighlightColor() ? evaluateDartColorType(tree.materialInkWell.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkWell.hasSplashColor() ? evaluateDartColorType(tree.materialInkWell.splashColor) : null),
          splashFactory: null,
          radius: (tree.materialInkWell.hasRadius() ? tree.materialInkWell.radius : null),
          borderRadius: (tree.materialInkWell.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkWell.borderRadius) : null),
          customBorder: (tree.materialInkWell.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkWell.customBorder) : null),
          enableFeedback: (tree.materialInkWell.hasEnableFeedback() ? tree.materialInkWell.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkWell.hasExcludeFromSemantics() ? tree.materialInkWell.excludeFromSemantics : false),
          focusNode: (tree.materialInkWell.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkWell.focusNode) : null),
          canRequestFocus: (tree.materialInkWell.hasCanRequestFocus() ? tree.materialInkWell.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkWell.hasAutofocus() ? tree.materialInkWell.autofocus : false),
          statesController: (tree.materialInkWell.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkWell.statesController) : null),
          hoverDuration: (tree.materialInkWell.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkWell.hoverDuration) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialInputChip:
      return $flutterSrcMaterialInputChip.InputChip(
          key: (tree.materialInputChip.hasKey() ? evaluateFlutterKeyType(tree.materialInputChip.key) : null),
          avatar: (tree.materialInputChip.hasAvatar() ? evaluateWidgetType(tree.materialInputChip.avatar) : null),
          label: (tree.materialInputChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialInputChip.label) : missing('label')),
          labelStyle: (tree.materialInputChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputChip.labelStyle) : null),
          labelPadding: (tree.materialInputChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.labelPadding) : null),
          selected: (tree.materialInputChip.hasSelected() ? tree.materialInputChip.selected : false),
          isEnabled: (tree.materialInputChip.hasIsEnabled() ? tree.materialInputChip.isEnabled : true),
          onSelected: null,
          deleteIcon: (tree.materialInputChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialInputChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialInputChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialInputChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialInputChip.hasDeleteButtonTooltipMessage() ? tree.materialInputChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          pressElevation: (tree.materialInputChip.hasPressElevation() ? tree.materialInputChip.pressElevation : null),
          disabledColor: (tree.materialInputChip.hasDisabledColor() ? evaluateDartColorType(tree.materialInputChip.disabledColor) : null),
          selectedColor: (tree.materialInputChip.hasSelectedColor() ? evaluateDartColorType(tree.materialInputChip.selectedColor) : null),
          tooltip: (tree.materialInputChip.hasTooltip() ? tree.materialInputChip.tooltip : null),
          side: (tree.materialInputChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialInputChip.side) : null),
          shape: (tree.materialInputChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialInputChip.shape) : null),
          clipBehavior: (tree.materialInputChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialInputChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialInputChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInputChip.focusNode) : null),
          autofocus: (tree.materialInputChip.hasAutofocus() ? tree.materialInputChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialInputChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialInputChip.backgroundColor) : null),
          padding: (tree.materialInputChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.padding) : null),
          visualDensity: (tree.materialInputChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialInputChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialInputChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialInputChip.materialTapTargetSize) : null),
          elevation: (tree.materialInputChip.hasElevation() ? tree.materialInputChip.elevation : null),
          shadowColor: (tree.materialInputChip.hasShadowColor() ? evaluateDartColorType(tree.materialInputChip.shadowColor) : null),
          surfaceTintColor: (tree.materialInputChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialInputChip.surfaceTintColor) : null),
          iconTheme: (tree.materialInputChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialInputChip.iconTheme) : null),
          selectedShadowColor: (tree.materialInputChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialInputChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialInputChip.hasShowCheckmark() ? tree.materialInputChip.showCheckmark : null),
          checkmarkColor: (tree.materialInputChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialInputChip.checkmarkColor) : null),
          avatarBorder: (tree.materialInputChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialInputChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.FlutterStatelessWidgetType_Constructor.materialListTile:
      return $flutterSrcMaterialListTile.ListTile(
          key: (tree.materialListTile.hasKey() ? evaluateFlutterKeyType(tree.materialListTile.key) : null),
          leading: (tree.materialListTile.hasLeading() ? evaluateWidgetType(tree.materialListTile.leading) : null),
          title: (tree.materialListTile.hasTitle() ? evaluateWidgetType(tree.materialListTile.title) : null),
          subtitle: (tree.materialListTile.hasSubtitle() ? evaluateWidgetType(tree.materialListTile.subtitle) : null),
          trailing: (tree.materialListTile.hasTrailing() ? evaluateWidgetType(tree.materialListTile.trailing) : null),
          isThreeLine: (tree.materialListTile.hasIsThreeLine() ? tree.materialListTile.isThreeLine : false),
          dense: (tree.materialListTile.hasDense() ? tree.materialListTile.dense : null),
          visualDensity: (tree.materialListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialListTile.visualDensity) : null),
          shape: (tree.materialListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTile.shape) : null),
          style: (tree.materialListTile.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTile.style) : null),
          selectedColor: (tree.materialListTile.hasSelectedColor() ? evaluateDartColorType(tree.materialListTile.selectedColor) : null),
          iconColor: (tree.materialListTile.hasIconColor() ? evaluateDartColorType(tree.materialListTile.iconColor) : null),
          textColor: (tree.materialListTile.hasTextColor() ? evaluateDartColorType(tree.materialListTile.textColor) : null),
          titleTextStyle: (tree.materialListTile.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.titleTextStyle) : null),
          subtitleTextStyle: (tree.materialListTile.hasSubtitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.subtitleTextStyle) : null),
          leadingAndTrailingTextStyle: (tree.materialListTile.hasLeadingAndTrailingTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.leadingAndTrailingTextStyle) : null),
          contentPadding: (tree.materialListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTile.contentPadding) : null),
          enabled: (tree.materialListTile.hasEnabled() ? tree.materialListTile.enabled : true),
          onTap: null,
          onLongPress: null,
          onFocusChange: null,
          mouseCursor: null,
          selected: (tree.materialListTile.hasSelected() ? tree.materialListTile.selected : false),
          focusColor: (tree.materialListTile.hasFocusColor() ? evaluateDartColorType(tree.materialListTile.focusColor) : null),
          hoverColor: (tree.materialListTile.hasHoverColor() ? evaluateDartColorType(tree.materialListTile.hoverColor) : null),
          splashColor: (tree.materialListTile.hasSplashColor() ? evaluateDartColorType(tree.materialListTile.splashColor) : null),
          focusNode: (tree.materialListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialListTile.focusNode) : null),
          autofocus: (tree.materialListTile.hasAutofocus() ? tree.materialListTile.autofocus : false),
          tileColor: (tree.materialListTile.hasTileColor() ? evaluateDartColorType(tree.materialListTile.tileColor) : null),
          selectedTileColor: (tree.materialListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTile.selectedTileColor) : null),
          enableFeedback: (tree.materialListTile.hasEnableFeedback() ? tree.materialListTile.enableFeedback : null),
          horizontalTitleGap: (tree.materialListTile.hasHorizontalTitleGap() ? tree.materialListTile.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTile.hasMinVerticalPadding() ? tree.materialListTile.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTile.hasMinLeadingWidth() ? tree.materialListTile.minLeadingWidth : null),
          titleAlignment: (tree.materialListTile.hasTitleAlignment() ? enums.convertMaterialListTileTitleAlignmentType(tree.materialListTile.titleAlignment) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialMagnifier:
      return $flutterSrcMaterialMagnifier.Magnifier(
          key: (tree.materialMagnifier.hasKey() ? evaluateFlutterKeyType(tree.materialMagnifier.key) : null),
          additionalFocalPointOffset: (tree.materialMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.materialMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          borderRadius: (tree.materialMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(40))),
          filmColor: (tree.materialMagnifier.hasFilmColor() ? evaluateRequiredDartColorType(tree.materialMagnifier.filmColor) : $dartUi.Color.fromARGB(8, 158, 158, 158)),
          shadows: tree.materialMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          size: (tree.materialMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.materialMagnifier.size) : $dartUi.Size(77.37, 37.9)));
    case messages.FlutterStatelessWidgetType_Constructor.materialMaterialButton:
      return $flutterSrcMaterialMaterialButton.MaterialButton(
          key: (tree.materialMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textTheme: (tree.materialMaterialButton.hasTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialMaterialButton.textTheme) : null),
          textColor: (tree.materialMaterialButton.hasTextColor() ? evaluateDartColorType(tree.materialMaterialButton.textColor) : null),
          disabledTextColor: (tree.materialMaterialButton.hasDisabledTextColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledTextColor) : null),
          color: (tree.materialMaterialButton.hasColor() ? evaluateDartColorType(tree.materialMaterialButton.color) : null),
          disabledColor: (tree.materialMaterialButton.hasDisabledColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledColor) : null),
          focusColor: (tree.materialMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialMaterialButton.focusColor) : null),
          hoverColor: (tree.materialMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialMaterialButton.highlightColor) : null),
          splashColor: (tree.materialMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialMaterialButton.splashColor) : null),
          colorBrightness: (tree.materialMaterialButton.hasColorBrightness() ? enums.convertDartBrightnessType(tree.materialMaterialButton.colorBrightness) : null),
          elevation: (tree.materialMaterialButton.hasElevation() ? tree.materialMaterialButton.elevation : null),
          focusElevation: (tree.materialMaterialButton.hasFocusElevation() ? tree.materialMaterialButton.focusElevation : null),
          hoverElevation: (tree.materialMaterialButton.hasHoverElevation() ? tree.materialMaterialButton.hoverElevation : null),
          highlightElevation: (tree.materialMaterialButton.hasHighlightElevation() ? tree.materialMaterialButton.highlightElevation : null),
          disabledElevation: (tree.materialMaterialButton.hasDisabledElevation() ? tree.materialMaterialButton.disabledElevation : null),
          padding: (tree.materialMaterialButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialButton.padding) : null),
          visualDensity: (tree.materialMaterialButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialMaterialButton.visualDensity) : null),
          shape: (tree.materialMaterialButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterialButton.shape) : null),
          clipBehavior: (tree.materialMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMaterialButton.focusNode) : null),
          autofocus: (tree.materialMaterialButton.hasAutofocus() ? tree.materialMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialMaterialButton.materialTapTargetSize) : null),
          animationDuration: (tree.materialMaterialButton.hasAnimationDuration() ? evaluateDartDurationType(tree.materialMaterialButton.animationDuration) : null),
          minWidth: (tree.materialMaterialButton.hasMinWidth() ? tree.materialMaterialButton.minWidth : null),
          height: (tree.materialMaterialButton.hasHeight() ? tree.materialMaterialButton.height : null),
          enableFeedback: (tree.materialMaterialButton.hasEnableFeedback() ? tree.materialMaterialButton.enableFeedback : true),
          child: (tree.materialMaterialButton.hasChild() ? evaluateWidgetType(tree.materialMaterialButton.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialMenuBar:
      return $flutterSrcMaterialMenuAnchor.MenuBar(
          key: (tree.materialMenuBar.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBar.key) : null),
          style: (tree.materialMenuBar.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuBar.style) : null),
          clipBehavior: (tree.materialMenuBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuBar.clipBehavior) : $dartUi.Clip.none),
          controller: (tree.materialMenuBar.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuBar.controller) : null),
          children: tree.materialMenuBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialNavigationBar:
      return $flutterSrcMaterialNavigationBar.NavigationBar(
          key: (tree.materialNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBar.key) : null),
          animationDuration: (tree.materialNavigationBar.hasAnimationDuration() ? evaluateDartDurationType(tree.materialNavigationBar.animationDuration) : null),
          selectedIndex: (tree.materialNavigationBar.hasSelectedIndex() ? tree.materialNavigationBar.selectedIndex : 0),
          destinations: tree.materialNavigationBar.destinations.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onDestinationSelected: null,
          backgroundColor: (tree.materialNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationBar.backgroundColor) : null),
          elevation: (tree.materialNavigationBar.hasElevation() ? tree.materialNavigationBar.elevation : null),
          shadowColor: (tree.materialNavigationBar.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationBar.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationBar.surfaceTintColor) : null),
          indicatorColor: (tree.materialNavigationBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationBar.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationBar.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationBar.indicatorShape) : null),
          height: (tree.materialNavigationBar.hasHeight() ? tree.materialNavigationBar.height : null),
          labelBehavior: (tree.materialNavigationBar.hasLabelBehavior() ? enums.convertMaterialNavigationDestinationLabelBehaviorType(tree.materialNavigationBar.labelBehavior) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialNavigationDestination:
      return $flutterSrcMaterialNavigationBar.NavigationDestination(
          key: (tree.materialNavigationDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDestination.key) : null),
          icon: (tree.materialNavigationDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDestination.selectedIcon) : null),
          label: (tree.materialNavigationDestination.hasLabel() ? tree.materialNavigationDestination.label : missing('label')),
          tooltip: (tree.materialNavigationDestination.hasTooltip() ? tree.materialNavigationDestination.tooltip : null),
          enabled: (tree.materialNavigationDestination.hasEnabled() ? tree.materialNavigationDestination.enabled : true));
    case messages.FlutterStatelessWidgetType_Constructor.materialNavigationDrawer:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawer(
          key: (tree.materialNavigationDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawer.key) : null),
          children: tree.materialNavigationDrawer.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          backgroundColor: (tree.materialNavigationDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawer.backgroundColor) : null),
          shadowColor: (tree.materialNavigationDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationDrawer.surfaceTintColor) : null),
          elevation: (tree.materialNavigationDrawer.hasElevation() ? tree.materialNavigationDrawer.elevation : null),
          indicatorColor: (tree.materialNavigationDrawer.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationDrawer.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationDrawer.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationDrawer.indicatorShape) : null),
          onDestinationSelected: null,
          selectedIndex: (tree.materialNavigationDrawer.hasSelectedIndex() ? tree.materialNavigationDrawer.selectedIndex : 0),
          tilePadding: (tree.materialNavigationDrawer.hasTilePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialNavigationDrawer.tilePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 12.0)));
    case messages.FlutterStatelessWidgetType_Constructor.materialNavigationDrawerDestination:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawerDestination(
          key: (tree.materialNavigationDrawerDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerDestination.key) : null),
          backgroundColor: (tree.materialNavigationDrawerDestination.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawerDestination.backgroundColor) : null),
          icon: (tree.materialNavigationDrawerDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDrawerDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDrawerDestination.selectedIcon) : null),
          label: (tree.materialNavigationDrawerDestination.hasLabel() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.label) : missing('label')),
          enabled: (tree.materialNavigationDrawerDestination.hasEnabled() ? tree.materialNavigationDrawerDestination.enabled : true));
    case messages.FlutterStatelessWidgetType_Constructor.materialScrollbar:
      return $flutterSrcMaterialScrollbar.Scrollbar(
          key: (tree.materialScrollbar.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbar.key) : null),
          child: (tree.materialScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbar.child) : missing('child')),
          controller: (tree.materialScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.materialScrollbar.controller) : null),
          thumbVisibility: (tree.materialScrollbar.hasThumbVisibility() ? tree.materialScrollbar.thumbVisibility : null),
          trackVisibility: (tree.materialScrollbar.hasTrackVisibility() ? tree.materialScrollbar.trackVisibility : null),
          thickness: (tree.materialScrollbar.hasThickness() ? tree.materialScrollbar.thickness : null),
          radius: (tree.materialScrollbar.hasRadius() ? evaluateDartRadiusType(tree.materialScrollbar.radius) : null),
          notificationPredicate: null,
          interactive: (tree.materialScrollbar.hasInteractive() ? tree.materialScrollbar.interactive : null),
          scrollbarOrientation: (tree.materialScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.materialScrollbar.scrollbarOrientation) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialSimpleDialog:
      return $flutterSrcMaterialDialog.SimpleDialog(
          key: (tree.materialSimpleDialog.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialog.key) : null),
          title: (tree.materialSimpleDialog.hasTitle() ? evaluateWidgetType(tree.materialSimpleDialog.title) : null),
          titlePadding: (tree.materialSimpleDialog.hasTitlePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.titlePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0)),
          titleTextStyle: (tree.materialSimpleDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSimpleDialog.titleTextStyle) : null),
          children: tree.materialSimpleDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          contentPadding: (tree.materialSimpleDialog.hasContentPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.contentPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0)),
          backgroundColor: (tree.materialSimpleDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialSimpleDialog.backgroundColor) : null),
          elevation: (tree.materialSimpleDialog.hasElevation() ? tree.materialSimpleDialog.elevation : null),
          shadowColor: (tree.materialSimpleDialog.hasShadowColor() ? evaluateDartColorType(tree.materialSimpleDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialSimpleDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSimpleDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialSimpleDialog.hasSemanticLabel() ? tree.materialSimpleDialog.semanticLabel : null),
          insetPadding: (tree.materialSimpleDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialSimpleDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialSimpleDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSimpleDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialSimpleDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSimpleDialog.shape) : null),
          alignment: (tree.materialSimpleDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialSimpleDialog.alignment) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialSimpleDialogOption:
      return $flutterSrcMaterialDialog.SimpleDialogOption(
          key: (tree.materialSimpleDialogOption.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialogOption.key) : null),
          onPressed: null,
          padding: (tree.materialSimpleDialogOption.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialSimpleDialogOption.padding) : null),
          child: (tree.materialSimpleDialogOption.hasChild() ? evaluateWidgetType(tree.materialSimpleDialogOption.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialSpellCheckSuggestionsToolbar:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar(
          key: (tree.materialSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbar.key) : null),
          anchor: (tree.materialSpellCheckSuggestionsToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialSpellCheckSuggestionsToolbar.anchor) : missing('anchor')),
          buttonItems: tree.materialSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar.editableText(
          key: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.FlutterStatelessWidgetType_Constructor.materialSwitch:
      return $flutterSrcMaterialSwitch.Switch(
          key: (tree.materialSwitch.hasKey() ? evaluateFlutterKeyType(tree.materialSwitch.key) : null),
          value: (tree.materialSwitch.hasValue() ? tree.materialSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitch.hasActiveColor() ? evaluateDartColorType(tree.materialSwitch.activeColor) : null),
          activeTrackColor: (tree.materialSwitch.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitch.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitch.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitch.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitch.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitch.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitch.hasFocusColor() ? evaluateDartColorType(tree.materialSwitch.focusColor) : null),
          hoverColor: (tree.materialSwitch.hasHoverColor() ? evaluateDartColorType(tree.materialSwitch.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitch.hasSplashRadius() ? tree.materialSwitch.splashRadius : null),
          focusNode: (tree.materialSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitch.hasAutofocus() ? tree.materialSwitch.autofocus : false));
    case messages.FlutterStatelessWidgetType_Constructor.materialSwitchListTile:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile(
          key: (tree.materialSwitchListTile.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTile.key) : null),
          value: (tree.materialSwitchListTile.hasValue() ? tree.materialSwitchListTile.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTile.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTile.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTile.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTile.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTile.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTile.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTile.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTile.hasSplashRadius() ? tree.materialSwitchListTile.splashRadius : null),
          focusNode: (tree.materialSwitchListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTile.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTile.hasAutofocus() ? tree.materialSwitchListTile.autofocus : false),
          tileColor: (tree.materialSwitchListTile.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.tileColor) : null),
          title: (tree.materialSwitchListTile.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTile.title) : null),
          subtitle: (tree.materialSwitchListTile.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTile.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTile.hasIsThreeLine() ? tree.materialSwitchListTile.isThreeLine : false),
          dense: (tree.materialSwitchListTile.hasDense() ? tree.materialSwitchListTile.dense : null),
          contentPadding: (tree.materialSwitchListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTile.contentPadding) : null),
          secondary: (tree.materialSwitchListTile.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTile.secondary) : null),
          selected: (tree.materialSwitchListTile.hasSelected() ? tree.materialSwitchListTile.selected : false),
          controlAffinity: (tree.materialSwitchListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTile.shape) : null),
          selectedTileColor: (tree.materialSwitchListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTile.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTile.hasEnableFeedback() ? tree.materialSwitchListTile.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTile.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTile.hoverColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialSwitchListTileNamedAdaptive:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile.adaptive(
          key: (tree.materialSwitchListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTileNamedAdaptive.key) : null),
          value: (tree.materialSwitchListTileNamedAdaptive.hasValue() ? tree.materialSwitchListTileNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTileNamedAdaptive.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTileNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTileNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTileNamedAdaptive.hasSplashRadius() ? tree.materialSwitchListTileNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTileNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTileNamedAdaptive.hasAutofocus() ? tree.materialSwitchListTileNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchListTileNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchListTileNamedAdaptive.applyCupertinoTheme : null),
          tileColor: (tree.materialSwitchListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialSwitchListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialSwitchListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTileNamedAdaptive.hasIsThreeLine() ? tree.materialSwitchListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialSwitchListTileNamedAdaptive.hasDense() ? tree.materialSwitchListTileNamedAdaptive.dense : null),
          contentPadding: (tree.materialSwitchListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTileNamedAdaptive.contentPadding) : null),
          secondary: (tree.materialSwitchListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialSwitchListTileNamedAdaptive.hasSelected() ? tree.materialSwitchListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialSwitchListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTileNamedAdaptive.shape) : null),
          selectedTileColor: (tree.materialSwitchListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTileNamedAdaptive.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTileNamedAdaptive.hasEnableFeedback() ? tree.materialSwitchListTileNamedAdaptive.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.hoverColor) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialSwitchNamedAdaptive:
      return $flutterSrcMaterialSwitch.Switch.adaptive(
          key: (tree.materialSwitchNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchNamedAdaptive.key) : null),
          value: (tree.materialSwitchNamedAdaptive.hasValue() ? tree.materialSwitchNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          materialTapTargetSize: (tree.materialSwitchNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchNamedAdaptive.materialTapTargetSize) : null),
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          dragStartBehavior: (tree.materialSwitchNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitchNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialSwitchNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitchNamedAdaptive.hasSplashRadius() ? tree.materialSwitchNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchNamedAdaptive.hasAutofocus() ? tree.materialSwitchNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchNamedAdaptive.applyCupertinoTheme : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialTab:
      return $flutterSrcMaterialTabs.Tab(
          key: (tree.materialTab.hasKey() ? evaluateFlutterKeyType(tree.materialTab.key) : null),
          text: (tree.materialTab.hasText() ? tree.materialTab.text : null),
          icon: (tree.materialTab.hasIcon() ? evaluateWidgetType(tree.materialTab.icon) : null),
          iconMargin: (tree.materialTab.hasIconMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTab.iconMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 10.0)),
          height: (tree.materialTab.hasHeight() ? tree.materialTab.height : null),
          child: (tree.materialTab.hasChild() ? evaluateWidgetType(tree.materialTab.child) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialTabPageSelector:
      return $flutterSrcMaterialTabs.TabPageSelector(
          key: (tree.materialTabPageSelector.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelector.key) : null),
          controller: (tree.materialTabPageSelector.hasController() ? evaluateMaterialTabControllerType(tree.materialTabPageSelector.controller) : null),
          indicatorSize: (tree.materialTabPageSelector.hasIndicatorSize() ? tree.materialTabPageSelector.indicatorSize : 12.0),
          color: (tree.materialTabPageSelector.hasColor() ? evaluateDartColorType(tree.materialTabPageSelector.color) : null),
          selectedColor: (tree.materialTabPageSelector.hasSelectedColor() ? evaluateDartColorType(tree.materialTabPageSelector.selectedColor) : null),
          borderStyle: (tree.materialTabPageSelector.hasBorderStyle() ? enums.convertFlutterBorderStyleType(tree.materialTabPageSelector.borderStyle) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialTabPageSelectorIndicator:
      return $flutterSrcMaterialTabs.TabPageSelectorIndicator(
          key: (tree.materialTabPageSelectorIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelectorIndicator.key) : null),
          backgroundColor: (tree.materialTabPageSelectorIndicator.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.backgroundColor) : missing('backgroundColor')),
          borderColor: (tree.materialTabPageSelectorIndicator.hasBorderColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.borderColor) : missing('borderColor')),
          size: (tree.materialTabPageSelectorIndicator.hasSize() ? tree.materialTabPageSelectorIndicator.size : missing('size')),
          borderStyle: (tree.materialTabPageSelectorIndicator.hasBorderStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.materialTabPageSelectorIndicator.borderStyle) : $flutterSrcPaintingBorders.BorderStyle.solid));
    case messages.FlutterStatelessWidgetType_Constructor.materialTableRowInkWell:
      return $flutterSrcMaterialDataTable.TableRowInkWell(
          key: (tree.materialTableRowInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialTableRowInkWell.key) : null),
          child: (tree.materialTableRowInkWell.hasChild() ? evaluateWidgetType(tree.materialTableRowInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onHighlightChanged: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          overlayColor: null,
          mouseCursor: null);
    case messages.FlutterStatelessWidgetType_Constructor.materialTextSelectionToolbar:
      return $flutterSrcMaterialTextSelectionToolbar.TextSelectionToolbar(
          key: (tree.materialTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbar.key) : null),
          anchorAbove: (tree.materialTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.materialTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.materialTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.FlutterStatelessWidgetType_Constructor.materialTextSelectionToolbarTextButton:
      return $flutterSrcMaterialTextSelectionToolbarTextButton.TextSelectionToolbarTextButton(
          key: (tree.materialTextSelectionToolbarTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbarTextButton.key) : null),
          child: (tree.materialTextSelectionToolbarTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionToolbarTextButton.child) : missing('child')),
          padding: (tree.materialTextSelectionToolbarTextButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextSelectionToolbarTextButton.padding) : missing('padding')),
          onPressed: null,
          alignment: (tree.materialTextSelectionToolbarTextButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialTextSelectionToolbarTextButton.alignment) : null));
    case messages.FlutterStatelessWidgetType_Constructor.materialTheme:
      return $flutterSrcMaterialTheme.Theme(
          key: (tree.materialTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTheme.key) : null),
          data: (tree.materialTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialTheme.data) : missing('data')),
          child: (tree.materialTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTheme.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.materialToggleButtons:
      return $flutterSrcMaterialToggleButtons.ToggleButtons(
          key: (tree.materialToggleButtons.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtons.key) : null),
          children: tree.materialToggleButtons.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          isSelected: tree.materialToggleButtons.isSelected,
          onPressed: null,
          mouseCursor: null,
          tapTargetSize: (tree.materialToggleButtons.hasTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialToggleButtons.tapTargetSize) : null),
          textStyle: (tree.materialToggleButtons.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialToggleButtons.textStyle) : null),
          constraints: (tree.materialToggleButtons.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialToggleButtons.constraints) : null),
          color: (tree.materialToggleButtons.hasColor() ? evaluateDartColorType(tree.materialToggleButtons.color) : null),
          selectedColor: (tree.materialToggleButtons.hasSelectedColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedColor) : null),
          disabledColor: (tree.materialToggleButtons.hasDisabledColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledColor) : null),
          fillColor: (tree.materialToggleButtons.hasFillColor() ? evaluateDartColorType(tree.materialToggleButtons.fillColor) : null),
          focusColor: (tree.materialToggleButtons.hasFocusColor() ? evaluateDartColorType(tree.materialToggleButtons.focusColor) : null),
          highlightColor: (tree.materialToggleButtons.hasHighlightColor() ? evaluateDartColorType(tree.materialToggleButtons.highlightColor) : null),
          hoverColor: (tree.materialToggleButtons.hasHoverColor() ? evaluateDartColorType(tree.materialToggleButtons.hoverColor) : null),
          splashColor: (tree.materialToggleButtons.hasSplashColor() ? evaluateDartColorType(tree.materialToggleButtons.splashColor) : null),
          focusNodes: tree.materialToggleButtons.focusNodes.map((e) => evaluateRequiredFlutterFocusNodeType(e)).toList(),
          renderBorder: (tree.materialToggleButtons.hasRenderBorder() ? tree.materialToggleButtons.renderBorder : true),
          borderColor: (tree.materialToggleButtons.hasBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.borderColor) : null),
          selectedBorderColor: (tree.materialToggleButtons.hasSelectedBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedBorderColor) : null),
          disabledBorderColor: (tree.materialToggleButtons.hasDisabledBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledBorderColor) : null),
          borderRadius: (tree.materialToggleButtons.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialToggleButtons.borderRadius) : null),
          borderWidth: (tree.materialToggleButtons.hasBorderWidth() ? tree.materialToggleButtons.borderWidth : null),
          direction: (tree.materialToggleButtons.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.materialToggleButtons.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          verticalDirection: (tree.materialToggleButtons.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.materialToggleButtons.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down));
    case messages.FlutterStatelessWidgetType_Constructor.materialTooltipVisibility:
      return $flutterSrcMaterialTooltipVisibility.TooltipVisibility(
          key: (tree.materialTooltipVisibility.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipVisibility.key) : null),
          visible: (tree.materialTooltipVisibility.hasVisible() ? tree.materialTooltipVisibility.visible : missing('visible')),
          child: (tree.materialTooltipVisibility.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipVisibility.child) : missing('child')));
    case messages.FlutterStatelessWidgetType_Constructor.materialVerticalDivider:
      return $flutterSrcMaterialDivider.VerticalDivider(
          key: (tree.materialVerticalDivider.hasKey() ? evaluateFlutterKeyType(tree.materialVerticalDivider.key) : null),
          width: (tree.materialVerticalDivider.hasWidth() ? tree.materialVerticalDivider.width : null),
          thickness: (tree.materialVerticalDivider.hasThickness() ? tree.materialVerticalDivider.thickness : null),
          indent: (tree.materialVerticalDivider.hasIndent() ? tree.materialVerticalDivider.indent : null),
          endIndent: (tree.materialVerticalDivider.hasEndIndent() ? tree.materialVerticalDivider.endIndent : null),
          color: (tree.materialVerticalDivider.hasColor() ? evaluateDartColorType(tree.materialVerticalDivider.color) : null));
    default:
      return null;
  }
}

$flutterSrcPaintingStrutStyle.StrutStyle evaluateRequiredFlutterStrutStyleType(messages.FlutterStrutStyleType tree) {
  final result = evaluateFlutterStrutStyleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingStrutStyle.StrutStyle? evaluateFlutterStrutStyleType(messages.FlutterStrutStyleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterStrutStyleType_Constructor.flutterStrutStyle:
      return $flutterSrcPaintingStrutStyle.StrutStyle(
          fontFamily: (tree.flutterStrutStyle.hasFontFamily() ? tree.flutterStrutStyle.fontFamily : null),
          fontFamilyFallback: tree.flutterStrutStyle.fontFamilyFallback,
          fontSize: (tree.flutterStrutStyle.hasFontSize() ? tree.flutterStrutStyle.fontSize : null),
          height: (tree.flutterStrutStyle.hasHeight() ? tree.flutterStrutStyle.height : null),
          leadingDistribution: (tree.flutterStrutStyle.hasLeadingDistribution() ? enums.convertDartTextLeadingDistributionType(tree.flutterStrutStyle.leadingDistribution) : null),
          leading: (tree.flutterStrutStyle.hasLeading() ? tree.flutterStrutStyle.leading : null),
          fontWeight: null,
          fontStyle: (tree.flutterStrutStyle.hasFontStyle() ? enums.convertDartFontStyleType(tree.flutterStrutStyle.fontStyle) : null),
          forceStrutHeight: (tree.flutterStrutStyle.hasForceStrutHeight() ? tree.flutterStrutStyle.forceStrutHeight : null),
          debugLabel: (tree.flutterStrutStyle.hasDebugLabel() ? tree.flutterStrutStyle.debugLabel : null),
          package: (tree.flutterStrutStyle.hasPackage() ? tree.flutterStrutStyle.package : null));
    case messages.FlutterStrutStyleType_Constructor.flutterStrutStyleNamedFromTextStyle:
      return $flutterSrcPaintingStrutStyle.StrutStyle.fromTextStyle(
          (tree.flutterStrutStyleNamedFromTextStyle.hasTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterStrutStyleNamedFromTextStyle.textStyle) : missing('textStyle')),
          fontFamily: (tree.flutterStrutStyleNamedFromTextStyle.hasFontFamily() ? tree.flutterStrutStyleNamedFromTextStyle.fontFamily : null),
          fontFamilyFallback: tree.flutterStrutStyleNamedFromTextStyle.fontFamilyFallback,
          fontSize: (tree.flutterStrutStyleNamedFromTextStyle.hasFontSize() ? tree.flutterStrutStyleNamedFromTextStyle.fontSize : null),
          height: (tree.flutterStrutStyleNamedFromTextStyle.hasHeight() ? tree.flutterStrutStyleNamedFromTextStyle.height : null),
          leadingDistribution: (tree.flutterStrutStyleNamedFromTextStyle.hasLeadingDistribution() ? enums.convertDartTextLeadingDistributionType(tree.flutterStrutStyleNamedFromTextStyle.leadingDistribution) : null),
          leading: (tree.flutterStrutStyleNamedFromTextStyle.hasLeading() ? tree.flutterStrutStyleNamedFromTextStyle.leading : null),
          fontWeight: null,
          fontStyle: (tree.flutterStrutStyleNamedFromTextStyle.hasFontStyle() ? enums.convertDartFontStyleType(tree.flutterStrutStyleNamedFromTextStyle.fontStyle) : null),
          forceStrutHeight: (tree.flutterStrutStyleNamedFromTextStyle.hasForceStrutHeight() ? tree.flutterStrutStyleNamedFromTextStyle.forceStrutHeight : null),
          debugLabel: (tree.flutterStrutStyleNamedFromTextStyle.hasDebugLabel() ? tree.flutterStrutStyleNamedFromTextStyle.debugLabel : null),
          package: (tree.flutterStrutStyleNamedFromTextStyle.hasPackage() ? tree.flutterStrutStyleNamedFromTextStyle.package : null));
    default:
      return null;
  }
}

$flutterSrcServicesSystemChrome.SystemUiOverlayStyle evaluateRequiredFlutterSystemUiOverlayStyleType(messages.FlutterSystemUiOverlayStyleType tree) {
  final result = evaluateFlutterSystemUiOverlayStyleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesSystemChrome.SystemUiOverlayStyle? evaluateFlutterSystemUiOverlayStyleType(messages.FlutterSystemUiOverlayStyleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterSystemUiOverlayStyleType_Constructor.flutterSystemUiOverlayStyle:
      return $flutterSrcServicesSystemChrome.SystemUiOverlayStyle(
          systemNavigationBarColor: (tree.flutterSystemUiOverlayStyle.hasSystemNavigationBarColor() ? evaluateDartColorType(tree.flutterSystemUiOverlayStyle.systemNavigationBarColor) : null),
          systemNavigationBarDividerColor: (tree.flutterSystemUiOverlayStyle.hasSystemNavigationBarDividerColor() ? evaluateDartColorType(tree.flutterSystemUiOverlayStyle.systemNavigationBarDividerColor) : null),
          systemNavigationBarIconBrightness: (tree.flutterSystemUiOverlayStyle.hasSystemNavigationBarIconBrightness() ? enums.convertDartBrightnessType(tree.flutterSystemUiOverlayStyle.systemNavigationBarIconBrightness) : null),
          systemNavigationBarContrastEnforced: (tree.flutterSystemUiOverlayStyle.hasSystemNavigationBarContrastEnforced() ? tree.flutterSystemUiOverlayStyle.systemNavigationBarContrastEnforced : null),
          statusBarColor: (tree.flutterSystemUiOverlayStyle.hasStatusBarColor() ? evaluateDartColorType(tree.flutterSystemUiOverlayStyle.statusBarColor) : null),
          statusBarBrightness: (tree.flutterSystemUiOverlayStyle.hasStatusBarBrightness() ? enums.convertDartBrightnessType(tree.flutterSystemUiOverlayStyle.statusBarBrightness) : null),
          statusBarIconBrightness: (tree.flutterSystemUiOverlayStyle.hasStatusBarIconBrightness() ? enums.convertDartBrightnessType(tree.flutterSystemUiOverlayStyle.statusBarIconBrightness) : null),
          systemStatusBarContrastEnforced: (tree.flutterSystemUiOverlayStyle.hasSystemStatusBarContrastEnforced() ? tree.flutterSystemUiOverlayStyle.systemStatusBarContrastEnforced : null));
    default:
      return null;
  }
}

$flutterSrcRenderingTableBorder.TableBorder evaluateRequiredFlutterTableBorderType(messages.FlutterTableBorderType tree) {
  final result = evaluateFlutterTableBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingTableBorder.TableBorder? evaluateFlutterTableBorderType(messages.FlutterTableBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTableBorderType_Constructor.flutterTableBorder:
      return $flutterSrcRenderingTableBorder.TableBorder(
          top: (tree.flutterTableBorder.hasTop() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.top) : $flutterSrcPaintingBorders.BorderSide.none),
          right: (tree.flutterTableBorder.hasRight() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.right) : $flutterSrcPaintingBorders.BorderSide.none),
          bottom: (tree.flutterTableBorder.hasBottom() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.bottom) : $flutterSrcPaintingBorders.BorderSide.none),
          left: (tree.flutterTableBorder.hasLeft() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.left) : $flutterSrcPaintingBorders.BorderSide.none),
          horizontalInside: (tree.flutterTableBorder.hasHorizontalInside() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.horizontalInside) : $flutterSrcPaintingBorders.BorderSide.none),
          verticalInside: (tree.flutterTableBorder.hasVerticalInside() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorder.verticalInside) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.flutterTableBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.flutterTableBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterTableBorderType_Constructor.flutterTableBorderNamedAll:
      return $flutterSrcRenderingTableBorder.TableBorder.all(
          color: (tree.flutterTableBorderNamedAll.hasColor() ? evaluateRequiredDartColorType(tree.flutterTableBorderNamedAll.color) : $dartUi.Color(0xFF000000)),
          width: (tree.flutterTableBorderNamedAll.hasWidth() ? tree.flutterTableBorderNamedAll.width : 1.0),
          style: (tree.flutterTableBorderNamedAll.hasStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.flutterTableBorderNamedAll.style) : $flutterSrcPaintingBorders.BorderStyle.solid),
          borderRadius: (tree.flutterTableBorderNamedAll.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.flutterTableBorderNamedAll.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.FlutterTableBorderType_Constructor.flutterTableBorderNamedSymmetric:
      return $flutterSrcRenderingTableBorder.TableBorder.symmetric(
          inside: (tree.flutterTableBorderNamedSymmetric.hasInside() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorderNamedSymmetric.inside) : $flutterSrcPaintingBorders.BorderSide.none),
          outside: (tree.flutterTableBorderNamedSymmetric.hasOutside() ? evaluateRequiredFlutterBorderSideType(tree.flutterTableBorderNamedSymmetric.outside) : $flutterSrcPaintingBorders.BorderSide.none));
    default:
      return null;
  }
}

$flutterSrcRenderingTable.TableColumnWidth evaluateRequiredFlutterTableColumnWidthType(messages.FlutterTableColumnWidthType tree) {
  final result = evaluateFlutterTableColumnWidthType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingTable.TableColumnWidth? evaluateFlutterTableColumnWidthType(messages.FlutterTableColumnWidthType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTableColumnWidthType_Constructor.flutterFixedColumnWidth:
      return $flutterSrcRenderingTable.FixedColumnWidth(
          (tree.flutterFixedColumnWidth.hasValue() ? tree.flutterFixedColumnWidth.value : missing('value')));
    case messages.FlutterTableColumnWidthType_Constructor.flutterFlexColumnWidth:
      return $flutterSrcRenderingTable.FlexColumnWidth(
          (tree.flutterFlexColumnWidth.hasValue() ? tree.flutterFlexColumnWidth.value : 1.0));
    case messages.FlutterTableColumnWidthType_Constructor.flutterFractionColumnWidth:
      return $flutterSrcRenderingTable.FractionColumnWidth(
          (tree.flutterFractionColumnWidth.hasValue() ? tree.flutterFractionColumnWidth.value : missing('value')));
    case messages.FlutterTableColumnWidthType_Constructor.flutterIntrinsicColumnWidth:
      return $flutterSrcRenderingTable.IntrinsicColumnWidth(
          flex: (tree.flutterIntrinsicColumnWidth.hasFlex() ? tree.flutterIntrinsicColumnWidth.flex : null));
    case messages.FlutterTableColumnWidthType_Constructor.flutterMaxColumnWidth:
      return $flutterSrcRenderingTable.MaxColumnWidth(
          (tree.flutterMaxColumnWidth.hasA() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterMaxColumnWidth.a) : missing('a')),
          (tree.flutterMaxColumnWidth.hasB() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterMaxColumnWidth.b) : missing('b')));
    case messages.FlutterTableColumnWidthType_Constructor.flutterMinColumnWidth:
      return $flutterSrcRenderingTable.MinColumnWidth(
          (tree.flutterMinColumnWidth.hasA() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterMinColumnWidth.a) : missing('a')),
          (tree.flutterMinColumnWidth.hasB() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterMinColumnWidth.b) : missing('b')));
    default:
      return null;
  }
}

$flutterSrcWidgetsTable.TableRow evaluateRequiredFlutterTableRowType(messages.FlutterTableRowType tree) {
  final result = evaluateFlutterTableRowType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsTable.TableRow? evaluateFlutterTableRowType(messages.FlutterTableRowType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTableRowType_Constructor.flutterTableRow:
      return $flutterSrcWidgetsTable.TableRow(
          key: (tree.flutterTableRow.hasKey() ? evaluateFlutterLocalKeyType(tree.flutterTableRow.key) : null),
          decoration: (tree.flutterTableRow.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterTableRow.decoration) : null),
          children: tree.flutterTableRow.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcWidgetsTapRegion.TapRegionRegistry evaluateRequiredFlutterTapRegionRegistryType(messages.FlutterTapRegionRegistryType tree) {
  final result = evaluateFlutterTapRegionRegistryType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsTapRegion.TapRegionRegistry? evaluateFlutterTapRegionRegistryType(messages.FlutterTapRegionRegistryType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTapRegionRegistryType_Constructor.flutterRenderTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.RenderTapRegionSurface(
          );
    default:
      return null;
  }
}

$flutterSrcPaintingAlignment.TextAlignVertical evaluateRequiredFlutterTextAlignVerticalType(messages.FlutterTextAlignVerticalType tree) {
  final result = evaluateFlutterTextAlignVerticalType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingAlignment.TextAlignVertical? evaluateFlutterTextAlignVerticalType(messages.FlutterTextAlignVerticalType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextAlignVerticalType_Constructor.flutterTextAlignVertical:
      return $flutterSrcPaintingAlignment.TextAlignVertical(
          y: (tree.flutterTextAlignVertical.hasY() ? tree.flutterTextAlignVertical.y : missing('y')));
    default:
      return null;
  }
}

$flutterSrcWidgetsEditableText.TextEditingController evaluateRequiredFlutterTextEditingControllerType(messages.FlutterTextEditingControllerType tree) {
  final result = evaluateFlutterTextEditingControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsEditableText.TextEditingController? evaluateFlutterTextEditingControllerType(messages.FlutterTextEditingControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextEditingControllerType_Constructor.flutterTextEditingController:
      return $flutterSrcWidgetsEditableText.TextEditingController(
          text: (tree.flutterTextEditingController.hasText() ? tree.flutterTextEditingController.text : null));
    case messages.FlutterTextEditingControllerType_Constructor.flutterTextEditingControllerNamedFromValue:
      return $flutterSrcWidgetsEditableText.TextEditingController.fromValue(
          (tree.flutterTextEditingControllerNamedFromValue.hasValue() ? evaluateFlutterTextEditingValueType(tree.flutterTextEditingControllerNamedFromValue.value) : null));
    case messages.FlutterTextEditingControllerType_Constructor.materialSearchController:
      return $flutterSrcMaterialSearchAnchor.SearchController(
          );
    default:
      return null;
  }
}

$flutterSrcServicesTextInput.TextEditingValue evaluateRequiredFlutterTextEditingValueType(messages.FlutterTextEditingValueType tree) {
  final result = evaluateFlutterTextEditingValueType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesTextInput.TextEditingValue? evaluateFlutterTextEditingValueType(messages.FlutterTextEditingValueType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextEditingValueType_Constructor.flutterTextEditingValue:
      return $flutterSrcServicesTextInput.TextEditingValue(
          text: (tree.flutterTextEditingValue.hasText() ? tree.flutterTextEditingValue.text : ''),
          selection: (tree.flutterTextEditingValue.hasSelection() ? evaluateRequiredFlutterTextSelectionType(tree.flutterTextEditingValue.selection) : $flutterSrcServicesTextEditing.TextSelection.collapsed(offset: -1)),
          composing: (tree.flutterTextEditingValue.hasComposing() ? evaluateRequiredDartTextRangeType(tree.flutterTextEditingValue.composing) : $dartUi.TextRange.empty));
    default:
      return null;
  }
}

$flutterSrcServicesTextFormatter.TextInputFormatter evaluateRequiredFlutterTextInputFormatterType(messages.FlutterTextInputFormatterType tree) {
  final result = evaluateFlutterTextInputFormatterType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesTextFormatter.TextInputFormatter? evaluateFlutterTextInputFormatterType(messages.FlutterTextInputFormatterType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextInputFormatterType_Constructor.flutterFilteringTextInputFormatter:
      return $flutterSrcServicesTextFormatter.FilteringTextInputFormatter(
          missing('filterPattern'),
          allow: (tree.flutterFilteringTextInputFormatter.hasAllow() ? tree.flutterFilteringTextInputFormatter.allow : missing('allow')),
          replacementString: (tree.flutterFilteringTextInputFormatter.hasReplacementString() ? tree.flutterFilteringTextInputFormatter.replacementString : ''));
    case messages.FlutterTextInputFormatterType_Constructor.flutterFilteringTextInputFormatterNamedAllow:
      return $flutterSrcServicesTextFormatter.FilteringTextInputFormatter.allow(
          missing('filterPattern'),
          replacementString: (tree.flutterFilteringTextInputFormatterNamedAllow.hasReplacementString() ? tree.flutterFilteringTextInputFormatterNamedAllow.replacementString : ''));
    case messages.FlutterTextInputFormatterType_Constructor.flutterFilteringTextInputFormatterNamedDeny:
      return $flutterSrcServicesTextFormatter.FilteringTextInputFormatter.deny(
          missing('filterPattern'),
          replacementString: (tree.flutterFilteringTextInputFormatterNamedDeny.hasReplacementString() ? tree.flutterFilteringTextInputFormatterNamedDeny.replacementString : ''));
    case messages.FlutterTextInputFormatterType_Constructor.flutterLengthLimitingTextInputFormatter:
      return $flutterSrcServicesTextFormatter.LengthLimitingTextInputFormatter(
          (tree.flutterLengthLimitingTextInputFormatter.hasMaxLength() ? tree.flutterLengthLimitingTextInputFormatter.maxLength : null),
          maxLengthEnforcement: (tree.flutterLengthLimitingTextInputFormatter.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.flutterLengthLimitingTextInputFormatter.maxLengthEnforcement) : null));
    default:
      return null;
  }
}

$flutterSrcServicesTextInput.TextInputType evaluateRequiredFlutterTextInputTypeType(messages.FlutterTextInputTypeType tree) {
  final result = evaluateFlutterTextInputTypeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesTextInput.TextInputType? evaluateFlutterTextInputTypeType(messages.FlutterTextInputTypeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextInputTypeType_Constructor.flutterTextInputTypeNamedNumberWithOptions:
      return $flutterSrcServicesTextInput.TextInputType.numberWithOptions(
          signed: (tree.flutterTextInputTypeNamedNumberWithOptions.hasSigned() ? tree.flutterTextInputTypeNamedNumberWithOptions.signed : false),
          decimal: (tree.flutterTextInputTypeNamedNumberWithOptions.hasDecimal() ? tree.flutterTextInputTypeNamedNumberWithOptions.decimal : false));
    default:
      return null;
  }
}

$flutterSrcWidgetsMagnifier.TextMagnifierConfiguration evaluateRequiredFlutterTextMagnifierConfigurationType(messages.FlutterTextMagnifierConfigurationType tree) {
  final result = evaluateFlutterTextMagnifierConfigurationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsMagnifier.TextMagnifierConfiguration? evaluateFlutterTextMagnifierConfigurationType(messages.FlutterTextMagnifierConfigurationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextMagnifierConfigurationType_Constructor.flutterTextMagnifierConfiguration:
      return $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration(
          magnifierBuilder: null,
          shouldDisplayHandlesInMagnifier: (tree.flutterTextMagnifierConfiguration.hasShouldDisplayHandlesInMagnifier() ? tree.flutterTextMagnifierConfiguration.shouldDisplayHandlesInMagnifier : true));
    default:
      return null;
  }
}

$flutterSrcPaintingTextScaler.TextScaler evaluateRequiredFlutterTextScalerType(messages.FlutterTextScalerType tree) {
  final result = evaluateFlutterTextScalerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingTextScaler.TextScaler? evaluateFlutterTextScalerType(messages.FlutterTextScalerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextScalerType_Constructor.flutterTextScalerNamedLinear:
      return $flutterSrcPaintingTextScaler.TextScaler.linear(
          (tree.flutterTextScalerNamedLinear.hasTextScaleFactor() ? tree.flutterTextScalerNamedLinear.textScaleFactor : missing('textScaleFactor')));
    default:
      return null;
  }
}

$flutterSrcWidgetsTextSelection.TextSelectionControls evaluateRequiredFlutterTextSelectionControlsType(messages.FlutterTextSelectionControlsType tree) {
  final result = evaluateFlutterTextSelectionControlsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsTextSelection.TextSelectionControls? evaluateFlutterTextSelectionControlsType(messages.FlutterTextSelectionControlsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextSelectionControlsType_Constructor.cupertinoDesktopTextSelectionControls:
      return $flutterSrcCupertinoDesktopTextSelection.CupertinoDesktopTextSelectionControls(
          );
    case messages.FlutterTextSelectionControlsType_Constructor.cupertinoTextSelectionControls:
      return $flutterSrcCupertinoTextSelection.CupertinoTextSelectionControls(
          );
    case messages.FlutterTextSelectionControlsType_Constructor.flutterEmptyTextSelectionControls:
      return $flutterSrcWidgetsTextSelection.EmptyTextSelectionControls(
          );
    case messages.FlutterTextSelectionControlsType_Constructor.materialDesktopTextSelectionControls:
      return $flutterSrcMaterialDesktopTextSelection.DesktopTextSelectionControls(
          );
    case messages.FlutterTextSelectionControlsType_Constructor.materialMaterialTextSelectionControls:
      return $flutterSrcMaterialTextSelection.MaterialTextSelectionControls(
          );
    default:
      return null;
  }
}

$flutterSrcRenderingEditable.TextSelectionPoint evaluateRequiredFlutterTextSelectionPointType(messages.FlutterTextSelectionPointType tree) {
  final result = evaluateFlutterTextSelectionPointType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingEditable.TextSelectionPoint? evaluateFlutterTextSelectionPointType(messages.FlutterTextSelectionPointType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextSelectionPointType_Constructor.flutterTextSelectionPoint:
      return $flutterSrcRenderingEditable.TextSelectionPoint(
          (tree.flutterTextSelectionPoint.hasPoint() ? evaluateRequiredDartOffsetType(tree.flutterTextSelectionPoint.point) : missing('point')),
          (tree.flutterTextSelectionPoint.hasDirection() ? enums.convertDartTextDirectionType(tree.flutterTextSelectionPoint.direction) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsTextSelectionToolbarAnchors.TextSelectionToolbarAnchors evaluateRequiredFlutterTextSelectionToolbarAnchorsType(messages.FlutterTextSelectionToolbarAnchorsType tree) {
  final result = evaluateFlutterTextSelectionToolbarAnchorsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsTextSelectionToolbarAnchors.TextSelectionToolbarAnchors? evaluateFlutterTextSelectionToolbarAnchorsType(messages.FlutterTextSelectionToolbarAnchorsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextSelectionToolbarAnchorsType_Constructor.flutterTextSelectionToolbarAnchors:
      return $flutterSrcWidgetsTextSelectionToolbarAnchors.TextSelectionToolbarAnchors(
          primaryAnchor: (tree.flutterTextSelectionToolbarAnchors.hasPrimaryAnchor() ? evaluateRequiredDartOffsetType(tree.flutterTextSelectionToolbarAnchors.primaryAnchor) : missing('primaryAnchor')),
          secondaryAnchor: (tree.flutterTextSelectionToolbarAnchors.hasSecondaryAnchor() ? evaluateDartOffsetType(tree.flutterTextSelectionToolbarAnchors.secondaryAnchor) : null));
    case messages.FlutterTextSelectionToolbarAnchorsType_Constructor.flutterTextSelectionToolbarAnchorsNamedFromSelection:
      return $flutterSrcWidgetsTextSelectionToolbarAnchors.TextSelectionToolbarAnchors.fromSelection(
          renderBox: (tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.hasRenderBox() ? evaluateRequiredFlutterRenderBoxType(tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.renderBox) : missing('renderBox')),
          startGlyphHeight: (tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.hasStartGlyphHeight() ? tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.startGlyphHeight : missing('startGlyphHeight')),
          endGlyphHeight: (tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.hasEndGlyphHeight() ? tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.endGlyphHeight : missing('endGlyphHeight')),
          selectionEndpoints: tree.flutterTextSelectionToolbarAnchorsNamedFromSelection.selectionEndpoints.map((e) => evaluateRequiredFlutterTextSelectionPointType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcServicesTextEditing.TextSelection evaluateRequiredFlutterTextSelectionType(messages.FlutterTextSelectionType tree) {
  final result = evaluateFlutterTextSelectionType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcServicesTextEditing.TextSelection? evaluateFlutterTextSelectionType(messages.FlutterTextSelectionType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextSelectionType_Constructor.flutterTextSelection:
      return $flutterSrcServicesTextEditing.TextSelection(
          baseOffset: (tree.flutterTextSelection.hasBaseOffset() ? tree.flutterTextSelection.baseOffset : missing('baseOffset')),
          extentOffset: (tree.flutterTextSelection.hasExtentOffset() ? tree.flutterTextSelection.extentOffset : missing('extentOffset')),
          affinity: (tree.flutterTextSelection.hasAffinity() ? enums.convertRequiredDartTextAffinityType(tree.flutterTextSelection.affinity) : $dartUi.TextAffinity.downstream),
          isDirectional: (tree.flutterTextSelection.hasIsDirectional() ? tree.flutterTextSelection.isDirectional : false));
    case messages.FlutterTextSelectionType_Constructor.flutterTextSelectionNamedCollapsed:
      return $flutterSrcServicesTextEditing.TextSelection.collapsed(
          offset: (tree.flutterTextSelectionNamedCollapsed.hasOffset() ? tree.flutterTextSelectionNamedCollapsed.offset : missing('offset')),
          affinity: (tree.flutterTextSelectionNamedCollapsed.hasAffinity() ? enums.convertRequiredDartTextAffinityType(tree.flutterTextSelectionNamedCollapsed.affinity) : $dartUi.TextAffinity.downstream));
    case messages.FlutterTextSelectionType_Constructor.flutterTextSelectionNamedFromPosition:
      return $flutterSrcServicesTextEditing.TextSelection.fromPosition(
          (tree.flutterTextSelectionNamedFromPosition.hasPosition() ? evaluateRequiredDartTextPositionType(tree.flutterTextSelectionNamedFromPosition.position) : missing('position')));
    default:
      return null;
  }
}

$flutterSrcPaintingTextSpan.TextSpan evaluateRequiredFlutterTextSpanType(messages.FlutterTextSpanType tree) {
  final result = evaluateFlutterTextSpanType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingTextSpan.TextSpan? evaluateFlutterTextSpanType(messages.FlutterTextSpanType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextSpanType_Constructor.flutterTextSpan:
      return $flutterSrcPaintingTextSpan.TextSpan(
          text: (tree.flutterTextSpan.hasText() ? tree.flutterTextSpan.text : null),
          children: tree.flutterTextSpan.children.map((e) => evaluateRequiredFlutterInlineSpanType(e)).toList(),
          style: (tree.flutterTextSpan.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextSpan.style) : null),
          recognizer: (tree.flutterTextSpan.hasRecognizer() ? evaluateFlutterGestureRecognizerType(tree.flutterTextSpan.recognizer) : null),
          mouseCursor: null,
          onEnter: null,
          onExit: null,
          semanticsLabel: (tree.flutterTextSpan.hasSemanticsLabel() ? tree.flutterTextSpan.semanticsLabel : null),
          locale: (tree.flutterTextSpan.hasLocale() ? evaluateDartLocaleType(tree.flutterTextSpan.locale) : null),
          spellOut: (tree.flutterTextSpan.hasSpellOut() ? tree.flutterTextSpan.spellOut : null));
    default:
      return null;
  }
}

$flutterSrcPaintingTextStyle.TextStyle evaluateRequiredFlutterTextStyleType(messages.FlutterTextStyleType tree) {
  final result = evaluateFlutterTextStyleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcPaintingTextStyle.TextStyle? evaluateFlutterTextStyleType(messages.FlutterTextStyleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTextStyleType_Constructor.flutterTextStyle:
      return $flutterSrcPaintingTextStyle.TextStyle(
          inherit: (tree.flutterTextStyle.hasInherit() ? tree.flutterTextStyle.inherit : true),
          color: (tree.flutterTextStyle.hasColor() ? evaluateDartColorType(tree.flutterTextStyle.color) : null),
          backgroundColor: (tree.flutterTextStyle.hasBackgroundColor() ? evaluateDartColorType(tree.flutterTextStyle.backgroundColor) : null),
          fontSize: (tree.flutterTextStyle.hasFontSize() ? tree.flutterTextStyle.fontSize : null),
          fontWeight: null,
          fontStyle: (tree.flutterTextStyle.hasFontStyle() ? enums.convertDartFontStyleType(tree.flutterTextStyle.fontStyle) : null),
          letterSpacing: (tree.flutterTextStyle.hasLetterSpacing() ? tree.flutterTextStyle.letterSpacing : null),
          wordSpacing: (tree.flutterTextStyle.hasWordSpacing() ? tree.flutterTextStyle.wordSpacing : null),
          textBaseline: (tree.flutterTextStyle.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterTextStyle.textBaseline) : null),
          height: (tree.flutterTextStyle.hasHeight() ? tree.flutterTextStyle.height : null),
          leadingDistribution: (tree.flutterTextStyle.hasLeadingDistribution() ? enums.convertDartTextLeadingDistributionType(tree.flutterTextStyle.leadingDistribution) : null),
          locale: (tree.flutterTextStyle.hasLocale() ? evaluateDartLocaleType(tree.flutterTextStyle.locale) : null),
          foreground: (tree.flutterTextStyle.hasForeground() ? evaluateDartPaintType(tree.flutterTextStyle.foreground) : null),
          background: (tree.flutterTextStyle.hasBackground() ? evaluateDartPaintType(tree.flutterTextStyle.background) : null),
          shadows: tree.flutterTextStyle.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList(),
          fontFeatures: tree.flutterTextStyle.fontFeatures.map((e) => evaluateRequiredDartFontFeatureType(e)).toList(),
          fontVariations: tree.flutterTextStyle.fontVariations.map((e) => evaluateRequiredDartFontVariationType(e)).toList(),
          decoration: (tree.flutterTextStyle.hasDecoration() ? evaluateDartTextDecorationType(tree.flutterTextStyle.decoration) : null),
          decorationColor: (tree.flutterTextStyle.hasDecorationColor() ? evaluateDartColorType(tree.flutterTextStyle.decorationColor) : null),
          decorationStyle: (tree.flutterTextStyle.hasDecorationStyle() ? enums.convertDartTextDecorationStyleType(tree.flutterTextStyle.decorationStyle) : null),
          decorationThickness: (tree.flutterTextStyle.hasDecorationThickness() ? tree.flutterTextStyle.decorationThickness : null),
          debugLabel: (tree.flutterTextStyle.hasDebugLabel() ? tree.flutterTextStyle.debugLabel : null),
          fontFamily: (tree.flutterTextStyle.hasFontFamily() ? tree.flutterTextStyle.fontFamily : null),
          fontFamilyFallback: tree.flutterTextStyle.fontFamilyFallback,
          package: (tree.flutterTextStyle.hasPackage() ? tree.flutterTextStyle.package : null),
          overflow: (tree.flutterTextStyle.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterTextStyle.overflow) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsInteractiveViewer.TransformationController evaluateRequiredFlutterTransformationControllerType(messages.FlutterTransformationControllerType tree) {
  final result = evaluateFlutterTransformationControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsInteractiveViewer.TransformationController? evaluateFlutterTransformationControllerType(messages.FlutterTransformationControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterTransformationControllerType_Constructor.flutterTransformationController:
      return $flutterSrcWidgetsInteractiveViewer.TransformationController(
          (tree.flutterTransformationController.hasValue() ? evaluateVectorMathMatrix4Type(tree.flutterTransformationController.value) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsUndoHistory.UndoHistoryController evaluateRequiredFlutterUndoHistoryControllerType(messages.FlutterUndoHistoryControllerType tree) {
  final result = evaluateFlutterUndoHistoryControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsUndoHistory.UndoHistoryController? evaluateFlutterUndoHistoryControllerType(messages.FlutterUndoHistoryControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterUndoHistoryControllerType_Constructor.flutterUndoHistoryController:
      return $flutterSrcWidgetsUndoHistory.UndoHistoryController(
          value: (tree.flutterUndoHistoryController.hasValue() ? evaluateFlutterUndoHistoryValueType(tree.flutterUndoHistoryController.value) : null));
    default:
      return null;
  }
}

$flutterSrcWidgetsUndoHistory.UndoHistoryValue evaluateRequiredFlutterUndoHistoryValueType(messages.FlutterUndoHistoryValueType tree) {
  final result = evaluateFlutterUndoHistoryValueType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsUndoHistory.UndoHistoryValue? evaluateFlutterUndoHistoryValueType(messages.FlutterUndoHistoryValueType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterUndoHistoryValueType_Constructor.flutterUndoHistoryValue:
      return $flutterSrcWidgetsUndoHistory.UndoHistoryValue(
          canUndo: (tree.flutterUndoHistoryValue.hasCanUndo() ? tree.flutterUndoHistoryValue.canUndo : false),
          canRedo: (tree.flutterUndoHistoryValue.hasCanRedo() ? tree.flutterUndoHistoryValue.canRedo : false));
    default:
      return null;
  }
}

$flutterSrcRenderingView.ViewConfiguration evaluateRequiredFlutterViewConfigurationType(messages.FlutterViewConfigurationType tree) {
  final result = evaluateFlutterViewConfigurationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingView.ViewConfiguration? evaluateFlutterViewConfigurationType(messages.FlutterViewConfigurationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterViewConfigurationType_Constructor.flutterViewConfiguration:
      return $flutterSrcRenderingView.ViewConfiguration(
          size: (tree.flutterViewConfiguration.hasSize() ? evaluateRequiredDartSizeType(tree.flutterViewConfiguration.size) : $dartUi.Size.zero),
          devicePixelRatio: (tree.flutterViewConfiguration.hasDevicePixelRatio() ? tree.flutterViewConfiguration.devicePixelRatio : 1.0));
    default:
      return null;
  }
}

$flutterSrcRenderingViewportOffset.ViewportOffset evaluateRequiredFlutterViewportOffsetType(messages.FlutterViewportOffsetType tree) {
  final result = evaluateFlutterViewportOffsetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcRenderingViewportOffset.ViewportOffset? evaluateFlutterViewportOffsetType(messages.FlutterViewportOffsetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.FlutterViewportOffsetType_Constructor.flutterScrollPositionWithSingleContext:
      return $flutterSrcWidgetsScrollPositionWithSingleContext.ScrollPositionWithSingleContext(
          physics: (tree.flutterScrollPositionWithSingleContext.hasPhysics() ? evaluateRequiredFlutterScrollPhysicsType(tree.flutterScrollPositionWithSingleContext.physics) : missing('physics')),
          context: (tree.flutterScrollPositionWithSingleContext.hasContext() ? evaluateRequiredFlutterScrollContextType(tree.flutterScrollPositionWithSingleContext.context) : missing('context')),
          initialPixels: (tree.flutterScrollPositionWithSingleContext.hasInitialPixels() ? tree.flutterScrollPositionWithSingleContext.initialPixels : 0.0),
          keepScrollOffset: (tree.flutterScrollPositionWithSingleContext.hasKeepScrollOffset() ? tree.flutterScrollPositionWithSingleContext.keepScrollOffset : true),
          oldPosition: (tree.flutterScrollPositionWithSingleContext.hasOldPosition() ? evaluateFlutterScrollPositionType(tree.flutterScrollPositionWithSingleContext.oldPosition) : null),
          debugLabel: (tree.flutterScrollPositionWithSingleContext.hasDebugLabel() ? tree.flutterScrollPositionWithSingleContext.debugLabel : null));
    case messages.FlutterViewportOffsetType_Constructor.flutterViewportOffsetNamedFixed:
      return $flutterSrcRenderingViewportOffset.ViewportOffset.fixed(
          (tree.flutterViewportOffsetNamedFixed.hasValue() ? tree.flutterViewportOffsetNamedFixed.value : missing('value')));
    case messages.FlutterViewportOffsetType_Constructor.flutterViewportOffsetNamedZero:
      return $flutterSrcRenderingViewportOffset.ViewportOffset.zero(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialActionIconsTheme.ActionIconThemeData evaluateRequiredMaterialActionIconThemeDataType(messages.MaterialActionIconThemeDataType tree) {
  final result = evaluateMaterialActionIconThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialActionIconsTheme.ActionIconThemeData? evaluateMaterialActionIconThemeDataType(messages.MaterialActionIconThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialActionIconThemeDataType_Constructor.materialActionIconThemeData:
      return $flutterSrcMaterialActionIconsTheme.ActionIconThemeData(
          backButtonIconBuilder: null,
          closeButtonIconBuilder: null,
          drawerButtonIconBuilder: null,
          endDrawerButtonIconBuilder: null);
    default:
      return null;
  }
}

$flutterSrcMaterialAppBarTheme.AppBarTheme evaluateRequiredMaterialAppBarThemeType(messages.MaterialAppBarThemeType tree) {
  final result = evaluateMaterialAppBarThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialAppBarTheme.AppBarTheme? evaluateMaterialAppBarThemeType(messages.MaterialAppBarThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialAppBarThemeType_Constructor.materialAppBarTheme:
      return $flutterSrcMaterialAppBarTheme.AppBarTheme(
          color: (tree.materialAppBarTheme.hasColor() ? evaluateDartColorType(tree.materialAppBarTheme.color) : null),
          backgroundColor: (tree.materialAppBarTheme.hasBackgroundColor() ? evaluateDartColorType(tree.materialAppBarTheme.backgroundColor) : null),
          foregroundColor: (tree.materialAppBarTheme.hasForegroundColor() ? evaluateDartColorType(tree.materialAppBarTheme.foregroundColor) : null),
          elevation: (tree.materialAppBarTheme.hasElevation() ? tree.materialAppBarTheme.elevation : null),
          scrolledUnderElevation: (tree.materialAppBarTheme.hasScrolledUnderElevation() ? tree.materialAppBarTheme.scrolledUnderElevation : null),
          shadowColor: (tree.materialAppBarTheme.hasShadowColor() ? evaluateDartColorType(tree.materialAppBarTheme.shadowColor) : null),
          surfaceTintColor: (tree.materialAppBarTheme.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAppBarTheme.surfaceTintColor) : null),
          shape: (tree.materialAppBarTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAppBarTheme.shape) : null),
          iconTheme: (tree.materialAppBarTheme.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBarTheme.iconTheme) : null),
          actionsIconTheme: (tree.materialAppBarTheme.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBarTheme.actionsIconTheme) : null),
          centerTitle: (tree.materialAppBarTheme.hasCenterTitle() ? tree.materialAppBarTheme.centerTitle : null),
          titleSpacing: (tree.materialAppBarTheme.hasTitleSpacing() ? tree.materialAppBarTheme.titleSpacing : null),
          toolbarHeight: (tree.materialAppBarTheme.hasToolbarHeight() ? tree.materialAppBarTheme.toolbarHeight : null),
          toolbarTextStyle: (tree.materialAppBarTheme.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBarTheme.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialAppBarTheme.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBarTheme.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialAppBarTheme.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialAppBarTheme.systemOverlayStyle) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialBadgeTheme.BadgeThemeData evaluateRequiredMaterialBadgeThemeDataType(messages.MaterialBadgeThemeDataType tree) {
  final result = evaluateMaterialBadgeThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialBadgeTheme.BadgeThemeData? evaluateMaterialBadgeThemeDataType(messages.MaterialBadgeThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialBadgeThemeDataType_Constructor.materialBadgeThemeData:
      return $flutterSrcMaterialBadgeTheme.BadgeThemeData(
          backgroundColor: (tree.materialBadgeThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadgeThemeData.backgroundColor) : null),
          textColor: (tree.materialBadgeThemeData.hasTextColor() ? evaluateDartColorType(tree.materialBadgeThemeData.textColor) : null),
          smallSize: (tree.materialBadgeThemeData.hasSmallSize() ? tree.materialBadgeThemeData.smallSize : null),
          largeSize: (tree.materialBadgeThemeData.hasLargeSize() ? tree.materialBadgeThemeData.largeSize : null),
          textStyle: (tree.materialBadgeThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadgeThemeData.textStyle) : null),
          padding: (tree.materialBadgeThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadgeThemeData.padding) : null),
          alignment: (tree.materialBadgeThemeData.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadgeThemeData.alignment) : null),
          offset: (tree.materialBadgeThemeData.hasOffset() ? evaluateDartOffsetType(tree.materialBadgeThemeData.offset) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialBottomAppBarTheme.BottomAppBarTheme evaluateRequiredMaterialBottomAppBarThemeType(messages.MaterialBottomAppBarThemeType tree) {
  final result = evaluateMaterialBottomAppBarThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialBottomAppBarTheme.BottomAppBarTheme? evaluateMaterialBottomAppBarThemeType(messages.MaterialBottomAppBarThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialBottomAppBarThemeType_Constructor.materialBottomAppBarTheme:
      return $flutterSrcMaterialBottomAppBarTheme.BottomAppBarTheme(
          color: (tree.materialBottomAppBarTheme.hasColor() ? evaluateDartColorType(tree.materialBottomAppBarTheme.color) : null),
          elevation: (tree.materialBottomAppBarTheme.hasElevation() ? tree.materialBottomAppBarTheme.elevation : null),
          shape: (tree.materialBottomAppBarTheme.hasShape() ? evaluateFlutterNotchedShapeType(tree.materialBottomAppBarTheme.shape) : null),
          height: (tree.materialBottomAppBarTheme.hasHeight() ? tree.materialBottomAppBarTheme.height : null),
          surfaceTintColor: (tree.materialBottomAppBarTheme.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialBottomAppBarTheme.surfaceTintColor) : null),
          shadowColor: (tree.materialBottomAppBarTheme.hasShadowColor() ? evaluateDartColorType(tree.materialBottomAppBarTheme.shadowColor) : null),
          padding: (tree.materialBottomAppBarTheme.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBottomAppBarTheme.padding) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarThemeData evaluateRequiredMaterialBottomNavigationBarThemeDataType(messages.MaterialBottomNavigationBarThemeDataType tree) {
  final result = evaluateMaterialBottomNavigationBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarThemeData? evaluateMaterialBottomNavigationBarThemeDataType(messages.MaterialBottomNavigationBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialBottomNavigationBarThemeDataType_Constructor.materialBottomNavigationBarThemeData:
      return $flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarThemeData(
          backgroundColor: (tree.materialBottomNavigationBarThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialBottomNavigationBarThemeData.backgroundColor) : null),
          elevation: (tree.materialBottomNavigationBarThemeData.hasElevation() ? tree.materialBottomNavigationBarThemeData.elevation : null),
          selectedIconTheme: (tree.materialBottomNavigationBarThemeData.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBarThemeData.selectedIconTheme) : null),
          unselectedIconTheme: (tree.materialBottomNavigationBarThemeData.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBarThemeData.unselectedIconTheme) : null),
          selectedItemColor: (tree.materialBottomNavigationBarThemeData.hasSelectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBarThemeData.selectedItemColor) : null),
          unselectedItemColor: (tree.materialBottomNavigationBarThemeData.hasUnselectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBarThemeData.unselectedItemColor) : null),
          selectedLabelStyle: (tree.materialBottomNavigationBarThemeData.hasSelectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBarThemeData.selectedLabelStyle) : null),
          unselectedLabelStyle: (tree.materialBottomNavigationBarThemeData.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBarThemeData.unselectedLabelStyle) : null),
          showSelectedLabels: (tree.materialBottomNavigationBarThemeData.hasShowSelectedLabels() ? tree.materialBottomNavigationBarThemeData.showSelectedLabels : null),
          showUnselectedLabels: (tree.materialBottomNavigationBarThemeData.hasShowUnselectedLabels() ? tree.materialBottomNavigationBarThemeData.showUnselectedLabels : null),
          type: (tree.materialBottomNavigationBarThemeData.hasType() ? enums.convertMaterialBottomNavigationBarTypeType(tree.materialBottomNavigationBarThemeData.type) : null),
          enableFeedback: (tree.materialBottomNavigationBarThemeData.hasEnableFeedback() ? tree.materialBottomNavigationBarThemeData.enableFeedback : null),
          landscapeLayout: (tree.materialBottomNavigationBarThemeData.hasLandscapeLayout() ? enums.convertMaterialBottomNavigationBarLandscapeLayoutType(tree.materialBottomNavigationBarThemeData.landscapeLayout) : null),
          mouseCursor: null);
    default:
      return null;
  }
}

$flutterSrcMaterialBottomSheetTheme.BottomSheetThemeData evaluateRequiredMaterialBottomSheetThemeDataType(messages.MaterialBottomSheetThemeDataType tree) {
  final result = evaluateMaterialBottomSheetThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialBottomSheetTheme.BottomSheetThemeData? evaluateMaterialBottomSheetThemeDataType(messages.MaterialBottomSheetThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialBottomSheetThemeDataType_Constructor.materialBottomSheetThemeData:
      return $flutterSrcMaterialBottomSheetTheme.BottomSheetThemeData(
          backgroundColor: (tree.materialBottomSheetThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.backgroundColor) : null),
          surfaceTintColor: (tree.materialBottomSheetThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.surfaceTintColor) : null),
          elevation: (tree.materialBottomSheetThemeData.hasElevation() ? tree.materialBottomSheetThemeData.elevation : null),
          modalBackgroundColor: (tree.materialBottomSheetThemeData.hasModalBackgroundColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.modalBackgroundColor) : null),
          modalBarrierColor: (tree.materialBottomSheetThemeData.hasModalBarrierColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.modalBarrierColor) : null),
          shadowColor: (tree.materialBottomSheetThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.shadowColor) : null),
          modalElevation: (tree.materialBottomSheetThemeData.hasModalElevation() ? tree.materialBottomSheetThemeData.modalElevation : null),
          shape: (tree.materialBottomSheetThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialBottomSheetThemeData.shape) : null),
          showDragHandle: (tree.materialBottomSheetThemeData.hasShowDragHandle() ? tree.materialBottomSheetThemeData.showDragHandle : null),
          dragHandleColor: (tree.materialBottomSheetThemeData.hasDragHandleColor() ? evaluateDartColorType(tree.materialBottomSheetThemeData.dragHandleColor) : null),
          dragHandleSize: (tree.materialBottomSheetThemeData.hasDragHandleSize() ? evaluateDartSizeType(tree.materialBottomSheetThemeData.dragHandleSize) : null),
          clipBehavior: (tree.materialBottomSheetThemeData.hasClipBehavior() ? enums.convertDartClipType(tree.materialBottomSheetThemeData.clipBehavior) : null),
          constraints: (tree.materialBottomSheetThemeData.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialBottomSheetThemeData.constraints) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialButtonBarTheme.ButtonBarThemeData evaluateRequiredMaterialButtonBarThemeDataType(messages.MaterialButtonBarThemeDataType tree) {
  final result = evaluateMaterialButtonBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialButtonBarTheme.ButtonBarThemeData? evaluateMaterialButtonBarThemeDataType(messages.MaterialButtonBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialButtonBarThemeDataType_Constructor.materialButtonBarThemeData:
      return $flutterSrcMaterialButtonBarTheme.ButtonBarThemeData(
          alignment: (tree.materialButtonBarThemeData.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialButtonBarThemeData.alignment) : null),
          mainAxisSize: (tree.materialButtonBarThemeData.hasMainAxisSize() ? enums.convertFlutterMainAxisSizeType(tree.materialButtonBarThemeData.mainAxisSize) : null),
          buttonTextTheme: (tree.materialButtonBarThemeData.hasButtonTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialButtonBarThemeData.buttonTextTheme) : null),
          buttonMinWidth: (tree.materialButtonBarThemeData.hasButtonMinWidth() ? tree.materialButtonBarThemeData.buttonMinWidth : null),
          buttonHeight: (tree.materialButtonBarThemeData.hasButtonHeight() ? tree.materialButtonBarThemeData.buttonHeight : null),
          buttonPadding: (tree.materialButtonBarThemeData.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonBarThemeData.buttonPadding) : null),
          buttonAlignedDropdown: (tree.materialButtonBarThemeData.hasButtonAlignedDropdown() ? tree.materialButtonBarThemeData.buttonAlignedDropdown : null),
          layoutBehavior: (tree.materialButtonBarThemeData.hasLayoutBehavior() ? enums.convertMaterialButtonBarLayoutBehaviorType(tree.materialButtonBarThemeData.layoutBehavior) : null),
          overflowDirection: (tree.materialButtonBarThemeData.hasOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialButtonBarThemeData.overflowDirection) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialButtonStyle.ButtonStyle evaluateRequiredMaterialButtonStyleType(messages.MaterialButtonStyleType tree) {
  final result = evaluateMaterialButtonStyleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialButtonStyle.ButtonStyle? evaluateMaterialButtonStyleType(messages.MaterialButtonStyleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialButtonStyleType_Constructor.materialButtonStyle:
      return $flutterSrcMaterialButtonStyle.ButtonStyle(
          textStyle: null,
          backgroundColor: null,
          foregroundColor: null,
          overlayColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          elevation: null,
          padding: null,
          minimumSize: null,
          fixedSize: null,
          maximumSize: null,
          iconColor: null,
          iconSize: null,
          side: null,
          shape: null,
          mouseCursor: null,
          visualDensity: (tree.materialButtonStyle.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialButtonStyle.visualDensity) : null),
          tapTargetSize: (tree.materialButtonStyle.hasTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialButtonStyle.tapTargetSize) : null),
          animationDuration: (tree.materialButtonStyle.hasAnimationDuration() ? evaluateDartDurationType(tree.materialButtonStyle.animationDuration) : null),
          enableFeedback: (tree.materialButtonStyle.hasEnableFeedback() ? tree.materialButtonStyle.enableFeedback : null),
          alignment: (tree.materialButtonStyle.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialButtonStyle.alignment) : null),
          splashFactory: null);
    default:
      return null;
  }
}

$flutterSrcMaterialButtonTheme.ButtonThemeData evaluateRequiredMaterialButtonThemeDataType(messages.MaterialButtonThemeDataType tree) {
  final result = evaluateMaterialButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialButtonTheme.ButtonThemeData? evaluateMaterialButtonThemeDataType(messages.MaterialButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialButtonThemeDataType_Constructor.materialButtonThemeData:
      return $flutterSrcMaterialButtonTheme.ButtonThemeData(
          textTheme: (tree.materialButtonThemeData.hasTextTheme() ? enums.convertRequiredMaterialButtonTextThemeType(tree.materialButtonThemeData.textTheme) : $flutterSrcMaterialButtonTheme.ButtonTextTheme.normal),
          minWidth: (tree.materialButtonThemeData.hasMinWidth() ? tree.materialButtonThemeData.minWidth : 88.0),
          height: (tree.materialButtonThemeData.hasHeight() ? tree.materialButtonThemeData.height : 36.0),
          padding: (tree.materialButtonThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonThemeData.padding) : null),
          shape: (tree.materialButtonThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialButtonThemeData.shape) : null),
          layoutBehavior: (tree.materialButtonThemeData.hasLayoutBehavior() ? enums.convertRequiredMaterialButtonBarLayoutBehaviorType(tree.materialButtonThemeData.layoutBehavior) : $flutterSrcMaterialButtonTheme.ButtonBarLayoutBehavior.padded),
          alignedDropdown: (tree.materialButtonThemeData.hasAlignedDropdown() ? tree.materialButtonThemeData.alignedDropdown : false),
          buttonColor: (tree.materialButtonThemeData.hasButtonColor() ? evaluateDartColorType(tree.materialButtonThemeData.buttonColor) : null),
          disabledColor: (tree.materialButtonThemeData.hasDisabledColor() ? evaluateDartColorType(tree.materialButtonThemeData.disabledColor) : null),
          focusColor: (tree.materialButtonThemeData.hasFocusColor() ? evaluateDartColorType(tree.materialButtonThemeData.focusColor) : null),
          hoverColor: (tree.materialButtonThemeData.hasHoverColor() ? evaluateDartColorType(tree.materialButtonThemeData.hoverColor) : null),
          highlightColor: (tree.materialButtonThemeData.hasHighlightColor() ? evaluateDartColorType(tree.materialButtonThemeData.highlightColor) : null),
          splashColor: (tree.materialButtonThemeData.hasSplashColor() ? evaluateDartColorType(tree.materialButtonThemeData.splashColor) : null),
          colorScheme: (tree.materialButtonThemeData.hasColorScheme() ? evaluateMaterialColorSchemeType(tree.materialButtonThemeData.colorScheme) : null),
          materialTapTargetSize: (tree.materialButtonThemeData.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialButtonThemeData.materialTapTargetSize) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialCardTheme.CardTheme evaluateRequiredMaterialCardThemeType(messages.MaterialCardThemeType tree) {
  final result = evaluateMaterialCardThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialCardTheme.CardTheme? evaluateMaterialCardThemeType(messages.MaterialCardThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialCardThemeType_Constructor.materialCardTheme:
      return $flutterSrcMaterialCardTheme.CardTheme(
          clipBehavior: (tree.materialCardTheme.hasClipBehavior() ? enums.convertDartClipType(tree.materialCardTheme.clipBehavior) : null),
          color: (tree.materialCardTheme.hasColor() ? evaluateDartColorType(tree.materialCardTheme.color) : null),
          shadowColor: (tree.materialCardTheme.hasShadowColor() ? evaluateDartColorType(tree.materialCardTheme.shadowColor) : null),
          surfaceTintColor: (tree.materialCardTheme.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialCardTheme.surfaceTintColor) : null),
          elevation: (tree.materialCardTheme.hasElevation() ? tree.materialCardTheme.elevation : null),
          margin: (tree.materialCardTheme.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCardTheme.margin) : null),
          shape: (tree.materialCardTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCardTheme.shape) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialCheckboxTheme.CheckboxThemeData evaluateRequiredMaterialCheckboxThemeDataType(messages.MaterialCheckboxThemeDataType tree) {
  final result = evaluateMaterialCheckboxThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialCheckboxTheme.CheckboxThemeData? evaluateMaterialCheckboxThemeDataType(messages.MaterialCheckboxThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialCheckboxThemeDataType_Constructor.materialCheckboxThemeData:
      return $flutterSrcMaterialCheckboxTheme.CheckboxThemeData(
          mouseCursor: null,
          fillColor: null,
          checkColor: null,
          overlayColor: null,
          splashRadius: (tree.materialCheckboxThemeData.hasSplashRadius() ? tree.materialCheckboxThemeData.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxThemeData.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxThemeData.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxThemeData.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxThemeData.visualDensity) : null),
          shape: (tree.materialCheckboxThemeData.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxThemeData.shape) : null),
          side: (tree.materialCheckboxThemeData.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxThemeData.side) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialChipTheme.ChipThemeData evaluateRequiredMaterialChipThemeDataType(messages.MaterialChipThemeDataType tree) {
  final result = evaluateMaterialChipThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialChipTheme.ChipThemeData? evaluateMaterialChipThemeDataType(messages.MaterialChipThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialChipThemeDataType_Constructor.materialChipThemeData:
      return $flutterSrcMaterialChipTheme.ChipThemeData(
          color: null,
          backgroundColor: (tree.materialChipThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialChipThemeData.backgroundColor) : null),
          deleteIconColor: (tree.materialChipThemeData.hasDeleteIconColor() ? evaluateDartColorType(tree.materialChipThemeData.deleteIconColor) : null),
          disabledColor: (tree.materialChipThemeData.hasDisabledColor() ? evaluateDartColorType(tree.materialChipThemeData.disabledColor) : null),
          selectedColor: (tree.materialChipThemeData.hasSelectedColor() ? evaluateDartColorType(tree.materialChipThemeData.selectedColor) : null),
          secondarySelectedColor: (tree.materialChipThemeData.hasSecondarySelectedColor() ? evaluateDartColorType(tree.materialChipThemeData.secondarySelectedColor) : null),
          shadowColor: (tree.materialChipThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialChipThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialChipThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChipThemeData.surfaceTintColor) : null),
          selectedShadowColor: (tree.materialChipThemeData.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChipThemeData.selectedShadowColor) : null),
          showCheckmark: (tree.materialChipThemeData.hasShowCheckmark() ? tree.materialChipThemeData.showCheckmark : null),
          checkmarkColor: (tree.materialChipThemeData.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChipThemeData.checkmarkColor) : null),
          labelPadding: (tree.materialChipThemeData.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChipThemeData.labelPadding) : null),
          padding: (tree.materialChipThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChipThemeData.padding) : null),
          side: (tree.materialChipThemeData.hasSide() ? evaluateFlutterBorderSideType(tree.materialChipThemeData.side) : null),
          shape: (tree.materialChipThemeData.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChipThemeData.shape) : null),
          labelStyle: (tree.materialChipThemeData.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChipThemeData.labelStyle) : null),
          secondaryLabelStyle: (tree.materialChipThemeData.hasSecondaryLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChipThemeData.secondaryLabelStyle) : null),
          brightness: (tree.materialChipThemeData.hasBrightness() ? enums.convertDartBrightnessType(tree.materialChipThemeData.brightness) : null),
          elevation: (tree.materialChipThemeData.hasElevation() ? tree.materialChipThemeData.elevation : null),
          pressElevation: (tree.materialChipThemeData.hasPressElevation() ? tree.materialChipThemeData.pressElevation : null),
          iconTheme: (tree.materialChipThemeData.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChipThemeData.iconTheme) : null));
    case messages.MaterialChipThemeDataType_Constructor.materialChipThemeDataNamedFromDefaults:
      return $flutterSrcMaterialChipTheme.ChipThemeData.fromDefaults(
          brightness: (tree.materialChipThemeDataNamedFromDefaults.hasBrightness() ? enums.convertDartBrightnessType(tree.materialChipThemeDataNamedFromDefaults.brightness) : null),
          primaryColor: (tree.materialChipThemeDataNamedFromDefaults.hasPrimaryColor() ? evaluateDartColorType(tree.materialChipThemeDataNamedFromDefaults.primaryColor) : null),
          secondaryColor: (tree.materialChipThemeDataNamedFromDefaults.hasSecondaryColor() ? evaluateRequiredDartColorType(tree.materialChipThemeDataNamedFromDefaults.secondaryColor) : missing('secondaryColor')),
          labelStyle: (tree.materialChipThemeDataNamedFromDefaults.hasLabelStyle() ? evaluateRequiredFlutterTextStyleType(tree.materialChipThemeDataNamedFromDefaults.labelStyle) : missing('labelStyle')));
    default:
      return null;
  }
}

$flutterSrcMaterialColorScheme.ColorScheme evaluateRequiredMaterialColorSchemeType(messages.MaterialColorSchemeType tree) {
  final result = evaluateMaterialColorSchemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialColorScheme.ColorScheme? evaluateMaterialColorSchemeType(messages.MaterialColorSchemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialColorSchemeType_Constructor.materialColorScheme:
      return $flutterSrcMaterialColorScheme.ColorScheme(
          brightness: (tree.materialColorScheme.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorScheme.brightness) : missing('brightness')),
          primary: (tree.materialColorScheme.hasPrimary() ? evaluateRequiredDartColorType(tree.materialColorScheme.primary) : missing('primary')),
          onPrimary: (tree.materialColorScheme.hasOnPrimary() ? evaluateRequiredDartColorType(tree.materialColorScheme.onPrimary) : missing('onPrimary')),
          primaryContainer: (tree.materialColorScheme.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorScheme.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorScheme.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorScheme.onPrimaryContainer) : null),
          secondary: (tree.materialColorScheme.hasSecondary() ? evaluateRequiredDartColorType(tree.materialColorScheme.secondary) : missing('secondary')),
          onSecondary: (tree.materialColorScheme.hasOnSecondary() ? evaluateRequiredDartColorType(tree.materialColorScheme.onSecondary) : missing('onSecondary')),
          secondaryContainer: (tree.materialColorScheme.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorScheme.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorScheme.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorScheme.onSecondaryContainer) : null),
          tertiary: (tree.materialColorScheme.hasTertiary() ? evaluateDartColorType(tree.materialColorScheme.tertiary) : null),
          onTertiary: (tree.materialColorScheme.hasOnTertiary() ? evaluateDartColorType(tree.materialColorScheme.onTertiary) : null),
          tertiaryContainer: (tree.materialColorScheme.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorScheme.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorScheme.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorScheme.onTertiaryContainer) : null),
          error: (tree.materialColorScheme.hasError() ? evaluateRequiredDartColorType(tree.materialColorScheme.error) : missing('error')),
          onError: (tree.materialColorScheme.hasOnError() ? evaluateRequiredDartColorType(tree.materialColorScheme.onError) : missing('onError')),
          errorContainer: (tree.materialColorScheme.hasErrorContainer() ? evaluateDartColorType(tree.materialColorScheme.errorContainer) : null),
          onErrorContainer: (tree.materialColorScheme.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorScheme.onErrorContainer) : null),
          background: (tree.materialColorScheme.hasBackground() ? evaluateRequiredDartColorType(tree.materialColorScheme.background) : missing('background')),
          onBackground: (tree.materialColorScheme.hasOnBackground() ? evaluateRequiredDartColorType(tree.materialColorScheme.onBackground) : missing('onBackground')),
          surface: (tree.materialColorScheme.hasSurface() ? evaluateRequiredDartColorType(tree.materialColorScheme.surface) : missing('surface')),
          onSurface: (tree.materialColorScheme.hasOnSurface() ? evaluateRequiredDartColorType(tree.materialColorScheme.onSurface) : missing('onSurface')),
          surfaceVariant: (tree.materialColorScheme.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorScheme.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorScheme.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorScheme.onSurfaceVariant) : null),
          outline: (tree.materialColorScheme.hasOutline() ? evaluateDartColorType(tree.materialColorScheme.outline) : null),
          outlineVariant: (tree.materialColorScheme.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorScheme.outlineVariant) : null),
          shadow: (tree.materialColorScheme.hasShadow() ? evaluateDartColorType(tree.materialColorScheme.shadow) : null),
          scrim: (tree.materialColorScheme.hasScrim() ? evaluateDartColorType(tree.materialColorScheme.scrim) : null),
          inverseSurface: (tree.materialColorScheme.hasInverseSurface() ? evaluateDartColorType(tree.materialColorScheme.inverseSurface) : null),
          onInverseSurface: (tree.materialColorScheme.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorScheme.onInverseSurface) : null),
          inversePrimary: (tree.materialColorScheme.hasInversePrimary() ? evaluateDartColorType(tree.materialColorScheme.inversePrimary) : null),
          surfaceTint: (tree.materialColorScheme.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorScheme.surfaceTint) : null));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedDark:
      return $flutterSrcMaterialColorScheme.ColorScheme.dark(
          brightness: (tree.materialColorSchemeNamedDark.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedDark.brightness) : $dartUi.Brightness.dark),
          primary: (tree.materialColorSchemeNamedDark.hasPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.primary) : $dartUi.Color(0xffbb86fc)),
          onPrimary: (tree.materialColorSchemeNamedDark.hasOnPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.onPrimary) : $flutterSrcMaterialColors.Colors.black),
          primaryContainer: (tree.materialColorSchemeNamedDark.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorSchemeNamedDark.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onPrimaryContainer) : null),
          secondary: (tree.materialColorSchemeNamedDark.hasSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.secondary) : $dartUi.Color(0xff03dac6)),
          onSecondary: (tree.materialColorSchemeNamedDark.hasOnSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.onSecondary) : $flutterSrcMaterialColors.Colors.black),
          secondaryContainer: (tree.materialColorSchemeNamedDark.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorSchemeNamedDark.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onSecondaryContainer) : null),
          tertiary: (tree.materialColorSchemeNamedDark.hasTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.tertiary) : null),
          onTertiary: (tree.materialColorSchemeNamedDark.hasOnTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onTertiary) : null),
          tertiaryContainer: (tree.materialColorSchemeNamedDark.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorSchemeNamedDark.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onTertiaryContainer) : null),
          error: (tree.materialColorSchemeNamedDark.hasError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.error) : $dartUi.Color(0xffcf6679)),
          onError: (tree.materialColorSchemeNamedDark.hasOnError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.onError) : $flutterSrcMaterialColors.Colors.black),
          errorContainer: (tree.materialColorSchemeNamedDark.hasErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.errorContainer) : null),
          onErrorContainer: (tree.materialColorSchemeNamedDark.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onErrorContainer) : null),
          background: (tree.materialColorSchemeNamedDark.hasBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.background) : $dartUi.Color(0xff121212)),
          onBackground: (tree.materialColorSchemeNamedDark.hasOnBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.onBackground) : $flutterSrcMaterialColors.Colors.white),
          surface: (tree.materialColorSchemeNamedDark.hasSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.surface) : $dartUi.Color(0xff121212)),
          onSurface: (tree.materialColorSchemeNamedDark.hasOnSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedDark.onSurface) : $flutterSrcMaterialColors.Colors.white),
          surfaceVariant: (tree.materialColorSchemeNamedDark.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorSchemeNamedDark.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onSurfaceVariant) : null),
          outline: (tree.materialColorSchemeNamedDark.hasOutline() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.outline) : null),
          outlineVariant: (tree.materialColorSchemeNamedDark.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.outlineVariant) : null),
          shadow: (tree.materialColorSchemeNamedDark.hasShadow() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.shadow) : null),
          scrim: (tree.materialColorSchemeNamedDark.hasScrim() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.scrim) : null),
          inverseSurface: (tree.materialColorSchemeNamedDark.hasInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.inverseSurface) : null),
          onInverseSurface: (tree.materialColorSchemeNamedDark.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.onInverseSurface) : null),
          inversePrimary: (tree.materialColorSchemeNamedDark.hasInversePrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.inversePrimary) : null),
          surfaceTint: (tree.materialColorSchemeNamedDark.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorSchemeNamedDark.surfaceTint) : null));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedFromSeed:
      return $flutterSrcMaterialColorScheme.ColorScheme.fromSeed(
          seedColor: (tree.materialColorSchemeNamedFromSeed.hasSeedColor() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedFromSeed.seedColor) : missing('seedColor')),
          brightness: (tree.materialColorSchemeNamedFromSeed.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedFromSeed.brightness) : $dartUi.Brightness.light),
          primary: (tree.materialColorSchemeNamedFromSeed.hasPrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.primary) : null),
          onPrimary: (tree.materialColorSchemeNamedFromSeed.hasOnPrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onPrimary) : null),
          primaryContainer: (tree.materialColorSchemeNamedFromSeed.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorSchemeNamedFromSeed.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onPrimaryContainer) : null),
          secondary: (tree.materialColorSchemeNamedFromSeed.hasSecondary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.secondary) : null),
          onSecondary: (tree.materialColorSchemeNamedFromSeed.hasOnSecondary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onSecondary) : null),
          secondaryContainer: (tree.materialColorSchemeNamedFromSeed.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorSchemeNamedFromSeed.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onSecondaryContainer) : null),
          tertiary: (tree.materialColorSchemeNamedFromSeed.hasTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.tertiary) : null),
          onTertiary: (tree.materialColorSchemeNamedFromSeed.hasOnTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onTertiary) : null),
          tertiaryContainer: (tree.materialColorSchemeNamedFromSeed.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorSchemeNamedFromSeed.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onTertiaryContainer) : null),
          error: (tree.materialColorSchemeNamedFromSeed.hasError() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.error) : null),
          onError: (tree.materialColorSchemeNamedFromSeed.hasOnError() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onError) : null),
          errorContainer: (tree.materialColorSchemeNamedFromSeed.hasErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.errorContainer) : null),
          onErrorContainer: (tree.materialColorSchemeNamedFromSeed.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onErrorContainer) : null),
          outline: (tree.materialColorSchemeNamedFromSeed.hasOutline() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.outline) : null),
          outlineVariant: (tree.materialColorSchemeNamedFromSeed.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.outlineVariant) : null),
          background: (tree.materialColorSchemeNamedFromSeed.hasBackground() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.background) : null),
          onBackground: (tree.materialColorSchemeNamedFromSeed.hasOnBackground() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onBackground) : null),
          surface: (tree.materialColorSchemeNamedFromSeed.hasSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.surface) : null),
          onSurface: (tree.materialColorSchemeNamedFromSeed.hasOnSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onSurface) : null),
          surfaceVariant: (tree.materialColorSchemeNamedFromSeed.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorSchemeNamedFromSeed.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onSurfaceVariant) : null),
          inverseSurface: (tree.materialColorSchemeNamedFromSeed.hasInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.inverseSurface) : null),
          onInverseSurface: (tree.materialColorSchemeNamedFromSeed.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.onInverseSurface) : null),
          inversePrimary: (tree.materialColorSchemeNamedFromSeed.hasInversePrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.inversePrimary) : null),
          shadow: (tree.materialColorSchemeNamedFromSeed.hasShadow() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.shadow) : null),
          scrim: (tree.materialColorSchemeNamedFromSeed.hasScrim() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.scrim) : null),
          surfaceTint: (tree.materialColorSchemeNamedFromSeed.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSeed.surfaceTint) : null));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedFromSwatch:
      return $flutterSrcMaterialColorScheme.ColorScheme.fromSwatch(
          accentColor: (tree.materialColorSchemeNamedFromSwatch.hasAccentColor() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSwatch.accentColor) : null),
          cardColor: (tree.materialColorSchemeNamedFromSwatch.hasCardColor() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSwatch.cardColor) : null),
          backgroundColor: (tree.materialColorSchemeNamedFromSwatch.hasBackgroundColor() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSwatch.backgroundColor) : null),
          errorColor: (tree.materialColorSchemeNamedFromSwatch.hasErrorColor() ? evaluateDartColorType(tree.materialColorSchemeNamedFromSwatch.errorColor) : null),
          brightness: (tree.materialColorSchemeNamedFromSwatch.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedFromSwatch.brightness) : $dartUi.Brightness.light));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedHighContrastDark:
      return $flutterSrcMaterialColorScheme.ColorScheme.highContrastDark(
          brightness: (tree.materialColorSchemeNamedHighContrastDark.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedHighContrastDark.brightness) : $dartUi.Brightness.dark),
          primary: (tree.materialColorSchemeNamedHighContrastDark.hasPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.primary) : $dartUi.Color(0xffefb7ff)),
          onPrimary: (tree.materialColorSchemeNamedHighContrastDark.hasOnPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.onPrimary) : $flutterSrcMaterialColors.Colors.black),
          primaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onPrimaryContainer) : null),
          secondary: (tree.materialColorSchemeNamedHighContrastDark.hasSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.secondary) : $dartUi.Color(0xff66fff9)),
          onSecondary: (tree.materialColorSchemeNamedHighContrastDark.hasOnSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.onSecondary) : $flutterSrcMaterialColors.Colors.black),
          secondaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onSecondaryContainer) : null),
          tertiary: (tree.materialColorSchemeNamedHighContrastDark.hasTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.tertiary) : null),
          onTertiary: (tree.materialColorSchemeNamedHighContrastDark.hasOnTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onTertiary) : null),
          tertiaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorSchemeNamedHighContrastDark.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onTertiaryContainer) : null),
          error: (tree.materialColorSchemeNamedHighContrastDark.hasError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.error) : $dartUi.Color(0xff9b374d)),
          onError: (tree.materialColorSchemeNamedHighContrastDark.hasOnError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.onError) : $flutterSrcMaterialColors.Colors.black),
          errorContainer: (tree.materialColorSchemeNamedHighContrastDark.hasErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.errorContainer) : null),
          onErrorContainer: (tree.materialColorSchemeNamedHighContrastDark.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onErrorContainer) : null),
          background: (tree.materialColorSchemeNamedHighContrastDark.hasBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.background) : $dartUi.Color(0xff121212)),
          onBackground: (tree.materialColorSchemeNamedHighContrastDark.hasOnBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.onBackground) : $flutterSrcMaterialColors.Colors.white),
          surface: (tree.materialColorSchemeNamedHighContrastDark.hasSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.surface) : $dartUi.Color(0xff121212)),
          onSurface: (tree.materialColorSchemeNamedHighContrastDark.hasOnSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastDark.onSurface) : $flutterSrcMaterialColors.Colors.white),
          surfaceVariant: (tree.materialColorSchemeNamedHighContrastDark.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorSchemeNamedHighContrastDark.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onSurfaceVariant) : null),
          outline: (tree.materialColorSchemeNamedHighContrastDark.hasOutline() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.outline) : null),
          outlineVariant: (tree.materialColorSchemeNamedHighContrastDark.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.outlineVariant) : null),
          shadow: (tree.materialColorSchemeNamedHighContrastDark.hasShadow() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.shadow) : null),
          scrim: (tree.materialColorSchemeNamedHighContrastDark.hasScrim() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.scrim) : null),
          inverseSurface: (tree.materialColorSchemeNamedHighContrastDark.hasInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.inverseSurface) : null),
          onInverseSurface: (tree.materialColorSchemeNamedHighContrastDark.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.onInverseSurface) : null),
          inversePrimary: (tree.materialColorSchemeNamedHighContrastDark.hasInversePrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.inversePrimary) : null),
          surfaceTint: (tree.materialColorSchemeNamedHighContrastDark.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastDark.surfaceTint) : null));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedHighContrastLight:
      return $flutterSrcMaterialColorScheme.ColorScheme.highContrastLight(
          brightness: (tree.materialColorSchemeNamedHighContrastLight.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedHighContrastLight.brightness) : $dartUi.Brightness.light),
          primary: (tree.materialColorSchemeNamedHighContrastLight.hasPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.primary) : $dartUi.Color(0xff0000ba)),
          onPrimary: (tree.materialColorSchemeNamedHighContrastLight.hasOnPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.onPrimary) : $flutterSrcMaterialColors.Colors.white),
          primaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onPrimaryContainer) : null),
          secondary: (tree.materialColorSchemeNamedHighContrastLight.hasSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.secondary) : $dartUi.Color(0xff66fff9)),
          onSecondary: (tree.materialColorSchemeNamedHighContrastLight.hasOnSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.onSecondary) : $flutterSrcMaterialColors.Colors.black),
          secondaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onSecondaryContainer) : null),
          tertiary: (tree.materialColorSchemeNamedHighContrastLight.hasTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.tertiary) : null),
          onTertiary: (tree.materialColorSchemeNamedHighContrastLight.hasOnTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onTertiary) : null),
          tertiaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorSchemeNamedHighContrastLight.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onTertiaryContainer) : null),
          error: (tree.materialColorSchemeNamedHighContrastLight.hasError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.error) : $dartUi.Color(0xff790000)),
          onError: (tree.materialColorSchemeNamedHighContrastLight.hasOnError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.onError) : $flutterSrcMaterialColors.Colors.white),
          errorContainer: (tree.materialColorSchemeNamedHighContrastLight.hasErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.errorContainer) : null),
          onErrorContainer: (tree.materialColorSchemeNamedHighContrastLight.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onErrorContainer) : null),
          background: (tree.materialColorSchemeNamedHighContrastLight.hasBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.background) : $flutterSrcMaterialColors.Colors.white),
          onBackground: (tree.materialColorSchemeNamedHighContrastLight.hasOnBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.onBackground) : $flutterSrcMaterialColors.Colors.black),
          surface: (tree.materialColorSchemeNamedHighContrastLight.hasSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.surface) : $flutterSrcMaterialColors.Colors.white),
          onSurface: (tree.materialColorSchemeNamedHighContrastLight.hasOnSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedHighContrastLight.onSurface) : $flutterSrcMaterialColors.Colors.black),
          surfaceVariant: (tree.materialColorSchemeNamedHighContrastLight.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorSchemeNamedHighContrastLight.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onSurfaceVariant) : null),
          outline: (tree.materialColorSchemeNamedHighContrastLight.hasOutline() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.outline) : null),
          outlineVariant: (tree.materialColorSchemeNamedHighContrastLight.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.outlineVariant) : null),
          shadow: (tree.materialColorSchemeNamedHighContrastLight.hasShadow() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.shadow) : null),
          scrim: (tree.materialColorSchemeNamedHighContrastLight.hasScrim() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.scrim) : null),
          inverseSurface: (tree.materialColorSchemeNamedHighContrastLight.hasInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.inverseSurface) : null),
          onInverseSurface: (tree.materialColorSchemeNamedHighContrastLight.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.onInverseSurface) : null),
          inversePrimary: (tree.materialColorSchemeNamedHighContrastLight.hasInversePrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.inversePrimary) : null),
          surfaceTint: (tree.materialColorSchemeNamedHighContrastLight.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorSchemeNamedHighContrastLight.surfaceTint) : null));
    case messages.MaterialColorSchemeType_Constructor.materialColorSchemeNamedLight:
      return $flutterSrcMaterialColorScheme.ColorScheme.light(
          brightness: (tree.materialColorSchemeNamedLight.hasBrightness() ? enums.convertRequiredDartBrightnessType(tree.materialColorSchemeNamedLight.brightness) : $dartUi.Brightness.light),
          primary: (tree.materialColorSchemeNamedLight.hasPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.primary) : $dartUi.Color(0xff6200ee)),
          onPrimary: (tree.materialColorSchemeNamedLight.hasOnPrimary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.onPrimary) : $flutterSrcMaterialColors.Colors.white),
          primaryContainer: (tree.materialColorSchemeNamedLight.hasPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.primaryContainer) : null),
          onPrimaryContainer: (tree.materialColorSchemeNamedLight.hasOnPrimaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onPrimaryContainer) : null),
          secondary: (tree.materialColorSchemeNamedLight.hasSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.secondary) : $dartUi.Color(0xff03dac6)),
          onSecondary: (tree.materialColorSchemeNamedLight.hasOnSecondary() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.onSecondary) : $flutterSrcMaterialColors.Colors.black),
          secondaryContainer: (tree.materialColorSchemeNamedLight.hasSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.secondaryContainer) : null),
          onSecondaryContainer: (tree.materialColorSchemeNamedLight.hasOnSecondaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onSecondaryContainer) : null),
          tertiary: (tree.materialColorSchemeNamedLight.hasTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.tertiary) : null),
          onTertiary: (tree.materialColorSchemeNamedLight.hasOnTertiary() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onTertiary) : null),
          tertiaryContainer: (tree.materialColorSchemeNamedLight.hasTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.tertiaryContainer) : null),
          onTertiaryContainer: (tree.materialColorSchemeNamedLight.hasOnTertiaryContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onTertiaryContainer) : null),
          error: (tree.materialColorSchemeNamedLight.hasError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.error) : $dartUi.Color(0xffb00020)),
          onError: (tree.materialColorSchemeNamedLight.hasOnError() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.onError) : $flutterSrcMaterialColors.Colors.white),
          errorContainer: (tree.materialColorSchemeNamedLight.hasErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.errorContainer) : null),
          onErrorContainer: (tree.materialColorSchemeNamedLight.hasOnErrorContainer() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onErrorContainer) : null),
          background: (tree.materialColorSchemeNamedLight.hasBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.background) : $flutterSrcMaterialColors.Colors.white),
          onBackground: (tree.materialColorSchemeNamedLight.hasOnBackground() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.onBackground) : $flutterSrcMaterialColors.Colors.black),
          surface: (tree.materialColorSchemeNamedLight.hasSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.surface) : $flutterSrcMaterialColors.Colors.white),
          onSurface: (tree.materialColorSchemeNamedLight.hasOnSurface() ? evaluateRequiredDartColorType(tree.materialColorSchemeNamedLight.onSurface) : $flutterSrcMaterialColors.Colors.black),
          surfaceVariant: (tree.materialColorSchemeNamedLight.hasSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.surfaceVariant) : null),
          onSurfaceVariant: (tree.materialColorSchemeNamedLight.hasOnSurfaceVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onSurfaceVariant) : null),
          outline: (tree.materialColorSchemeNamedLight.hasOutline() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.outline) : null),
          outlineVariant: (tree.materialColorSchemeNamedLight.hasOutlineVariant() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.outlineVariant) : null),
          shadow: (tree.materialColorSchemeNamedLight.hasShadow() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.shadow) : null),
          scrim: (tree.materialColorSchemeNamedLight.hasScrim() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.scrim) : null),
          inverseSurface: (tree.materialColorSchemeNamedLight.hasInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.inverseSurface) : null),
          onInverseSurface: (tree.materialColorSchemeNamedLight.hasOnInverseSurface() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.onInverseSurface) : null),
          inversePrimary: (tree.materialColorSchemeNamedLight.hasInversePrimary() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.inversePrimary) : null),
          surfaceTint: (tree.materialColorSchemeNamedLight.hasSurfaceTint() ? evaluateDartColorType(tree.materialColorSchemeNamedLight.surfaceTint) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialDataTable.DataCell evaluateRequiredMaterialDataCellType(messages.MaterialDataCellType tree) {
  final result = evaluateMaterialDataCellType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDataTable.DataCell? evaluateMaterialDataCellType(messages.MaterialDataCellType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDataCellType_Constructor.materialDataCell:
      return $flutterSrcMaterialDataTable.DataCell(
          (tree.materialDataCell.hasChild() ? evaluateRequiredWidgetType(tree.materialDataCell.child) : missing('child')),
          placeholder: (tree.materialDataCell.hasPlaceholder() ? tree.materialDataCell.placeholder : false),
          showEditIcon: (tree.materialDataCell.hasShowEditIcon() ? tree.materialDataCell.showEditIcon : false),
          onTap: null,
          onLongPress: null,
          onTapDown: null,
          onDoubleTap: null,
          onTapCancel: null);
    default:
      return null;
  }
}

$flutterSrcMaterialDataTable.DataColumn evaluateRequiredMaterialDataColumnType(messages.MaterialDataColumnType tree) {
  final result = evaluateMaterialDataColumnType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDataTable.DataColumn? evaluateMaterialDataColumnType(messages.MaterialDataColumnType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDataColumnType_Constructor.materialDataColumn:
      return $flutterSrcMaterialDataTable.DataColumn(
          label: (tree.materialDataColumn.hasLabel() ? evaluateRequiredWidgetType(tree.materialDataColumn.label) : missing('label')),
          tooltip: (tree.materialDataColumn.hasTooltip() ? tree.materialDataColumn.tooltip : null),
          numeric: (tree.materialDataColumn.hasNumeric() ? tree.materialDataColumn.numeric : false),
          onSort: null,
          mouseCursor: null);
    default:
      return null;
  }
}

$flutterSrcMaterialDataTable.DataRow evaluateRequiredMaterialDataRowType(messages.MaterialDataRowType tree) {
  final result = evaluateMaterialDataRowType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDataTable.DataRow? evaluateMaterialDataRowType(messages.MaterialDataRowType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDataRowType_Constructor.materialDataRow:
      return $flutterSrcMaterialDataTable.DataRow(
          key: (tree.materialDataRow.hasKey() ? evaluateFlutterLocalKeyType(tree.materialDataRow.key) : null),
          selected: (tree.materialDataRow.hasSelected() ? tree.materialDataRow.selected : false),
          onSelectChanged: null,
          onLongPress: null,
          color: null,
          mouseCursor: null,
          cells: tree.materialDataRow.cells.map((e) => evaluateRequiredMaterialDataCellType(e)).toList());
    case messages.MaterialDataRowType_Constructor.materialDataRowNamedByIndex:
      return $flutterSrcMaterialDataTable.DataRow.byIndex(
          index: (tree.materialDataRowNamedByIndex.hasIndex() ? tree.materialDataRowNamedByIndex.index : null),
          selected: (tree.materialDataRowNamedByIndex.hasSelected() ? tree.materialDataRowNamedByIndex.selected : false),
          onSelectChanged: null,
          onLongPress: null,
          color: null,
          mouseCursor: null,
          cells: tree.materialDataRowNamedByIndex.cells.map((e) => evaluateRequiredMaterialDataCellType(e)).toList());
    default:
      return null;
  }
}

$flutterSrcMaterialDataTableTheme.DataTableThemeData evaluateRequiredMaterialDataTableThemeDataType(messages.MaterialDataTableThemeDataType tree) {
  final result = evaluateMaterialDataTableThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDataTableTheme.DataTableThemeData? evaluateMaterialDataTableThemeDataType(messages.MaterialDataTableThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDataTableThemeDataType_Constructor.materialDataTableThemeData:
      return $flutterSrcMaterialDataTableTheme.DataTableThemeData(
          decoration: (tree.materialDataTableThemeData.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDataTableThemeData.decoration) : null),
          dataRowColor: null,
          dataRowMinHeight: (tree.materialDataTableThemeData.hasDataRowMinHeight() ? tree.materialDataTableThemeData.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialDataTableThemeData.hasDataRowMaxHeight() ? tree.materialDataTableThemeData.dataRowMaxHeight : null),
          dataTextStyle: (tree.materialDataTableThemeData.hasDataTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTableThemeData.dataTextStyle) : null),
          headingRowColor: null,
          headingRowHeight: (tree.materialDataTableThemeData.hasHeadingRowHeight() ? tree.materialDataTableThemeData.headingRowHeight : null),
          headingTextStyle: (tree.materialDataTableThemeData.hasHeadingTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTableThemeData.headingTextStyle) : null),
          horizontalMargin: (tree.materialDataTableThemeData.hasHorizontalMargin() ? tree.materialDataTableThemeData.horizontalMargin : null),
          columnSpacing: (tree.materialDataTableThemeData.hasColumnSpacing() ? tree.materialDataTableThemeData.columnSpacing : null),
          dividerThickness: (tree.materialDataTableThemeData.hasDividerThickness() ? tree.materialDataTableThemeData.dividerThickness : null),
          checkboxHorizontalMargin: (tree.materialDataTableThemeData.hasCheckboxHorizontalMargin() ? tree.materialDataTableThemeData.checkboxHorizontalMargin : null),
          headingCellCursor: null,
          dataRowCursor: null);
    default:
      return null;
  }
}

$flutterSrcMaterialDatePickerTheme.DatePickerThemeData evaluateRequiredMaterialDatePickerThemeDataType(messages.MaterialDatePickerThemeDataType tree) {
  final result = evaluateMaterialDatePickerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDatePickerTheme.DatePickerThemeData? evaluateMaterialDatePickerThemeDataType(messages.MaterialDatePickerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDatePickerThemeDataType_Constructor.materialDatePickerThemeData:
      return $flutterSrcMaterialDatePickerTheme.DatePickerThemeData(
          backgroundColor: (tree.materialDatePickerThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.backgroundColor) : null),
          elevation: (tree.materialDatePickerThemeData.hasElevation() ? tree.materialDatePickerThemeData.elevation : null),
          shadowColor: (tree.materialDatePickerThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialDatePickerThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.surfaceTintColor) : null),
          shape: (tree.materialDatePickerThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDatePickerThemeData.shape) : null),
          headerBackgroundColor: (tree.materialDatePickerThemeData.hasHeaderBackgroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.headerBackgroundColor) : null),
          headerForegroundColor: (tree.materialDatePickerThemeData.hasHeaderForegroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.headerForegroundColor) : null),
          headerHeadlineStyle: (tree.materialDatePickerThemeData.hasHeaderHeadlineStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.headerHeadlineStyle) : null),
          headerHelpStyle: (tree.materialDatePickerThemeData.hasHeaderHelpStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.headerHelpStyle) : null),
          weekdayStyle: (tree.materialDatePickerThemeData.hasWeekdayStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.weekdayStyle) : null),
          dayStyle: (tree.materialDatePickerThemeData.hasDayStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.dayStyle) : null),
          dayForegroundColor: null,
          dayBackgroundColor: null,
          dayOverlayColor: null,
          todayForegroundColor: null,
          todayBackgroundColor: null,
          todayBorder: (tree.materialDatePickerThemeData.hasTodayBorder() ? evaluateFlutterBorderSideType(tree.materialDatePickerThemeData.todayBorder) : null),
          yearStyle: (tree.materialDatePickerThemeData.hasYearStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.yearStyle) : null),
          yearForegroundColor: null,
          yearBackgroundColor: null,
          yearOverlayColor: null,
          rangePickerBackgroundColor: (tree.materialDatePickerThemeData.hasRangePickerBackgroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangePickerBackgroundColor) : null),
          rangePickerElevation: (tree.materialDatePickerThemeData.hasRangePickerElevation() ? tree.materialDatePickerThemeData.rangePickerElevation : null),
          rangePickerShadowColor: (tree.materialDatePickerThemeData.hasRangePickerShadowColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangePickerShadowColor) : null),
          rangePickerSurfaceTintColor: (tree.materialDatePickerThemeData.hasRangePickerSurfaceTintColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangePickerSurfaceTintColor) : null),
          rangePickerShape: (tree.materialDatePickerThemeData.hasRangePickerShape() ? evaluateFlutterShapeBorderType(tree.materialDatePickerThemeData.rangePickerShape) : null),
          rangePickerHeaderBackgroundColor: (tree.materialDatePickerThemeData.hasRangePickerHeaderBackgroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangePickerHeaderBackgroundColor) : null),
          rangePickerHeaderForegroundColor: (tree.materialDatePickerThemeData.hasRangePickerHeaderForegroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangePickerHeaderForegroundColor) : null),
          rangePickerHeaderHeadlineStyle: (tree.materialDatePickerThemeData.hasRangePickerHeaderHeadlineStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.rangePickerHeaderHeadlineStyle) : null),
          rangePickerHeaderHelpStyle: (tree.materialDatePickerThemeData.hasRangePickerHeaderHelpStyle() ? evaluateFlutterTextStyleType(tree.materialDatePickerThemeData.rangePickerHeaderHelpStyle) : null),
          rangeSelectionBackgroundColor: (tree.materialDatePickerThemeData.hasRangeSelectionBackgroundColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.rangeSelectionBackgroundColor) : null),
          rangeSelectionOverlayColor: null,
          dividerColor: (tree.materialDatePickerThemeData.hasDividerColor() ? evaluateDartColorType(tree.materialDatePickerThemeData.dividerColor) : null),
          inputDecorationTheme: (tree.materialDatePickerThemeData.hasInputDecorationTheme() ? evaluateMaterialInputDecorationThemeType(tree.materialDatePickerThemeData.inputDecorationTheme) : null),
          cancelButtonStyle: (tree.materialDatePickerThemeData.hasCancelButtonStyle() ? evaluateMaterialButtonStyleType(tree.materialDatePickerThemeData.cancelButtonStyle) : null),
          confirmButtonStyle: (tree.materialDatePickerThemeData.hasConfirmButtonStyle() ? evaluateMaterialButtonStyleType(tree.materialDatePickerThemeData.confirmButtonStyle) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialDate.DateTimeRange evaluateRequiredMaterialDateTimeRangeType(messages.MaterialDateTimeRangeType tree) {
  final result = evaluateMaterialDateTimeRangeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDate.DateTimeRange? evaluateMaterialDateTimeRangeType(messages.MaterialDateTimeRangeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDateTimeRangeType_Constructor.materialDateTimeRange:
      return $flutterSrcMaterialDate.DateTimeRange(
          start: (tree.materialDateTimeRange.hasStart() ? evaluateRequiredDartDateTimeType(tree.materialDateTimeRange.start) : missing('start')),
          end: (tree.materialDateTimeRange.hasEnd() ? evaluateRequiredDartDateTimeType(tree.materialDateTimeRange.end) : missing('end')));
    default:
      return null;
  }
}

$flutterSrcMaterialDialogTheme.DialogTheme evaluateRequiredMaterialDialogThemeType(messages.MaterialDialogThemeType tree) {
  final result = evaluateMaterialDialogThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDialogTheme.DialogTheme? evaluateMaterialDialogThemeType(messages.MaterialDialogThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDialogThemeType_Constructor.materialDialogTheme:
      return $flutterSrcMaterialDialogTheme.DialogTheme(
          backgroundColor: (tree.materialDialogTheme.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialogTheme.backgroundColor) : null),
          elevation: (tree.materialDialogTheme.hasElevation() ? tree.materialDialogTheme.elevation : null),
          shadowColor: (tree.materialDialogTheme.hasShadowColor() ? evaluateDartColorType(tree.materialDialogTheme.shadowColor) : null),
          surfaceTintColor: (tree.materialDialogTheme.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDialogTheme.surfaceTintColor) : null),
          shape: (tree.materialDialogTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDialogTheme.shape) : null),
          alignment: (tree.materialDialogTheme.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialDialogTheme.alignment) : null),
          iconColor: (tree.materialDialogTheme.hasIconColor() ? evaluateDartColorType(tree.materialDialogTheme.iconColor) : null),
          titleTextStyle: (tree.materialDialogTheme.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialDialogTheme.titleTextStyle) : null),
          contentTextStyle: (tree.materialDialogTheme.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialDialogTheme.contentTextStyle) : null),
          actionsPadding: (tree.materialDialogTheme.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDialogTheme.actionsPadding) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialDividerTheme.DividerThemeData evaluateRequiredMaterialDividerThemeDataType(messages.MaterialDividerThemeDataType tree) {
  final result = evaluateMaterialDividerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDividerTheme.DividerThemeData? evaluateMaterialDividerThemeDataType(messages.MaterialDividerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDividerThemeDataType_Constructor.materialDividerThemeData:
      return $flutterSrcMaterialDividerTheme.DividerThemeData(
          color: (tree.materialDividerThemeData.hasColor() ? evaluateDartColorType(tree.materialDividerThemeData.color) : null),
          space: (tree.materialDividerThemeData.hasSpace() ? tree.materialDividerThemeData.space : null),
          thickness: (tree.materialDividerThemeData.hasThickness() ? tree.materialDividerThemeData.thickness : null),
          indent: (tree.materialDividerThemeData.hasIndent() ? tree.materialDividerThemeData.indent : null),
          endIndent: (tree.materialDividerThemeData.hasEndIndent() ? tree.materialDividerThemeData.endIndent : null));
    default:
      return null;
  }
}

$flutterSrcMaterialDrawerTheme.DrawerThemeData evaluateRequiredMaterialDrawerThemeDataType(messages.MaterialDrawerThemeDataType tree) {
  final result = evaluateMaterialDrawerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDrawerTheme.DrawerThemeData? evaluateMaterialDrawerThemeDataType(messages.MaterialDrawerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDrawerThemeDataType_Constructor.materialDrawerThemeData:
      return $flutterSrcMaterialDrawerTheme.DrawerThemeData(
          backgroundColor: (tree.materialDrawerThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialDrawerThemeData.backgroundColor) : null),
          scrimColor: (tree.materialDrawerThemeData.hasScrimColor() ? evaluateDartColorType(tree.materialDrawerThemeData.scrimColor) : null),
          elevation: (tree.materialDrawerThemeData.hasElevation() ? tree.materialDrawerThemeData.elevation : null),
          shadowColor: (tree.materialDrawerThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialDrawerThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialDrawerThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDrawerThemeData.surfaceTintColor) : null),
          shape: (tree.materialDrawerThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDrawerThemeData.shape) : null),
          endShape: (tree.materialDrawerThemeData.hasEndShape() ? evaluateFlutterShapeBorderType(tree.materialDrawerThemeData.endShape) : null),
          width: (tree.materialDrawerThemeData.hasWidth() ? tree.materialDrawerThemeData.width : null));
    default:
      return null;
  }
}

$flutterSrcMaterialDropdownMenuTheme.DropdownMenuThemeData evaluateRequiredMaterialDropdownMenuThemeDataType(messages.MaterialDropdownMenuThemeDataType tree) {
  final result = evaluateMaterialDropdownMenuThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialDropdownMenuTheme.DropdownMenuThemeData? evaluateMaterialDropdownMenuThemeDataType(messages.MaterialDropdownMenuThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialDropdownMenuThemeDataType_Constructor.materialDropdownMenuThemeData:
      return $flutterSrcMaterialDropdownMenuTheme.DropdownMenuThemeData(
          textStyle: (tree.materialDropdownMenuThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownMenuThemeData.textStyle) : null),
          inputDecorationTheme: (tree.materialDropdownMenuThemeData.hasInputDecorationTheme() ? evaluateMaterialInputDecorationThemeType(tree.materialDropdownMenuThemeData.inputDecorationTheme) : null),
          menuStyle: (tree.materialDropdownMenuThemeData.hasMenuStyle() ? evaluateMaterialMenuStyleType(tree.materialDropdownMenuThemeData.menuStyle) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialElevatedButtonTheme.ElevatedButtonThemeData evaluateRequiredMaterialElevatedButtonThemeDataType(messages.MaterialElevatedButtonThemeDataType tree) {
  final result = evaluateMaterialElevatedButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialElevatedButtonTheme.ElevatedButtonThemeData? evaluateMaterialElevatedButtonThemeDataType(messages.MaterialElevatedButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialElevatedButtonThemeDataType_Constructor.materialElevatedButtonThemeData:
      return $flutterSrcMaterialElevatedButtonTheme.ElevatedButtonThemeData(
          style: (tree.materialElevatedButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialExpansionTile.ExpansionTileController evaluateRequiredMaterialExpansionTileControllerType(messages.MaterialExpansionTileControllerType tree) {
  final result = evaluateMaterialExpansionTileControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialExpansionTile.ExpansionTileController? evaluateMaterialExpansionTileControllerType(messages.MaterialExpansionTileControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialExpansionTileControllerType_Constructor.materialExpansionTileController:
      return $flutterSrcMaterialExpansionTile.ExpansionTileController(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialExpansionTileTheme.ExpansionTileThemeData evaluateRequiredMaterialExpansionTileThemeDataType(messages.MaterialExpansionTileThemeDataType tree) {
  final result = evaluateMaterialExpansionTileThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialExpansionTileTheme.ExpansionTileThemeData? evaluateMaterialExpansionTileThemeDataType(messages.MaterialExpansionTileThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialExpansionTileThemeDataType_Constructor.materialExpansionTileThemeData:
      return $flutterSrcMaterialExpansionTileTheme.ExpansionTileThemeData(
          backgroundColor: (tree.materialExpansionTileThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.backgroundColor) : null),
          collapsedBackgroundColor: (tree.materialExpansionTileThemeData.hasCollapsedBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.collapsedBackgroundColor) : null),
          tilePadding: (tree.materialExpansionTileThemeData.hasTilePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTileThemeData.tilePadding) : null),
          expandedAlignment: (tree.materialExpansionTileThemeData.hasExpandedAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialExpansionTileThemeData.expandedAlignment) : null),
          childrenPadding: (tree.materialExpansionTileThemeData.hasChildrenPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTileThemeData.childrenPadding) : null),
          iconColor: (tree.materialExpansionTileThemeData.hasIconColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.iconColor) : null),
          collapsedIconColor: (tree.materialExpansionTileThemeData.hasCollapsedIconColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.collapsedIconColor) : null),
          textColor: (tree.materialExpansionTileThemeData.hasTextColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.textColor) : null),
          collapsedTextColor: (tree.materialExpansionTileThemeData.hasCollapsedTextColor() ? evaluateDartColorType(tree.materialExpansionTileThemeData.collapsedTextColor) : null),
          shape: (tree.materialExpansionTileThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTileThemeData.shape) : null),
          collapsedShape: (tree.materialExpansionTileThemeData.hasCollapsedShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTileThemeData.collapsedShape) : null),
          clipBehavior: (tree.materialExpansionTileThemeData.hasClipBehavior() ? enums.convertDartClipType(tree.materialExpansionTileThemeData.clipBehavior) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialFilledButtonTheme.FilledButtonThemeData evaluateRequiredMaterialFilledButtonThemeDataType(messages.MaterialFilledButtonThemeDataType tree) {
  final result = evaluateMaterialFilledButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialFilledButtonTheme.FilledButtonThemeData? evaluateMaterialFilledButtonThemeDataType(messages.MaterialFilledButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialFilledButtonThemeDataType_Constructor.materialFilledButtonThemeData:
      return $flutterSrcMaterialFilledButtonTheme.FilledButtonThemeData(
          style: (tree.materialFilledButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialFloatingActionButtonTheme.FloatingActionButtonThemeData evaluateRequiredMaterialFloatingActionButtonThemeDataType(messages.MaterialFloatingActionButtonThemeDataType tree) {
  final result = evaluateMaterialFloatingActionButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialFloatingActionButtonTheme.FloatingActionButtonThemeData? evaluateMaterialFloatingActionButtonThemeDataType(messages.MaterialFloatingActionButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialFloatingActionButtonThemeDataType_Constructor.materialFloatingActionButtonThemeData:
      return $flutterSrcMaterialFloatingActionButtonTheme.FloatingActionButtonThemeData(
          foregroundColor: (tree.materialFloatingActionButtonThemeData.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonThemeData.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonThemeData.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonThemeData.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonThemeData.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonThemeData.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonThemeData.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonThemeData.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonThemeData.splashColor) : null),
          elevation: (tree.materialFloatingActionButtonThemeData.hasElevation() ? tree.materialFloatingActionButtonThemeData.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonThemeData.hasFocusElevation() ? tree.materialFloatingActionButtonThemeData.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonThemeData.hasHoverElevation() ? tree.materialFloatingActionButtonThemeData.hoverElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonThemeData.hasDisabledElevation() ? tree.materialFloatingActionButtonThemeData.disabledElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonThemeData.hasHighlightElevation() ? tree.materialFloatingActionButtonThemeData.highlightElevation : null),
          shape: (tree.materialFloatingActionButtonThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonThemeData.shape) : null),
          enableFeedback: (tree.materialFloatingActionButtonThemeData.hasEnableFeedback() ? tree.materialFloatingActionButtonThemeData.enableFeedback : null),
          iconSize: (tree.materialFloatingActionButtonThemeData.hasIconSize() ? tree.materialFloatingActionButtonThemeData.iconSize : null),
          sizeConstraints: (tree.materialFloatingActionButtonThemeData.hasSizeConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialFloatingActionButtonThemeData.sizeConstraints) : null),
          smallSizeConstraints: (tree.materialFloatingActionButtonThemeData.hasSmallSizeConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialFloatingActionButtonThemeData.smallSizeConstraints) : null),
          largeSizeConstraints: (tree.materialFloatingActionButtonThemeData.hasLargeSizeConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialFloatingActionButtonThemeData.largeSizeConstraints) : null),
          extendedSizeConstraints: (tree.materialFloatingActionButtonThemeData.hasExtendedSizeConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialFloatingActionButtonThemeData.extendedSizeConstraints) : null),
          extendedIconLabelSpacing: (tree.materialFloatingActionButtonThemeData.hasExtendedIconLabelSpacing() ? tree.materialFloatingActionButtonThemeData.extendedIconLabelSpacing : null),
          extendedPadding: (tree.materialFloatingActionButtonThemeData.hasExtendedPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFloatingActionButtonThemeData.extendedPadding) : null),
          extendedTextStyle: (tree.materialFloatingActionButtonThemeData.hasExtendedTextStyle() ? evaluateFlutterTextStyleType(tree.materialFloatingActionButtonThemeData.extendedTextStyle) : null),
          mouseCursor: null);
    default:
      return null;
  }
}

$flutterSrcMaterialIconButtonTheme.IconButtonThemeData evaluateRequiredMaterialIconButtonThemeDataType(messages.MaterialIconButtonThemeDataType tree) {
  final result = evaluateMaterialIconButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialIconButtonTheme.IconButtonThemeData? evaluateMaterialIconButtonThemeDataType(messages.MaterialIconButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialIconButtonThemeDataType_Constructor.materialIconButtonThemeData:
      return $flutterSrcMaterialIconButtonTheme.IconButtonThemeData(
          style: (tree.materialIconButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialInputBorder.InputBorder evaluateRequiredMaterialInputBorderType(messages.MaterialInputBorderType tree) {
  final result = evaluateMaterialInputBorderType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialInputBorder.InputBorder? evaluateMaterialInputBorderType(messages.MaterialInputBorderType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialInputBorderType_Constructor.materialOutlineInputBorder:
      return $flutterSrcMaterialInputBorder.OutlineInputBorder(
          borderSide: (tree.materialOutlineInputBorder.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.materialOutlineInputBorder.borderSide) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.materialOutlineInputBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialOutlineInputBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(4.0))),
          gapPadding: (tree.materialOutlineInputBorder.hasGapPadding() ? tree.materialOutlineInputBorder.gapPadding : 4.0));
    case messages.MaterialInputBorderType_Constructor.materialUnderlineInputBorder:
      return $flutterSrcMaterialInputBorder.UnderlineInputBorder(
          borderSide: (tree.materialUnderlineInputBorder.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.materialUnderlineInputBorder.borderSide) : $flutterSrcPaintingBorders.BorderSide.none),
          borderRadius: (tree.materialUnderlineInputBorder.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialUnderlineInputBorder.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.only(topLeft: $dartUi.Radius.circular(4.0), topRight: $dartUi.Radius.circular(4.0))));
    default:
      return null;
  }
}

$flutterSrcMaterialInputDecorator.InputDecorationTheme evaluateRequiredMaterialInputDecorationThemeType(messages.MaterialInputDecorationThemeType tree) {
  final result = evaluateMaterialInputDecorationThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialInputDecorator.InputDecorationTheme? evaluateMaterialInputDecorationThemeType(messages.MaterialInputDecorationThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialInputDecorationThemeType_Constructor.materialInputDecorationTheme:
      return $flutterSrcMaterialInputDecorator.InputDecorationTheme(
          labelStyle: (tree.materialInputDecorationTheme.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.labelStyle) : null),
          floatingLabelStyle: (tree.materialInputDecorationTheme.hasFloatingLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.floatingLabelStyle) : null),
          helperStyle: (tree.materialInputDecorationTheme.hasHelperStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.helperStyle) : null),
          helperMaxLines: (tree.materialInputDecorationTheme.hasHelperMaxLines() ? tree.materialInputDecorationTheme.helperMaxLines : null),
          hintStyle: (tree.materialInputDecorationTheme.hasHintStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.hintStyle) : null),
          hintFadeDuration: (tree.materialInputDecorationTheme.hasHintFadeDuration() ? evaluateDartDurationType(tree.materialInputDecorationTheme.hintFadeDuration) : null),
          errorStyle: (tree.materialInputDecorationTheme.hasErrorStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.errorStyle) : null),
          errorMaxLines: (tree.materialInputDecorationTheme.hasErrorMaxLines() ? tree.materialInputDecorationTheme.errorMaxLines : null),
          floatingLabelBehavior: (tree.materialInputDecorationTheme.hasFloatingLabelBehavior() ? enums.convertRequiredMaterialFloatingLabelBehaviorType(tree.materialInputDecorationTheme.floatingLabelBehavior) : $flutterSrcMaterialInputDecorator.FloatingLabelBehavior.auto),
          isDense: (tree.materialInputDecorationTheme.hasIsDense() ? tree.materialInputDecorationTheme.isDense : false),
          contentPadding: (tree.materialInputDecorationTheme.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputDecorationTheme.contentPadding) : null),
          isCollapsed: (tree.materialInputDecorationTheme.hasIsCollapsed() ? tree.materialInputDecorationTheme.isCollapsed : false),
          iconColor: (tree.materialInputDecorationTheme.hasIconColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.iconColor) : null),
          prefixStyle: (tree.materialInputDecorationTheme.hasPrefixStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.prefixStyle) : null),
          prefixIconColor: (tree.materialInputDecorationTheme.hasPrefixIconColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.prefixIconColor) : null),
          suffixStyle: (tree.materialInputDecorationTheme.hasSuffixStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.suffixStyle) : null),
          suffixIconColor: (tree.materialInputDecorationTheme.hasSuffixIconColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.suffixIconColor) : null),
          counterStyle: (tree.materialInputDecorationTheme.hasCounterStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationTheme.counterStyle) : null),
          filled: (tree.materialInputDecorationTheme.hasFilled() ? tree.materialInputDecorationTheme.filled : false),
          fillColor: (tree.materialInputDecorationTheme.hasFillColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.fillColor) : null),
          activeIndicatorBorder: (tree.materialInputDecorationTheme.hasActiveIndicatorBorder() ? evaluateFlutterBorderSideType(tree.materialInputDecorationTheme.activeIndicatorBorder) : null),
          outlineBorder: (tree.materialInputDecorationTheme.hasOutlineBorder() ? evaluateFlutterBorderSideType(tree.materialInputDecorationTheme.outlineBorder) : null),
          focusColor: (tree.materialInputDecorationTheme.hasFocusColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.focusColor) : null),
          hoverColor: (tree.materialInputDecorationTheme.hasHoverColor() ? evaluateDartColorType(tree.materialInputDecorationTheme.hoverColor) : null),
          errorBorder: (tree.materialInputDecorationTheme.hasErrorBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.errorBorder) : null),
          focusedBorder: (tree.materialInputDecorationTheme.hasFocusedBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.focusedBorder) : null),
          focusedErrorBorder: (tree.materialInputDecorationTheme.hasFocusedErrorBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.focusedErrorBorder) : null),
          disabledBorder: (tree.materialInputDecorationTheme.hasDisabledBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.disabledBorder) : null),
          enabledBorder: (tree.materialInputDecorationTheme.hasEnabledBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.enabledBorder) : null),
          border: (tree.materialInputDecorationTheme.hasBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationTheme.border) : null),
          alignLabelWithHint: (tree.materialInputDecorationTheme.hasAlignLabelWithHint() ? tree.materialInputDecorationTheme.alignLabelWithHint : false),
          constraints: (tree.materialInputDecorationTheme.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialInputDecorationTheme.constraints) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialInputDecorator.InputDecoration evaluateRequiredMaterialInputDecorationType(messages.MaterialInputDecorationType tree) {
  final result = evaluateMaterialInputDecorationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialInputDecorator.InputDecoration? evaluateMaterialInputDecorationType(messages.MaterialInputDecorationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialInputDecorationType_Constructor.materialInputDecoration:
      return $flutterSrcMaterialInputDecorator.InputDecoration(
          icon: (tree.materialInputDecoration.hasIcon() ? evaluateWidgetType(tree.materialInputDecoration.icon) : null),
          iconColor: (tree.materialInputDecoration.hasIconColor() ? evaluateDartColorType(tree.materialInputDecoration.iconColor) : null),
          label: (tree.materialInputDecoration.hasLabel() ? evaluateWidgetType(tree.materialInputDecoration.label) : null),
          labelText: (tree.materialInputDecoration.hasLabelText() ? tree.materialInputDecoration.labelText : null),
          labelStyle: (tree.materialInputDecoration.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.labelStyle) : null),
          floatingLabelStyle: (tree.materialInputDecoration.hasFloatingLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.floatingLabelStyle) : null),
          helperText: (tree.materialInputDecoration.hasHelperText() ? tree.materialInputDecoration.helperText : null),
          helperStyle: (tree.materialInputDecoration.hasHelperStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.helperStyle) : null),
          helperMaxLines: (tree.materialInputDecoration.hasHelperMaxLines() ? tree.materialInputDecoration.helperMaxLines : null),
          hintText: (tree.materialInputDecoration.hasHintText() ? tree.materialInputDecoration.hintText : null),
          hintStyle: (tree.materialInputDecoration.hasHintStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.hintStyle) : null),
          hintTextDirection: (tree.materialInputDecoration.hasHintTextDirection() ? enums.convertDartTextDirectionType(tree.materialInputDecoration.hintTextDirection) : null),
          hintMaxLines: (tree.materialInputDecoration.hasHintMaxLines() ? tree.materialInputDecoration.hintMaxLines : null),
          hintFadeDuration: (tree.materialInputDecoration.hasHintFadeDuration() ? evaluateDartDurationType(tree.materialInputDecoration.hintFadeDuration) : null),
          error: (tree.materialInputDecoration.hasError() ? evaluateWidgetType(tree.materialInputDecoration.error) : null),
          errorText: (tree.materialInputDecoration.hasErrorText() ? tree.materialInputDecoration.errorText : null),
          errorStyle: (tree.materialInputDecoration.hasErrorStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.errorStyle) : null),
          errorMaxLines: (tree.materialInputDecoration.hasErrorMaxLines() ? tree.materialInputDecoration.errorMaxLines : null),
          floatingLabelBehavior: (tree.materialInputDecoration.hasFloatingLabelBehavior() ? enums.convertMaterialFloatingLabelBehaviorType(tree.materialInputDecoration.floatingLabelBehavior) : null),
          floatingLabelAlignment: null,
          isCollapsed: (tree.materialInputDecoration.hasIsCollapsed() ? tree.materialInputDecoration.isCollapsed : null),
          isDense: (tree.materialInputDecoration.hasIsDense() ? tree.materialInputDecoration.isDense : null),
          contentPadding: (tree.materialInputDecoration.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputDecoration.contentPadding) : null),
          prefixIcon: (tree.materialInputDecoration.hasPrefixIcon() ? evaluateWidgetType(tree.materialInputDecoration.prefixIcon) : null),
          prefixIconConstraints: (tree.materialInputDecoration.hasPrefixIconConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialInputDecoration.prefixIconConstraints) : null),
          prefix: (tree.materialInputDecoration.hasPrefix() ? evaluateWidgetType(tree.materialInputDecoration.prefix) : null),
          prefixText: (tree.materialInputDecoration.hasPrefixText() ? tree.materialInputDecoration.prefixText : null),
          prefixStyle: (tree.materialInputDecoration.hasPrefixStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.prefixStyle) : null),
          prefixIconColor: (tree.materialInputDecoration.hasPrefixIconColor() ? evaluateDartColorType(tree.materialInputDecoration.prefixIconColor) : null),
          suffixIcon: (tree.materialInputDecoration.hasSuffixIcon() ? evaluateWidgetType(tree.materialInputDecoration.suffixIcon) : null),
          suffix: (tree.materialInputDecoration.hasSuffix() ? evaluateWidgetType(tree.materialInputDecoration.suffix) : null),
          suffixText: (tree.materialInputDecoration.hasSuffixText() ? tree.materialInputDecoration.suffixText : null),
          suffixStyle: (tree.materialInputDecoration.hasSuffixStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.suffixStyle) : null),
          suffixIconColor: (tree.materialInputDecoration.hasSuffixIconColor() ? evaluateDartColorType(tree.materialInputDecoration.suffixIconColor) : null),
          suffixIconConstraints: (tree.materialInputDecoration.hasSuffixIconConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialInputDecoration.suffixIconConstraints) : null),
          counter: (tree.materialInputDecoration.hasCounter() ? evaluateWidgetType(tree.materialInputDecoration.counter) : null),
          counterText: (tree.materialInputDecoration.hasCounterText() ? tree.materialInputDecoration.counterText : null),
          counterStyle: (tree.materialInputDecoration.hasCounterStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecoration.counterStyle) : null),
          filled: (tree.materialInputDecoration.hasFilled() ? tree.materialInputDecoration.filled : null),
          fillColor: (tree.materialInputDecoration.hasFillColor() ? evaluateDartColorType(tree.materialInputDecoration.fillColor) : null),
          focusColor: (tree.materialInputDecoration.hasFocusColor() ? evaluateDartColorType(tree.materialInputDecoration.focusColor) : null),
          hoverColor: (tree.materialInputDecoration.hasHoverColor() ? evaluateDartColorType(tree.materialInputDecoration.hoverColor) : null),
          errorBorder: (tree.materialInputDecoration.hasErrorBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.errorBorder) : null),
          focusedBorder: (tree.materialInputDecoration.hasFocusedBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.focusedBorder) : null),
          focusedErrorBorder: (tree.materialInputDecoration.hasFocusedErrorBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.focusedErrorBorder) : null),
          disabledBorder: (tree.materialInputDecoration.hasDisabledBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.disabledBorder) : null),
          enabledBorder: (tree.materialInputDecoration.hasEnabledBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.enabledBorder) : null),
          border: (tree.materialInputDecoration.hasBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecoration.border) : null),
          enabled: (tree.materialInputDecoration.hasEnabled() ? tree.materialInputDecoration.enabled : true),
          semanticCounterText: (tree.materialInputDecoration.hasSemanticCounterText() ? tree.materialInputDecoration.semanticCounterText : null),
          alignLabelWithHint: (tree.materialInputDecoration.hasAlignLabelWithHint() ? tree.materialInputDecoration.alignLabelWithHint : null),
          constraints: (tree.materialInputDecoration.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialInputDecoration.constraints) : null));
    case messages.MaterialInputDecorationType_Constructor.materialInputDecorationNamedCollapsed:
      return $flutterSrcMaterialInputDecorator.InputDecoration.collapsed(
          hintText: (tree.materialInputDecorationNamedCollapsed.hasHintText() ? tree.materialInputDecorationNamedCollapsed.hintText : null),
          floatingLabelBehavior: (tree.materialInputDecorationNamedCollapsed.hasFloatingLabelBehavior() ? enums.convertMaterialFloatingLabelBehaviorType(tree.materialInputDecorationNamedCollapsed.floatingLabelBehavior) : null),
          floatingLabelAlignment: null,
          hintStyle: (tree.materialInputDecorationNamedCollapsed.hasHintStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorationNamedCollapsed.hintStyle) : null),
          hintTextDirection: (tree.materialInputDecorationNamedCollapsed.hasHintTextDirection() ? enums.convertDartTextDirectionType(tree.materialInputDecorationNamedCollapsed.hintTextDirection) : null),
          filled: (tree.materialInputDecorationNamedCollapsed.hasFilled() ? tree.materialInputDecorationNamedCollapsed.filled : false),
          fillColor: (tree.materialInputDecorationNamedCollapsed.hasFillColor() ? evaluateDartColorType(tree.materialInputDecorationNamedCollapsed.fillColor) : null),
          focusColor: (tree.materialInputDecorationNamedCollapsed.hasFocusColor() ? evaluateDartColorType(tree.materialInputDecorationNamedCollapsed.focusColor) : null),
          hoverColor: (tree.materialInputDecorationNamedCollapsed.hasHoverColor() ? evaluateDartColorType(tree.materialInputDecorationNamedCollapsed.hoverColor) : null),
          border: (tree.materialInputDecorationNamedCollapsed.hasBorder() ? evaluateMaterialInputBorderType(tree.materialInputDecorationNamedCollapsed.border) : $flutterSrcMaterialInputBorder.InputBorder.none),
          enabled: (tree.materialInputDecorationNamedCollapsed.hasEnabled() ? tree.materialInputDecorationNamedCollapsed.enabled : true));
    default:
      return null;
  }
}

$flutterSrcMaterialListTileTheme.ListTileThemeData evaluateRequiredMaterialListTileThemeDataType(messages.MaterialListTileThemeDataType tree) {
  final result = evaluateMaterialListTileThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialListTileTheme.ListTileThemeData? evaluateMaterialListTileThemeDataType(messages.MaterialListTileThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialListTileThemeDataType_Constructor.materialListTileThemeData:
      return $flutterSrcMaterialListTileTheme.ListTileThemeData(
          dense: (tree.materialListTileThemeData.hasDense() ? tree.materialListTileThemeData.dense : null),
          shape: (tree.materialListTileThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTileThemeData.shape) : null),
          style: (tree.materialListTileThemeData.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTileThemeData.style) : null),
          selectedColor: (tree.materialListTileThemeData.hasSelectedColor() ? evaluateDartColorType(tree.materialListTileThemeData.selectedColor) : null),
          iconColor: (tree.materialListTileThemeData.hasIconColor() ? evaluateDartColorType(tree.materialListTileThemeData.iconColor) : null),
          textColor: (tree.materialListTileThemeData.hasTextColor() ? evaluateDartColorType(tree.materialListTileThemeData.textColor) : null),
          titleTextStyle: (tree.materialListTileThemeData.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTileThemeData.titleTextStyle) : null),
          subtitleTextStyle: (tree.materialListTileThemeData.hasSubtitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTileThemeData.subtitleTextStyle) : null),
          leadingAndTrailingTextStyle: (tree.materialListTileThemeData.hasLeadingAndTrailingTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTileThemeData.leadingAndTrailingTextStyle) : null),
          contentPadding: (tree.materialListTileThemeData.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTileThemeData.contentPadding) : null),
          tileColor: (tree.materialListTileThemeData.hasTileColor() ? evaluateDartColorType(tree.materialListTileThemeData.tileColor) : null),
          selectedTileColor: (tree.materialListTileThemeData.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTileThemeData.selectedTileColor) : null),
          horizontalTitleGap: (tree.materialListTileThemeData.hasHorizontalTitleGap() ? tree.materialListTileThemeData.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTileThemeData.hasMinVerticalPadding() ? tree.materialListTileThemeData.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTileThemeData.hasMinLeadingWidth() ? tree.materialListTileThemeData.minLeadingWidth : null),
          enableFeedback: (tree.materialListTileThemeData.hasEnableFeedback() ? tree.materialListTileThemeData.enableFeedback : null),
          mouseCursor: null,
          visualDensity: (tree.materialListTileThemeData.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialListTileThemeData.visualDensity) : null),
          titleAlignment: (tree.materialListTileThemeData.hasTitleAlignment() ? enums.convertMaterialListTileTitleAlignmentType(tree.materialListTileThemeData.titleAlignment) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialBannerTheme.MaterialBannerThemeData evaluateRequiredMaterialMaterialBannerThemeDataType(messages.MaterialMaterialBannerThemeDataType tree) {
  final result = evaluateMaterialMaterialBannerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialBannerTheme.MaterialBannerThemeData? evaluateMaterialMaterialBannerThemeDataType(messages.MaterialMaterialBannerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMaterialBannerThemeDataType_Constructor.materialMaterialBannerThemeData:
      return $flutterSrcMaterialBannerTheme.MaterialBannerThemeData(
          backgroundColor: (tree.materialMaterialBannerThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialMaterialBannerThemeData.backgroundColor) : null),
          surfaceTintColor: (tree.materialMaterialBannerThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterialBannerThemeData.surfaceTintColor) : null),
          shadowColor: (tree.materialMaterialBannerThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialMaterialBannerThemeData.shadowColor) : null),
          dividerColor: (tree.materialMaterialBannerThemeData.hasDividerColor() ? evaluateDartColorType(tree.materialMaterialBannerThemeData.dividerColor) : null),
          contentTextStyle: (tree.materialMaterialBannerThemeData.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterialBannerThemeData.contentTextStyle) : null),
          elevation: (tree.materialMaterialBannerThemeData.hasElevation() ? tree.materialMaterialBannerThemeData.elevation : null),
          padding: (tree.materialMaterialBannerThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBannerThemeData.padding) : null),
          leadingPadding: (tree.materialMaterialBannerThemeData.hasLeadingPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBannerThemeData.leadingPadding) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialMaterialState.MaterialStatesController evaluateRequiredMaterialMaterialStatesControllerType(messages.MaterialMaterialStatesControllerType tree) {
  final result = evaluateMaterialMaterialStatesControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMaterialState.MaterialStatesController? evaluateMaterialMaterialStatesControllerType(messages.MaterialMaterialStatesControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMaterialStatesControllerType_Constructor.materialMaterialStatesController:
      return $flutterSrcMaterialMaterialState.MaterialStatesController(
          null);
    default:
      return null;
  }
}

$flutterSrcMaterialMenuBarTheme.MenuBarThemeData evaluateRequiredMaterialMenuBarThemeDataType(messages.MaterialMenuBarThemeDataType tree) {
  final result = evaluateMaterialMenuBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMenuBarTheme.MenuBarThemeData? evaluateMaterialMenuBarThemeDataType(messages.MaterialMenuBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMenuBarThemeDataType_Constructor.materialMenuBarThemeData:
      return $flutterSrcMaterialMenuBarTheme.MenuBarThemeData(
          style: (tree.materialMenuBarThemeData.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuBarThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialMenuButtonTheme.MenuButtonThemeData evaluateRequiredMaterialMenuButtonThemeDataType(messages.MaterialMenuButtonThemeDataType tree) {
  final result = evaluateMaterialMenuButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMenuButtonTheme.MenuButtonThemeData? evaluateMaterialMenuButtonThemeDataType(messages.MaterialMenuButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMenuButtonThemeDataType_Constructor.materialMenuButtonThemeData:
      return $flutterSrcMaterialMenuButtonTheme.MenuButtonThemeData(
          style: (tree.materialMenuButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialMenuButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialMenuAnchor.MenuController evaluateRequiredMaterialMenuControllerType(messages.MaterialMenuControllerType tree) {
  final result = evaluateMaterialMenuControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMenuAnchor.MenuController? evaluateMaterialMenuControllerType(messages.MaterialMenuControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMenuControllerType_Constructor.materialMenuController:
      return $flutterSrcMaterialMenuAnchor.MenuController(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialMenuStyle.MenuStyle evaluateRequiredMaterialMenuStyleType(messages.MaterialMenuStyleType tree) {
  final result = evaluateMaterialMenuStyleType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMenuStyle.MenuStyle? evaluateMaterialMenuStyleType(messages.MaterialMenuStyleType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMenuStyleType_Constructor.materialMenuStyle:
      return $flutterSrcMaterialMenuStyle.MenuStyle(
          backgroundColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          elevation: null,
          padding: null,
          minimumSize: null,
          fixedSize: null,
          maximumSize: null,
          side: null,
          shape: null,
          mouseCursor: null,
          visualDensity: (tree.materialMenuStyle.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialMenuStyle.visualDensity) : null),
          alignment: (tree.materialMenuStyle.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialMenuStyle.alignment) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialMenuTheme.MenuThemeData evaluateRequiredMaterialMenuThemeDataType(messages.MaterialMenuThemeDataType tree) {
  final result = evaluateMaterialMenuThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMenuTheme.MenuThemeData? evaluateMaterialMenuThemeDataType(messages.MaterialMenuThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMenuThemeDataType_Constructor.materialMenuBarThemeData:
      return $flutterSrcMaterialMenuBarTheme.MenuBarThemeData(
          style: (tree.materialMenuBarThemeData.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuBarThemeData.style) : null));
    case messages.MaterialMenuThemeDataType_Constructor.materialMenuThemeData:
      return $flutterSrcMaterialMenuTheme.MenuThemeData(
          style: (tree.materialMenuThemeData.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialMergeableMaterial.MergeableMaterialItem evaluateRequiredMaterialMergeableMaterialItemType(messages.MaterialMergeableMaterialItemType tree) {
  final result = evaluateMaterialMergeableMaterialItemType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialMergeableMaterial.MergeableMaterialItem? evaluateMaterialMergeableMaterialItemType(messages.MaterialMergeableMaterialItemType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialMergeableMaterialItemType_Constructor.materialMaterialGap:
      return $flutterSrcMaterialMergeableMaterial.MaterialGap(
          key: (tree.materialMaterialGap.hasKey() ? evaluateRequiredFlutterLocalKeyType(tree.materialMaterialGap.key) : missing('key')),
          size: (tree.materialMaterialGap.hasSize() ? tree.materialMaterialGap.size : 16.0));
    case messages.MaterialMergeableMaterialItemType_Constructor.materialMaterialSlice:
      return $flutterSrcMaterialMergeableMaterial.MaterialSlice(
          key: (tree.materialMaterialSlice.hasKey() ? evaluateRequiredFlutterLocalKeyType(tree.materialMaterialSlice.key) : missing('key')),
          child: (tree.materialMaterialSlice.hasChild() ? evaluateRequiredWidgetType(tree.materialMaterialSlice.child) : missing('child')),
          color: (tree.materialMaterialSlice.hasColor() ? evaluateDartColorType(tree.materialMaterialSlice.color) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialNavigationBarTheme.NavigationBarThemeData evaluateRequiredMaterialNavigationBarThemeDataType(messages.MaterialNavigationBarThemeDataType tree) {
  final result = evaluateMaterialNavigationBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialNavigationBarTheme.NavigationBarThemeData? evaluateMaterialNavigationBarThemeDataType(messages.MaterialNavigationBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialNavigationBarThemeDataType_Constructor.materialNavigationBarThemeData:
      return $flutterSrcMaterialNavigationBarTheme.NavigationBarThemeData(
          height: (tree.materialNavigationBarThemeData.hasHeight() ? tree.materialNavigationBarThemeData.height : null),
          backgroundColor: (tree.materialNavigationBarThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationBarThemeData.backgroundColor) : null),
          elevation: (tree.materialNavigationBarThemeData.hasElevation() ? tree.materialNavigationBarThemeData.elevation : null),
          shadowColor: (tree.materialNavigationBarThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationBarThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationBarThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationBarThemeData.surfaceTintColor) : null),
          indicatorColor: (tree.materialNavigationBarThemeData.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationBarThemeData.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationBarThemeData.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationBarThemeData.indicatorShape) : null),
          labelTextStyle: null,
          iconTheme: null,
          labelBehavior: (tree.materialNavigationBarThemeData.hasLabelBehavior() ? enums.convertMaterialNavigationDestinationLabelBehaviorType(tree.materialNavigationBarThemeData.labelBehavior) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerThemeData evaluateRequiredMaterialNavigationDrawerThemeDataType(messages.MaterialNavigationDrawerThemeDataType tree) {
  final result = evaluateMaterialNavigationDrawerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerThemeData? evaluateMaterialNavigationDrawerThemeDataType(messages.MaterialNavigationDrawerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialNavigationDrawerThemeDataType_Constructor.materialNavigationDrawerThemeData:
      return $flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerThemeData(
          tileHeight: (tree.materialNavigationDrawerThemeData.hasTileHeight() ? tree.materialNavigationDrawerThemeData.tileHeight : null),
          backgroundColor: (tree.materialNavigationDrawerThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawerThemeData.backgroundColor) : null),
          elevation: (tree.materialNavigationDrawerThemeData.hasElevation() ? tree.materialNavigationDrawerThemeData.elevation : null),
          shadowColor: (tree.materialNavigationDrawerThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationDrawerThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationDrawerThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationDrawerThemeData.surfaceTintColor) : null),
          indicatorColor: (tree.materialNavigationDrawerThemeData.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationDrawerThemeData.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationDrawerThemeData.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationDrawerThemeData.indicatorShape) : null),
          indicatorSize: (tree.materialNavigationDrawerThemeData.hasIndicatorSize() ? evaluateDartSizeType(tree.materialNavigationDrawerThemeData.indicatorSize) : null),
          labelTextStyle: null,
          iconTheme: null);
    default:
      return null;
  }
}

$flutterSrcMaterialNavigationRail.NavigationRailDestination evaluateRequiredMaterialNavigationRailDestinationType(messages.MaterialNavigationRailDestinationType tree) {
  final result = evaluateMaterialNavigationRailDestinationType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialNavigationRail.NavigationRailDestination? evaluateMaterialNavigationRailDestinationType(messages.MaterialNavigationRailDestinationType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialNavigationRailDestinationType_Constructor.materialNavigationRailDestination:
      return $flutterSrcMaterialNavigationRail.NavigationRailDestination(
          icon: (tree.materialNavigationRailDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationRailDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationRailDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationRailDestination.selectedIcon) : null),
          indicatorColor: (tree.materialNavigationRailDestination.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationRailDestination.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationRailDestination.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationRailDestination.indicatorShape) : null),
          label: (tree.materialNavigationRailDestination.hasLabel() ? evaluateRequiredWidgetType(tree.materialNavigationRailDestination.label) : missing('label')),
          padding: (tree.materialNavigationRailDestination.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialNavigationRailDestination.padding) : null),
          disabled: (tree.materialNavigationRailDestination.hasDisabled() ? tree.materialNavigationRailDestination.disabled : false));
    default:
      return null;
  }
}

$flutterSrcMaterialNavigationRailTheme.NavigationRailThemeData evaluateRequiredMaterialNavigationRailThemeDataType(messages.MaterialNavigationRailThemeDataType tree) {
  final result = evaluateMaterialNavigationRailThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialNavigationRailTheme.NavigationRailThemeData? evaluateMaterialNavigationRailThemeDataType(messages.MaterialNavigationRailThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialNavigationRailThemeDataType_Constructor.materialNavigationRailThemeData:
      return $flutterSrcMaterialNavigationRailTheme.NavigationRailThemeData(
          backgroundColor: (tree.materialNavigationRailThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationRailThemeData.backgroundColor) : null),
          elevation: (tree.materialNavigationRailThemeData.hasElevation() ? tree.materialNavigationRailThemeData.elevation : null),
          unselectedLabelTextStyle: (tree.materialNavigationRailThemeData.hasUnselectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRailThemeData.unselectedLabelTextStyle) : null),
          selectedLabelTextStyle: (tree.materialNavigationRailThemeData.hasSelectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRailThemeData.selectedLabelTextStyle) : null),
          unselectedIconTheme: (tree.materialNavigationRailThemeData.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRailThemeData.unselectedIconTheme) : null),
          selectedIconTheme: (tree.materialNavigationRailThemeData.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRailThemeData.selectedIconTheme) : null),
          groupAlignment: (tree.materialNavigationRailThemeData.hasGroupAlignment() ? tree.materialNavigationRailThemeData.groupAlignment : null),
          labelType: (tree.materialNavigationRailThemeData.hasLabelType() ? enums.convertMaterialNavigationRailLabelTypeType(tree.materialNavigationRailThemeData.labelType) : null),
          useIndicator: (tree.materialNavigationRailThemeData.hasUseIndicator() ? tree.materialNavigationRailThemeData.useIndicator : null),
          indicatorColor: (tree.materialNavigationRailThemeData.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationRailThemeData.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationRailThemeData.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationRailThemeData.indicatorShape) : null),
          minWidth: (tree.materialNavigationRailThemeData.hasMinWidth() ? tree.materialNavigationRailThemeData.minWidth : null),
          minExtendedWidth: (tree.materialNavigationRailThemeData.hasMinExtendedWidth() ? tree.materialNavigationRailThemeData.minExtendedWidth : null));
    default:
      return null;
  }
}

$flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonThemeData evaluateRequiredMaterialOutlinedButtonThemeDataType(messages.MaterialOutlinedButtonThemeDataType tree) {
  final result = evaluateMaterialOutlinedButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonThemeData? evaluateMaterialOutlinedButtonThemeDataType(messages.MaterialOutlinedButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialOutlinedButtonThemeDataType_Constructor.materialOutlinedButtonThemeData:
      return $flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonThemeData(
          style: (tree.materialOutlinedButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialPageTransitionsTheme.PageTransitionsTheme evaluateRequiredMaterialPageTransitionsThemeType(messages.MaterialPageTransitionsThemeType tree) {
  final result = evaluateMaterialPageTransitionsThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialPageTransitionsTheme.PageTransitionsTheme? evaluateMaterialPageTransitionsThemeType(messages.MaterialPageTransitionsThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialPageTransitionsThemeType_Constructor.materialPageTransitionsTheme:
      return $flutterSrcMaterialPageTransitionsTheme.PageTransitionsTheme(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialPopupMenuTheme.PopupMenuThemeData evaluateRequiredMaterialPopupMenuThemeDataType(messages.MaterialPopupMenuThemeDataType tree) {
  final result = evaluateMaterialPopupMenuThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialPopupMenuTheme.PopupMenuThemeData? evaluateMaterialPopupMenuThemeDataType(messages.MaterialPopupMenuThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialPopupMenuThemeDataType_Constructor.materialPopupMenuThemeData:
      return $flutterSrcMaterialPopupMenuTheme.PopupMenuThemeData(
          color: (tree.materialPopupMenuThemeData.hasColor() ? evaluateDartColorType(tree.materialPopupMenuThemeData.color) : null),
          shape: (tree.materialPopupMenuThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialPopupMenuThemeData.shape) : null),
          elevation: (tree.materialPopupMenuThemeData.hasElevation() ? tree.materialPopupMenuThemeData.elevation : null),
          shadowColor: (tree.materialPopupMenuThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialPopupMenuThemeData.shadowColor) : null),
          surfaceTintColor: (tree.materialPopupMenuThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialPopupMenuThemeData.surfaceTintColor) : null),
          textStyle: (tree.materialPopupMenuThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialPopupMenuThemeData.textStyle) : null),
          labelTextStyle: null,
          enableFeedback: (tree.materialPopupMenuThemeData.hasEnableFeedback() ? tree.materialPopupMenuThemeData.enableFeedback : null),
          mouseCursor: null,
          position: (tree.materialPopupMenuThemeData.hasPosition() ? enums.convertMaterialPopupMenuPositionType(tree.materialPopupMenuThemeData.position) : null),
          iconColor: (tree.materialPopupMenuThemeData.hasIconColor() ? evaluateDartColorType(tree.materialPopupMenuThemeData.iconColor) : null),
          iconSize: (tree.materialPopupMenuThemeData.hasIconSize() ? tree.materialPopupMenuThemeData.iconSize : null));
    default:
      return null;
  }
}

$flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorThemeData evaluateRequiredMaterialProgressIndicatorThemeDataType(messages.MaterialProgressIndicatorThemeDataType tree) {
  final result = evaluateMaterialProgressIndicatorThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorThemeData? evaluateMaterialProgressIndicatorThemeDataType(messages.MaterialProgressIndicatorThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialProgressIndicatorThemeDataType_Constructor.materialProgressIndicatorThemeData:
      return $flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorThemeData(
          color: (tree.materialProgressIndicatorThemeData.hasColor() ? evaluateDartColorType(tree.materialProgressIndicatorThemeData.color) : null),
          linearTrackColor: (tree.materialProgressIndicatorThemeData.hasLinearTrackColor() ? evaluateDartColorType(tree.materialProgressIndicatorThemeData.linearTrackColor) : null),
          linearMinHeight: (tree.materialProgressIndicatorThemeData.hasLinearMinHeight() ? tree.materialProgressIndicatorThemeData.linearMinHeight : null),
          circularTrackColor: (tree.materialProgressIndicatorThemeData.hasCircularTrackColor() ? evaluateDartColorType(tree.materialProgressIndicatorThemeData.circularTrackColor) : null),
          refreshBackgroundColor: (tree.materialProgressIndicatorThemeData.hasRefreshBackgroundColor() ? evaluateDartColorType(tree.materialProgressIndicatorThemeData.refreshBackgroundColor) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialRadioTheme.RadioThemeData evaluateRequiredMaterialRadioThemeDataType(messages.MaterialRadioThemeDataType tree) {
  final result = evaluateMaterialRadioThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialRadioTheme.RadioThemeData? evaluateMaterialRadioThemeDataType(messages.MaterialRadioThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRadioThemeDataType_Constructor.materialRadioThemeData:
      return $flutterSrcMaterialRadioTheme.RadioThemeData(
          mouseCursor: null,
          fillColor: null,
          overlayColor: null,
          splashRadius: (tree.materialRadioThemeData.hasSplashRadius() ? tree.materialRadioThemeData.splashRadius : null),
          materialTapTargetSize: (tree.materialRadioThemeData.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRadioThemeData.materialTapTargetSize) : null),
          visualDensity: (tree.materialRadioThemeData.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialRadioThemeData.visualDensity) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeLabels evaluateRequiredMaterialRangeLabelsType(messages.MaterialRangeLabelsType tree) {
  final result = evaluateMaterialRangeLabelsType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeLabels? evaluateMaterialRangeLabelsType(messages.MaterialRangeLabelsType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeLabelsType_Constructor.materialRangeLabels:
      return $flutterSrcMaterialSliderTheme.RangeLabels(
          (tree.materialRangeLabels.hasStart() ? tree.materialRangeLabels.start : missing('start')),
          (tree.materialRangeLabels.hasEnd() ? tree.materialRangeLabels.end : missing('end')));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderThumbShape evaluateRequiredMaterialRangeSliderThumbShapeType(messages.MaterialRangeSliderThumbShapeType tree) {
  final result = evaluateMaterialRangeSliderThumbShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderThumbShape? evaluateMaterialRangeSliderThumbShapeType(messages.MaterialRangeSliderThumbShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeSliderThumbShapeType_Constructor.materialRoundRangeSliderThumbShape:
      return $flutterSrcMaterialSliderTheme.RoundRangeSliderThumbShape(
          enabledThumbRadius: (tree.materialRoundRangeSliderThumbShape.hasEnabledThumbRadius() ? tree.materialRoundRangeSliderThumbShape.enabledThumbRadius : 10.0),
          disabledThumbRadius: (tree.materialRoundRangeSliderThumbShape.hasDisabledThumbRadius() ? tree.materialRoundRangeSliderThumbShape.disabledThumbRadius : null),
          elevation: (tree.materialRoundRangeSliderThumbShape.hasElevation() ? tree.materialRoundRangeSliderThumbShape.elevation : 1.0),
          pressedElevation: (tree.materialRoundRangeSliderThumbShape.hasPressedElevation() ? tree.materialRoundRangeSliderThumbShape.pressedElevation : 6.0));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderTickMarkShape evaluateRequiredMaterialRangeSliderTickMarkShapeType(messages.MaterialRangeSliderTickMarkShapeType tree) {
  final result = evaluateMaterialRangeSliderTickMarkShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderTickMarkShape? evaluateMaterialRangeSliderTickMarkShapeType(messages.MaterialRangeSliderTickMarkShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeSliderTickMarkShapeType_Constructor.materialRoundRangeSliderTickMarkShape:
      return $flutterSrcMaterialSliderTheme.RoundRangeSliderTickMarkShape(
          tickMarkRadius: (tree.materialRoundRangeSliderTickMarkShape.hasTickMarkRadius() ? tree.materialRoundRangeSliderTickMarkShape.tickMarkRadius : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderTrackShape evaluateRequiredMaterialRangeSliderTrackShapeType(messages.MaterialRangeSliderTrackShapeType tree) {
  final result = evaluateMaterialRangeSliderTrackShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderTrackShape? evaluateMaterialRangeSliderTrackShapeType(messages.MaterialRangeSliderTrackShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeSliderTrackShapeType_Constructor.materialRectangularRangeSliderTrackShape:
      return $flutterSrcMaterialSliderTheme.RectangularRangeSliderTrackShape(
          );
    case messages.MaterialRangeSliderTrackShapeType_Constructor.materialRoundedRectRangeSliderTrackShape:
      return $flutterSrcMaterialSliderTheme.RoundedRectRangeSliderTrackShape(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderValueIndicatorShape evaluateRequiredMaterialRangeSliderValueIndicatorShapeType(messages.MaterialRangeSliderValueIndicatorShapeType tree) {
  final result = evaluateMaterialRangeSliderValueIndicatorShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeSliderValueIndicatorShape? evaluateMaterialRangeSliderValueIndicatorShapeType(messages.MaterialRangeSliderValueIndicatorShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeSliderValueIndicatorShapeType_Constructor.materialPaddleRangeSliderValueIndicatorShape:
      return $flutterSrcMaterialSliderTheme.PaddleRangeSliderValueIndicatorShape(
          );
    case messages.MaterialRangeSliderValueIndicatorShapeType_Constructor.materialRectangularRangeSliderValueIndicatorShape:
      return $flutterSrcMaterialSliderTheme.RectangularRangeSliderValueIndicatorShape(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.RangeValues evaluateRequiredMaterialRangeValuesType(messages.MaterialRangeValuesType tree) {
  final result = evaluateMaterialRangeValuesType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.RangeValues? evaluateMaterialRangeValuesType(messages.MaterialRangeValuesType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialRangeValuesType_Constructor.materialRangeValues:
      return $flutterSrcMaterialSliderTheme.RangeValues(
          (tree.materialRangeValues.hasStart() ? tree.materialRangeValues.start : missing('start')),
          (tree.materialRangeValues.hasEnd() ? tree.materialRangeValues.end : missing('end')));
    default:
      return null;
  }
}

$flutterSrcMaterialScrollbarTheme.ScrollbarThemeData evaluateRequiredMaterialScrollbarThemeDataType(messages.MaterialScrollbarThemeDataType tree) {
  final result = evaluateMaterialScrollbarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialScrollbarTheme.ScrollbarThemeData? evaluateMaterialScrollbarThemeDataType(messages.MaterialScrollbarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialScrollbarThemeDataType_Constructor.materialScrollbarThemeData:
      return $flutterSrcMaterialScrollbarTheme.ScrollbarThemeData(
          thumbVisibility: null,
          thickness: null,
          trackVisibility: null,
          radius: (tree.materialScrollbarThemeData.hasRadius() ? evaluateDartRadiusType(tree.materialScrollbarThemeData.radius) : null),
          thumbColor: null,
          trackColor: null,
          trackBorderColor: null,
          crossAxisMargin: (tree.materialScrollbarThemeData.hasCrossAxisMargin() ? tree.materialScrollbarThemeData.crossAxisMargin : null),
          mainAxisMargin: (tree.materialScrollbarThemeData.hasMainAxisMargin() ? tree.materialScrollbarThemeData.mainAxisMargin : null),
          minThumbLength: (tree.materialScrollbarThemeData.hasMinThumbLength() ? tree.materialScrollbarThemeData.minThumbLength : null),
          interactive: (tree.materialScrollbarThemeData.hasInteractive() ? tree.materialScrollbarThemeData.interactive : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSearchBarTheme.SearchBarThemeData evaluateRequiredMaterialSearchBarThemeDataType(messages.MaterialSearchBarThemeDataType tree) {
  final result = evaluateMaterialSearchBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSearchBarTheme.SearchBarThemeData? evaluateMaterialSearchBarThemeDataType(messages.MaterialSearchBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSearchBarThemeDataType_Constructor.materialSearchBarThemeData:
      return $flutterSrcMaterialSearchBarTheme.SearchBarThemeData(
          elevation: null,
          backgroundColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          overlayColor: null,
          side: null,
          shape: null,
          padding: null,
          textStyle: null,
          hintStyle: null,
          constraints: (tree.materialSearchBarThemeData.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialSearchBarThemeData.constraints) : null),
          textCapitalization: (tree.materialSearchBarThemeData.hasTextCapitalization() ? enums.convertFlutterTextCapitalizationType(tree.materialSearchBarThemeData.textCapitalization) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSearchViewTheme.SearchViewThemeData evaluateRequiredMaterialSearchViewThemeDataType(messages.MaterialSearchViewThemeDataType tree) {
  final result = evaluateMaterialSearchViewThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSearchViewTheme.SearchViewThemeData? evaluateMaterialSearchViewThemeDataType(messages.MaterialSearchViewThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSearchViewThemeDataType_Constructor.materialSearchViewThemeData:
      return $flutterSrcMaterialSearchViewTheme.SearchViewThemeData(
          backgroundColor: (tree.materialSearchViewThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialSearchViewThemeData.backgroundColor) : null),
          elevation: (tree.materialSearchViewThemeData.hasElevation() ? tree.materialSearchViewThemeData.elevation : null),
          surfaceTintColor: (tree.materialSearchViewThemeData.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSearchViewThemeData.surfaceTintColor) : null),
          constraints: (tree.materialSearchViewThemeData.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialSearchViewThemeData.constraints) : null),
          side: (tree.materialSearchViewThemeData.hasSide() ? evaluateFlutterBorderSideType(tree.materialSearchViewThemeData.side) : null),
          shape: (tree.materialSearchViewThemeData.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialSearchViewThemeData.shape) : null),
          headerTextStyle: (tree.materialSearchViewThemeData.hasHeaderTextStyle() ? evaluateFlutterTextStyleType(tree.materialSearchViewThemeData.headerTextStyle) : null),
          headerHintStyle: (tree.materialSearchViewThemeData.hasHeaderHintStyle() ? evaluateFlutterTextStyleType(tree.materialSearchViewThemeData.headerHintStyle) : null),
          dividerColor: (tree.materialSearchViewThemeData.hasDividerColor() ? evaluateDartColorType(tree.materialSearchViewThemeData.dividerColor) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonThemeData evaluateRequiredMaterialSegmentedButtonThemeDataType(messages.MaterialSegmentedButtonThemeDataType tree) {
  final result = evaluateMaterialSegmentedButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonThemeData? evaluateMaterialSegmentedButtonThemeDataType(messages.MaterialSegmentedButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSegmentedButtonThemeDataType_Constructor.materialSegmentedButtonThemeData:
      return $flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonThemeData(
          style: (tree.materialSegmentedButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialSegmentedButtonThemeData.style) : null),
          selectedIcon: (tree.materialSegmentedButtonThemeData.hasSelectedIcon() ? evaluateWidgetType(tree.materialSegmentedButtonThemeData.selectedIcon) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.SliderComponentShape evaluateRequiredMaterialSliderComponentShapeType(messages.MaterialSliderComponentShapeType tree) {
  final result = evaluateMaterialSliderComponentShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.SliderComponentShape? evaluateMaterialSliderComponentShapeType(messages.MaterialSliderComponentShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSliderComponentShapeType_Constructor.materialDropSliderValueIndicatorShape:
      return $flutterSrcMaterialSliderTheme.DropSliderValueIndicatorShape(
          );
    case messages.MaterialSliderComponentShapeType_Constructor.materialPaddleSliderValueIndicatorShape:
      return $flutterSrcMaterialSliderTheme.PaddleSliderValueIndicatorShape(
          );
    case messages.MaterialSliderComponentShapeType_Constructor.materialRectangularSliderValueIndicatorShape:
      return $flutterSrcMaterialSliderTheme.RectangularSliderValueIndicatorShape(
          );
    case messages.MaterialSliderComponentShapeType_Constructor.materialRoundSliderOverlayShape:
      return $flutterSrcMaterialSliderTheme.RoundSliderOverlayShape(
          overlayRadius: (tree.materialRoundSliderOverlayShape.hasOverlayRadius() ? tree.materialRoundSliderOverlayShape.overlayRadius : 24.0));
    case messages.MaterialSliderComponentShapeType_Constructor.materialRoundSliderThumbShape:
      return $flutterSrcMaterialSliderTheme.RoundSliderThumbShape(
          enabledThumbRadius: (tree.materialRoundSliderThumbShape.hasEnabledThumbRadius() ? tree.materialRoundSliderThumbShape.enabledThumbRadius : 10.0),
          disabledThumbRadius: (tree.materialRoundSliderThumbShape.hasDisabledThumbRadius() ? tree.materialRoundSliderThumbShape.disabledThumbRadius : null),
          elevation: (tree.materialRoundSliderThumbShape.hasElevation() ? tree.materialRoundSliderThumbShape.elevation : 1.0),
          pressedElevation: (tree.materialRoundSliderThumbShape.hasPressedElevation() ? tree.materialRoundSliderThumbShape.pressedElevation : 6.0));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.SliderThemeData evaluateRequiredMaterialSliderThemeDataType(messages.MaterialSliderThemeDataType tree) {
  final result = evaluateMaterialSliderThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.SliderThemeData? evaluateMaterialSliderThemeDataType(messages.MaterialSliderThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSliderThemeDataType_Constructor.materialSliderThemeData:
      return $flutterSrcMaterialSliderTheme.SliderThemeData(
          trackHeight: (tree.materialSliderThemeData.hasTrackHeight() ? tree.materialSliderThemeData.trackHeight : null),
          activeTrackColor: (tree.materialSliderThemeData.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.activeTrackColor) : null),
          inactiveTrackColor: (tree.materialSliderThemeData.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.inactiveTrackColor) : null),
          secondaryActiveTrackColor: (tree.materialSliderThemeData.hasSecondaryActiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.secondaryActiveTrackColor) : null),
          disabledActiveTrackColor: (tree.materialSliderThemeData.hasDisabledActiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledActiveTrackColor) : null),
          disabledInactiveTrackColor: (tree.materialSliderThemeData.hasDisabledInactiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledInactiveTrackColor) : null),
          disabledSecondaryActiveTrackColor: (tree.materialSliderThemeData.hasDisabledSecondaryActiveTrackColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledSecondaryActiveTrackColor) : null),
          activeTickMarkColor: (tree.materialSliderThemeData.hasActiveTickMarkColor() ? evaluateDartColorType(tree.materialSliderThemeData.activeTickMarkColor) : null),
          inactiveTickMarkColor: (tree.materialSliderThemeData.hasInactiveTickMarkColor() ? evaluateDartColorType(tree.materialSliderThemeData.inactiveTickMarkColor) : null),
          disabledActiveTickMarkColor: (tree.materialSliderThemeData.hasDisabledActiveTickMarkColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledActiveTickMarkColor) : null),
          disabledInactiveTickMarkColor: (tree.materialSliderThemeData.hasDisabledInactiveTickMarkColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledInactiveTickMarkColor) : null),
          thumbColor: (tree.materialSliderThemeData.hasThumbColor() ? evaluateDartColorType(tree.materialSliderThemeData.thumbColor) : null),
          overlappingShapeStrokeColor: (tree.materialSliderThemeData.hasOverlappingShapeStrokeColor() ? evaluateDartColorType(tree.materialSliderThemeData.overlappingShapeStrokeColor) : null),
          disabledThumbColor: (tree.materialSliderThemeData.hasDisabledThumbColor() ? evaluateDartColorType(tree.materialSliderThemeData.disabledThumbColor) : null),
          overlayColor: (tree.materialSliderThemeData.hasOverlayColor() ? evaluateDartColorType(tree.materialSliderThemeData.overlayColor) : null),
          valueIndicatorColor: (tree.materialSliderThemeData.hasValueIndicatorColor() ? evaluateDartColorType(tree.materialSliderThemeData.valueIndicatorColor) : null),
          overlayShape: (tree.materialSliderThemeData.hasOverlayShape() ? evaluateMaterialSliderComponentShapeType(tree.materialSliderThemeData.overlayShape) : null),
          tickMarkShape: (tree.materialSliderThemeData.hasTickMarkShape() ? evaluateMaterialSliderTickMarkShapeType(tree.materialSliderThemeData.tickMarkShape) : null),
          thumbShape: (tree.materialSliderThemeData.hasThumbShape() ? evaluateMaterialSliderComponentShapeType(tree.materialSliderThemeData.thumbShape) : null),
          trackShape: (tree.materialSliderThemeData.hasTrackShape() ? evaluateMaterialSliderTrackShapeType(tree.materialSliderThemeData.trackShape) : null),
          valueIndicatorShape: (tree.materialSliderThemeData.hasValueIndicatorShape() ? evaluateMaterialSliderComponentShapeType(tree.materialSliderThemeData.valueIndicatorShape) : null),
          rangeTickMarkShape: (tree.materialSliderThemeData.hasRangeTickMarkShape() ? evaluateMaterialRangeSliderTickMarkShapeType(tree.materialSliderThemeData.rangeTickMarkShape) : null),
          rangeThumbShape: (tree.materialSliderThemeData.hasRangeThumbShape() ? evaluateMaterialRangeSliderThumbShapeType(tree.materialSliderThemeData.rangeThumbShape) : null),
          rangeTrackShape: (tree.materialSliderThemeData.hasRangeTrackShape() ? evaluateMaterialRangeSliderTrackShapeType(tree.materialSliderThemeData.rangeTrackShape) : null),
          rangeValueIndicatorShape: (tree.materialSliderThemeData.hasRangeValueIndicatorShape() ? evaluateMaterialRangeSliderValueIndicatorShapeType(tree.materialSliderThemeData.rangeValueIndicatorShape) : null),
          showValueIndicator: (tree.materialSliderThemeData.hasShowValueIndicator() ? enums.convertMaterialShowValueIndicatorType(tree.materialSliderThemeData.showValueIndicator) : null),
          valueIndicatorTextStyle: (tree.materialSliderThemeData.hasValueIndicatorTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliderThemeData.valueIndicatorTextStyle) : null),
          minThumbSeparation: (tree.materialSliderThemeData.hasMinThumbSeparation() ? tree.materialSliderThemeData.minThumbSeparation : null),
          thumbSelector: null,
          mouseCursor: null,
          allowedInteraction: (tree.materialSliderThemeData.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSliderThemeData.allowedInteraction) : null));
    case messages.MaterialSliderThemeDataType_Constructor.materialSliderThemeDataNamedFromPrimaryColors:
      return $flutterSrcMaterialSliderTheme.SliderThemeData.fromPrimaryColors(
          primaryColor: (tree.materialSliderThemeDataNamedFromPrimaryColors.hasPrimaryColor() ? evaluateRequiredDartColorType(tree.materialSliderThemeDataNamedFromPrimaryColors.primaryColor) : missing('primaryColor')),
          primaryColorDark: (tree.materialSliderThemeDataNamedFromPrimaryColors.hasPrimaryColorDark() ? evaluateRequiredDartColorType(tree.materialSliderThemeDataNamedFromPrimaryColors.primaryColorDark) : missing('primaryColorDark')),
          primaryColorLight: (tree.materialSliderThemeDataNamedFromPrimaryColors.hasPrimaryColorLight() ? evaluateRequiredDartColorType(tree.materialSliderThemeDataNamedFromPrimaryColors.primaryColorLight) : missing('primaryColorLight')),
          valueIndicatorTextStyle: (tree.materialSliderThemeDataNamedFromPrimaryColors.hasValueIndicatorTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.materialSliderThemeDataNamedFromPrimaryColors.valueIndicatorTextStyle) : missing('valueIndicatorTextStyle')));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.SliderTickMarkShape evaluateRequiredMaterialSliderTickMarkShapeType(messages.MaterialSliderTickMarkShapeType tree) {
  final result = evaluateMaterialSliderTickMarkShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.SliderTickMarkShape? evaluateMaterialSliderTickMarkShapeType(messages.MaterialSliderTickMarkShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSliderTickMarkShapeType_Constructor.materialRoundSliderTickMarkShape:
      return $flutterSrcMaterialSliderTheme.RoundSliderTickMarkShape(
          tickMarkRadius: (tree.materialRoundSliderTickMarkShape.hasTickMarkRadius() ? tree.materialRoundSliderTickMarkShape.tickMarkRadius : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSliderTheme.SliderTrackShape evaluateRequiredMaterialSliderTrackShapeType(messages.MaterialSliderTrackShapeType tree) {
  final result = evaluateMaterialSliderTrackShapeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSliderTheme.SliderTrackShape? evaluateMaterialSliderTrackShapeType(messages.MaterialSliderTrackShapeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSliderTrackShapeType_Constructor.materialRectangularSliderTrackShape:
      return $flutterSrcMaterialSliderTheme.RectangularSliderTrackShape(
          );
    case messages.MaterialSliderTrackShapeType_Constructor.materialRoundedRectSliderTrackShape:
      return $flutterSrcMaterialSliderTheme.RoundedRectSliderTrackShape(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialSnackBarTheme.SnackBarThemeData evaluateRequiredMaterialSnackBarThemeDataType(messages.MaterialSnackBarThemeDataType tree) {
  final result = evaluateMaterialSnackBarThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSnackBarTheme.SnackBarThemeData? evaluateMaterialSnackBarThemeDataType(messages.MaterialSnackBarThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSnackBarThemeDataType_Constructor.materialSnackBarThemeData:
      return $flutterSrcMaterialSnackBarTheme.SnackBarThemeData(
          backgroundColor: (tree.materialSnackBarThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.backgroundColor) : null),
          actionTextColor: (tree.materialSnackBarThemeData.hasActionTextColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.actionTextColor) : null),
          disabledActionTextColor: (tree.materialSnackBarThemeData.hasDisabledActionTextColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.disabledActionTextColor) : null),
          contentTextStyle: (tree.materialSnackBarThemeData.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialSnackBarThemeData.contentTextStyle) : null),
          elevation: (tree.materialSnackBarThemeData.hasElevation() ? tree.materialSnackBarThemeData.elevation : null),
          shape: (tree.materialSnackBarThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSnackBarThemeData.shape) : null),
          behavior: (tree.materialSnackBarThemeData.hasBehavior() ? enums.convertMaterialSnackBarBehaviorType(tree.materialSnackBarThemeData.behavior) : null),
          width: (tree.materialSnackBarThemeData.hasWidth() ? tree.materialSnackBarThemeData.width : null),
          insetPadding: (tree.materialSnackBarThemeData.hasInsetPadding() ? evaluateFlutterEdgeInsetsType(tree.materialSnackBarThemeData.insetPadding) : null),
          showCloseIcon: (tree.materialSnackBarThemeData.hasShowCloseIcon() ? tree.materialSnackBarThemeData.showCloseIcon : null),
          closeIconColor: (tree.materialSnackBarThemeData.hasCloseIconColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.closeIconColor) : null),
          actionOverflowThreshold: (tree.materialSnackBarThemeData.hasActionOverflowThreshold() ? tree.materialSnackBarThemeData.actionOverflowThreshold : null),
          actionBackgroundColor: (tree.materialSnackBarThemeData.hasActionBackgroundColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.actionBackgroundColor) : null),
          disabledActionBackgroundColor: (tree.materialSnackBarThemeData.hasDisabledActionBackgroundColor() ? evaluateDartColorType(tree.materialSnackBarThemeData.disabledActionBackgroundColor) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialStepper.Step evaluateRequiredMaterialStepType(messages.MaterialStepType tree) {
  final result = evaluateMaterialStepType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialStepper.Step? evaluateMaterialStepType(messages.MaterialStepType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialStepType_Constructor.materialStep:
      return $flutterSrcMaterialStepper.Step(
          title: (tree.materialStep.hasTitle() ? evaluateRequiredWidgetType(tree.materialStep.title) : missing('title')),
          subtitle: (tree.materialStep.hasSubtitle() ? evaluateWidgetType(tree.materialStep.subtitle) : null),
          content: (tree.materialStep.hasContent() ? evaluateRequiredWidgetType(tree.materialStep.content) : missing('content')),
          state: (tree.materialStep.hasState() ? enums.convertRequiredMaterialStepStateType(tree.materialStep.state) : $flutterSrcMaterialStepper.StepState.indexed),
          isActive: (tree.materialStep.hasIsActive() ? tree.materialStep.isActive : false),
          label: (tree.materialStep.hasLabel() ? evaluateWidgetType(tree.materialStep.label) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialSwitchTheme.SwitchThemeData evaluateRequiredMaterialSwitchThemeDataType(messages.MaterialSwitchThemeDataType tree) {
  final result = evaluateMaterialSwitchThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialSwitchTheme.SwitchThemeData? evaluateMaterialSwitchThemeDataType(messages.MaterialSwitchThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialSwitchThemeDataType_Constructor.materialSwitchThemeData:
      return $flutterSrcMaterialSwitchTheme.SwitchThemeData(
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          materialTapTargetSize: (tree.materialSwitchThemeData.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchThemeData.materialTapTargetSize) : null),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchThemeData.hasSplashRadius() ? tree.materialSwitchThemeData.splashRadius : null),
          thumbIcon: null);
    default:
      return null;
  }
}

$flutterSrcMaterialTabBarTheme.TabBarTheme evaluateRequiredMaterialTabBarThemeType(messages.MaterialTabBarThemeType tree) {
  final result = evaluateMaterialTabBarThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTabBarTheme.TabBarTheme? evaluateMaterialTabBarThemeType(messages.MaterialTabBarThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTabBarThemeType_Constructor.materialTabBarTheme:
      return $flutterSrcMaterialTabBarTheme.TabBarTheme(
          indicator: (tree.materialTabBarTheme.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBarTheme.indicator) : null),
          indicatorColor: (tree.materialTabBarTheme.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBarTheme.indicatorColor) : null),
          indicatorSize: (tree.materialTabBarTheme.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBarTheme.indicatorSize) : null),
          dividerColor: (tree.materialTabBarTheme.hasDividerColor() ? evaluateDartColorType(tree.materialTabBarTheme.dividerColor) : null),
          dividerHeight: (tree.materialTabBarTheme.hasDividerHeight() ? tree.materialTabBarTheme.dividerHeight : null),
          labelColor: (tree.materialTabBarTheme.hasLabelColor() ? evaluateDartColorType(tree.materialTabBarTheme.labelColor) : null),
          labelPadding: (tree.materialTabBarTheme.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarTheme.labelPadding) : null),
          labelStyle: (tree.materialTabBarTheme.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarTheme.labelStyle) : null),
          unselectedLabelColor: (tree.materialTabBarTheme.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBarTheme.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBarTheme.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarTheme.unselectedLabelStyle) : null),
          overlayColor: null,
          splashFactory: null,
          mouseCursor: null,
          tabAlignment: (tree.materialTabBarTheme.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBarTheme.tabAlignment) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTabController.TabController evaluateRequiredMaterialTabControllerType(messages.MaterialTabControllerType tree) {
  final result = evaluateMaterialTabControllerType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTabController.TabController? evaluateMaterialTabControllerType(messages.MaterialTabControllerType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTabControllerType_Constructor.materialTabController:
      return $flutterSrcMaterialTabController.TabController(
          initialIndex: (tree.materialTabController.hasInitialIndex() ? tree.materialTabController.initialIndex : 0),
          animationDuration: (tree.materialTabController.hasAnimationDuration() ? evaluateDartDurationType(tree.materialTabController.animationDuration) : null),
          length: (tree.materialTabController.hasLength() ? tree.materialTabController.length : missing('length')),
          vsync: (tree.materialTabController.hasVsync() ? evaluateRequiredFlutterSrcSchedulerTickerProviderType(tree.materialTabController.vsync) : missing('vsync')));
    default:
      return null;
  }
}

$flutterSrcMaterialTextButtonTheme.TextButtonThemeData evaluateRequiredMaterialTextButtonThemeDataType(messages.MaterialTextButtonThemeDataType tree) {
  final result = evaluateMaterialTextButtonThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTextButtonTheme.TextButtonThemeData? evaluateMaterialTextButtonThemeDataType(messages.MaterialTextButtonThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTextButtonThemeDataType_Constructor.materialTextButtonThemeData:
      return $flutterSrcMaterialTextButtonTheme.TextButtonThemeData(
          style: (tree.materialTextButtonThemeData.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButtonThemeData.style) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTextSelectionTheme.TextSelectionThemeData evaluateRequiredMaterialTextSelectionThemeDataType(messages.MaterialTextSelectionThemeDataType tree) {
  final result = evaluateMaterialTextSelectionThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTextSelectionTheme.TextSelectionThemeData? evaluateMaterialTextSelectionThemeDataType(messages.MaterialTextSelectionThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTextSelectionThemeDataType_Constructor.materialTextSelectionThemeData:
      return $flutterSrcMaterialTextSelectionTheme.TextSelectionThemeData(
          cursorColor: (tree.materialTextSelectionThemeData.hasCursorColor() ? evaluateDartColorType(tree.materialTextSelectionThemeData.cursorColor) : null),
          selectionColor: (tree.materialTextSelectionThemeData.hasSelectionColor() ? evaluateDartColorType(tree.materialTextSelectionThemeData.selectionColor) : null),
          selectionHandleColor: (tree.materialTextSelectionThemeData.hasSelectionHandleColor() ? evaluateDartColorType(tree.materialTextSelectionThemeData.selectionHandleColor) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTextTheme.TextTheme evaluateRequiredMaterialTextThemeType(messages.MaterialTextThemeType tree) {
  final result = evaluateMaterialTextThemeType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTextTheme.TextTheme? evaluateMaterialTextThemeType(messages.MaterialTextThemeType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTextThemeType_Constructor.materialTextTheme:
      return $flutterSrcMaterialTextTheme.TextTheme(
          displayLarge: (tree.materialTextTheme.hasDisplayLarge() ? evaluateFlutterTextStyleType(tree.materialTextTheme.displayLarge) : null),
          displayMedium: (tree.materialTextTheme.hasDisplayMedium() ? evaluateFlutterTextStyleType(tree.materialTextTheme.displayMedium) : null),
          displaySmall: (tree.materialTextTheme.hasDisplaySmall() ? evaluateFlutterTextStyleType(tree.materialTextTheme.displaySmall) : null),
          headlineLarge: (tree.materialTextTheme.hasHeadlineLarge() ? evaluateFlutterTextStyleType(tree.materialTextTheme.headlineLarge) : null),
          headlineMedium: (tree.materialTextTheme.hasHeadlineMedium() ? evaluateFlutterTextStyleType(tree.materialTextTheme.headlineMedium) : null),
          headlineSmall: (tree.materialTextTheme.hasHeadlineSmall() ? evaluateFlutterTextStyleType(tree.materialTextTheme.headlineSmall) : null),
          titleLarge: (tree.materialTextTheme.hasTitleLarge() ? evaluateFlutterTextStyleType(tree.materialTextTheme.titleLarge) : null),
          titleMedium: (tree.materialTextTheme.hasTitleMedium() ? evaluateFlutterTextStyleType(tree.materialTextTheme.titleMedium) : null),
          titleSmall: (tree.materialTextTheme.hasTitleSmall() ? evaluateFlutterTextStyleType(tree.materialTextTheme.titleSmall) : null),
          bodyLarge: (tree.materialTextTheme.hasBodyLarge() ? evaluateFlutterTextStyleType(tree.materialTextTheme.bodyLarge) : null),
          bodyMedium: (tree.materialTextTheme.hasBodyMedium() ? evaluateFlutterTextStyleType(tree.materialTextTheme.bodyMedium) : null),
          bodySmall: (tree.materialTextTheme.hasBodySmall() ? evaluateFlutterTextStyleType(tree.materialTextTheme.bodySmall) : null),
          labelLarge: (tree.materialTextTheme.hasLabelLarge() ? evaluateFlutterTextStyleType(tree.materialTextTheme.labelLarge) : null),
          labelMedium: (tree.materialTextTheme.hasLabelMedium() ? evaluateFlutterTextStyleType(tree.materialTextTheme.labelMedium) : null),
          labelSmall: (tree.materialTextTheme.hasLabelSmall() ? evaluateFlutterTextStyleType(tree.materialTextTheme.labelSmall) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialThemeData.ThemeData evaluateRequiredMaterialThemeDataType(messages.MaterialThemeDataType tree) {
  final result = evaluateMaterialThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialThemeData.ThemeData? evaluateMaterialThemeDataType(messages.MaterialThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialThemeDataType_Constructor.materialThemeData:
      return $flutterSrcMaterialThemeData.ThemeData(
          applyElevationOverlayColor: (tree.materialThemeData.hasApplyElevationOverlayColor() ? tree.materialThemeData.applyElevationOverlayColor : null),
          cupertinoOverrideTheme: (tree.materialThemeData.hasCupertinoOverrideTheme() ? evaluateNoDefaultCupertinoThemeDataType(tree.materialThemeData.cupertinoOverrideTheme) : null),
          extensions: null,
          inputDecorationTheme: (tree.materialThemeData.hasInputDecorationTheme() ? evaluateMaterialInputDecorationThemeType(tree.materialThemeData.inputDecorationTheme) : null),
          materialTapTargetSize: (tree.materialThemeData.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialThemeData.materialTapTargetSize) : null),
          pageTransitionsTheme: (tree.materialThemeData.hasPageTransitionsTheme() ? evaluateMaterialPageTransitionsThemeType(tree.materialThemeData.pageTransitionsTheme) : null),
          platform: (tree.materialThemeData.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.materialThemeData.platform) : null),
          scrollbarTheme: (tree.materialThemeData.hasScrollbarTheme() ? evaluateMaterialScrollbarThemeDataType(tree.materialThemeData.scrollbarTheme) : null),
          splashFactory: null,
          useMaterial3: (tree.materialThemeData.hasUseMaterial3() ? tree.materialThemeData.useMaterial3 : null),
          visualDensity: (tree.materialThemeData.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialThemeData.visualDensity) : null),
          brightness: (tree.materialThemeData.hasBrightness() ? enums.convertDartBrightnessType(tree.materialThemeData.brightness) : null),
          canvasColor: (tree.materialThemeData.hasCanvasColor() ? evaluateDartColorType(tree.materialThemeData.canvasColor) : null),
          cardColor: (tree.materialThemeData.hasCardColor() ? evaluateDartColorType(tree.materialThemeData.cardColor) : null),
          colorScheme: (tree.materialThemeData.hasColorScheme() ? evaluateMaterialColorSchemeType(tree.materialThemeData.colorScheme) : null),
          colorSchemeSeed: (tree.materialThemeData.hasColorSchemeSeed() ? evaluateDartColorType(tree.materialThemeData.colorSchemeSeed) : null),
          dialogBackgroundColor: (tree.materialThemeData.hasDialogBackgroundColor() ? evaluateDartColorType(tree.materialThemeData.dialogBackgroundColor) : null),
          disabledColor: (tree.materialThemeData.hasDisabledColor() ? evaluateDartColorType(tree.materialThemeData.disabledColor) : null),
          dividerColor: (tree.materialThemeData.hasDividerColor() ? evaluateDartColorType(tree.materialThemeData.dividerColor) : null),
          focusColor: (tree.materialThemeData.hasFocusColor() ? evaluateDartColorType(tree.materialThemeData.focusColor) : null),
          highlightColor: (tree.materialThemeData.hasHighlightColor() ? evaluateDartColorType(tree.materialThemeData.highlightColor) : null),
          hintColor: (tree.materialThemeData.hasHintColor() ? evaluateDartColorType(tree.materialThemeData.hintColor) : null),
          hoverColor: (tree.materialThemeData.hasHoverColor() ? evaluateDartColorType(tree.materialThemeData.hoverColor) : null),
          indicatorColor: (tree.materialThemeData.hasIndicatorColor() ? evaluateDartColorType(tree.materialThemeData.indicatorColor) : null),
          primaryColor: (tree.materialThemeData.hasPrimaryColor() ? evaluateDartColorType(tree.materialThemeData.primaryColor) : null),
          primaryColorDark: (tree.materialThemeData.hasPrimaryColorDark() ? evaluateDartColorType(tree.materialThemeData.primaryColorDark) : null),
          primaryColorLight: (tree.materialThemeData.hasPrimaryColorLight() ? evaluateDartColorType(tree.materialThemeData.primaryColorLight) : null),
          primarySwatch: null,
          scaffoldBackgroundColor: (tree.materialThemeData.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.materialThemeData.scaffoldBackgroundColor) : null),
          secondaryHeaderColor: (tree.materialThemeData.hasSecondaryHeaderColor() ? evaluateDartColorType(tree.materialThemeData.secondaryHeaderColor) : null),
          shadowColor: (tree.materialThemeData.hasShadowColor() ? evaluateDartColorType(tree.materialThemeData.shadowColor) : null),
          splashColor: (tree.materialThemeData.hasSplashColor() ? evaluateDartColorType(tree.materialThemeData.splashColor) : null),
          unselectedWidgetColor: (tree.materialThemeData.hasUnselectedWidgetColor() ? evaluateDartColorType(tree.materialThemeData.unselectedWidgetColor) : null),
          fontFamily: (tree.materialThemeData.hasFontFamily() ? tree.materialThemeData.fontFamily : null),
          fontFamilyFallback: tree.materialThemeData.fontFamilyFallback,
          package: (tree.materialThemeData.hasPackage() ? tree.materialThemeData.package : null),
          iconTheme: (tree.materialThemeData.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialThemeData.iconTheme) : null),
          primaryIconTheme: (tree.materialThemeData.hasPrimaryIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialThemeData.primaryIconTheme) : null),
          primaryTextTheme: (tree.materialThemeData.hasPrimaryTextTheme() ? evaluateMaterialTextThemeType(tree.materialThemeData.primaryTextTheme) : null),
          textTheme: (tree.materialThemeData.hasTextTheme() ? evaluateMaterialTextThemeType(tree.materialThemeData.textTheme) : null),
          typography: (tree.materialThemeData.hasTypography() ? evaluateMaterialTypographyType(tree.materialThemeData.typography) : null),
          actionIconTheme: (tree.materialThemeData.hasActionIconTheme() ? evaluateMaterialActionIconThemeDataType(tree.materialThemeData.actionIconTheme) : null),
          appBarTheme: (tree.materialThemeData.hasAppBarTheme() ? evaluateMaterialAppBarThemeType(tree.materialThemeData.appBarTheme) : null),
          badgeTheme: (tree.materialThemeData.hasBadgeTheme() ? evaluateMaterialBadgeThemeDataType(tree.materialThemeData.badgeTheme) : null),
          bannerTheme: (tree.materialThemeData.hasBannerTheme() ? evaluateMaterialMaterialBannerThemeDataType(tree.materialThemeData.bannerTheme) : null),
          bottomAppBarTheme: (tree.materialThemeData.hasBottomAppBarTheme() ? evaluateMaterialBottomAppBarThemeType(tree.materialThemeData.bottomAppBarTheme) : null),
          bottomNavigationBarTheme: (tree.materialThemeData.hasBottomNavigationBarTheme() ? evaluateMaterialBottomNavigationBarThemeDataType(tree.materialThemeData.bottomNavigationBarTheme) : null),
          bottomSheetTheme: (tree.materialThemeData.hasBottomSheetTheme() ? evaluateMaterialBottomSheetThemeDataType(tree.materialThemeData.bottomSheetTheme) : null),
          buttonBarTheme: (tree.materialThemeData.hasButtonBarTheme() ? evaluateMaterialButtonBarThemeDataType(tree.materialThemeData.buttonBarTheme) : null),
          buttonTheme: (tree.materialThemeData.hasButtonTheme() ? evaluateMaterialButtonThemeDataType(tree.materialThemeData.buttonTheme) : null),
          cardTheme: (tree.materialThemeData.hasCardTheme() ? evaluateMaterialCardThemeType(tree.materialThemeData.cardTheme) : null),
          checkboxTheme: (tree.materialThemeData.hasCheckboxTheme() ? evaluateMaterialCheckboxThemeDataType(tree.materialThemeData.checkboxTheme) : null),
          chipTheme: (tree.materialThemeData.hasChipTheme() ? evaluateMaterialChipThemeDataType(tree.materialThemeData.chipTheme) : null),
          dataTableTheme: (tree.materialThemeData.hasDataTableTheme() ? evaluateMaterialDataTableThemeDataType(tree.materialThemeData.dataTableTheme) : null),
          datePickerTheme: (tree.materialThemeData.hasDatePickerTheme() ? evaluateMaterialDatePickerThemeDataType(tree.materialThemeData.datePickerTheme) : null),
          dialogTheme: (tree.materialThemeData.hasDialogTheme() ? evaluateMaterialDialogThemeType(tree.materialThemeData.dialogTheme) : null),
          dividerTheme: (tree.materialThemeData.hasDividerTheme() ? evaluateMaterialDividerThemeDataType(tree.materialThemeData.dividerTheme) : null),
          drawerTheme: (tree.materialThemeData.hasDrawerTheme() ? evaluateMaterialDrawerThemeDataType(tree.materialThemeData.drawerTheme) : null),
          dropdownMenuTheme: (tree.materialThemeData.hasDropdownMenuTheme() ? evaluateMaterialDropdownMenuThemeDataType(tree.materialThemeData.dropdownMenuTheme) : null),
          elevatedButtonTheme: (tree.materialThemeData.hasElevatedButtonTheme() ? evaluateMaterialElevatedButtonThemeDataType(tree.materialThemeData.elevatedButtonTheme) : null),
          expansionTileTheme: (tree.materialThemeData.hasExpansionTileTheme() ? evaluateMaterialExpansionTileThemeDataType(tree.materialThemeData.expansionTileTheme) : null),
          filledButtonTheme: (tree.materialThemeData.hasFilledButtonTheme() ? evaluateMaterialFilledButtonThemeDataType(tree.materialThemeData.filledButtonTheme) : null),
          floatingActionButtonTheme: (tree.materialThemeData.hasFloatingActionButtonTheme() ? evaluateMaterialFloatingActionButtonThemeDataType(tree.materialThemeData.floatingActionButtonTheme) : null),
          iconButtonTheme: (tree.materialThemeData.hasIconButtonTheme() ? evaluateMaterialIconButtonThemeDataType(tree.materialThemeData.iconButtonTheme) : null),
          listTileTheme: (tree.materialThemeData.hasListTileTheme() ? evaluateMaterialListTileThemeDataType(tree.materialThemeData.listTileTheme) : null),
          menuBarTheme: (tree.materialThemeData.hasMenuBarTheme() ? evaluateMaterialMenuBarThemeDataType(tree.materialThemeData.menuBarTheme) : null),
          menuButtonTheme: (tree.materialThemeData.hasMenuButtonTheme() ? evaluateMaterialMenuButtonThemeDataType(tree.materialThemeData.menuButtonTheme) : null),
          menuTheme: (tree.materialThemeData.hasMenuTheme() ? evaluateMaterialMenuThemeDataType(tree.materialThemeData.menuTheme) : null),
          navigationBarTheme: (tree.materialThemeData.hasNavigationBarTheme() ? evaluateMaterialNavigationBarThemeDataType(tree.materialThemeData.navigationBarTheme) : null),
          navigationDrawerTheme: (tree.materialThemeData.hasNavigationDrawerTheme() ? evaluateMaterialNavigationDrawerThemeDataType(tree.materialThemeData.navigationDrawerTheme) : null),
          navigationRailTheme: (tree.materialThemeData.hasNavigationRailTheme() ? evaluateMaterialNavigationRailThemeDataType(tree.materialThemeData.navigationRailTheme) : null),
          outlinedButtonTheme: (tree.materialThemeData.hasOutlinedButtonTheme() ? evaluateMaterialOutlinedButtonThemeDataType(tree.materialThemeData.outlinedButtonTheme) : null),
          popupMenuTheme: (tree.materialThemeData.hasPopupMenuTheme() ? evaluateMaterialPopupMenuThemeDataType(tree.materialThemeData.popupMenuTheme) : null),
          progressIndicatorTheme: (tree.materialThemeData.hasProgressIndicatorTheme() ? evaluateMaterialProgressIndicatorThemeDataType(tree.materialThemeData.progressIndicatorTheme) : null),
          radioTheme: (tree.materialThemeData.hasRadioTheme() ? evaluateMaterialRadioThemeDataType(tree.materialThemeData.radioTheme) : null),
          searchBarTheme: (tree.materialThemeData.hasSearchBarTheme() ? evaluateMaterialSearchBarThemeDataType(tree.materialThemeData.searchBarTheme) : null),
          searchViewTheme: (tree.materialThemeData.hasSearchViewTheme() ? evaluateMaterialSearchViewThemeDataType(tree.materialThemeData.searchViewTheme) : null),
          segmentedButtonTheme: (tree.materialThemeData.hasSegmentedButtonTheme() ? evaluateMaterialSegmentedButtonThemeDataType(tree.materialThemeData.segmentedButtonTheme) : null),
          sliderTheme: (tree.materialThemeData.hasSliderTheme() ? evaluateMaterialSliderThemeDataType(tree.materialThemeData.sliderTheme) : null),
          snackBarTheme: (tree.materialThemeData.hasSnackBarTheme() ? evaluateMaterialSnackBarThemeDataType(tree.materialThemeData.snackBarTheme) : null),
          switchTheme: (tree.materialThemeData.hasSwitchTheme() ? evaluateMaterialSwitchThemeDataType(tree.materialThemeData.switchTheme) : null),
          tabBarTheme: (tree.materialThemeData.hasTabBarTheme() ? evaluateMaterialTabBarThemeType(tree.materialThemeData.tabBarTheme) : null),
          textButtonTheme: (tree.materialThemeData.hasTextButtonTheme() ? evaluateMaterialTextButtonThemeDataType(tree.materialThemeData.textButtonTheme) : null),
          textSelectionTheme: (tree.materialThemeData.hasTextSelectionTheme() ? evaluateMaterialTextSelectionThemeDataType(tree.materialThemeData.textSelectionTheme) : null),
          timePickerTheme: (tree.materialThemeData.hasTimePickerTheme() ? evaluateMaterialTimePickerThemeDataType(tree.materialThemeData.timePickerTheme) : null),
          toggleButtonsTheme: (tree.materialThemeData.hasToggleButtonsTheme() ? evaluateMaterialToggleButtonsThemeDataType(tree.materialThemeData.toggleButtonsTheme) : null),
          tooltipTheme: (tree.materialThemeData.hasTooltipTheme() ? evaluateMaterialTooltipThemeDataType(tree.materialThemeData.tooltipTheme) : null));
    case messages.MaterialThemeDataType_Constructor.materialThemeDataNamedDark:
      return $flutterSrcMaterialThemeData.ThemeData.dark(
          useMaterial3: (tree.materialThemeDataNamedDark.hasUseMaterial3() ? tree.materialThemeDataNamedDark.useMaterial3 : null));
    case messages.MaterialThemeDataType_Constructor.materialThemeDataNamedFallback:
      return $flutterSrcMaterialThemeData.ThemeData.fallback(
          useMaterial3: (tree.materialThemeDataNamedFallback.hasUseMaterial3() ? tree.materialThemeDataNamedFallback.useMaterial3 : null));
    case messages.MaterialThemeDataType_Constructor.materialThemeDataNamedFrom:
      return $flutterSrcMaterialThemeData.ThemeData.from(
          colorScheme: (tree.materialThemeDataNamedFrom.hasColorScheme() ? evaluateRequiredMaterialColorSchemeType(tree.materialThemeDataNamedFrom.colorScheme) : missing('colorScheme')),
          textTheme: (tree.materialThemeDataNamedFrom.hasTextTheme() ? evaluateMaterialTextThemeType(tree.materialThemeDataNamedFrom.textTheme) : null),
          useMaterial3: (tree.materialThemeDataNamedFrom.hasUseMaterial3() ? tree.materialThemeDataNamedFrom.useMaterial3 : null));
    case messages.MaterialThemeDataType_Constructor.materialThemeDataNamedLight:
      return $flutterSrcMaterialThemeData.ThemeData.light(
          useMaterial3: (tree.materialThemeDataNamedLight.hasUseMaterial3() ? tree.materialThemeDataNamedLight.useMaterial3 : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTime.TimeOfDay evaluateRequiredMaterialTimeOfDayType(messages.MaterialTimeOfDayType tree) {
  final result = evaluateMaterialTimeOfDayType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTime.TimeOfDay? evaluateMaterialTimeOfDayType(messages.MaterialTimeOfDayType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTimeOfDayType_Constructor.materialTimeOfDay:
      return $flutterSrcMaterialTime.TimeOfDay(
          hour: (tree.materialTimeOfDay.hasHour() ? tree.materialTimeOfDay.hour : missing('hour')),
          minute: (tree.materialTimeOfDay.hasMinute() ? tree.materialTimeOfDay.minute : missing('minute')));
    case messages.MaterialTimeOfDayType_Constructor.materialTimeOfDayNamedFromDateTime:
      return $flutterSrcMaterialTime.TimeOfDay.fromDateTime(
          (tree.materialTimeOfDayNamedFromDateTime.hasTime() ? evaluateRequiredDartDateTimeType(tree.materialTimeOfDayNamedFromDateTime.time) : missing('time')));
    case messages.MaterialTimeOfDayType_Constructor.materialTimeOfDayNamedNow:
      return $flutterSrcMaterialTime.TimeOfDay.now(
          );
    default:
      return null;
  }
}

$flutterSrcMaterialTimePickerTheme.TimePickerThemeData evaluateRequiredMaterialTimePickerThemeDataType(messages.MaterialTimePickerThemeDataType tree) {
  final result = evaluateMaterialTimePickerThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTimePickerTheme.TimePickerThemeData? evaluateMaterialTimePickerThemeDataType(messages.MaterialTimePickerThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTimePickerThemeDataType_Constructor.materialTimePickerThemeData:
      return $flutterSrcMaterialTimePickerTheme.TimePickerThemeData(
          backgroundColor: (tree.materialTimePickerThemeData.hasBackgroundColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.backgroundColor) : null),
          cancelButtonStyle: (tree.materialTimePickerThemeData.hasCancelButtonStyle() ? evaluateMaterialButtonStyleType(tree.materialTimePickerThemeData.cancelButtonStyle) : null),
          confirmButtonStyle: (tree.materialTimePickerThemeData.hasConfirmButtonStyle() ? evaluateMaterialButtonStyleType(tree.materialTimePickerThemeData.confirmButtonStyle) : null),
          dayPeriodBorderSide: (tree.materialTimePickerThemeData.hasDayPeriodBorderSide() ? evaluateFlutterBorderSideType(tree.materialTimePickerThemeData.dayPeriodBorderSide) : null),
          dayPeriodColor: (tree.materialTimePickerThemeData.hasDayPeriodColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.dayPeriodColor) : null),
          dayPeriodShape: (tree.materialTimePickerThemeData.hasDayPeriodShape() ? evaluateFlutterOutlinedBorderType(tree.materialTimePickerThemeData.dayPeriodShape) : null),
          dayPeriodTextColor: (tree.materialTimePickerThemeData.hasDayPeriodTextColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.dayPeriodTextColor) : null),
          dayPeriodTextStyle: (tree.materialTimePickerThemeData.hasDayPeriodTextStyle() ? evaluateFlutterTextStyleType(tree.materialTimePickerThemeData.dayPeriodTextStyle) : null),
          dialBackgroundColor: (tree.materialTimePickerThemeData.hasDialBackgroundColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.dialBackgroundColor) : null),
          dialHandColor: (tree.materialTimePickerThemeData.hasDialHandColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.dialHandColor) : null),
          dialTextColor: (tree.materialTimePickerThemeData.hasDialTextColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.dialTextColor) : null),
          dialTextStyle: (tree.materialTimePickerThemeData.hasDialTextStyle() ? evaluateFlutterTextStyleType(tree.materialTimePickerThemeData.dialTextStyle) : null),
          elevation: (tree.materialTimePickerThemeData.hasElevation() ? tree.materialTimePickerThemeData.elevation : null),
          entryModeIconColor: (tree.materialTimePickerThemeData.hasEntryModeIconColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.entryModeIconColor) : null),
          helpTextStyle: (tree.materialTimePickerThemeData.hasHelpTextStyle() ? evaluateFlutterTextStyleType(tree.materialTimePickerThemeData.helpTextStyle) : null),
          hourMinuteColor: (tree.materialTimePickerThemeData.hasHourMinuteColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.hourMinuteColor) : null),
          hourMinuteShape: (tree.materialTimePickerThemeData.hasHourMinuteShape() ? evaluateFlutterShapeBorderType(tree.materialTimePickerThemeData.hourMinuteShape) : null),
          hourMinuteTextColor: (tree.materialTimePickerThemeData.hasHourMinuteTextColor() ? evaluateDartColorType(tree.materialTimePickerThemeData.hourMinuteTextColor) : null),
          hourMinuteTextStyle: (tree.materialTimePickerThemeData.hasHourMinuteTextStyle() ? evaluateFlutterTextStyleType(tree.materialTimePickerThemeData.hourMinuteTextStyle) : null),
          inputDecorationTheme: (tree.materialTimePickerThemeData.hasInputDecorationTheme() ? evaluateMaterialInputDecorationThemeType(tree.materialTimePickerThemeData.inputDecorationTheme) : null),
          padding: (tree.materialTimePickerThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTimePickerThemeData.padding) : null),
          shape: (tree.materialTimePickerThemeData.hasShape() ? evaluateFlutterShapeBorderType(tree.materialTimePickerThemeData.shape) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialToggleButtonsTheme.ToggleButtonsThemeData evaluateRequiredMaterialToggleButtonsThemeDataType(messages.MaterialToggleButtonsThemeDataType tree) {
  final result = evaluateMaterialToggleButtonsThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialToggleButtonsTheme.ToggleButtonsThemeData? evaluateMaterialToggleButtonsThemeDataType(messages.MaterialToggleButtonsThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialToggleButtonsThemeDataType_Constructor.materialToggleButtonsThemeData:
      return $flutterSrcMaterialToggleButtonsTheme.ToggleButtonsThemeData(
          textStyle: (tree.materialToggleButtonsThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialToggleButtonsThemeData.textStyle) : null),
          constraints: (tree.materialToggleButtonsThemeData.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialToggleButtonsThemeData.constraints) : null),
          color: (tree.materialToggleButtonsThemeData.hasColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.color) : null),
          selectedColor: (tree.materialToggleButtonsThemeData.hasSelectedColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.selectedColor) : null),
          disabledColor: (tree.materialToggleButtonsThemeData.hasDisabledColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.disabledColor) : null),
          fillColor: (tree.materialToggleButtonsThemeData.hasFillColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.fillColor) : null),
          focusColor: (tree.materialToggleButtonsThemeData.hasFocusColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.focusColor) : null),
          highlightColor: (tree.materialToggleButtonsThemeData.hasHighlightColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.highlightColor) : null),
          hoverColor: (tree.materialToggleButtonsThemeData.hasHoverColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.hoverColor) : null),
          splashColor: (tree.materialToggleButtonsThemeData.hasSplashColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.splashColor) : null),
          borderColor: (tree.materialToggleButtonsThemeData.hasBorderColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.borderColor) : null),
          selectedBorderColor: (tree.materialToggleButtonsThemeData.hasSelectedBorderColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.selectedBorderColor) : null),
          disabledBorderColor: (tree.materialToggleButtonsThemeData.hasDisabledBorderColor() ? evaluateDartColorType(tree.materialToggleButtonsThemeData.disabledBorderColor) : null),
          borderRadius: (tree.materialToggleButtonsThemeData.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialToggleButtonsThemeData.borderRadius) : null),
          borderWidth: (tree.materialToggleButtonsThemeData.hasBorderWidth() ? tree.materialToggleButtonsThemeData.borderWidth : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTooltipTheme.TooltipThemeData evaluateRequiredMaterialTooltipThemeDataType(messages.MaterialTooltipThemeDataType tree) {
  final result = evaluateMaterialTooltipThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTooltipTheme.TooltipThemeData? evaluateMaterialTooltipThemeDataType(messages.MaterialTooltipThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTooltipThemeDataType_Constructor.materialTooltipThemeData:
      return $flutterSrcMaterialTooltipTheme.TooltipThemeData(
          height: (tree.materialTooltipThemeData.hasHeight() ? tree.materialTooltipThemeData.height : null),
          padding: (tree.materialTooltipThemeData.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltipThemeData.padding) : null),
          margin: (tree.materialTooltipThemeData.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltipThemeData.margin) : null),
          verticalOffset: (tree.materialTooltipThemeData.hasVerticalOffset() ? tree.materialTooltipThemeData.verticalOffset : null),
          preferBelow: (tree.materialTooltipThemeData.hasPreferBelow() ? tree.materialTooltipThemeData.preferBelow : null),
          excludeFromSemantics: (tree.materialTooltipThemeData.hasExcludeFromSemantics() ? tree.materialTooltipThemeData.excludeFromSemantics : null),
          decoration: (tree.materialTooltipThemeData.hasDecoration() ? evaluateFlutterDecorationType(tree.materialTooltipThemeData.decoration) : null),
          textStyle: (tree.materialTooltipThemeData.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialTooltipThemeData.textStyle) : null),
          textAlign: (tree.materialTooltipThemeData.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialTooltipThemeData.textAlign) : null),
          waitDuration: (tree.materialTooltipThemeData.hasWaitDuration() ? evaluateDartDurationType(tree.materialTooltipThemeData.waitDuration) : null),
          showDuration: (tree.materialTooltipThemeData.hasShowDuration() ? evaluateDartDurationType(tree.materialTooltipThemeData.showDuration) : null),
          triggerMode: (tree.materialTooltipThemeData.hasTriggerMode() ? enums.convertMaterialTooltipTriggerModeType(tree.materialTooltipThemeData.triggerMode) : null),
          enableFeedback: (tree.materialTooltipThemeData.hasEnableFeedback() ? tree.materialTooltipThemeData.enableFeedback : null));
    default:
      return null;
  }
}

$flutterSrcMaterialTypography.Typography evaluateRequiredMaterialTypographyType(messages.MaterialTypographyType tree) {
  final result = evaluateMaterialTypographyType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialTypography.Typography? evaluateMaterialTypographyType(messages.MaterialTypographyType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialTypographyType_Constructor.materialTypography:
      return $flutterSrcMaterialTypography.Typography(
          platform: (tree.materialTypography.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.materialTypography.platform) : null),
          black: (tree.materialTypography.hasBlack() ? evaluateMaterialTextThemeType(tree.materialTypography.black) : null),
          white: (tree.materialTypography.hasWhite() ? evaluateMaterialTextThemeType(tree.materialTypography.white) : null),
          englishLike: (tree.materialTypography.hasEnglishLike() ? evaluateMaterialTextThemeType(tree.materialTypography.englishLike) : null),
          dense: (tree.materialTypography.hasDense() ? evaluateMaterialTextThemeType(tree.materialTypography.dense) : null),
          tall: (tree.materialTypography.hasTall() ? evaluateMaterialTextThemeType(tree.materialTypography.tall) : null));
    case messages.MaterialTypographyType_Constructor.materialTypographyNamedMaterial2014:
      return $flutterSrcMaterialTypography.Typography.material2014(
          platform: (tree.materialTypographyNamedMaterial2014.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.materialTypographyNamedMaterial2014.platform) : $flutterSrcFoundationPlatform.TargetPlatform.android),
          black: (tree.materialTypographyNamedMaterial2014.hasBlack() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2014.black) : null),
          white: (tree.materialTypographyNamedMaterial2014.hasWhite() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2014.white) : null),
          englishLike: (tree.materialTypographyNamedMaterial2014.hasEnglishLike() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2014.englishLike) : null),
          dense: (tree.materialTypographyNamedMaterial2014.hasDense() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2014.dense) : null),
          tall: (tree.materialTypographyNamedMaterial2014.hasTall() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2014.tall) : null));
    case messages.MaterialTypographyType_Constructor.materialTypographyNamedMaterial2018:
      return $flutterSrcMaterialTypography.Typography.material2018(
          platform: (tree.materialTypographyNamedMaterial2018.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.materialTypographyNamedMaterial2018.platform) : $flutterSrcFoundationPlatform.TargetPlatform.android),
          black: (tree.materialTypographyNamedMaterial2018.hasBlack() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2018.black) : null),
          white: (tree.materialTypographyNamedMaterial2018.hasWhite() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2018.white) : null),
          englishLike: (tree.materialTypographyNamedMaterial2018.hasEnglishLike() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2018.englishLike) : null),
          dense: (tree.materialTypographyNamedMaterial2018.hasDense() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2018.dense) : null),
          tall: (tree.materialTypographyNamedMaterial2018.hasTall() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2018.tall) : null));
    case messages.MaterialTypographyType_Constructor.materialTypographyNamedMaterial2021:
      return $flutterSrcMaterialTypography.Typography.material2021(
          platform: (tree.materialTypographyNamedMaterial2021.hasPlatform() ? enums.convertFlutterTargetPlatformType(tree.materialTypographyNamedMaterial2021.platform) : $flutterSrcFoundationPlatform.TargetPlatform.android),
          colorScheme: (tree.materialTypographyNamedMaterial2021.hasColorScheme() ? evaluateRequiredMaterialColorSchemeType(tree.materialTypographyNamedMaterial2021.colorScheme) : $flutterSrcMaterialColorScheme.ColorScheme.light()),
          black: (tree.materialTypographyNamedMaterial2021.hasBlack() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2021.black) : null),
          white: (tree.materialTypographyNamedMaterial2021.hasWhite() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2021.white) : null),
          englishLike: (tree.materialTypographyNamedMaterial2021.hasEnglishLike() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2021.englishLike) : null),
          dense: (tree.materialTypographyNamedMaterial2021.hasDense() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2021.dense) : null),
          tall: (tree.materialTypographyNamedMaterial2021.hasTall() ? evaluateMaterialTextThemeType(tree.materialTypographyNamedMaterial2021.tall) : null));
    default:
      return null;
  }
}

$flutterSrcMaterialThemeData.VisualDensity evaluateRequiredMaterialVisualDensityType(messages.MaterialVisualDensityType tree) {
  final result = evaluateMaterialVisualDensityType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcMaterialThemeData.VisualDensity? evaluateMaterialVisualDensityType(messages.MaterialVisualDensityType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.MaterialVisualDensityType_Constructor.materialVisualDensity:
      return $flutterSrcMaterialThemeData.VisualDensity(
          horizontal: (tree.materialVisualDensity.hasHorizontal() ? tree.materialVisualDensity.horizontal : 0.0),
          vertical: (tree.materialVisualDensity.hasVertical() ? tree.materialVisualDensity.vertical : 0.0));
    default:
      return null;
  }
}

$flutterSrcCupertinoTheme.NoDefaultCupertinoThemeData evaluateRequiredNoDefaultCupertinoThemeDataType(messages.NoDefaultCupertinoThemeDataType tree) {
  final result = evaluateNoDefaultCupertinoThemeDataType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcCupertinoTheme.NoDefaultCupertinoThemeData? evaluateNoDefaultCupertinoThemeDataType(messages.NoDefaultCupertinoThemeDataType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.NoDefaultCupertinoThemeDataType_Constructor.cupertinoThemeData:
      return $flutterSrcCupertinoTheme.CupertinoThemeData(
          brightness: (tree.cupertinoThemeData.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoThemeData.brightness) : null),
          primaryColor: (tree.cupertinoThemeData.hasPrimaryColor() ? evaluateDartColorType(tree.cupertinoThemeData.primaryColor) : null),
          primaryContrastingColor: (tree.cupertinoThemeData.hasPrimaryContrastingColor() ? evaluateDartColorType(tree.cupertinoThemeData.primaryContrastingColor) : null),
          textTheme: (tree.cupertinoThemeData.hasTextTheme() ? evaluateCupertinoTextThemeDataType(tree.cupertinoThemeData.textTheme) : null),
          barBackgroundColor: (tree.cupertinoThemeData.hasBarBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeData.barBackgroundColor) : null),
          scaffoldBackgroundColor: (tree.cupertinoThemeData.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeData.scaffoldBackgroundColor) : null),
          applyThemeToAll: (tree.cupertinoThemeData.hasApplyThemeToAll() ? tree.cupertinoThemeData.applyThemeToAll : null));
    case messages.NoDefaultCupertinoThemeDataType_Constructor.cupertinoThemeDataNamedRaw:
      return $flutterSrcCupertinoTheme.CupertinoThemeData.raw(
          (tree.cupertinoThemeDataNamedRaw.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoThemeDataNamedRaw.brightness) : null),
          (tree.cupertinoThemeDataNamedRaw.hasPrimaryColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.primaryColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasPrimaryContrastingColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.primaryContrastingColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasTextTheme() ? evaluateCupertinoTextThemeDataType(tree.cupertinoThemeDataNamedRaw.textTheme) : null),
          (tree.cupertinoThemeDataNamedRaw.hasBarBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.barBackgroundColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.cupertinoThemeDataNamedRaw.scaffoldBackgroundColor) : null),
          (tree.cupertinoThemeDataNamedRaw.hasApplyThemeToAll() ? tree.cupertinoThemeDataNamedRaw.applyThemeToAll : null));
    case messages.NoDefaultCupertinoThemeDataType_Constructor.materialMaterialBasedCupertinoThemeData:
      return $flutterSrcMaterialThemeData.MaterialBasedCupertinoThemeData(
          materialTheme: (tree.materialMaterialBasedCupertinoThemeData.hasMaterialTheme() ? evaluateRequiredMaterialThemeDataType(tree.materialMaterialBasedCupertinoThemeData.materialTheme) : missing('materialTheme')));
    case messages.NoDefaultCupertinoThemeDataType_Constructor.noDefaultCupertinoThemeData:
      return $flutterSrcCupertinoTheme.NoDefaultCupertinoThemeData(
          brightness: (tree.noDefaultCupertinoThemeData.hasBrightness() ? enums.convertDartBrightnessType(tree.noDefaultCupertinoThemeData.brightness) : null),
          primaryColor: (tree.noDefaultCupertinoThemeData.hasPrimaryColor() ? evaluateDartColorType(tree.noDefaultCupertinoThemeData.primaryColor) : null),
          primaryContrastingColor: (tree.noDefaultCupertinoThemeData.hasPrimaryContrastingColor() ? evaluateDartColorType(tree.noDefaultCupertinoThemeData.primaryContrastingColor) : null),
          textTheme: (tree.noDefaultCupertinoThemeData.hasTextTheme() ? evaluateCupertinoTextThemeDataType(tree.noDefaultCupertinoThemeData.textTheme) : null),
          barBackgroundColor: (tree.noDefaultCupertinoThemeData.hasBarBackgroundColor() ? evaluateDartColorType(tree.noDefaultCupertinoThemeData.barBackgroundColor) : null),
          scaffoldBackgroundColor: (tree.noDefaultCupertinoThemeData.hasScaffoldBackgroundColor() ? evaluateDartColorType(tree.noDefaultCupertinoThemeData.scaffoldBackgroundColor) : null),
          applyThemeToAll: (tree.noDefaultCupertinoThemeData.hasApplyThemeToAll() ? tree.noDefaultCupertinoThemeData.applyThemeToAll : null));
    default:
      return null;
  }
}

$flutterSrcCupertinoPageScaffold.ObstructingPreferredSizeWidget evaluateRequiredObstructingPreferredSizeWidgetType(messages.ObstructingPreferredSizeWidgetType tree) {
  final result = evaluateObstructingPreferredSizeWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcCupertinoPageScaffold.ObstructingPreferredSizeWidget? evaluateObstructingPreferredSizeWidgetType(messages.ObstructingPreferredSizeWidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.ObstructingPreferredSizeWidgetType_Constructor.cupertinoNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBar(
          key: (tree.cupertinoNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBar.key) : null),
          leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true),
          previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoNavigationBar.middle) : null),
          trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoNavigationBar.trailing) : null),
          border: (tree.cupertinoNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoNavigationBar.brightness) : null),
          padding: (tree.cupertinoNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    default:
      return null;
  }
}

$vectorMathVectorMath64.Matrix3 evaluateRequiredVectorMathMatrix3Type(messages.VectorMathMatrix3Type tree) {
  final result = evaluateVectorMathMatrix3Type(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$vectorMathVectorMath64.Matrix3? evaluateVectorMathMatrix3Type(messages.VectorMathMatrix3Type? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3:
      return $vectorMathVectorMath64.Matrix3(
          (tree.vectorMathMatrix3.hasArg0() ? tree.vectorMathMatrix3.arg0 : missing('arg0')),
          (tree.vectorMathMatrix3.hasArg1() ? tree.vectorMathMatrix3.arg1 : missing('arg1')),
          (tree.vectorMathMatrix3.hasArg2() ? tree.vectorMathMatrix3.arg2 : missing('arg2')),
          (tree.vectorMathMatrix3.hasArg3() ? tree.vectorMathMatrix3.arg3 : missing('arg3')),
          (tree.vectorMathMatrix3.hasArg4() ? tree.vectorMathMatrix3.arg4 : missing('arg4')),
          (tree.vectorMathMatrix3.hasArg5() ? tree.vectorMathMatrix3.arg5 : missing('arg5')),
          (tree.vectorMathMatrix3.hasArg6() ? tree.vectorMathMatrix3.arg6 : missing('arg6')),
          (tree.vectorMathMatrix3.hasArg7() ? tree.vectorMathMatrix3.arg7 : missing('arg7')),
          (tree.vectorMathMatrix3.hasArg8() ? tree.vectorMathMatrix3.arg8 : missing('arg8')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedColumns:
      return $vectorMathVectorMath64.Matrix3.columns(
          (tree.vectorMathMatrix3NamedColumns.hasArg0() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix3NamedColumns.arg0) : missing('arg0')),
          (tree.vectorMathMatrix3NamedColumns.hasArg1() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix3NamedColumns.arg1) : missing('arg1')),
          (tree.vectorMathMatrix3NamedColumns.hasArg2() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix3NamedColumns.arg2) : missing('arg2')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedCopy:
      return $vectorMathVectorMath64.Matrix3.copy(
          (tree.vectorMathMatrix3NamedCopy.hasOther() ? evaluateRequiredVectorMathMatrix3Type(tree.vectorMathMatrix3NamedCopy.other) : missing('other')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedFromList:
      return $vectorMathVectorMath64.Matrix3.fromList(
          tree.vectorMathMatrix3NamedFromList.values);
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedIdentity:
      return $vectorMathVectorMath64.Matrix3.identity(
          );
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedOuter:
      return $vectorMathVectorMath64.Matrix3.outer(
          (tree.vectorMathMatrix3NamedOuter.hasU() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix3NamedOuter.u) : missing('u')),
          (tree.vectorMathMatrix3NamedOuter.hasV() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix3NamedOuter.v) : missing('v')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedRotationX:
      return $vectorMathVectorMath64.Matrix3.rotationX(
          (tree.vectorMathMatrix3NamedRotationX.hasRadians() ? tree.vectorMathMatrix3NamedRotationX.radians : missing('radians')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedRotationY:
      return $vectorMathVectorMath64.Matrix3.rotationY(
          (tree.vectorMathMatrix3NamedRotationY.hasRadians() ? tree.vectorMathMatrix3NamedRotationY.radians : missing('radians')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedRotationZ:
      return $vectorMathVectorMath64.Matrix3.rotationZ(
          (tree.vectorMathMatrix3NamedRotationZ.hasRadians() ? tree.vectorMathMatrix3NamedRotationZ.radians : missing('radians')));
    case messages.VectorMathMatrix3Type_Constructor.vectorMathMatrix3NamedZero:
      return $vectorMathVectorMath64.Matrix3.zero(
          );
    default:
      return null;
  }
}

$vectorMathVectorMath64.Matrix4 evaluateRequiredVectorMathMatrix4Type(messages.VectorMathMatrix4Type tree) {
  final result = evaluateVectorMathMatrix4Type(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$vectorMathVectorMath64.Matrix4? evaluateVectorMathMatrix4Type(messages.VectorMathMatrix4Type? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4:
      return $vectorMathVectorMath64.Matrix4(
          (tree.vectorMathMatrix4.hasArg0() ? tree.vectorMathMatrix4.arg0 : missing('arg0')),
          (tree.vectorMathMatrix4.hasArg1() ? tree.vectorMathMatrix4.arg1 : missing('arg1')),
          (tree.vectorMathMatrix4.hasArg2() ? tree.vectorMathMatrix4.arg2 : missing('arg2')),
          (tree.vectorMathMatrix4.hasArg3() ? tree.vectorMathMatrix4.arg3 : missing('arg3')),
          (tree.vectorMathMatrix4.hasArg4() ? tree.vectorMathMatrix4.arg4 : missing('arg4')),
          (tree.vectorMathMatrix4.hasArg5() ? tree.vectorMathMatrix4.arg5 : missing('arg5')),
          (tree.vectorMathMatrix4.hasArg6() ? tree.vectorMathMatrix4.arg6 : missing('arg6')),
          (tree.vectorMathMatrix4.hasArg7() ? tree.vectorMathMatrix4.arg7 : missing('arg7')),
          (tree.vectorMathMatrix4.hasArg8() ? tree.vectorMathMatrix4.arg8 : missing('arg8')),
          (tree.vectorMathMatrix4.hasArg9() ? tree.vectorMathMatrix4.arg9 : missing('arg9')),
          (tree.vectorMathMatrix4.hasArg10() ? tree.vectorMathMatrix4.arg10 : missing('arg10')),
          (tree.vectorMathMatrix4.hasArg11() ? tree.vectorMathMatrix4.arg11 : missing('arg11')),
          (tree.vectorMathMatrix4.hasArg12() ? tree.vectorMathMatrix4.arg12 : missing('arg12')),
          (tree.vectorMathMatrix4.hasArg13() ? tree.vectorMathMatrix4.arg13 : missing('arg13')),
          (tree.vectorMathMatrix4.hasArg14() ? tree.vectorMathMatrix4.arg14 : missing('arg14')),
          (tree.vectorMathMatrix4.hasArg15() ? tree.vectorMathMatrix4.arg15 : missing('arg15')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedColumns:
      return $vectorMathVectorMath64.Matrix4.columns(
          (tree.vectorMathMatrix4NamedColumns.hasArg0() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedColumns.arg0) : missing('arg0')),
          (tree.vectorMathMatrix4NamedColumns.hasArg1() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedColumns.arg1) : missing('arg1')),
          (tree.vectorMathMatrix4NamedColumns.hasArg2() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedColumns.arg2) : missing('arg2')),
          (tree.vectorMathMatrix4NamedColumns.hasArg3() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedColumns.arg3) : missing('arg3')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedCompose:
      return $vectorMathVectorMath64.Matrix4.compose(
          (tree.vectorMathMatrix4NamedCompose.hasTranslation() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix4NamedCompose.translation) : missing('translation')),
          (tree.vectorMathMatrix4NamedCompose.hasRotation() ? evaluateRequiredVectorMathQuaternionType(tree.vectorMathMatrix4NamedCompose.rotation) : missing('rotation')),
          (tree.vectorMathMatrix4NamedCompose.hasScale() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix4NamedCompose.scale) : missing('scale')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedCopy:
      return $vectorMathVectorMath64.Matrix4.copy(
          (tree.vectorMathMatrix4NamedCopy.hasOther() ? evaluateRequiredVectorMathMatrix4Type(tree.vectorMathMatrix4NamedCopy.other) : missing('other')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedDiagonal3:
      return $vectorMathVectorMath64.Matrix4.diagonal3(
          (tree.vectorMathMatrix4NamedDiagonal3.hasScale() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix4NamedDiagonal3.scale) : missing('scale')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedDiagonal3Values:
      return $vectorMathVectorMath64.Matrix4.diagonal3Values(
          (tree.vectorMathMatrix4NamedDiagonal3Values.hasX() ? tree.vectorMathMatrix4NamedDiagonal3Values.x : missing('x')),
          (tree.vectorMathMatrix4NamedDiagonal3Values.hasY() ? tree.vectorMathMatrix4NamedDiagonal3Values.y : missing('y')),
          (tree.vectorMathMatrix4NamedDiagonal3Values.hasZ() ? tree.vectorMathMatrix4NamedDiagonal3Values.z : missing('z')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedFromBuffer:
      return $vectorMathVectorMath64.Matrix4.fromBuffer(
          missing('buffer'),
          (tree.vectorMathMatrix4NamedFromBuffer.hasOffset() ? tree.vectorMathMatrix4NamedFromBuffer.offset : missing('offset')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedFromFloat64List:
      return $vectorMathVectorMath64.Matrix4.fromFloat64List(
          (tree.vectorMathMatrix4NamedFromFloat64List.hasM4storage() ? evaluateRequiredDartFloat64ListType(tree.vectorMathMatrix4NamedFromFloat64List.m4storage) : missing('m4storage')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedFromList:
      return $vectorMathVectorMath64.Matrix4.fromList(
          tree.vectorMathMatrix4NamedFromList.values);
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedIdentity:
      return $vectorMathVectorMath64.Matrix4.identity(
          );
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedInverted:
      return $vectorMathVectorMath64.Matrix4.inverted(
          (tree.vectorMathMatrix4NamedInverted.hasOther() ? evaluateRequiredVectorMathMatrix4Type(tree.vectorMathMatrix4NamedInverted.other) : missing('other')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedOuter:
      return $vectorMathVectorMath64.Matrix4.outer(
          (tree.vectorMathMatrix4NamedOuter.hasU() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedOuter.u) : missing('u')),
          (tree.vectorMathMatrix4NamedOuter.hasV() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathMatrix4NamedOuter.v) : missing('v')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedRotationX:
      return $vectorMathVectorMath64.Matrix4.rotationX(
          (tree.vectorMathMatrix4NamedRotationX.hasRadians() ? tree.vectorMathMatrix4NamedRotationX.radians : missing('radians')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedRotationY:
      return $vectorMathVectorMath64.Matrix4.rotationY(
          (tree.vectorMathMatrix4NamedRotationY.hasRadians() ? tree.vectorMathMatrix4NamedRotationY.radians : missing('radians')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedRotationZ:
      return $vectorMathVectorMath64.Matrix4.rotationZ(
          (tree.vectorMathMatrix4NamedRotationZ.hasRadians() ? tree.vectorMathMatrix4NamedRotationZ.radians : missing('radians')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedSkew:
      return $vectorMathVectorMath64.Matrix4.skew(
          (tree.vectorMathMatrix4NamedSkew.hasAlpha() ? tree.vectorMathMatrix4NamedSkew.alpha : missing('alpha')),
          (tree.vectorMathMatrix4NamedSkew.hasBeta() ? tree.vectorMathMatrix4NamedSkew.beta : missing('beta')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedSkewX:
      return $vectorMathVectorMath64.Matrix4.skewX(
          (tree.vectorMathMatrix4NamedSkewX.hasAlpha() ? tree.vectorMathMatrix4NamedSkewX.alpha : missing('alpha')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedSkewY:
      return $vectorMathVectorMath64.Matrix4.skewY(
          (tree.vectorMathMatrix4NamedSkewY.hasBeta() ? tree.vectorMathMatrix4NamedSkewY.beta : missing('beta')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedTranslation:
      return $vectorMathVectorMath64.Matrix4.translation(
          (tree.vectorMathMatrix4NamedTranslation.hasTranslation() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathMatrix4NamedTranslation.translation) : missing('translation')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedTranslationValues:
      return $vectorMathVectorMath64.Matrix4.translationValues(
          (tree.vectorMathMatrix4NamedTranslationValues.hasX() ? tree.vectorMathMatrix4NamedTranslationValues.x : missing('x')),
          (tree.vectorMathMatrix4NamedTranslationValues.hasY() ? tree.vectorMathMatrix4NamedTranslationValues.y : missing('y')),
          (tree.vectorMathMatrix4NamedTranslationValues.hasZ() ? tree.vectorMathMatrix4NamedTranslationValues.z : missing('z')));
    case messages.VectorMathMatrix4Type_Constructor.vectorMathMatrix4NamedZero:
      return $vectorMathVectorMath64.Matrix4.zero(
          );
    default:
      return null;
  }
}

$vectorMathVectorMath64.Quaternion evaluateRequiredVectorMathQuaternionType(messages.VectorMathQuaternionType tree) {
  final result = evaluateVectorMathQuaternionType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$vectorMathVectorMath64.Quaternion? evaluateVectorMathQuaternionType(messages.VectorMathQuaternionType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternion:
      return $vectorMathVectorMath64.Quaternion(
          (tree.vectorMathQuaternion.hasX() ? tree.vectorMathQuaternion.x : missing('x')),
          (tree.vectorMathQuaternion.hasY() ? tree.vectorMathQuaternion.y : missing('y')),
          (tree.vectorMathQuaternion.hasZ() ? tree.vectorMathQuaternion.z : missing('z')),
          (tree.vectorMathQuaternion.hasW() ? tree.vectorMathQuaternion.w : missing('w')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedAxisAngle:
      return $vectorMathVectorMath64.Quaternion.axisAngle(
          (tree.vectorMathQuaternionNamedAxisAngle.hasAxis() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathQuaternionNamedAxisAngle.axis) : missing('axis')),
          (tree.vectorMathQuaternionNamedAxisAngle.hasAngle() ? tree.vectorMathQuaternionNamedAxisAngle.angle : missing('angle')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedCopy:
      return $vectorMathVectorMath64.Quaternion.copy(
          (tree.vectorMathQuaternionNamedCopy.hasOriginal() ? evaluateRequiredVectorMathQuaternionType(tree.vectorMathQuaternionNamedCopy.original) : missing('original')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedDq:
      return $vectorMathVectorMath64.Quaternion.dq(
          (tree.vectorMathQuaternionNamedDq.hasQ() ? evaluateRequiredVectorMathQuaternionType(tree.vectorMathQuaternionNamedDq.q) : missing('q')),
          (tree.vectorMathQuaternionNamedDq.hasOmega() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathQuaternionNamedDq.omega) : missing('omega')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedEuler:
      return $vectorMathVectorMath64.Quaternion.euler(
          (tree.vectorMathQuaternionNamedEuler.hasYaw() ? tree.vectorMathQuaternionNamedEuler.yaw : missing('yaw')),
          (tree.vectorMathQuaternionNamedEuler.hasPitch() ? tree.vectorMathQuaternionNamedEuler.pitch : missing('pitch')),
          (tree.vectorMathQuaternionNamedEuler.hasRoll() ? tree.vectorMathQuaternionNamedEuler.roll : missing('roll')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedFromBuffer:
      return $vectorMathVectorMath64.Quaternion.fromBuffer(
          missing('buffer'),
          (tree.vectorMathQuaternionNamedFromBuffer.hasOffset() ? tree.vectorMathQuaternionNamedFromBuffer.offset : missing('offset')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedFromFloat64List:
      return $vectorMathVectorMath64.Quaternion.fromFloat64List(
          (tree.vectorMathQuaternionNamedFromFloat64List.hasQStorage() ? evaluateRequiredDartFloat64ListType(tree.vectorMathQuaternionNamedFromFloat64List.qStorage) : missing('qStorage')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedFromRotation:
      return $vectorMathVectorMath64.Quaternion.fromRotation(
          (tree.vectorMathQuaternionNamedFromRotation.hasRotationMatrix() ? evaluateRequiredVectorMathMatrix3Type(tree.vectorMathQuaternionNamedFromRotation.rotationMatrix) : missing('rotationMatrix')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedFromTwoVectors:
      return $vectorMathVectorMath64.Quaternion.fromTwoVectors(
          (tree.vectorMathQuaternionNamedFromTwoVectors.hasA() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathQuaternionNamedFromTwoVectors.a) : missing('a')),
          (tree.vectorMathQuaternionNamedFromTwoVectors.hasB() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathQuaternionNamedFromTwoVectors.b) : missing('b')));
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedIdentity:
      return $vectorMathVectorMath64.Quaternion.identity(
          );
    case messages.VectorMathQuaternionType_Constructor.vectorMathQuaternionNamedRandom:
      return $vectorMathVectorMath64.Quaternion.random(
          (tree.vectorMathQuaternionNamedRandom.hasRn() ? evaluateRequiredDartRandomType(tree.vectorMathQuaternionNamedRandom.rn) : missing('rn')));
    default:
      return null;
  }
}

$vectorMathVectorMath64.Vector3 evaluateRequiredVectorMathVector3Type(messages.VectorMathVector3Type tree) {
  final result = evaluateVectorMathVector3Type(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$vectorMathVectorMath64.Vector3? evaluateVectorMathVector3Type(messages.VectorMathVector3Type? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3:
      return $vectorMathVectorMath64.Vector3(
          (tree.vectorMathVector3.hasX() ? tree.vectorMathVector3.x : missing('x')),
          (tree.vectorMathVector3.hasY() ? tree.vectorMathVector3.y : missing('y')),
          (tree.vectorMathVector3.hasZ() ? tree.vectorMathVector3.z : missing('z')));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedAll:
      return $vectorMathVectorMath64.Vector3.all(
          (tree.vectorMathVector3NamedAll.hasValue() ? tree.vectorMathVector3NamedAll.value : missing('value')));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedArray:
      return $vectorMathVectorMath64.Vector3.array(
          tree.vectorMathVector3NamedArray.array,
          (tree.vectorMathVector3NamedArray.hasOffset() ? tree.vectorMathVector3NamedArray.offset : 0));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedCopy:
      return $vectorMathVectorMath64.Vector3.copy(
          (tree.vectorMathVector3NamedCopy.hasOther() ? evaluateRequiredVectorMathVector3Type(tree.vectorMathVector3NamedCopy.other) : missing('other')));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedFromBuffer:
      return $vectorMathVectorMath64.Vector3.fromBuffer(
          missing('buffer'),
          (tree.vectorMathVector3NamedFromBuffer.hasOffset() ? tree.vectorMathVector3NamedFromBuffer.offset : missing('offset')));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedFromFloat64List:
      return $vectorMathVectorMath64.Vector3.fromFloat64List(
          (tree.vectorMathVector3NamedFromFloat64List.hasV3storage() ? evaluateRequiredDartFloat64ListType(tree.vectorMathVector3NamedFromFloat64List.v3storage) : missing('v3storage')));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedRandom:
      return $vectorMathVectorMath64.Vector3.random(
          (tree.vectorMathVector3NamedRandom.hasRng() ? evaluateDartRandomType(tree.vectorMathVector3NamedRandom.rng) : null));
    case messages.VectorMathVector3Type_Constructor.vectorMathVector3NamedZero:
      return $vectorMathVectorMath64.Vector3.zero(
          );
    default:
      return null;
  }
}

$vectorMathVectorMath64.Vector4 evaluateRequiredVectorMathVector4Type(messages.VectorMathVector4Type tree) {
  final result = evaluateVectorMathVector4Type(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$vectorMathVectorMath64.Vector4? evaluateVectorMathVector4Type(messages.VectorMathVector4Type? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4:
      return $vectorMathVectorMath64.Vector4(
          (tree.vectorMathVector4.hasX() ? tree.vectorMathVector4.x : missing('x')),
          (tree.vectorMathVector4.hasY() ? tree.vectorMathVector4.y : missing('y')),
          (tree.vectorMathVector4.hasZ() ? tree.vectorMathVector4.z : missing('z')),
          (tree.vectorMathVector4.hasW() ? tree.vectorMathVector4.w : missing('w')));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedAll:
      return $vectorMathVectorMath64.Vector4.all(
          (tree.vectorMathVector4NamedAll.hasValue() ? tree.vectorMathVector4NamedAll.value : missing('value')));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedArray:
      return $vectorMathVectorMath64.Vector4.array(
          tree.vectorMathVector4NamedArray.array,
          (tree.vectorMathVector4NamedArray.hasOffset() ? tree.vectorMathVector4NamedArray.offset : 0));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedCopy:
      return $vectorMathVectorMath64.Vector4.copy(
          (tree.vectorMathVector4NamedCopy.hasOther() ? evaluateRequiredVectorMathVector4Type(tree.vectorMathVector4NamedCopy.other) : missing('other')));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedFromBuffer:
      return $vectorMathVectorMath64.Vector4.fromBuffer(
          missing('buffer'),
          (tree.vectorMathVector4NamedFromBuffer.hasOffset() ? tree.vectorMathVector4NamedFromBuffer.offset : missing('offset')));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedFromFloat64List:
      return $vectorMathVectorMath64.Vector4.fromFloat64List(
          (tree.vectorMathVector4NamedFromFloat64List.hasV4storage() ? evaluateRequiredDartFloat64ListType(tree.vectorMathVector4NamedFromFloat64List.v4storage) : missing('v4storage')));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedIdentity:
      return $vectorMathVectorMath64.Vector4.identity(
          );
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedRandom:
      return $vectorMathVectorMath64.Vector4.random(
          (tree.vectorMathVector4NamedRandom.hasRng() ? evaluateDartRandomType(tree.vectorMathVector4NamedRandom.rng) : null));
    case messages.VectorMathVector4Type_Constructor.vectorMathVector4NamedZero:
      return $vectorMathVectorMath64.Vector4.zero(
          );
    default:
      return null;
  }
}

$flutterSrcWidgetsFramework.Widget evaluateRequiredWidgetType(messages.WidgetType tree) {
  final result = evaluateWidgetType(tree);
  if(result != null) {
    return result;
  } else {
    throw core.AssertionError('unable to parse required sub-tree');
  }
}

$flutterSrcWidgetsFramework.Widget? evaluateWidgetType(messages.WidgetType? tree) {
  if(tree == null) {
    return null;
  }

  switch (tree.whichConstructor()) {
    case messages.WidgetType_Constructor.cupertinoActionSheet:
      return $flutterSrcCupertinoDialog.CupertinoActionSheet(
          key: (tree.cupertinoActionSheet.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActionSheet.key) : null),
          title: (tree.cupertinoActionSheet.hasTitle() ? evaluateWidgetType(tree.cupertinoActionSheet.title) : null),
          message: (tree.cupertinoActionSheet.hasMessage() ? evaluateWidgetType(tree.cupertinoActionSheet.message) : null),
          actions: tree.cupertinoActionSheet.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          messageScrollController: (tree.cupertinoActionSheet.hasMessageScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.messageScrollController) : null),
          actionScrollController: (tree.cupertinoActionSheet.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoActionSheet.actionScrollController) : null),
          cancelButton: (tree.cupertinoActionSheet.hasCancelButton() ? evaluateWidgetType(tree.cupertinoActionSheet.cancelButton) : null));
    case messages.WidgetType_Constructor.cupertinoActivityIndicator:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator(
          key: (tree.cupertinoActivityIndicator.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicator.key) : null),
          color: (tree.cupertinoActivityIndicator.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicator.color) : null),
          animating: (tree.cupertinoActivityIndicator.hasAnimating() ? tree.cupertinoActivityIndicator.animating : true),
          radius: (tree.cupertinoActivityIndicator.hasRadius() ? tree.cupertinoActivityIndicator.radius : 10.0));
    case messages.WidgetType_Constructor.cupertinoActivityIndicatorNamedPartiallyRevealed:
      return $flutterSrcCupertinoActivityIndicator.CupertinoActivityIndicator.partiallyRevealed(
          key: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasKey() ? evaluateFlutterKeyType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.key) : null),
          color: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasColor() ? evaluateDartColorType(tree.cupertinoActivityIndicatorNamedPartiallyRevealed.color) : null),
          radius: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasRadius() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.radius : 10.0),
          progress: (tree.cupertinoActivityIndicatorNamedPartiallyRevealed.hasProgress() ? tree.cupertinoActivityIndicatorNamedPartiallyRevealed.progress : 1.0));
    case messages.WidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbar:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar(
          key: (tree.cupertinoAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbar.key) : null),
          children: tree.cupertinoAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editable(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.cupertinoAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcCupertinoAdaptiveTextSelectionToolbar.CupertinoAdaptiveTextSelectionToolbar.editableText(
          key: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.WidgetType_Constructor.cupertinoAlertDialog:
      return $flutterSrcCupertinoDialog.CupertinoAlertDialog(
          key: (tree.cupertinoAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAlertDialog.key) : null),
          title: (tree.cupertinoAlertDialog.hasTitle() ? evaluateWidgetType(tree.cupertinoAlertDialog.title) : null),
          content: (tree.cupertinoAlertDialog.hasContent() ? evaluateWidgetType(tree.cupertinoAlertDialog.content) : null),
          actions: tree.cupertinoAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          scrollController: (tree.cupertinoAlertDialog.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.scrollController) : null),
          actionScrollController: (tree.cupertinoAlertDialog.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoAlertDialog.actionScrollController) : null),
          insetAnimationDuration: (tree.cupertinoAlertDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.cupertinoAlertDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.cupertinoAlertDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.cupertinoAlertDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate));
    case messages.WidgetType_Constructor.cupertinoApp:
      return $flutterSrcCupertinoApp.CupertinoApp(
          key: (tree.cupertinoApp.hasKey() ? evaluateFlutterKeyType(tree.cupertinoApp.key) : null),
          navigatorKey: null,
          home: (tree.cupertinoApp.hasHome() ? evaluateWidgetType(tree.cupertinoApp.home) : null),
          theme: (tree.cupertinoApp.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoApp.theme) : null),
          initialRoute: (tree.cupertinoApp.hasInitialRoute() ? tree.cupertinoApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.cupertinoApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.cupertinoApp.hasTitle() ? tree.cupertinoApp.title : ''),
          onGenerateTitle: null,
          color: (tree.cupertinoApp.hasColor() ? evaluateDartColorType(tree.cupertinoApp.color) : null),
          locale: (tree.cupertinoApp.hasLocale() ? evaluateDartLocaleType(tree.cupertinoApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoApp.hasShowPerformanceOverlay() ? tree.cupertinoApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoApp.hasCheckerboardRasterCacheImages() ? tree.cupertinoApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoApp.hasCheckerboardOffscreenLayers() ? tree.cupertinoApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoApp.hasShowSemanticsDebugger() ? tree.cupertinoApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoApp.hasDebugShowCheckedModeBanner() ? tree.cupertinoApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoApp.hasRestorationScopeId() ? tree.cupertinoApp.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoApp.scrollBehavior) : null));
    case messages.WidgetType_Constructor.cupertinoAppNamedRouter:
      return $flutterSrcCupertinoApp.CupertinoApp.router(
          key: (tree.cupertinoAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.cupertinoAppNamedRouter.key) : null),
          routeInformationProvider: (tree.cupertinoAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.cupertinoAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          backButtonDispatcher: (tree.cupertinoAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.cupertinoAppNamedRouter.backButtonDispatcher) : null),
          routerConfig: null,
          theme: (tree.cupertinoAppNamedRouter.hasTheme() ? evaluateCupertinoThemeDataType(tree.cupertinoAppNamedRouter.theme) : null),
          builder: null,
          title: (tree.cupertinoAppNamedRouter.hasTitle() ? tree.cupertinoAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.cupertinoAppNamedRouter.hasColor() ? evaluateDartColorType(tree.cupertinoAppNamedRouter.color) : null),
          locale: (tree.cupertinoAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.cupertinoAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.cupertinoAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.cupertinoAppNamedRouter.hasShowPerformanceOverlay() ? tree.cupertinoAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.cupertinoAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.cupertinoAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.cupertinoAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.cupertinoAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.cupertinoAppNamedRouter.hasShowSemanticsDebugger() ? tree.cupertinoAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.cupertinoAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.cupertinoAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.cupertinoAppNamedRouter.hasRestorationScopeId() ? tree.cupertinoAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.cupertinoAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.cupertinoAppNamedRouter.scrollBehavior) : null));
    case messages.WidgetType_Constructor.cupertinoButton:
      return $flutterSrcCupertinoButton.CupertinoButton(
          key: (tree.cupertinoButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButton.key) : null),
          child: (tree.cupertinoButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButton.child) : missing('child')),
          padding: (tree.cupertinoButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButton.padding) : null),
          color: (tree.cupertinoButton.hasColor() ? evaluateDartColorType(tree.cupertinoButton.color) : null),
          disabledColor: (tree.cupertinoButton.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButton.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButton.hasMinSize() ? tree.cupertinoButton.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButton.hasPressedOpacity() ? tree.cupertinoButton.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButton.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButton.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.WidgetType_Constructor.cupertinoButtonNamedFilled:
      return $flutterSrcCupertinoButton.CupertinoButton.filled(
          key: (tree.cupertinoButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.cupertinoButtonNamedFilled.key) : null),
          child: (tree.cupertinoButtonNamedFilled.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoButtonNamedFilled.child) : missing('child')),
          padding: (tree.cupertinoButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoButtonNamedFilled.padding) : null),
          disabledColor: (tree.cupertinoButtonNamedFilled.hasDisabledColor() ? evaluateRequiredDartColorType(tree.cupertinoButtonNamedFilled.disabledColor) : $flutterSrcCupertinoColors.CupertinoColors.quaternarySystemFill),
          minSize: (tree.cupertinoButtonNamedFilled.hasMinSize() ? tree.cupertinoButtonNamedFilled.minSize : $flutterSrcCupertinoConstants.kMinInteractiveDimensionCupertino),
          pressedOpacity: (tree.cupertinoButtonNamedFilled.hasPressedOpacity() ? tree.cupertinoButtonNamedFilled.pressedOpacity : 0.4),
          borderRadius: (tree.cupertinoButtonNamedFilled.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoButtonNamedFilled.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(8.0))),
          alignment: (tree.cupertinoButtonNamedFilled.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.cupertinoButtonNamedFilled.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          onPressed: null);
    case messages.WidgetType_Constructor.cupertinoCheckbox:
      return $flutterSrcCupertinoCheckbox.CupertinoCheckbox(
          key: (tree.cupertinoCheckbox.hasKey() ? evaluateFlutterKeyType(tree.cupertinoCheckbox.key) : null),
          value: (tree.cupertinoCheckbox.hasValue() ? tree.cupertinoCheckbox.value : null),
          tristate: (tree.cupertinoCheckbox.hasTristate() ? tree.cupertinoCheckbox.tristate : false),
          onChanged: null,
          activeColor: (tree.cupertinoCheckbox.hasActiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.activeColor) : null),
          inactiveColor: (tree.cupertinoCheckbox.hasInactiveColor() ? evaluateDartColorType(tree.cupertinoCheckbox.inactiveColor) : null),
          checkColor: (tree.cupertinoCheckbox.hasCheckColor() ? evaluateDartColorType(tree.cupertinoCheckbox.checkColor) : null),
          focusColor: (tree.cupertinoCheckbox.hasFocusColor() ? evaluateDartColorType(tree.cupertinoCheckbox.focusColor) : null),
          focusNode: (tree.cupertinoCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoCheckbox.focusNode) : null),
          autofocus: (tree.cupertinoCheckbox.hasAutofocus() ? tree.cupertinoCheckbox.autofocus : false),
          side: (tree.cupertinoCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.cupertinoCheckbox.side) : null),
          shape: (tree.cupertinoCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.cupertinoCheckbox.shape) : null));
    case messages.WidgetType_Constructor.cupertinoContextMenu:
      return $flutterSrcCupertinoContextMenu.CupertinoContextMenu(
          key: (tree.cupertinoContextMenu.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenu.key) : null),
          actions: tree.cupertinoContextMenu.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.cupertinoContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenu.child) : missing('child')),
          enableHapticFeedback: (tree.cupertinoContextMenu.hasEnableHapticFeedback() ? tree.cupertinoContextMenu.enableHapticFeedback : false));
    case messages.WidgetType_Constructor.cupertinoContextMenuAction:
      return $flutterSrcCupertinoContextMenuAction.CupertinoContextMenuAction(
          key: (tree.cupertinoContextMenuAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoContextMenuAction.key) : null),
          child: (tree.cupertinoContextMenuAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoContextMenuAction.child) : missing('child')),
          isDefaultAction: (tree.cupertinoContextMenuAction.hasIsDefaultAction() ? tree.cupertinoContextMenuAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoContextMenuAction.hasIsDestructiveAction() ? tree.cupertinoContextMenuAction.isDestructiveAction : false),
          onPressed: null,
          trailingIcon: (tree.cupertinoContextMenuAction.hasTrailingIcon() ? evaluateFlutterIconDataType(tree.cupertinoContextMenuAction.trailingIcon) : null));
    case messages.WidgetType_Constructor.cupertinoDesktopTextSelectionToolbar:
      return $flutterSrcCupertinoDesktopTextSelectionToolbar.CupertinoDesktopTextSelectionToolbar(
          key: (tree.cupertinoDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.cupertinoDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.cupertinoDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.cupertinoDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButton:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton(
          key: (tree.cupertinoDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.WidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.WidgetType_Constructor.cupertinoDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoDesktopTextSelectionToolbarButton.CupertinoDesktopTextSelectionToolbarButton.text(
          key: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoDesktopTextSelectionToolbarButtonNamedText.text : null));
    case messages.WidgetType_Constructor.cupertinoDialogAction:
      return $flutterSrcCupertinoDialog.CupertinoDialogAction(
          key: (tree.cupertinoDialogAction.hasKey() ? evaluateFlutterKeyType(tree.cupertinoDialogAction.key) : null),
          onPressed: null,
          isDefaultAction: (tree.cupertinoDialogAction.hasIsDefaultAction() ? tree.cupertinoDialogAction.isDefaultAction : false),
          isDestructiveAction: (tree.cupertinoDialogAction.hasIsDestructiveAction() ? tree.cupertinoDialogAction.isDestructiveAction : false),
          textStyle: (tree.cupertinoDialogAction.hasTextStyle() ? evaluateFlutterTextStyleType(tree.cupertinoDialogAction.textStyle) : null),
          child: (tree.cupertinoDialogAction.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoDialogAction.child) : missing('child')));
    case messages.WidgetType_Constructor.cupertinoFormRow:
      return $flutterSrcCupertinoFormRow.CupertinoFormRow(
          key: (tree.cupertinoFormRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormRow.key) : null),
          child: (tree.cupertinoFormRow.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoFormRow.child) : missing('child')),
          prefix: (tree.cupertinoFormRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoFormRow.prefix) : null),
          padding: (tree.cupertinoFormRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoFormRow.padding) : null),
          helper: (tree.cupertinoFormRow.hasHelper() ? evaluateWidgetType(tree.cupertinoFormRow.helper) : null),
          error: (tree.cupertinoFormRow.hasError() ? evaluateWidgetType(tree.cupertinoFormRow.error) : null));
    case messages.WidgetType_Constructor.cupertinoFormSection:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection(
          key: (tree.cupertinoFormSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSection.key) : null),
          children: tree.cupertinoFormSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSection.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSection.header) : null),
          footer: (tree.cupertinoFormSection.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSection.footer) : null),
          margin: (tree.cupertinoFormSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          backgroundColor: (tree.cupertinoFormSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSection.decoration) : null),
          clipBehavior: (tree.cupertinoFormSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSection.clipBehavior) : $dartUi.Clip.none));
    case messages.WidgetType_Constructor.cupertinoFormSectionNamedInsetGrouped:
      return $flutterSrcCupertinoFormSection.CupertinoFormSection.insetGrouped(
          key: (tree.cupertinoFormSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoFormSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoFormSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoFormSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoFormSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoFormSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoFormSectionNamedInsetGrouped.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoFormSectionNamedInsetGrouped.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(20.0, 0.0, 20.0, 10.0)),
          backgroundColor: (tree.cupertinoFormSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoFormSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoFormSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoFormSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoFormSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoFormSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.none));
    case messages.WidgetType_Constructor.cupertinoListSection:
      return $flutterSrcCupertinoListSection.CupertinoListSection(
          key: (tree.cupertinoListSection.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSection.key) : null),
          children: tree.cupertinoListSection.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSection.hasHeader() ? evaluateWidgetType(tree.cupertinoListSection.header) : null),
          footer: (tree.cupertinoListSection.hasFooter() ? evaluateWidgetType(tree.cupertinoListSection.footer) : null),
          margin: (tree.cupertinoListSection.hasMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoListSection.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          backgroundColor: (tree.cupertinoListSection.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSection.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSection.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSection.decoration) : null),
          clipBehavior: (tree.cupertinoListSection.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSection.clipBehavior) : $dartUi.Clip.none),
          dividerMargin: (tree.cupertinoListSection.hasDividerMargin() ? tree.cupertinoListSection.dividerMargin : 20.0),
          additionalDividerMargin: (tree.cupertinoListSection.hasAdditionalDividerMargin() ? tree.cupertinoListSection.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSection.hasTopMargin() ? tree.cupertinoListSection.topMargin : 22.0),
          hasLeading: (tree.cupertinoListSection.hasHasLeading() ? tree.cupertinoListSection.hasLeading : true),
          separatorColor: (tree.cupertinoListSection.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSection.separatorColor) : null));
    case messages.WidgetType_Constructor.cupertinoListSectionNamedInsetGrouped:
      return $flutterSrcCupertinoListSection.CupertinoListSection.insetGrouped(
          key: (tree.cupertinoListSectionNamedInsetGrouped.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListSectionNamedInsetGrouped.key) : null),
          children: tree.cupertinoListSectionNamedInsetGrouped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          header: (tree.cupertinoListSectionNamedInsetGrouped.hasHeader() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.header) : null),
          footer: (tree.cupertinoListSectionNamedInsetGrouped.hasFooter() ? evaluateWidgetType(tree.cupertinoListSectionNamedInsetGrouped.footer) : null),
          margin: (tree.cupertinoListSectionNamedInsetGrouped.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListSectionNamedInsetGrouped.margin) : null),
          backgroundColor: (tree.cupertinoListSectionNamedInsetGrouped.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.cupertinoListSectionNamedInsetGrouped.backgroundColor) : $flutterSrcCupertinoColors.CupertinoColors.systemGroupedBackground),
          decoration: (tree.cupertinoListSectionNamedInsetGrouped.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoListSectionNamedInsetGrouped.decoration) : null),
          clipBehavior: (tree.cupertinoListSectionNamedInsetGrouped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoListSectionNamedInsetGrouped.clipBehavior) : $dartUi.Clip.hardEdge),
          dividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.dividerMargin : 14.0),
          additionalDividerMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasAdditionalDividerMargin() ? tree.cupertinoListSectionNamedInsetGrouped.additionalDividerMargin : null),
          topMargin: (tree.cupertinoListSectionNamedInsetGrouped.hasTopMargin() ? tree.cupertinoListSectionNamedInsetGrouped.topMargin : null),
          hasLeading: (tree.cupertinoListSectionNamedInsetGrouped.hasHasLeading() ? tree.cupertinoListSectionNamedInsetGrouped.hasLeading : true),
          separatorColor: (tree.cupertinoListSectionNamedInsetGrouped.hasSeparatorColor() ? evaluateDartColorType(tree.cupertinoListSectionNamedInsetGrouped.separatorColor) : null));
    case messages.WidgetType_Constructor.cupertinoListTile:
      return $flutterSrcCupertinoListTile.CupertinoListTile(
          key: (tree.cupertinoListTile.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTile.key) : null),
          title: (tree.cupertinoListTile.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTile.title) : missing('title')),
          subtitle: (tree.cupertinoListTile.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTile.subtitle) : null),
          additionalInfo: (tree.cupertinoListTile.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTile.additionalInfo) : null),
          leading: (tree.cupertinoListTile.hasLeading() ? evaluateWidgetType(tree.cupertinoListTile.leading) : null),
          trailing: (tree.cupertinoListTile.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTile.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTile.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTile.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTile.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTile.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTile.padding) : null),
          leadingSize: (tree.cupertinoListTile.hasLeadingSize() ? tree.cupertinoListTile.leadingSize : 28.0),
          leadingToTitle: (tree.cupertinoListTile.hasLeadingToTitle() ? tree.cupertinoListTile.leadingToTitle : 16.0));
    case messages.WidgetType_Constructor.cupertinoListTileChevron:
      return $flutterSrcCupertinoListTile.CupertinoListTileChevron(
          key: (tree.cupertinoListTileChevron.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileChevron.key) : null));
    case messages.WidgetType_Constructor.cupertinoListTileNamedNotched:
      return $flutterSrcCupertinoListTile.CupertinoListTile.notched(
          key: (tree.cupertinoListTileNamedNotched.hasKey() ? evaluateFlutterKeyType(tree.cupertinoListTileNamedNotched.key) : null),
          title: (tree.cupertinoListTileNamedNotched.hasTitle() ? evaluateRequiredWidgetType(tree.cupertinoListTileNamedNotched.title) : missing('title')),
          subtitle: (tree.cupertinoListTileNamedNotched.hasSubtitle() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.subtitle) : null),
          additionalInfo: (tree.cupertinoListTileNamedNotched.hasAdditionalInfo() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.additionalInfo) : null),
          leading: (tree.cupertinoListTileNamedNotched.hasLeading() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.leading) : null),
          trailing: (tree.cupertinoListTileNamedNotched.hasTrailing() ? evaluateWidgetType(tree.cupertinoListTileNamedNotched.trailing) : null),
          onTap: null,
          backgroundColor: (tree.cupertinoListTileNamedNotched.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColor) : null),
          backgroundColorActivated: (tree.cupertinoListTileNamedNotched.hasBackgroundColorActivated() ? evaluateDartColorType(tree.cupertinoListTileNamedNotched.backgroundColorActivated) : null),
          padding: (tree.cupertinoListTileNamedNotched.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoListTileNamedNotched.padding) : null),
          leadingSize: (tree.cupertinoListTileNamedNotched.hasLeadingSize() ? tree.cupertinoListTileNamedNotched.leadingSize : 30.0),
          leadingToTitle: (tree.cupertinoListTileNamedNotched.hasLeadingToTitle() ? tree.cupertinoListTileNamedNotched.leadingToTitle : 12.0));
    case messages.WidgetType_Constructor.cupertinoMagnifier:
      return $flutterSrcCupertinoMagnifier.CupertinoMagnifier(
          key: (tree.cupertinoMagnifier.hasKey() ? evaluateFlutterKeyType(tree.cupertinoMagnifier.key) : null),
          size: (tree.cupertinoMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.cupertinoMagnifier.size) : $dartUi.Size(80, 47.5)),
          borderRadius: (tree.cupertinoMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.cupertinoMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.elliptical(60, 50))),
          additionalFocalPointOffset: (tree.cupertinoMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.cupertinoMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          shadows: tree.cupertinoMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          borderSide: (tree.cupertinoMagnifier.hasBorderSide() ? evaluateRequiredFlutterBorderSideType(tree.cupertinoMagnifier.borderSide) : $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color.fromARGB(255, 232, 232, 232))),
          inOutAnimation: null);
    case messages.WidgetType_Constructor.cupertinoNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBar(
          key: (tree.cupertinoNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBar.key) : null),
          leading: (tree.cupertinoNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyMiddle: (tree.cupertinoNavigationBar.hasAutomaticallyImplyMiddle() ? tree.cupertinoNavigationBar.automaticallyImplyMiddle : true),
          previousPageTitle: (tree.cupertinoNavigationBar.hasPreviousPageTitle() ? tree.cupertinoNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoNavigationBar.middle) : null),
          trailing: (tree.cupertinoNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoNavigationBar.trailing) : null),
          border: (tree.cupertinoNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoNavigationBar.brightness) : null),
          padding: (tree.cupertinoNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoNavigationBar.transitionBetweenRoutes : true));
    case messages.WidgetType_Constructor.cupertinoNavigationBarBackButton:
      return $flutterSrcCupertinoNavBar.CupertinoNavigationBarBackButton(
          key: (tree.cupertinoNavigationBarBackButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoNavigationBarBackButton.key) : null),
          color: (tree.cupertinoNavigationBarBackButton.hasColor() ? evaluateDartColorType(tree.cupertinoNavigationBarBackButton.color) : null),
          previousPageTitle: (tree.cupertinoNavigationBarBackButton.hasPreviousPageTitle() ? tree.cupertinoNavigationBarBackButton.previousPageTitle : null),
          onPressed: null);
    case messages.WidgetType_Constructor.cupertinoPageScaffold:
      return $flutterSrcCupertinoPageScaffold.CupertinoPageScaffold(
          key: (tree.cupertinoPageScaffold.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPageScaffold.key) : null),
          navigationBar: (tree.cupertinoPageScaffold.hasNavigationBar() ? evaluateObstructingPreferredSizeWidgetType(tree.cupertinoPageScaffold.navigationBar) : null),
          backgroundColor: (tree.cupertinoPageScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPageScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.cupertinoPageScaffold.hasResizeToAvoidBottomInset() ? tree.cupertinoPageScaffold.resizeToAvoidBottomInset : true),
          child: (tree.cupertinoPageScaffold.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoPageScaffold.child) : missing('child')));
    case messages.WidgetType_Constructor.cupertinoPicker:
      return $flutterSrcCupertinoPicker.CupertinoPicker(
          key: (tree.cupertinoPicker.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPicker.key) : null),
          diameterRatio: (tree.cupertinoPicker.hasDiameterRatio() ? tree.cupertinoPicker.diameterRatio : 1.07),
          backgroundColor: (tree.cupertinoPicker.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoPicker.backgroundColor) : null),
          offAxisFraction: (tree.cupertinoPicker.hasOffAxisFraction() ? tree.cupertinoPicker.offAxisFraction : 0.0),
          useMagnifier: (tree.cupertinoPicker.hasUseMagnifier() ? tree.cupertinoPicker.useMagnifier : false),
          magnification: (tree.cupertinoPicker.hasMagnification() ? tree.cupertinoPicker.magnification : 1.0),
          scrollController: (tree.cupertinoPicker.hasScrollController() ? evaluateFlutterFixedExtentScrollControllerType(tree.cupertinoPicker.scrollController) : null),
          squeeze: (tree.cupertinoPicker.hasSqueeze() ? tree.cupertinoPicker.squeeze : 1.45),
          itemExtent: (tree.cupertinoPicker.hasItemExtent() ? tree.cupertinoPicker.itemExtent : missing('itemExtent')),
          onSelectedItemChanged: null,
          children: tree.cupertinoPicker.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          selectionOverlay: (tree.cupertinoPicker.hasSelectionOverlay() ? evaluateWidgetType(tree.cupertinoPicker.selectionOverlay) : $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay()),
          looping: (tree.cupertinoPicker.hasLooping() ? tree.cupertinoPicker.looping : false));
    case messages.WidgetType_Constructor.cupertinoPickerDefaultSelectionOverlay:
      return $flutterSrcCupertinoPicker.CupertinoPickerDefaultSelectionOverlay(
          key: (tree.cupertinoPickerDefaultSelectionOverlay.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPickerDefaultSelectionOverlay.key) : null),
          background: (tree.cupertinoPickerDefaultSelectionOverlay.hasBackground() ? evaluateRequiredDartColorType(tree.cupertinoPickerDefaultSelectionOverlay.background) : $flutterSrcCupertinoColors.CupertinoColors.tertiarySystemFill),
          capStartEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapStartEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capStartEdge : true),
          capEndEdge: (tree.cupertinoPickerDefaultSelectionOverlay.hasCapEndEdge() ? tree.cupertinoPickerDefaultSelectionOverlay.capEndEdge : true));
    case messages.WidgetType_Constructor.cupertinoPopupSurface:
      return $flutterSrcCupertinoDialog.CupertinoPopupSurface(
          key: (tree.cupertinoPopupSurface.hasKey() ? evaluateFlutterKeyType(tree.cupertinoPopupSurface.key) : null),
          isSurfacePainted: (tree.cupertinoPopupSurface.hasIsSurfacePainted() ? tree.cupertinoPopupSurface.isSurfacePainted : true),
          child: (tree.cupertinoPopupSurface.hasChild() ? evaluateWidgetType(tree.cupertinoPopupSurface.child) : null));
    case messages.WidgetType_Constructor.cupertinoScrollbar:
      return $flutterSrcCupertinoScrollbar.CupertinoScrollbar(
          key: (tree.cupertinoScrollbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoScrollbar.key) : null),
          child: (tree.cupertinoScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoScrollbar.child) : missing('child')),
          controller: (tree.cupertinoScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.cupertinoScrollbar.controller) : null),
          thumbVisibility: (tree.cupertinoScrollbar.hasThumbVisibility() ? tree.cupertinoScrollbar.thumbVisibility : null),
          thickness: (tree.cupertinoScrollbar.hasThickness() ? tree.cupertinoScrollbar.thickness : missing('thickness')),
          thicknessWhileDragging: (tree.cupertinoScrollbar.hasThicknessWhileDragging() ? tree.cupertinoScrollbar.thicknessWhileDragging : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultThicknessWhileDragging),
          radius: (tree.cupertinoScrollbar.hasRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radius) : missing('radius')),
          radiusWhileDragging: (tree.cupertinoScrollbar.hasRadiusWhileDragging() ? evaluateRequiredDartRadiusType(tree.cupertinoScrollbar.radiusWhileDragging) : $flutterSrcCupertinoScrollbar.CupertinoScrollbar.defaultRadiusWhileDragging),
          notificationPredicate: null,
          scrollbarOrientation: (tree.cupertinoScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.cupertinoScrollbar.scrollbarOrientation) : null));
    case messages.WidgetType_Constructor.cupertinoSearchTextField:
      return $flutterSrcCupertinoSearchField.CupertinoSearchTextField(
          key: (tree.cupertinoSearchTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSearchTextField.key) : null),
          controller: (tree.cupertinoSearchTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoSearchTextField.controller) : null),
          onChanged: null,
          onSubmitted: null,
          style: (tree.cupertinoSearchTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.style) : null),
          placeholder: (tree.cupertinoSearchTextField.hasPlaceholder() ? tree.cupertinoSearchTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoSearchTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoSearchTextField.placeholderStyle) : null),
          decoration: (tree.cupertinoSearchTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoSearchTextField.decoration) : null),
          backgroundColor: (tree.cupertinoSearchTextField.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSearchTextField.backgroundColor) : null),
          borderRadius: (tree.cupertinoSearchTextField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.cupertinoSearchTextField.borderRadius) : null),
          keyboardType: (tree.cupertinoSearchTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoSearchTextField.keyboardType) : $flutterSrcServicesTextInput.TextInputType.text),
          padding: (tree.cupertinoSearchTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(5.5, 8, 5.5, 8)),
          itemColor: (tree.cupertinoSearchTextField.hasItemColor() ? evaluateRequiredDartColorType(tree.cupertinoSearchTextField.itemColor) : $flutterSrcCupertinoColors.CupertinoColors.secondaryLabel),
          itemSize: (tree.cupertinoSearchTextField.hasItemSize() ? tree.cupertinoSearchTextField.itemSize : 20.0),
          prefixInsets: (tree.cupertinoSearchTextField.hasPrefixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.prefixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(6, 0, 0, 3)),
          prefixIcon: (tree.cupertinoSearchTextField.hasPrefixIcon() ? evaluateRequiredWidgetType(tree.cupertinoSearchTextField.prefixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.search)),
          suffixInsets: (tree.cupertinoSearchTextField.hasSuffixInsets() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoSearchTextField.suffixInsets) : $flutterSrcPaintingEdgeInsets.EdgeInsetsDirectional.fromSTEB(0, 0, 5, 2)),
          suffixIcon: (tree.cupertinoSearchTextField.hasSuffixIcon() ? evaluateRequiredFlutterIconType(tree.cupertinoSearchTextField.suffixIcon) : $flutterSrcWidgetsIcon.Icon($flutterSrcCupertinoIcons.CupertinoIcons.xmark_circle_fill)),
          suffixMode: (tree.cupertinoSearchTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoSearchTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.editing),
          onSuffixTap: null,
          restorationId: (tree.cupertinoSearchTextField.hasRestorationId() ? tree.cupertinoSearchTextField.restorationId : null),
          focusNode: (tree.cupertinoSearchTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSearchTextField.focusNode) : null),
          smartQuotesType: (tree.cupertinoSearchTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoSearchTextField.smartQuotesType) : null),
          smartDashesType: (tree.cupertinoSearchTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoSearchTextField.smartDashesType) : null),
          enableIMEPersonalizedLearning: (tree.cupertinoSearchTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoSearchTextField.enableIMEPersonalizedLearning : true),
          autofocus: (tree.cupertinoSearchTextField.hasAutofocus() ? tree.cupertinoSearchTextField.autofocus : false),
          onTap: null,
          autocorrect: (tree.cupertinoSearchTextField.hasAutocorrect() ? tree.cupertinoSearchTextField.autocorrect : true),
          enabled: (tree.cupertinoSearchTextField.hasEnabled() ? tree.cupertinoSearchTextField.enabled : null));
    case messages.WidgetType_Constructor.cupertinoSlider:
      return $flutterSrcCupertinoSlider.CupertinoSlider(
          key: (tree.cupertinoSlider.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSlider.key) : null),
          value: (tree.cupertinoSlider.hasValue() ? tree.cupertinoSlider.value : missing('value')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.cupertinoSlider.hasMin() ? tree.cupertinoSlider.min : 0.0),
          max: (tree.cupertinoSlider.hasMax() ? tree.cupertinoSlider.max : 1.0),
          divisions: (tree.cupertinoSlider.hasDivisions() ? tree.cupertinoSlider.divisions : null),
          activeColor: (tree.cupertinoSlider.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSlider.activeColor) : null),
          thumbColor: (tree.cupertinoSlider.hasThumbColor() ? evaluateRequiredDartColorType(tree.cupertinoSlider.thumbColor) : $flutterSrcCupertinoColors.CupertinoColors.white));
    case messages.WidgetType_Constructor.cupertinoSliverNavigationBar:
      return $flutterSrcCupertinoNavBar.CupertinoSliverNavigationBar(
          key: (tree.cupertinoSliverNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverNavigationBar.key) : null),
          largeTitle: (tree.cupertinoSliverNavigationBar.hasLargeTitle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.largeTitle) : null),
          leading: (tree.cupertinoSliverNavigationBar.hasLeading() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.leading) : null),
          automaticallyImplyLeading: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyLeading() ? tree.cupertinoSliverNavigationBar.automaticallyImplyLeading : true),
          automaticallyImplyTitle: (tree.cupertinoSliverNavigationBar.hasAutomaticallyImplyTitle() ? tree.cupertinoSliverNavigationBar.automaticallyImplyTitle : true),
          alwaysShowMiddle: (tree.cupertinoSliverNavigationBar.hasAlwaysShowMiddle() ? tree.cupertinoSliverNavigationBar.alwaysShowMiddle : true),
          previousPageTitle: (tree.cupertinoSliverNavigationBar.hasPreviousPageTitle() ? tree.cupertinoSliverNavigationBar.previousPageTitle : null),
          middle: (tree.cupertinoSliverNavigationBar.hasMiddle() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.middle) : null),
          trailing: (tree.cupertinoSliverNavigationBar.hasTrailing() ? evaluateWidgetType(tree.cupertinoSliverNavigationBar.trailing) : null),
          border: (tree.cupertinoSliverNavigationBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoSliverNavigationBar.border) : $flutterSrcPaintingBoxBorder.Border(bottom: $flutterSrcPaintingBorders.BorderSide(color: $dartUi.Color(0x4D000000), width: 0.0))),
          backgroundColor: (tree.cupertinoSliverNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoSliverNavigationBar.backgroundColor) : null),
          brightness: (tree.cupertinoSliverNavigationBar.hasBrightness() ? enums.convertDartBrightnessType(tree.cupertinoSliverNavigationBar.brightness) : null),
          padding: (tree.cupertinoSliverNavigationBar.hasPadding() ? evaluateFlutterEdgeInsetsDirectionalType(tree.cupertinoSliverNavigationBar.padding) : null),
          transitionBetweenRoutes: (tree.cupertinoSliverNavigationBar.hasTransitionBetweenRoutes() ? tree.cupertinoSliverNavigationBar.transitionBetweenRoutes : true),
          stretch: (tree.cupertinoSliverNavigationBar.hasStretch() ? tree.cupertinoSliverNavigationBar.stretch : false));
    case messages.WidgetType_Constructor.cupertinoSliverRefreshControl:
      return $flutterSrcCupertinoRefresh.CupertinoSliverRefreshControl(
          key: (tree.cupertinoSliverRefreshControl.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSliverRefreshControl.key) : null),
          refreshTriggerPullDistance: (tree.cupertinoSliverRefreshControl.hasRefreshTriggerPullDistance() ? tree.cupertinoSliverRefreshControl.refreshTriggerPullDistance : 100.0),
          refreshIndicatorExtent: (tree.cupertinoSliverRefreshControl.hasRefreshIndicatorExtent() ? tree.cupertinoSliverRefreshControl.refreshIndicatorExtent : 60.0),
          builder: null,
          onRefresh: null);
    case messages.WidgetType_Constructor.cupertinoSpellCheckSuggestionsToolbar:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar(
          key: (tree.cupertinoSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbar.key) : null),
          anchors: (tree.cupertinoSpellCheckSuggestionsToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.cupertinoSpellCheckSuggestionsToolbar.anchors) : missing('anchors')),
          buttonItems: tree.cupertinoSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.WidgetType_Constructor.cupertinoSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcCupertinoSpellCheckSuggestionsToolbar.CupertinoSpellCheckSuggestionsToolbar.editableText(
          key: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.cupertinoSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.WidgetType_Constructor.cupertinoSwitch:
      return $flutterSrcCupertinoSwitch.CupertinoSwitch(
          key: (tree.cupertinoSwitch.hasKey() ? evaluateFlutterKeyType(tree.cupertinoSwitch.key) : null),
          value: (tree.cupertinoSwitch.hasValue() ? tree.cupertinoSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.cupertinoSwitch.hasActiveColor() ? evaluateDartColorType(tree.cupertinoSwitch.activeColor) : null),
          trackColor: (tree.cupertinoSwitch.hasTrackColor() ? evaluateDartColorType(tree.cupertinoSwitch.trackColor) : null),
          thumbColor: (tree.cupertinoSwitch.hasThumbColor() ? evaluateDartColorType(tree.cupertinoSwitch.thumbColor) : null),
          applyTheme: (tree.cupertinoSwitch.hasApplyTheme() ? tree.cupertinoSwitch.applyTheme : null),
          focusColor: (tree.cupertinoSwitch.hasFocusColor() ? evaluateDartColorType(tree.cupertinoSwitch.focusColor) : null),
          onLabelColor: (tree.cupertinoSwitch.hasOnLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.onLabelColor) : null),
          offLabelColor: (tree.cupertinoSwitch.hasOffLabelColor() ? evaluateDartColorType(tree.cupertinoSwitch.offLabelColor) : null),
          focusNode: (tree.cupertinoSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.cupertinoSwitch.hasAutofocus() ? tree.cupertinoSwitch.autofocus : false),
          dragStartBehavior: (tree.cupertinoSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start));
    case messages.WidgetType_Constructor.cupertinoTabBar:
      return $flutterSrcCupertinoBottomTabBar.CupertinoTabBar(
          key: (tree.cupertinoTabBar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabBar.key) : null),
          items: tree.cupertinoTabBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.cupertinoTabBar.hasCurrentIndex() ? tree.cupertinoTabBar.currentIndex : 0),
          backgroundColor: (tree.cupertinoTabBar.hasBackgroundColor() ? evaluateDartColorType(tree.cupertinoTabBar.backgroundColor) : null),
          activeColor: (tree.cupertinoTabBar.hasActiveColor() ? evaluateDartColorType(tree.cupertinoTabBar.activeColor) : null),
          inactiveColor: (tree.cupertinoTabBar.hasInactiveColor() ? evaluateRequiredDartColorType(tree.cupertinoTabBar.inactiveColor) : $flutterSrcCupertinoColors.CupertinoColors.inactiveGray),
          iconSize: (tree.cupertinoTabBar.hasIconSize() ? tree.cupertinoTabBar.iconSize : 30.0),
          height: (tree.cupertinoTabBar.hasHeight() ? tree.cupertinoTabBar.height : 50.0),
          border: (tree.cupertinoTabBar.hasBorder() ? evaluateFlutterBorderType(tree.cupertinoTabBar.border) : $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x4D000000), darkColor: $dartUi.Color(0x29000000)), width: 0.0))));
    case messages.WidgetType_Constructor.cupertinoTabView:
      return $flutterSrcCupertinoTabView.CupertinoTabView(
          key: (tree.cupertinoTabView.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTabView.key) : null),
          builder: null,
          navigatorKey: null,
          defaultTitle: (tree.cupertinoTabView.hasDefaultTitle() ? tree.cupertinoTabView.defaultTitle : null),
          routes: null,
          onGenerateRoute: null,
          onUnknownRoute: null,
          navigatorObservers: tree.cupertinoTabView.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          restorationScopeId: (tree.cupertinoTabView.hasRestorationScopeId() ? tree.cupertinoTabView.restorationScopeId : null));
    case messages.WidgetType_Constructor.cupertinoTextField:
      return $flutterSrcCupertinoTextField.CupertinoTextField(
          key: (tree.cupertinoTextField.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextField.key) : null),
          controller: (tree.cupertinoTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextField.controller) : null),
          focusNode: (tree.cupertinoTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextField.focusNode) : null),
          undoController: (tree.cupertinoTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextField.undoController) : null),
          decoration: (tree.cupertinoTextField.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextField.decoration) : $flutterSrcPaintingBoxDecoration.BoxDecoration(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $flutterSrcCupertinoColors.CupertinoColors.white, darkColor: $flutterSrcCupertinoColors.CupertinoColors.black), border: $flutterSrcPaintingBoxBorder.Border(top: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), bottom: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), left: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0), right: $flutterSrcPaintingBorders.BorderSide(color: $flutterSrcCupertinoColors.CupertinoDynamicColor.withBrightness(color: $dartUi.Color(0x33000000), darkColor: $dartUi.Color(0x33FFFFFF)), width: 0.0)), borderRadius: $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(5.0)))),
          padding: (tree.cupertinoTextField.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextField.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextField.hasPlaceholder() ? tree.cupertinoTextField.placeholder : null),
          placeholderStyle: (tree.cupertinoTextField.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextField.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextField.prefix) : null),
          prefixMode: (tree.cupertinoTextField.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextField.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextField.suffix) : null),
          suffixMode: (tree.cupertinoTextField.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextField.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextField.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextField.keyboardType) : null),
          textInputAction: (tree.cupertinoTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextField.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextField.style) : null),
          strutStyle: (tree.cupertinoTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextField.strutStyle) : null),
          textAlign: (tree.cupertinoTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextField.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextField.textDirection) : null),
          readOnly: (tree.cupertinoTextField.hasReadOnly() ? tree.cupertinoTextField.readOnly : false),
          showCursor: (tree.cupertinoTextField.hasShowCursor() ? tree.cupertinoTextField.showCursor : null),
          autofocus: (tree.cupertinoTextField.hasAutofocus() ? tree.cupertinoTextField.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextField.hasObscuringCharacter() ? tree.cupertinoTextField.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextField.hasObscureText() ? tree.cupertinoTextField.obscureText : false),
          autocorrect: (tree.cupertinoTextField.hasAutocorrect() ? tree.cupertinoTextField.autocorrect : true),
          smartDashesType: (tree.cupertinoTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextField.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextField.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextField.hasEnableSuggestions() ? tree.cupertinoTextField.enableSuggestions : true),
          maxLines: (tree.cupertinoTextField.hasMaxLines() ? tree.cupertinoTextField.maxLines : 1),
          minLines: (tree.cupertinoTextField.hasMinLines() ? tree.cupertinoTextField.minLines : null),
          expands: (tree.cupertinoTextField.hasExpands() ? tree.cupertinoTextField.expands : false),
          maxLength: (tree.cupertinoTextField.hasMaxLength() ? tree.cupertinoTextField.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextField.hasEnabled() ? tree.cupertinoTextField.enabled : true),
          cursorWidth: (tree.cupertinoTextField.hasCursorWidth() ? tree.cupertinoTextField.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextField.hasCursorHeight() ? tree.cupertinoTextField.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextField.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextField.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextField.hasCursorOpacityAnimates() ? tree.cupertinoTextField.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextField.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextField.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextField.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextField.hasEnableInteractiveSelection() ? tree.cupertinoTextField.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextField.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextField.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextField.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextField.hasRestorationId() ? tree.cupertinoTextField.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextField.hasScribbleEnabled() ? tree.cupertinoTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextField.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextField.magnifierConfiguration) : null));
    case messages.WidgetType_Constructor.cupertinoTextFieldNamedBorderless:
      return $flutterSrcCupertinoTextField.CupertinoTextField.borderless(
          key: (tree.cupertinoTextFieldNamedBorderless.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFieldNamedBorderless.key) : null),
          controller: (tree.cupertinoTextFieldNamedBorderless.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFieldNamedBorderless.controller) : null),
          focusNode: (tree.cupertinoTextFieldNamedBorderless.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFieldNamedBorderless.focusNode) : null),
          undoController: (tree.cupertinoTextFieldNamedBorderless.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.cupertinoTextFieldNamedBorderless.undoController) : null),
          decoration: (tree.cupertinoTextFieldNamedBorderless.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFieldNamedBorderless.decoration) : null),
          padding: (tree.cupertinoTextFieldNamedBorderless.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.cupertinoTextFieldNamedBorderless.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(7.0)),
          placeholder: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholder() ? tree.cupertinoTextFieldNamedBorderless.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFieldNamedBorderless.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          prefix: (tree.cupertinoTextFieldNamedBorderless.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.prefix) : null),
          prefixMode: (tree.cupertinoTextFieldNamedBorderless.hasPrefixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.prefixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          suffix: (tree.cupertinoTextFieldNamedBorderless.hasSuffix() ? evaluateWidgetType(tree.cupertinoTextFieldNamedBorderless.suffix) : null),
          suffixMode: (tree.cupertinoTextFieldNamedBorderless.hasSuffixMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.suffixMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.always),
          clearButtonMode: (tree.cupertinoTextFieldNamedBorderless.hasClearButtonMode() ? enums.convertRequiredOverlayVisibilityModeType(tree.cupertinoTextFieldNamedBorderless.clearButtonMode) : $flutterSrcCupertinoTextField.OverlayVisibilityMode.never),
          keyboardType: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFieldNamedBorderless.keyboardType) : null),
          textInputAction: (tree.cupertinoTextFieldNamedBorderless.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFieldNamedBorderless.textInputAction) : null),
          textCapitalization: (tree.cupertinoTextFieldNamedBorderless.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFieldNamedBorderless.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.cupertinoTextFieldNamedBorderless.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFieldNamedBorderless.style) : null),
          strutStyle: (tree.cupertinoTextFieldNamedBorderless.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFieldNamedBorderless.strutStyle) : null),
          textAlign: (tree.cupertinoTextFieldNamedBorderless.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFieldNamedBorderless.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFieldNamedBorderless.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFieldNamedBorderless.textAlignVertical) : null),
          textDirection: (tree.cupertinoTextFieldNamedBorderless.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFieldNamedBorderless.textDirection) : null),
          readOnly: (tree.cupertinoTextFieldNamedBorderless.hasReadOnly() ? tree.cupertinoTextFieldNamedBorderless.readOnly : false),
          showCursor: (tree.cupertinoTextFieldNamedBorderless.hasShowCursor() ? tree.cupertinoTextFieldNamedBorderless.showCursor : null),
          autofocus: (tree.cupertinoTextFieldNamedBorderless.hasAutofocus() ? tree.cupertinoTextFieldNamedBorderless.autofocus : false),
          obscuringCharacter: (tree.cupertinoTextFieldNamedBorderless.hasObscuringCharacter() ? tree.cupertinoTextFieldNamedBorderless.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFieldNamedBorderless.hasObscureText() ? tree.cupertinoTextFieldNamedBorderless.obscureText : false),
          autocorrect: (tree.cupertinoTextFieldNamedBorderless.hasAutocorrect() ? tree.cupertinoTextFieldNamedBorderless.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFieldNamedBorderless.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFieldNamedBorderless.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFieldNamedBorderless.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFieldNamedBorderless.hasEnableSuggestions() ? tree.cupertinoTextFieldNamedBorderless.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFieldNamedBorderless.hasMaxLines() ? tree.cupertinoTextFieldNamedBorderless.maxLines : 1),
          minLines: (tree.cupertinoTextFieldNamedBorderless.hasMinLines() ? tree.cupertinoTextFieldNamedBorderless.minLines : null),
          expands: (tree.cupertinoTextFieldNamedBorderless.hasExpands() ? tree.cupertinoTextFieldNamedBorderless.expands : false),
          maxLength: (tree.cupertinoTextFieldNamedBorderless.hasMaxLength() ? tree.cupertinoTextFieldNamedBorderless.maxLength : null),
          maxLengthEnforcement: (tree.cupertinoTextFieldNamedBorderless.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.cupertinoTextFieldNamedBorderless.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onTapOutside: null,
          inputFormatters: tree.cupertinoTextFieldNamedBorderless.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFieldNamedBorderless.hasEnabled() ? tree.cupertinoTextFieldNamedBorderless.enabled : true),
          cursorWidth: (tree.cupertinoTextFieldNamedBorderless.hasCursorWidth() ? tree.cupertinoTextFieldNamedBorderless.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFieldNamedBorderless.hasCursorHeight() ? tree.cupertinoTextFieldNamedBorderless.cursorHeight : null),
          cursorRadius: (tree.cupertinoTextFieldNamedBorderless.hasCursorRadius() ? evaluateRequiredDartRadiusType(tree.cupertinoTextFieldNamedBorderless.cursorRadius) : $dartUi.Radius.circular(2.0)),
          cursorOpacityAnimates: (tree.cupertinoTextFieldNamedBorderless.hasCursorOpacityAnimates() ? tree.cupertinoTextFieldNamedBorderless.cursorOpacityAnimates : true),
          cursorColor: (tree.cupertinoTextFieldNamedBorderless.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFieldNamedBorderless.cursorColor) : null),
          selectionHeightStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.cupertinoTextFieldNamedBorderless.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.cupertinoTextFieldNamedBorderless.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.cupertinoTextFieldNamedBorderless.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.cupertinoTextFieldNamedBorderless.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFieldNamedBorderless.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFieldNamedBorderless.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFieldNamedBorderless.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.cupertinoTextFieldNamedBorderless.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.cupertinoTextFieldNamedBorderless.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.cupertinoTextFieldNamedBorderless.hasEnableInteractiveSelection() ? tree.cupertinoTextFieldNamedBorderless.enableInteractiveSelection : null),
          selectionControls: (tree.cupertinoTextFieldNamedBorderless.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFieldNamedBorderless.selectionControls) : null),
          onTap: null,
          scrollController: (tree.cupertinoTextFieldNamedBorderless.hasScrollController() ? evaluateFlutterScrollControllerType(tree.cupertinoTextFieldNamedBorderless.scrollController) : null),
          scrollPhysics: (tree.cupertinoTextFieldNamedBorderless.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFieldNamedBorderless.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFieldNamedBorderless.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.cupertinoTextFieldNamedBorderless.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.cupertinoTextFieldNamedBorderless.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.cupertinoTextFieldNamedBorderless.hasRestorationId() ? tree.cupertinoTextFieldNamedBorderless.restorationId : null),
          scribbleEnabled: (tree.cupertinoTextFieldNamedBorderless.hasScribbleEnabled() ? tree.cupertinoTextFieldNamedBorderless.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.cupertinoTextFieldNamedBorderless.hasEnableIMEPersonalizedLearning() ? tree.cupertinoTextFieldNamedBorderless.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.cupertinoTextFieldNamedBorderless.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.cupertinoTextFieldNamedBorderless.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.cupertinoTextFieldNamedBorderless.magnifierConfiguration) : null));
    case messages.WidgetType_Constructor.cupertinoTextFormFieldRow:
      return $flutterSrcCupertinoTextFormFieldRow.CupertinoTextFormFieldRow(
          key: (tree.cupertinoTextFormFieldRow.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextFormFieldRow.key) : null),
          prefix: (tree.cupertinoTextFormFieldRow.hasPrefix() ? evaluateWidgetType(tree.cupertinoTextFormFieldRow.prefix) : null),
          padding: (tree.cupertinoTextFormFieldRow.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.cupertinoTextFormFieldRow.padding) : null),
          controller: (tree.cupertinoTextFormFieldRow.hasController() ? evaluateFlutterTextEditingControllerType(tree.cupertinoTextFormFieldRow.controller) : null),
          initialValue: (tree.cupertinoTextFormFieldRow.hasInitialValue() ? tree.cupertinoTextFormFieldRow.initialValue : null),
          focusNode: (tree.cupertinoTextFormFieldRow.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.cupertinoTextFormFieldRow.focusNode) : null),
          decoration: (tree.cupertinoTextFormFieldRow.hasDecoration() ? evaluateFlutterBoxDecorationType(tree.cupertinoTextFormFieldRow.decoration) : null),
          keyboardType: (tree.cupertinoTextFormFieldRow.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.cupertinoTextFormFieldRow.keyboardType) : null),
          textCapitalization: (tree.cupertinoTextFormFieldRow.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.cupertinoTextFormFieldRow.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.cupertinoTextFormFieldRow.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.cupertinoTextFormFieldRow.textInputAction) : null),
          style: (tree.cupertinoTextFormFieldRow.hasStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.style) : null),
          strutStyle: (tree.cupertinoTextFormFieldRow.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.cupertinoTextFormFieldRow.strutStyle) : null),
          textDirection: (tree.cupertinoTextFormFieldRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.cupertinoTextFormFieldRow.textDirection) : null),
          textAlign: (tree.cupertinoTextFormFieldRow.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.cupertinoTextFormFieldRow.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.cupertinoTextFormFieldRow.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.cupertinoTextFormFieldRow.textAlignVertical) : null),
          autofocus: (tree.cupertinoTextFormFieldRow.hasAutofocus() ? tree.cupertinoTextFormFieldRow.autofocus : false),
          readOnly: (tree.cupertinoTextFormFieldRow.hasReadOnly() ? tree.cupertinoTextFormFieldRow.readOnly : false),
          showCursor: (tree.cupertinoTextFormFieldRow.hasShowCursor() ? tree.cupertinoTextFormFieldRow.showCursor : null),
          obscuringCharacter: (tree.cupertinoTextFormFieldRow.hasObscuringCharacter() ? tree.cupertinoTextFormFieldRow.obscuringCharacter : '•'),
          obscureText: (tree.cupertinoTextFormFieldRow.hasObscureText() ? tree.cupertinoTextFormFieldRow.obscureText : false),
          autocorrect: (tree.cupertinoTextFormFieldRow.hasAutocorrect() ? tree.cupertinoTextFormFieldRow.autocorrect : true),
          smartDashesType: (tree.cupertinoTextFormFieldRow.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.cupertinoTextFormFieldRow.smartDashesType) : null),
          smartQuotesType: (tree.cupertinoTextFormFieldRow.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.cupertinoTextFormFieldRow.smartQuotesType) : null),
          enableSuggestions: (tree.cupertinoTextFormFieldRow.hasEnableSuggestions() ? tree.cupertinoTextFormFieldRow.enableSuggestions : true),
          maxLines: (tree.cupertinoTextFormFieldRow.hasMaxLines() ? tree.cupertinoTextFormFieldRow.maxLines : 1),
          minLines: (tree.cupertinoTextFormFieldRow.hasMinLines() ? tree.cupertinoTextFormFieldRow.minLines : null),
          expands: (tree.cupertinoTextFormFieldRow.hasExpands() ? tree.cupertinoTextFormFieldRow.expands : false),
          maxLength: (tree.cupertinoTextFormFieldRow.hasMaxLength() ? tree.cupertinoTextFormFieldRow.maxLength : null),
          onChanged: null,
          onTap: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.cupertinoTextFormFieldRow.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.cupertinoTextFormFieldRow.hasEnabled() ? tree.cupertinoTextFormFieldRow.enabled : null),
          cursorWidth: (tree.cupertinoTextFormFieldRow.hasCursorWidth() ? tree.cupertinoTextFormFieldRow.cursorWidth : 2.0),
          cursorHeight: (tree.cupertinoTextFormFieldRow.hasCursorHeight() ? tree.cupertinoTextFormFieldRow.cursorHeight : null),
          cursorColor: (tree.cupertinoTextFormFieldRow.hasCursorColor() ? evaluateDartColorType(tree.cupertinoTextFormFieldRow.cursorColor) : null),
          keyboardAppearance: (tree.cupertinoTextFormFieldRow.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.cupertinoTextFormFieldRow.keyboardAppearance) : null),
          scrollPadding: (tree.cupertinoTextFormFieldRow.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.cupertinoTextFormFieldRow.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.cupertinoTextFormFieldRow.hasEnableInteractiveSelection() ? tree.cupertinoTextFormFieldRow.enableInteractiveSelection : true),
          selectionControls: (tree.cupertinoTextFormFieldRow.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.cupertinoTextFormFieldRow.selectionControls) : null),
          scrollPhysics: (tree.cupertinoTextFormFieldRow.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.cupertinoTextFormFieldRow.scrollPhysics) : null),
          autofillHints: tree.cupertinoTextFormFieldRow.autofillHints,
          autovalidateMode: (tree.cupertinoTextFormFieldRow.hasAutovalidateMode() ? enums.convertRequiredFlutterAutovalidateModeType(tree.cupertinoTextFormFieldRow.autovalidateMode) : missing('autovalidateMode')),
          placeholder: (tree.cupertinoTextFormFieldRow.hasPlaceholder() ? tree.cupertinoTextFormFieldRow.placeholder : null),
          placeholderStyle: (tree.cupertinoTextFormFieldRow.hasPlaceholderStyle() ? evaluateFlutterTextStyleType(tree.cupertinoTextFormFieldRow.placeholderStyle) : $flutterSrcPaintingTextStyle.TextStyle(fontWeight: $dartUi.FontWeight.w400, color: $flutterSrcCupertinoColors.CupertinoColors.placeholderText)),
          contextMenuBuilder: null);
    case messages.WidgetType_Constructor.cupertinoTextSelectionToolbar:
      return $flutterSrcCupertinoTextSelectionToolbar.CupertinoTextSelectionToolbar(
          key: (tree.cupertinoTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbar.key) : null),
          anchorAbove: (tree.cupertinoTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.cupertinoTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.cupertinoTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.cupertinoTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.cupertinoTextSelectionToolbarButton:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton(
          key: (tree.cupertinoTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.cupertinoTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTextSelectionToolbarButton.child) : missing('child')));
    case messages.WidgetType_Constructor.cupertinoTextSelectionToolbarButtonNamedButtonItem:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.buttonItem(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.key) : null),
          buttonItem: (tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.hasButtonItem() ? evaluateRequiredFlutterContextMenuButtonItemType(tree.cupertinoTextSelectionToolbarButtonNamedButtonItem.buttonItem) : missing('buttonItem')));
    case messages.WidgetType_Constructor.cupertinoTextSelectionToolbarButtonNamedText:
      return $flutterSrcCupertinoTextSelectionToolbarButton.CupertinoTextSelectionToolbarButton.text(
          key: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTextSelectionToolbarButtonNamedText.key) : null),
          onPressed: null,
          text: (tree.cupertinoTextSelectionToolbarButtonNamedText.hasText() ? tree.cupertinoTextSelectionToolbarButtonNamedText.text : null));
    case messages.WidgetType_Constructor.cupertinoTheme:
      return $flutterSrcCupertinoTheme.CupertinoTheme(
          key: (tree.cupertinoTheme.hasKey() ? evaluateFlutterKeyType(tree.cupertinoTheme.key) : null),
          data: (tree.cupertinoTheme.hasData() ? evaluateRequiredCupertinoThemeDataType(tree.cupertinoTheme.data) : missing('data')),
          child: (tree.cupertinoTheme.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.cupertinoUserInterfaceLevel:
      return $flutterSrcCupertinoInterfaceLevel.CupertinoUserInterfaceLevel(
          key: (tree.cupertinoUserInterfaceLevel.hasKey() ? evaluateFlutterKeyType(tree.cupertinoUserInterfaceLevel.key) : null),
          data: (tree.cupertinoUserInterfaceLevel.hasData() ? enums.convertRequiredCupertinoUserInterfaceLevelDataType(tree.cupertinoUserInterfaceLevel.data) : missing('data')),
          child: (tree.cupertinoUserInterfaceLevel.hasChild() ? evaluateRequiredWidgetType(tree.cupertinoUserInterfaceLevel.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterAbsorbPointer:
      return $flutterSrcWidgetsBasic.AbsorbPointer(
          key: (tree.flutterAbsorbPointer.hasKey() ? evaluateFlutterKeyType(tree.flutterAbsorbPointer.key) : null),
          absorbing: (tree.flutterAbsorbPointer.hasAbsorbing() ? tree.flutterAbsorbPointer.absorbing : true),
          child: (tree.flutterAbsorbPointer.hasChild() ? evaluateWidgetType(tree.flutterAbsorbPointer.child) : null));
    case messages.WidgetType_Constructor.flutterAlign:
      return $flutterSrcWidgetsBasic.Align(
          key: (tree.flutterAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAlign.key) : null),
          alignment: (tree.flutterAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAlign.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterAlign.hasWidthFactor() ? tree.flutterAlign.widthFactor : null),
          heightFactor: (tree.flutterAlign.hasHeightFactor() ? tree.flutterAlign.heightFactor : null),
          child: (tree.flutterAlign.hasChild() ? evaluateWidgetType(tree.flutterAlign.child) : null));
    case messages.WidgetType_Constructor.flutterAndroidView:
      return $flutterSrcWidgetsPlatformView.AndroidView(
          key: (tree.flutterAndroidView.hasKey() ? evaluateFlutterKeyType(tree.flutterAndroidView.key) : null),
          viewType: (tree.flutterAndroidView.hasViewType() ? tree.flutterAndroidView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAndroidView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAndroidView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAndroidView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAndroidView.layoutDirection) : null),
          gestureRecognizers: null,
          creationParamsCodec: null,
          clipBehavior: (tree.flutterAndroidView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAndroidView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterAnimatedAlign:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedAlign(
          key: (tree.flutterAnimatedAlign.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedAlign.key) : null),
          alignment: (tree.flutterAnimatedAlign.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedAlign.alignment) : missing('alignment')),
          child: (tree.flutterAnimatedAlign.hasChild() ? evaluateWidgetType(tree.flutterAnimatedAlign.child) : null),
          heightFactor: (tree.flutterAnimatedAlign.hasHeightFactor() ? tree.flutterAnimatedAlign.heightFactor : null),
          widthFactor: (tree.flutterAnimatedAlign.hasWidthFactor() ? tree.flutterAnimatedAlign.widthFactor : null),
          curve: (tree.flutterAnimatedAlign.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedAlign.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedAlign.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedAlign.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedContainer:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedContainer(
          key: (tree.flutterAnimatedContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedContainer.key) : null),
          alignment: (tree.flutterAnimatedContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.alignment) : null),
          padding: (tree.flutterAnimatedContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.padding) : null),
          color: (tree.flutterAnimatedContainer.hasColor() ? evaluateDartColorType(tree.flutterAnimatedContainer.color) : null),
          decoration: (tree.flutterAnimatedContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.decoration) : null),
          foregroundDecoration: (tree.flutterAnimatedContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterAnimatedContainer.foregroundDecoration) : null),
          width: (tree.flutterAnimatedContainer.hasWidth() ? tree.flutterAnimatedContainer.width : null),
          height: (tree.flutterAnimatedContainer.hasHeight() ? tree.flutterAnimatedContainer.height : null),
          constraints: (tree.flutterAnimatedContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterAnimatedContainer.constraints) : null),
          margin: (tree.flutterAnimatedContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterAnimatedContainer.margin) : null),
          transform: (tree.flutterAnimatedContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterAnimatedContainer.transform) : null),
          transformAlignment: (tree.flutterAnimatedContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterAnimatedContainer.transformAlignment) : null),
          child: (tree.flutterAnimatedContainer.hasChild() ? evaluateWidgetType(tree.flutterAnimatedContainer.child) : null),
          clipBehavior: (tree.flutterAnimatedContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedContainer.clipBehavior) : $dartUi.Clip.none),
          curve: (tree.flutterAnimatedContainer.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedContainer.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedContainer.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedContainer.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedCrossFade:
      return $flutterSrcWidgetsAnimatedCrossFade.AnimatedCrossFade(
          key: (tree.flutterAnimatedCrossFade.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedCrossFade.key) : null),
          firstChild: (tree.flutterAnimatedCrossFade.hasFirstChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.firstChild) : missing('firstChild')),
          secondChild: (tree.flutterAnimatedCrossFade.hasSecondChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedCrossFade.secondChild) : missing('secondChild')),
          firstCurve: (tree.flutterAnimatedCrossFade.hasFirstCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.firstCurve) : $flutterSrcAnimationCurves.Curves.linear),
          secondCurve: (tree.flutterAnimatedCrossFade.hasSecondCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.secondCurve) : $flutterSrcAnimationCurves.Curves.linear),
          sizeCurve: (tree.flutterAnimatedCrossFade.hasSizeCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedCrossFade.sizeCurve) : $flutterSrcAnimationCurves.Curves.linear),
          alignment: (tree.flutterAnimatedCrossFade.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedCrossFade.alignment) : $flutterSrcPaintingAlignment.Alignment.topCenter),
          crossFadeState: (tree.flutterAnimatedCrossFade.hasCrossFadeState() ? enums.convertRequiredFlutterCrossFadeStateType(tree.flutterAnimatedCrossFade.crossFadeState) : missing('crossFadeState')),
          duration: (tree.flutterAnimatedCrossFade.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedCrossFade.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedCrossFade.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedCrossFade.reverseDuration) : null),
          excludeBottomFocus: (tree.flutterAnimatedCrossFade.hasExcludeBottomFocus() ? tree.flutterAnimatedCrossFade.excludeBottomFocus : true));
    case messages.WidgetType_Constructor.flutterAnimatedDefaultTextStyle:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedDefaultTextStyle(
          key: (tree.flutterAnimatedDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedDefaultTextStyle.key) : null),
          child: (tree.flutterAnimatedDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedDefaultTextStyle.child) : missing('child')),
          style: (tree.flutterAnimatedDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterAnimatedDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterAnimatedDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterAnimatedDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterAnimatedDefaultTextStyle.hasSoftWrap() ? tree.flutterAnimatedDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterAnimatedDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterAnimatedDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterAnimatedDefaultTextStyle.hasMaxLines() ? tree.flutterAnimatedDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterAnimatedDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterAnimatedDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterAnimatedDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterAnimatedDefaultTextStyle.textHeightBehavior) : null),
          curve: (tree.flutterAnimatedDefaultTextStyle.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedDefaultTextStyle.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedDefaultTextStyle.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedDefaultTextStyle.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedFractionallySizedBox:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedFractionallySizedBox(
          key: (tree.flutterAnimatedFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedFractionallySizedBox.key) : null),
          alignment: (tree.flutterAnimatedFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterAnimatedFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterAnimatedFractionallySizedBox.child) : null),
          heightFactor: (tree.flutterAnimatedFractionallySizedBox.hasHeightFactor() ? tree.flutterAnimatedFractionallySizedBox.heightFactor : null),
          widthFactor: (tree.flutterAnimatedFractionallySizedBox.hasWidthFactor() ? tree.flutterAnimatedFractionallySizedBox.widthFactor : null),
          curve: (tree.flutterAnimatedFractionallySizedBox.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedFractionallySizedBox.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedFractionallySizedBox.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedFractionallySizedBox.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedOpacity(
          key: (tree.flutterAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedOpacity.key) : null),
          child: (tree.flutterAnimatedOpacity.hasChild() ? evaluateWidgetType(tree.flutterAnimatedOpacity.child) : null),
          opacity: (tree.flutterAnimatedOpacity.hasOpacity() ? tree.flutterAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.WidgetType_Constructor.flutterAnimatedPadding:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPadding(
          key: (tree.flutterAnimatedPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPadding.key) : null),
          padding: (tree.flutterAnimatedPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterAnimatedPadding.padding) : missing('padding')),
          child: (tree.flutterAnimatedPadding.hasChild() ? evaluateWidgetType(tree.flutterAnimatedPadding.child) : null),
          curve: (tree.flutterAnimatedPadding.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPadding.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPadding.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPadding.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedPhysicalModel:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPhysicalModel(
          key: (tree.flutterAnimatedPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPhysicalModel.key) : null),
          child: (tree.flutterAnimatedPhysicalModel.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPhysicalModel.child) : missing('child')),
          shape: (tree.flutterAnimatedPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterAnimatedPhysicalModel.shape) : missing('shape')),
          clipBehavior: (tree.flutterAnimatedPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterAnimatedPhysicalModel.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.flutterAnimatedPhysicalModel.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          elevation: (tree.flutterAnimatedPhysicalModel.hasElevation() ? tree.flutterAnimatedPhysicalModel.elevation : missing('elevation')),
          color: (tree.flutterAnimatedPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.color) : missing('color')),
          animateColor: (tree.flutterAnimatedPhysicalModel.hasAnimateColor() ? tree.flutterAnimatedPhysicalModel.animateColor : true),
          shadowColor: (tree.flutterAnimatedPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterAnimatedPhysicalModel.shadowColor) : missing('shadowColor')),
          animateShadowColor: (tree.flutterAnimatedPhysicalModel.hasAnimateShadowColor() ? tree.flutterAnimatedPhysicalModel.animateShadowColor : true),
          curve: (tree.flutterAnimatedPhysicalModel.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPhysicalModel.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPhysicalModel.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPhysicalModel.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedPositioned:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned(
          key: (tree.flutterAnimatedPositioned.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositioned.key) : null),
          child: (tree.flutterAnimatedPositioned.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositioned.child) : missing('child')),
          left: (tree.flutterAnimatedPositioned.hasLeft() ? tree.flutterAnimatedPositioned.left : null),
          top: (tree.flutterAnimatedPositioned.hasTop() ? tree.flutterAnimatedPositioned.top : null),
          right: (tree.flutterAnimatedPositioned.hasRight() ? tree.flutterAnimatedPositioned.right : null),
          bottom: (tree.flutterAnimatedPositioned.hasBottom() ? tree.flutterAnimatedPositioned.bottom : null),
          width: (tree.flutterAnimatedPositioned.hasWidth() ? tree.flutterAnimatedPositioned.width : null),
          height: (tree.flutterAnimatedPositioned.hasHeight() ? tree.flutterAnimatedPositioned.height : null),
          curve: (tree.flutterAnimatedPositioned.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositioned.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositioned.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositioned.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedPositionedDirectional:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositionedDirectional(
          key: (tree.flutterAnimatedPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedDirectional.key) : null),
          child: (tree.flutterAnimatedPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedDirectional.child) : missing('child')),
          start: (tree.flutterAnimatedPositionedDirectional.hasStart() ? tree.flutterAnimatedPositionedDirectional.start : null),
          top: (tree.flutterAnimatedPositionedDirectional.hasTop() ? tree.flutterAnimatedPositionedDirectional.top : null),
          end: (tree.flutterAnimatedPositionedDirectional.hasEnd() ? tree.flutterAnimatedPositionedDirectional.end : null),
          bottom: (tree.flutterAnimatedPositionedDirectional.hasBottom() ? tree.flutterAnimatedPositionedDirectional.bottom : null),
          width: (tree.flutterAnimatedPositionedDirectional.hasWidth() ? tree.flutterAnimatedPositionedDirectional.width : null),
          height: (tree.flutterAnimatedPositionedDirectional.hasHeight() ? tree.flutterAnimatedPositionedDirectional.height : null),
          curve: (tree.flutterAnimatedPositionedDirectional.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedDirectional.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedDirectional.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedDirectional.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedPositionedNamedFromRect:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedPositioned.fromRect(
          key: (tree.flutterAnimatedPositionedNamedFromRect.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedPositionedNamedFromRect.key) : null),
          child: (tree.flutterAnimatedPositionedNamedFromRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterAnimatedPositionedNamedFromRect.child) : missing('child')),
          rect: (tree.flutterAnimatedPositionedNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterAnimatedPositionedNamedFromRect.rect) : missing('rect')),
          curve: (tree.flutterAnimatedPositionedNamedFromRect.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedPositionedNamedFromRect.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedPositionedNamedFromRect.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedPositionedNamedFromRect.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedRotation:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedRotation(
          key: (tree.flutterAnimatedRotation.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedRotation.key) : null),
          child: (tree.flutterAnimatedRotation.hasChild() ? evaluateWidgetType(tree.flutterAnimatedRotation.child) : null),
          turns: (tree.flutterAnimatedRotation.hasTurns() ? tree.flutterAnimatedRotation.turns : missing('turns')),
          alignment: (tree.flutterAnimatedRotation.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedRotation.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedRotation.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedRotation.filterQuality) : null),
          curve: (tree.flutterAnimatedRotation.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedRotation.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedRotation.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedRotation.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedScale:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedScale(
          key: (tree.flutterAnimatedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedScale.key) : null),
          child: (tree.flutterAnimatedScale.hasChild() ? evaluateWidgetType(tree.flutterAnimatedScale.child) : null),
          scale: (tree.flutterAnimatedScale.hasScale() ? tree.flutterAnimatedScale.scale : missing('scale')),
          alignment: (tree.flutterAnimatedScale.hasAlignment() ? evaluateRequiredFlutterAlignmentType(tree.flutterAnimatedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          filterQuality: (tree.flutterAnimatedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterAnimatedScale.filterQuality) : null),
          curve: (tree.flutterAnimatedScale.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedScale.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedScale.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedScale.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedSize:
      return $flutterSrcWidgetsAnimatedSize.AnimatedSize(
          key: (tree.flutterAnimatedSize.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSize.key) : null),
          child: (tree.flutterAnimatedSize.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSize.child) : null),
          alignment: (tree.flutterAnimatedSize.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterAnimatedSize.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          curve: (tree.flutterAnimatedSize.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSize.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSize.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSize.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSize.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSize.reverseDuration) : null),
          clipBehavior: (tree.flutterAnimatedSize.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterAnimatedSize.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterAnimatedSlide:
      return $flutterSrcWidgetsImplicitAnimations.AnimatedSlide(
          key: (tree.flutterAnimatedSlide.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSlide.key) : null),
          child: (tree.flutterAnimatedSlide.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSlide.child) : null),
          offset: (tree.flutterAnimatedSlide.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterAnimatedSlide.offset) : missing('offset')),
          curve: (tree.flutterAnimatedSlide.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSlide.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterAnimatedSlide.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSlide.duration) : missing('duration')),
          onEnd: null);
    case messages.WidgetType_Constructor.flutterAnimatedSwitcher:
      return $flutterSrcWidgetsAnimatedSwitcher.AnimatedSwitcher(
          key: (tree.flutterAnimatedSwitcher.hasKey() ? evaluateFlutterKeyType(tree.flutterAnimatedSwitcher.key) : null),
          child: (tree.flutterAnimatedSwitcher.hasChild() ? evaluateWidgetType(tree.flutterAnimatedSwitcher.child) : null),
          duration: (tree.flutterAnimatedSwitcher.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterAnimatedSwitcher.duration) : missing('duration')),
          reverseDuration: (tree.flutterAnimatedSwitcher.hasReverseDuration() ? evaluateDartDurationType(tree.flutterAnimatedSwitcher.reverseDuration) : null),
          switchInCurve: (tree.flutterAnimatedSwitcher.hasSwitchInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchInCurve) : $flutterSrcAnimationCurves.Curves.linear),
          switchOutCurve: (tree.flutterAnimatedSwitcher.hasSwitchOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterAnimatedSwitcher.switchOutCurve) : $flutterSrcAnimationCurves.Curves.linear));
    case messages.WidgetType_Constructor.flutterAppKitView:
      return $flutterSrcWidgetsPlatformView.AppKitView(
          key: (tree.flutterAppKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterAppKitView.key) : null),
          viewType: (tree.flutterAppKitView.hasViewType() ? tree.flutterAppKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterAppKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterAppKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterAppKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterAppKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.WidgetType_Constructor.flutterAspectRatio:
      return $flutterSrcWidgetsBasic.AspectRatio(
          key: (tree.flutterAspectRatio.hasKey() ? evaluateFlutterKeyType(tree.flutterAspectRatio.key) : null),
          aspectRatio: (tree.flutterAspectRatio.hasAspectRatio() ? tree.flutterAspectRatio.aspectRatio : missing('aspectRatio')),
          child: (tree.flutterAspectRatio.hasChild() ? evaluateWidgetType(tree.flutterAspectRatio.child) : null));
    case messages.WidgetType_Constructor.flutterAutofillGroup:
      return $flutterSrcWidgetsAutofill.AutofillGroup(
          key: (tree.flutterAutofillGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterAutofillGroup.key) : null),
          child: (tree.flutterAutofillGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutofillGroup.child) : missing('child')),
          onDisposeAction: (tree.flutterAutofillGroup.hasOnDisposeAction() ? enums.convertRequiredFlutterAutofillContextActionType(tree.flutterAutofillGroup.onDisposeAction) : $flutterSrcWidgetsAutofill.AutofillContextAction.commit));
    case messages.WidgetType_Constructor.flutterAutomaticKeepAlive:
      return $flutterSrcWidgetsAutomaticKeepAlive.AutomaticKeepAlive(
          key: (tree.flutterAutomaticKeepAlive.hasKey() ? evaluateFlutterKeyType(tree.flutterAutomaticKeepAlive.key) : null),
          child: (tree.flutterAutomaticKeepAlive.hasChild() ? evaluateRequiredWidgetType(tree.flutterAutomaticKeepAlive.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterBackdropFilter:
      return $flutterSrcWidgetsBasic.BackdropFilter(
          key: (tree.flutterBackdropFilter.hasKey() ? evaluateFlutterKeyType(tree.flutterBackdropFilter.key) : null),
          filter: (tree.flutterBackdropFilter.hasFilter() ? evaluateRequiredDartImageFilterType(tree.flutterBackdropFilter.filter) : missing('filter')),
          child: (tree.flutterBackdropFilter.hasChild() ? evaluateWidgetType(tree.flutterBackdropFilter.child) : null),
          blendMode: (tree.flutterBackdropFilter.hasBlendMode() ? enums.convertRequiredDartBlendModeType(tree.flutterBackdropFilter.blendMode) : $dartUi.BlendMode.srcOver));
    case messages.WidgetType_Constructor.flutterBanner:
      return $flutterSrcWidgetsBanner.Banner(
          key: (tree.flutterBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterBanner.key) : null),
          child: (tree.flutterBanner.hasChild() ? evaluateWidgetType(tree.flutterBanner.child) : null),
          message: (tree.flutterBanner.hasMessage() ? tree.flutterBanner.message : missing('message')),
          textDirection: (tree.flutterBanner.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.textDirection) : null),
          location: (tree.flutterBanner.hasLocation() ? enums.convertRequiredFlutterBannerLocationType(tree.flutterBanner.location) : missing('location')),
          layoutDirection: (tree.flutterBanner.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterBanner.layoutDirection) : null),
          color: (tree.flutterBanner.hasColor() ? evaluateRequiredDartColorType(tree.flutterBanner.color) : $dartUi.Color(0xA0B71C1C)),
          textStyle: (tree.flutterBanner.hasTextStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterBanner.textStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFFFFFFFF), fontSize: 12.0 * 0.85, fontWeight: $dartUi.FontWeight.w900, height: 1.0)));
    case messages.WidgetType_Constructor.flutterBaseline:
      return $flutterSrcWidgetsBasic.Baseline(
          key: (tree.flutterBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterBaseline.key) : null),
          baseline: (tree.flutterBaseline.hasBaseline() ? tree.flutterBaseline.baseline : missing('baseline')),
          baselineType: (tree.flutterBaseline.hasBaselineType() ? enums.convertRequiredDartTextBaselineType(tree.flutterBaseline.baselineType) : missing('baselineType')),
          child: (tree.flutterBaseline.hasChild() ? evaluateWidgetType(tree.flutterBaseline.child) : null));
    case messages.WidgetType_Constructor.flutterBlockSemantics:
      return $flutterSrcWidgetsBasic.BlockSemantics(
          key: (tree.flutterBlockSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterBlockSemantics.key) : null),
          blocking: (tree.flutterBlockSemantics.hasBlocking() ? tree.flutterBlockSemantics.blocking : true),
          child: (tree.flutterBlockSemantics.hasChild() ? evaluateWidgetType(tree.flutterBlockSemantics.child) : null));
    case messages.WidgetType_Constructor.flutterCenter:
      return $flutterSrcWidgetsBasic.Center(
          key: (tree.flutterCenter.hasKey() ? evaluateFlutterKeyType(tree.flutterCenter.key) : null),
          widthFactor: (tree.flutterCenter.hasWidthFactor() ? tree.flutterCenter.widthFactor : null),
          heightFactor: (tree.flutterCenter.hasHeightFactor() ? tree.flutterCenter.heightFactor : null),
          child: (tree.flutterCenter.hasChild() ? evaluateWidgetType(tree.flutterCenter.child) : null));
    case messages.WidgetType_Constructor.flutterCheckedModeBanner:
      return $flutterSrcWidgetsBanner.CheckedModeBanner(
          key: (tree.flutterCheckedModeBanner.hasKey() ? evaluateFlutterKeyType(tree.flutterCheckedModeBanner.key) : null),
          child: (tree.flutterCheckedModeBanner.hasChild() ? evaluateRequiredWidgetType(tree.flutterCheckedModeBanner.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterClipOval:
      return $flutterSrcWidgetsBasic.ClipOval(
          key: (tree.flutterClipOval.hasKey() ? evaluateFlutterKeyType(tree.flutterClipOval.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipOval.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipOval.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipOval.hasChild() ? evaluateWidgetType(tree.flutterClipOval.child) : null));
    case messages.WidgetType_Constructor.flutterClipPath:
      return $flutterSrcWidgetsBasic.ClipPath(
          key: (tree.flutterClipPath.hasKey() ? evaluateFlutterKeyType(tree.flutterClipPath.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipPath.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipPath.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipPath.hasChild() ? evaluateWidgetType(tree.flutterClipPath.child) : null));
    case messages.WidgetType_Constructor.flutterClipRRect:
      return $flutterSrcWidgetsBasic.ClipRRect(
          key: (tree.flutterClipRRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRRect.key) : null),
          borderRadius: (tree.flutterClipRRect.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.flutterClipRRect.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero),
          clipper: null,
          clipBehavior: (tree.flutterClipRRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRRect.clipBehavior) : $dartUi.Clip.antiAlias),
          child: (tree.flutterClipRRect.hasChild() ? evaluateWidgetType(tree.flutterClipRRect.child) : null));
    case messages.WidgetType_Constructor.flutterClipRect:
      return $flutterSrcWidgetsBasic.ClipRect(
          key: (tree.flutterClipRect.hasKey() ? evaluateFlutterKeyType(tree.flutterClipRect.key) : null),
          clipper: null,
          clipBehavior: (tree.flutterClipRect.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterClipRect.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterClipRect.hasChild() ? evaluateWidgetType(tree.flutterClipRect.child) : null));
    case messages.WidgetType_Constructor.flutterColorFiltered:
      return $flutterSrcWidgetsColorFilter.ColorFiltered(
          colorFilter: (tree.flutterColorFiltered.hasColorFilter() ? evaluateRequiredDartColorFilterType(tree.flutterColorFiltered.colorFilter) : missing('colorFilter')),
          child: (tree.flutterColorFiltered.hasChild() ? evaluateWidgetType(tree.flutterColorFiltered.child) : null),
          key: (tree.flutterColorFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterColorFiltered.key) : null));
    case messages.WidgetType_Constructor.flutterColoredBox:
      return $flutterSrcWidgetsBasic.ColoredBox(
          color: (tree.flutterColoredBox.hasColor() ? evaluateRequiredDartColorType(tree.flutterColoredBox.color) : missing('color')),
          child: (tree.flutterColoredBox.hasChild() ? evaluateWidgetType(tree.flutterColoredBox.child) : null),
          key: (tree.flutterColoredBox.hasKey() ? evaluateFlutterKeyType(tree.flutterColoredBox.key) : null));
    case messages.WidgetType_Constructor.flutterColumn:
      return $flutterSrcWidgetsBasic.Column(
          key: (tree.flutterColumn.hasKey() ? evaluateFlutterKeyType(tree.flutterColumn.key) : null),
          mainAxisAlignment: (tree.flutterColumn.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterColumn.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterColumn.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterColumn.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterColumn.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterColumn.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterColumn.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterColumn.textDirection) : null),
          verticalDirection: (tree.flutterColumn.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterColumn.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterColumn.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterColumn.textBaseline) : null),
          children: tree.flutterColumn.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterCompositedTransformFollower:
      return $flutterSrcWidgetsBasic.CompositedTransformFollower(
          key: (tree.flutterCompositedTransformFollower.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformFollower.key) : null),
          link: (tree.flutterCompositedTransformFollower.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformFollower.link) : missing('link')),
          showWhenUnlinked: (tree.flutterCompositedTransformFollower.hasShowWhenUnlinked() ? tree.flutterCompositedTransformFollower.showWhenUnlinked : true),
          offset: (tree.flutterCompositedTransformFollower.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterCompositedTransformFollower.offset) : $dartUi.Offset.zero),
          targetAnchor: (tree.flutterCompositedTransformFollower.hasTargetAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.targetAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          followerAnchor: (tree.flutterCompositedTransformFollower.hasFollowerAnchor() ? evaluateRequiredFlutterAlignmentType(tree.flutterCompositedTransformFollower.followerAnchor) : $flutterSrcPaintingAlignment.Alignment.topLeft),
          child: (tree.flutterCompositedTransformFollower.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformFollower.child) : null));
    case messages.WidgetType_Constructor.flutterCompositedTransformTarget:
      return $flutterSrcWidgetsBasic.CompositedTransformTarget(
          key: (tree.flutterCompositedTransformTarget.hasKey() ? evaluateFlutterKeyType(tree.flutterCompositedTransformTarget.key) : null),
          link: (tree.flutterCompositedTransformTarget.hasLink() ? evaluateRequiredFlutterLayerLinkType(tree.flutterCompositedTransformTarget.link) : missing('link')),
          child: (tree.flutterCompositedTransformTarget.hasChild() ? evaluateWidgetType(tree.flutterCompositedTransformTarget.child) : null));
    case messages.WidgetType_Constructor.flutterConstrainedBox:
      return $flutterSrcWidgetsBasic.ConstrainedBox(
          key: (tree.flutterConstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterConstrainedBox.key) : null),
          constraints: (tree.flutterConstrainedBox.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.flutterConstrainedBox.constraints) : missing('constraints')),
          child: (tree.flutterConstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterConstrainedBox.child) : null));
    case messages.WidgetType_Constructor.flutterContainer:
      return $flutterSrcWidgetsContainer.Container(
          key: (tree.flutterContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterContainer.key) : null),
          alignment: (tree.flutterContainer.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.alignment) : null),
          padding: (tree.flutterContainer.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.padding) : null),
          color: (tree.flutterContainer.hasColor() ? evaluateDartColorType(tree.flutterContainer.color) : null),
          decoration: (tree.flutterContainer.hasDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.decoration) : null),
          foregroundDecoration: (tree.flutterContainer.hasForegroundDecoration() ? evaluateFlutterDecorationType(tree.flutterContainer.foregroundDecoration) : null),
          width: (tree.flutterContainer.hasWidth() ? tree.flutterContainer.width : null),
          height: (tree.flutterContainer.hasHeight() ? tree.flutterContainer.height : null),
          constraints: (tree.flutterContainer.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.flutterContainer.constraints) : null),
          margin: (tree.flutterContainer.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterContainer.margin) : null),
          transform: (tree.flutterContainer.hasTransform() ? evaluateVectorMathMatrix4Type(tree.flutterContainer.transform) : null),
          transformAlignment: (tree.flutterContainer.hasTransformAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterContainer.transformAlignment) : null),
          child: (tree.flutterContainer.hasChild() ? evaluateWidgetType(tree.flutterContainer.child) : null),
          clipBehavior: (tree.flutterContainer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterContainer.clipBehavior) : $dartUi.Clip.none));
    case messages.WidgetType_Constructor.flutterCustomMultiChildLayout:
      return $flutterSrcWidgetsBasic.CustomMultiChildLayout(
          key: (tree.flutterCustomMultiChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomMultiChildLayout.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterCustomMultiChildLayout.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterCustomPaint:
      return $flutterSrcWidgetsBasic.CustomPaint(
          key: (tree.flutterCustomPaint.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomPaint.key) : null),
          painter: (tree.flutterCustomPaint.hasPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.painter) : null),
          foregroundPainter: (tree.flutterCustomPaint.hasForegroundPainter() ? evaluateFlutterCustomPainterType(tree.flutterCustomPaint.foregroundPainter) : null),
          size: (tree.flutterCustomPaint.hasSize() ? evaluateRequiredDartSizeType(tree.flutterCustomPaint.size) : $dartUi.Size.zero),
          isComplex: (tree.flutterCustomPaint.hasIsComplex() ? tree.flutterCustomPaint.isComplex : false),
          willChange: (tree.flutterCustomPaint.hasWillChange() ? tree.flutterCustomPaint.willChange : false),
          child: (tree.flutterCustomPaint.hasChild() ? evaluateWidgetType(tree.flutterCustomPaint.child) : null));
    case messages.WidgetType_Constructor.flutterCustomScrollView:
      return $flutterSrcWidgetsScrollView.CustomScrollView(
          key: (tree.flutterCustomScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.key) : null),
          scrollDirection: (tree.flutterCustomScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterCustomScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterCustomScrollView.hasReverse() ? tree.flutterCustomScrollView.reverse : false),
          controller: (tree.flutterCustomScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterCustomScrollView.controller) : null),
          primary: (tree.flutterCustomScrollView.hasPrimary() ? tree.flutterCustomScrollView.primary : null),
          physics: (tree.flutterCustomScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterCustomScrollView.physics) : null),
          scrollBehavior: (tree.flutterCustomScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterCustomScrollView.scrollBehavior) : null),
          shrinkWrap: (tree.flutterCustomScrollView.hasShrinkWrap() ? tree.flutterCustomScrollView.shrinkWrap : false),
          center: (tree.flutterCustomScrollView.hasCenter() ? evaluateFlutterKeyType(tree.flutterCustomScrollView.center) : null),
          anchor: (tree.flutterCustomScrollView.hasAnchor() ? tree.flutterCustomScrollView.anchor : 0.0),
          cacheExtent: (tree.flutterCustomScrollView.hasCacheExtent() ? tree.flutterCustomScrollView.cacheExtent : null),
          slivers: tree.flutterCustomScrollView.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterCustomScrollView.hasSemanticChildCount() ? tree.flutterCustomScrollView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterCustomScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterCustomScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterCustomScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterCustomScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterCustomScrollView.hasRestorationId() ? tree.flutterCustomScrollView.restorationId : null),
          clipBehavior: (tree.flutterCustomScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterCustomScrollView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterCustomSingleChildLayout:
      return $flutterSrcWidgetsBasic.CustomSingleChildLayout(
          key: (tree.flutterCustomSingleChildLayout.hasKey() ? evaluateFlutterKeyType(tree.flutterCustomSingleChildLayout.key) : null),
          delegate: (tree.flutterCustomSingleChildLayout.hasDelegate() ? evaluateRequiredFlutterSingleChildLayoutDelegateType(tree.flutterCustomSingleChildLayout.delegate) : missing('delegate')),
          child: (tree.flutterCustomSingleChildLayout.hasChild() ? evaluateWidgetType(tree.flutterCustomSingleChildLayout.child) : null));
    case messages.WidgetType_Constructor.flutterDecoratedBox:
      return $flutterSrcWidgetsContainer.DecoratedBox(
          key: (tree.flutterDecoratedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedBox.key) : null),
          decoration: (tree.flutterDecoratedBox.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedBox.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedBox.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedBox.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          child: (tree.flutterDecoratedBox.hasChild() ? evaluateWidgetType(tree.flutterDecoratedBox.child) : null));
    case messages.WidgetType_Constructor.flutterDecoratedSliver:
      return $flutterSrcWidgetsDecoratedSliver.DecoratedSliver(
          key: (tree.flutterDecoratedSliver.hasKey() ? evaluateFlutterKeyType(tree.flutterDecoratedSliver.key) : null),
          decoration: (tree.flutterDecoratedSliver.hasDecoration() ? evaluateRequiredFlutterDecorationType(tree.flutterDecoratedSliver.decoration) : missing('decoration')),
          position: (tree.flutterDecoratedSliver.hasPosition() ? enums.convertRequiredFlutterDecorationPositionType(tree.flutterDecoratedSliver.position) : $flutterSrcRenderingProxyBox.DecorationPosition.background),
          sliver: (tree.flutterDecoratedSliver.hasSliver() ? evaluateWidgetType(tree.flutterDecoratedSliver.sliver) : null));
    case messages.WidgetType_Constructor.flutterDefaultAssetBundle:
      return $flutterSrcWidgetsBasic.DefaultAssetBundle(
          key: (tree.flutterDefaultAssetBundle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultAssetBundle.key) : null),
          bundle: (tree.flutterDefaultAssetBundle.hasBundle() ? evaluateRequiredFlutterAssetBundleType(tree.flutterDefaultAssetBundle.bundle) : missing('bundle')),
          child: (tree.flutterDefaultAssetBundle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultAssetBundle.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDefaultSelectionStyle:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle(
          key: (tree.flutterDefaultSelectionStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyle.key) : null),
          cursorColor: (tree.flutterDefaultSelectionStyle.hasCursorColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.cursorColor) : null),
          selectionColor: (tree.flutterDefaultSelectionStyle.hasSelectionColor() ? evaluateDartColorType(tree.flutterDefaultSelectionStyle.selectionColor) : null),
          mouseCursor: null,
          child: (tree.flutterDefaultSelectionStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultSelectionStyle.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDefaultSelectionStyleNamedFallback:
      return $flutterSrcWidgetsDefaultSelectionStyle.DefaultSelectionStyle.fallback(
          key: (tree.flutterDefaultSelectionStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultSelectionStyleNamedFallback.key) : null));
    case messages.WidgetType_Constructor.flutterDefaultTextEditingShortcuts:
      return $flutterSrcWidgetsDefaultTextEditingShortcuts.DefaultTextEditingShortcuts(
          key: (tree.flutterDefaultTextEditingShortcuts.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextEditingShortcuts.key) : null),
          child: (tree.flutterDefaultTextEditingShortcuts.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextEditingShortcuts.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDefaultTextHeightBehavior:
      return $flutterSrcWidgetsText.DefaultTextHeightBehavior(
          key: (tree.flutterDefaultTextHeightBehavior.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextHeightBehavior.key) : null),
          textHeightBehavior: (tree.flutterDefaultTextHeightBehavior.hasTextHeightBehavior() ? evaluateRequiredDartTextHeightBehaviorType(tree.flutterDefaultTextHeightBehavior.textHeightBehavior) : missing('textHeightBehavior')),
          child: (tree.flutterDefaultTextHeightBehavior.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextHeightBehavior.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDefaultTextStyle:
      return $flutterSrcWidgetsText.DefaultTextStyle(
          key: (tree.flutterDefaultTextStyle.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyle.key) : null),
          style: (tree.flutterDefaultTextStyle.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterDefaultTextStyle.style) : missing('style')),
          textAlign: (tree.flutterDefaultTextStyle.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterDefaultTextStyle.textAlign) : null),
          softWrap: (tree.flutterDefaultTextStyle.hasSoftWrap() ? tree.flutterDefaultTextStyle.softWrap : true),
          overflow: (tree.flutterDefaultTextStyle.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterDefaultTextStyle.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          maxLines: (tree.flutterDefaultTextStyle.hasMaxLines() ? tree.flutterDefaultTextStyle.maxLines : null),
          textWidthBasis: (tree.flutterDefaultTextStyle.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterDefaultTextStyle.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterDefaultTextStyle.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterDefaultTextStyle.textHeightBehavior) : null),
          child: (tree.flutterDefaultTextStyle.hasChild() ? evaluateRequiredWidgetType(tree.flutterDefaultTextStyle.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDefaultTextStyleNamedFallback:
      return $flutterSrcWidgetsText.DefaultTextStyle.fallback(
          key: (tree.flutterDefaultTextStyleNamedFallback.hasKey() ? evaluateFlutterKeyType(tree.flutterDefaultTextStyleNamedFallback.key) : null));
    case messages.WidgetType_Constructor.flutterDirectionality:
      return $flutterSrcWidgetsBasic.Directionality(
          key: (tree.flutterDirectionality.hasKey() ? evaluateFlutterKeyType(tree.flutterDirectionality.key) : null),
          textDirection: (tree.flutterDirectionality.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterDirectionality.textDirection) : missing('textDirection')),
          child: (tree.flutterDirectionality.hasChild() ? evaluateRequiredWidgetType(tree.flutterDirectionality.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDismissible:
      return $flutterSrcWidgetsDismissible.Dismissible(
          key: (tree.flutterDismissible.hasKey() ? evaluateRequiredFlutterKeyType(tree.flutterDismissible.key) : missing('key')),
          child: (tree.flutterDismissible.hasChild() ? evaluateRequiredWidgetType(tree.flutterDismissible.child) : missing('child')),
          background: (tree.flutterDismissible.hasBackground() ? evaluateWidgetType(tree.flutterDismissible.background) : null),
          secondaryBackground: (tree.flutterDismissible.hasSecondaryBackground() ? evaluateWidgetType(tree.flutterDismissible.secondaryBackground) : null),
          confirmDismiss: null,
          onResize: null,
          onUpdate: null,
          onDismissed: null,
          direction: (tree.flutterDismissible.hasDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.flutterDismissible.direction) : $flutterSrcWidgetsDismissible.DismissDirection.horizontal),
          resizeDuration: (tree.flutterDismissible.hasResizeDuration() ? evaluateDartDurationType(tree.flutterDismissible.resizeDuration) : $dartCore.Duration(milliseconds: 300)),
          movementDuration: (tree.flutterDismissible.hasMovementDuration() ? evaluateRequiredDartDurationType(tree.flutterDismissible.movementDuration) : $dartCore.Duration(milliseconds: 200)),
          crossAxisEndOffset: (tree.flutterDismissible.hasCrossAxisEndOffset() ? tree.flutterDismissible.crossAxisEndOffset : 0.0),
          dragStartBehavior: (tree.flutterDismissible.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterDismissible.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          behavior: (tree.flutterDismissible.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDismissible.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.opaque));
    case messages.WidgetType_Constructor.flutterDisplayFeatureSubScreen:
      return $flutterSrcWidgetsDisplayFeatureSubScreen.DisplayFeatureSubScreen(
          key: (tree.flutterDisplayFeatureSubScreen.hasKey() ? evaluateFlutterKeyType(tree.flutterDisplayFeatureSubScreen.key) : null),
          anchorPoint: (tree.flutterDisplayFeatureSubScreen.hasAnchorPoint() ? evaluateDartOffsetType(tree.flutterDisplayFeatureSubScreen.anchorPoint) : null),
          child: (tree.flutterDisplayFeatureSubScreen.hasChild() ? evaluateRequiredWidgetType(tree.flutterDisplayFeatureSubScreen.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterDraggable:
      return $flutterSrcWidgetsDragTarget.Draggable(
          key: (tree.flutterDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggable.key) : null),
          child: (tree.flutterDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggable.child) : missing('child')),
          feedback: (tree.flutterDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterDraggable.axis) : null),
          childWhenDragging: (tree.flutterDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterDraggable.feedbackOffset) : $dartUi.Offset.zero),
          affinity: (tree.flutterDraggable.hasAffinity() ? enums.convertFlutterAxisType(tree.flutterDraggable.affinity) : null),
          maxSimultaneousDrags: (tree.flutterDraggable.hasMaxSimultaneousDrags() ? tree.flutterDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          ignoringFeedbackSemantics: (tree.flutterDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterDraggable.hasIgnoringFeedbackPointer() ? tree.flutterDraggable.ignoringFeedbackPointer : true),
          rootOverlay: (tree.flutterDraggable.hasRootOverlay() ? tree.flutterDraggable.rootOverlay : false),
          hitTestBehavior: (tree.flutterDraggable.hasHitTestBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterDraggable.hitTestBehavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          allowedButtonsFilter: null);
    case messages.WidgetType_Constructor.flutterDraggableScrollableActuator:
      return $flutterSrcWidgetsDraggableScrollableSheet.DraggableScrollableActuator(
          key: (tree.flutterDraggableScrollableActuator.hasKey() ? evaluateFlutterKeyType(tree.flutterDraggableScrollableActuator.key) : null),
          child: (tree.flutterDraggableScrollableActuator.hasChild() ? evaluateRequiredWidgetType(tree.flutterDraggableScrollableActuator.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterEditableText:
      return $flutterSrcWidgetsEditableText.EditableText(
          key: (tree.flutterEditableText.hasKey() ? evaluateFlutterKeyType(tree.flutterEditableText.key) : null),
          controller: (tree.flutterEditableText.hasController() ? evaluateRequiredFlutterTextEditingControllerType(tree.flutterEditableText.controller) : missing('controller')),
          focusNode: (tree.flutterEditableText.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterEditableText.focusNode) : missing('focusNode')),
          readOnly: (tree.flutterEditableText.hasReadOnly() ? tree.flutterEditableText.readOnly : false),
          obscuringCharacter: (tree.flutterEditableText.hasObscuringCharacter() ? tree.flutterEditableText.obscuringCharacter : '•'),
          obscureText: (tree.flutterEditableText.hasObscureText() ? tree.flutterEditableText.obscureText : false),
          autocorrect: (tree.flutterEditableText.hasAutocorrect() ? tree.flutterEditableText.autocorrect : true),
          smartDashesType: (tree.flutterEditableText.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.flutterEditableText.smartDashesType) : null),
          smartQuotesType: (tree.flutterEditableText.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.flutterEditableText.smartQuotesType) : null),
          enableSuggestions: (tree.flutterEditableText.hasEnableSuggestions() ? tree.flutterEditableText.enableSuggestions : true),
          style: (tree.flutterEditableText.hasStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterEditableText.style) : missing('style')),
          strutStyle: (tree.flutterEditableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterEditableText.strutStyle) : null),
          cursorColor: (tree.flutterEditableText.hasCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.cursorColor) : missing('cursorColor')),
          backgroundCursorColor: (tree.flutterEditableText.hasBackgroundCursorColor() ? evaluateRequiredDartColorType(tree.flutterEditableText.backgroundCursorColor) : missing('backgroundCursorColor')),
          textAlign: (tree.flutterEditableText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterEditableText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterEditableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterEditableText.textDirection) : null),
          locale: (tree.flutterEditableText.hasLocale() ? evaluateDartLocaleType(tree.flutterEditableText.locale) : null),
          textScaler: (tree.flutterEditableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterEditableText.textScaler) : null),
          maxLines: (tree.flutterEditableText.hasMaxLines() ? tree.flutterEditableText.maxLines : 1),
          minLines: (tree.flutterEditableText.hasMinLines() ? tree.flutterEditableText.minLines : null),
          expands: (tree.flutterEditableText.hasExpands() ? tree.flutterEditableText.expands : false),
          forceLine: (tree.flutterEditableText.hasForceLine() ? tree.flutterEditableText.forceLine : true),
          textHeightBehavior: (tree.flutterEditableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterEditableText.textHeightBehavior) : null),
          textWidthBasis: (tree.flutterEditableText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterEditableText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          autofocus: (tree.flutterEditableText.hasAutofocus() ? tree.flutterEditableText.autofocus : false),
          showCursor: (tree.flutterEditableText.hasShowCursor() ? tree.flutterEditableText.showCursor : null),
          showSelectionHandles: (tree.flutterEditableText.hasShowSelectionHandles() ? tree.flutterEditableText.showSelectionHandles : false),
          selectionColor: (tree.flutterEditableText.hasSelectionColor() ? evaluateDartColorType(tree.flutterEditableText.selectionColor) : null),
          selectionControls: (tree.flutterEditableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.flutterEditableText.selectionControls) : null),
          keyboardType: (tree.flutterEditableText.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.flutterEditableText.keyboardType) : null),
          textInputAction: (tree.flutterEditableText.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.flutterEditableText.textInputAction) : null),
          textCapitalization: (tree.flutterEditableText.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.flutterEditableText.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          onSelectionChanged: null,
          onSelectionHandleTapped: null,
          onTapOutside: null,
          inputFormatters: tree.flutterEditableText.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          mouseCursor: null,
          rendererIgnoresPointer: (tree.flutterEditableText.hasRendererIgnoresPointer() ? tree.flutterEditableText.rendererIgnoresPointer : false),
          cursorWidth: (tree.flutterEditableText.hasCursorWidth() ? tree.flutterEditableText.cursorWidth : 2.0),
          cursorHeight: (tree.flutterEditableText.hasCursorHeight() ? tree.flutterEditableText.cursorHeight : null),
          cursorRadius: (tree.flutterEditableText.hasCursorRadius() ? evaluateDartRadiusType(tree.flutterEditableText.cursorRadius) : null),
          cursorOpacityAnimates: (tree.flutterEditableText.hasCursorOpacityAnimates() ? tree.flutterEditableText.cursorOpacityAnimates : false),
          cursorOffset: (tree.flutterEditableText.hasCursorOffset() ? evaluateDartOffsetType(tree.flutterEditableText.cursorOffset) : null),
          paintCursorAboveText: (tree.flutterEditableText.hasPaintCursorAboveText() ? tree.flutterEditableText.paintCursorAboveText : false),
          selectionHeightStyle: (tree.flutterEditableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.flutterEditableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.flutterEditableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.flutterEditableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          scrollPadding: (tree.flutterEditableText.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterEditableText.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          keyboardAppearance: (tree.flutterEditableText.hasKeyboardAppearance() ? enums.convertRequiredDartBrightnessType(tree.flutterEditableText.keyboardAppearance) : $dartUi.Brightness.light),
          dragStartBehavior: (tree.flutterEditableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterEditableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.flutterEditableText.hasEnableInteractiveSelection() ? tree.flutterEditableText.enableInteractiveSelection : null),
          scrollController: (tree.flutterEditableText.hasScrollController() ? evaluateFlutterScrollControllerType(tree.flutterEditableText.scrollController) : null),
          scrollPhysics: (tree.flutterEditableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterEditableText.scrollPhysics) : null),
          autocorrectionTextRectColor: (tree.flutterEditableText.hasAutocorrectionTextRectColor() ? evaluateDartColorType(tree.flutterEditableText.autocorrectionTextRectColor) : null),
          autofillHints: tree.flutterEditableText.autofillHints,
          autofillClient: (tree.flutterEditableText.hasAutofillClient() ? evaluateFlutterAutofillClientType(tree.flutterEditableText.autofillClient) : null),
          clipBehavior: (tree.flutterEditableText.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterEditableText.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterEditableText.hasRestorationId() ? tree.flutterEditableText.restorationId : null),
          scrollBehavior: (tree.flutterEditableText.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterEditableText.scrollBehavior) : null),
          scribbleEnabled: (tree.flutterEditableText.hasScribbleEnabled() ? tree.flutterEditableText.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.flutterEditableText.hasEnableIMEPersonalizedLearning() ? tree.flutterEditableText.enableIMEPersonalizedLearning : true),
          contentInsertionConfiguration: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.flutterEditableText.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.flutterEditableText.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.flutterEditableText.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterEditableText.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          undoController: (tree.flutterEditableText.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.flutterEditableText.undoController) : null));
    case messages.WidgetType_Constructor.flutterErrorWidgetNamedWithDetails:
      return $flutterSrcWidgetsFramework.ErrorWidget.withDetails(
          message: (tree.flutterErrorWidgetNamedWithDetails.hasMessage() ? tree.flutterErrorWidgetNamedWithDetails.message : ''),
          error: (tree.flutterErrorWidgetNamedWithDetails.hasError() ? evaluateFlutterFlutterErrorType(tree.flutterErrorWidgetNamedWithDetails.error) : null));
    case messages.WidgetType_Constructor.flutterExcludeFocus:
      return $flutterSrcWidgetsFocusScope.ExcludeFocus(
          key: (tree.flutterExcludeFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocus.key) : null),
          excluding: (tree.flutterExcludeFocus.hasExcluding() ? tree.flutterExcludeFocus.excluding : true),
          child: (tree.flutterExcludeFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocus.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterExcludeFocusTraversal:
      return $flutterSrcWidgetsFocusTraversal.ExcludeFocusTraversal(
          key: (tree.flutterExcludeFocusTraversal.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeFocusTraversal.key) : null),
          excluding: (tree.flutterExcludeFocusTraversal.hasExcluding() ? tree.flutterExcludeFocusTraversal.excluding : true),
          child: (tree.flutterExcludeFocusTraversal.hasChild() ? evaluateRequiredWidgetType(tree.flutterExcludeFocusTraversal.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterExcludeSemantics:
      return $flutterSrcWidgetsBasic.ExcludeSemantics(
          key: (tree.flutterExcludeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterExcludeSemantics.key) : null),
          excluding: (tree.flutterExcludeSemantics.hasExcluding() ? tree.flutterExcludeSemantics.excluding : true),
          child: (tree.flutterExcludeSemantics.hasChild() ? evaluateWidgetType(tree.flutterExcludeSemantics.child) : null));
    case messages.WidgetType_Constructor.flutterExpanded:
      return $flutterSrcWidgetsBasic.Expanded(
          key: (tree.flutterExpanded.hasKey() ? evaluateFlutterKeyType(tree.flutterExpanded.key) : null),
          flex: (tree.flutterExpanded.hasFlex() ? tree.flutterExpanded.flex : 1),
          child: (tree.flutterExpanded.hasChild() ? evaluateRequiredWidgetType(tree.flutterExpanded.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterFadeInImageNamedAssetNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.assetNetwork(
          key: (tree.flutterFadeInImageNamedAssetNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedAssetNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholder() ? tree.flutterFadeInImageNamedAssetNetwork.placeholder : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedAssetNetwork.hasImage() ? tree.flutterFadeInImageNamedAssetNetwork.image : missing('image')),
          imageErrorBuilder: null,
          bundle: (tree.flutterFadeInImageNamedAssetNetwork.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterFadeInImageNamedAssetNetwork.bundle) : null),
          placeholderScale: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderScale : null),
          imageScale: (tree.flutterFadeInImageNamedAssetNetwork.hasImageScale() ? tree.flutterFadeInImageNamedAssetNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedAssetNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedAssetNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedAssetNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedAssetNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedAssetNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedAssetNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedAssetNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedAssetNetwork.hasWidth() ? tree.flutterFadeInImageNamedAssetNetwork.width : null),
          height: (tree.flutterFadeInImageNamedAssetNetwork.hasHeight() ? tree.flutterFadeInImageNamedAssetNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedAssetNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedAssetNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedAssetNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedAssetNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedAssetNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedAssetNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedAssetNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedAssetNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedAssetNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedAssetNetwork.imageCacheHeight : null));
    case messages.WidgetType_Constructor.flutterFadeInImageNamedMemoryNetwork:
      return $flutterSrcWidgetsFadeInImage.FadeInImage.memoryNetwork(
          key: (tree.flutterFadeInImageNamedMemoryNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterFadeInImageNamedMemoryNetwork.key) : null),
          placeholder: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholder() ? evaluateRequiredDartUint8ListType(tree.flutterFadeInImageNamedMemoryNetwork.placeholder) : missing('placeholder')),
          placeholderErrorBuilder: null,
          image: (tree.flutterFadeInImageNamedMemoryNetwork.hasImage() ? tree.flutterFadeInImageNamedMemoryNetwork.image : missing('image')),
          imageErrorBuilder: null,
          placeholderScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderScale() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderScale : 1.0),
          imageScale: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageScale() ? tree.flutterFadeInImageNamedMemoryNetwork.imageScale : 1.0),
          excludeFromSemantics: (tree.flutterFadeInImageNamedMemoryNetwork.hasExcludeFromSemantics() ? tree.flutterFadeInImageNamedMemoryNetwork.excludeFromSemantics : false),
          imageSemanticLabel: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageSemanticLabel() ? tree.flutterFadeInImageNamedMemoryNetwork.imageSemanticLabel : null),
          fadeOutDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutDuration) : $dartCore.Duration(milliseconds: 300)),
          fadeOutCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeOutCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeOutCurve) : $flutterSrcAnimationCurves.Curves.easeOut),
          fadeInDuration: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInDuration() ? evaluateRequiredDartDurationType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInDuration) : $dartCore.Duration(milliseconds: 700)),
          fadeInCurve: (tree.flutterFadeInImageNamedMemoryNetwork.hasFadeInCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterFadeInImageNamedMemoryNetwork.fadeInCurve) : $flutterSrcAnimationCurves.Curves.easeIn),
          width: (tree.flutterFadeInImageNamedMemoryNetwork.hasWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.width : null),
          height: (tree.flutterFadeInImageNamedMemoryNetwork.hasHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.height : null),
          fit: (tree.flutterFadeInImageNamedMemoryNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.fit) : null),
          placeholderFit: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFit() ? enums.convertFlutterBoxFitType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFit) : null),
          filterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.filterQuality) : $dartUi.FilterQuality.low),
          placeholderFilterQuality: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterFadeInImageNamedMemoryNetwork.placeholderFilterQuality) : null),
          alignment: (tree.flutterFadeInImageNamedMemoryNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFadeInImageNamedMemoryNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterFadeInImageNamedMemoryNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterFadeInImageNamedMemoryNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          matchTextDirection: (tree.flutterFadeInImageNamedMemoryNetwork.hasMatchTextDirection() ? tree.flutterFadeInImageNamedMemoryNetwork.matchTextDirection : false),
          placeholderCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheWidth : null),
          placeholderCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasPlaceholderCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.placeholderCacheHeight : null),
          imageCacheWidth: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheWidth() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheWidth : null),
          imageCacheHeight: (tree.flutterFadeInImageNamedMemoryNetwork.hasImageCacheHeight() ? tree.flutterFadeInImageNamedMemoryNetwork.imageCacheHeight : null));
    case messages.WidgetType_Constructor.flutterFittedBox:
      return $flutterSrcWidgetsBasic.FittedBox(
          key: (tree.flutterFittedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFittedBox.key) : null),
          fit: (tree.flutterFittedBox.hasFit() ? enums.convertRequiredFlutterBoxFitType(tree.flutterFittedBox.fit) : $flutterSrcPaintingBoxFit.BoxFit.contain),
          alignment: (tree.flutterFittedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFittedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          clipBehavior: (tree.flutterFittedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFittedBox.clipBehavior) : $dartUi.Clip.none),
          child: (tree.flutterFittedBox.hasChild() ? evaluateWidgetType(tree.flutterFittedBox.child) : null));
    case messages.WidgetType_Constructor.flutterFlex:
      return $flutterSrcWidgetsBasic.Flex(
          key: (tree.flutterFlex.hasKey() ? evaluateFlutterKeyType(tree.flutterFlex.key) : null),
          direction: (tree.flutterFlex.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterFlex.direction) : missing('direction')),
          mainAxisAlignment: (tree.flutterFlex.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterFlex.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterFlex.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterFlex.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterFlex.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterFlex.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterFlex.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterFlex.textDirection) : null),
          verticalDirection: (tree.flutterFlex.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterFlex.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterFlex.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterFlex.textBaseline) : null),
          clipBehavior: (tree.flutterFlex.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlex.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterFlex.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterFlexible:
      return $flutterSrcWidgetsBasic.Flexible(
          key: (tree.flutterFlexible.hasKey() ? evaluateFlutterKeyType(tree.flutterFlexible.key) : null),
          flex: (tree.flutterFlexible.hasFlex() ? tree.flutterFlexible.flex : 1),
          fit: (tree.flutterFlexible.hasFit() ? enums.convertRequiredFlutterFlexFitType(tree.flutterFlexible.fit) : $flutterSrcRenderingFlex.FlexFit.loose),
          child: (tree.flutterFlexible.hasChild() ? evaluateRequiredWidgetType(tree.flutterFlexible.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterFlow:
      return $flutterSrcWidgetsBasic.Flow(
          key: (tree.flutterFlow.hasKey() ? evaluateFlutterKeyType(tree.flutterFlow.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlow.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlow.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlow.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterFlowNamedUnwrapped:
      return $flutterSrcWidgetsBasic.Flow.unwrapped(
          key: (tree.flutterFlowNamedUnwrapped.hasKey() ? evaluateFlutterKeyType(tree.flutterFlowNamedUnwrapped.key) : null),
          delegate: missing('delegate'),
          children: tree.flutterFlowNamedUnwrapped.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          clipBehavior: (tree.flutterFlowNamedUnwrapped.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterFlowNamedUnwrapped.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterFocus:
      return $flutterSrcWidgetsFocusScope.Focus(
          key: (tree.flutterFocus.hasKey() ? evaluateFlutterKeyType(tree.flutterFocus.key) : null),
          child: (tree.flutterFocus.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocus.child) : missing('child')),
          focusNode: (tree.flutterFocus.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.focusNode) : null),
          parentNode: (tree.flutterFocus.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocus.parentNode) : null),
          autofocus: (tree.flutterFocus.hasAutofocus() ? tree.flutterFocus.autofocus : false),
          onFocusChange: null,
          onKeyEvent: null,
          onKey: null,
          canRequestFocus: (tree.flutterFocus.hasCanRequestFocus() ? tree.flutterFocus.canRequestFocus : null),
          skipTraversal: (tree.flutterFocus.hasSkipTraversal() ? tree.flutterFocus.skipTraversal : null),
          descendantsAreFocusable: (tree.flutterFocus.hasDescendantsAreFocusable() ? tree.flutterFocus.descendantsAreFocusable : null),
          descendantsAreTraversable: (tree.flutterFocus.hasDescendantsAreTraversable() ? tree.flutterFocus.descendantsAreTraversable : null),
          includeSemantics: (tree.flutterFocus.hasIncludeSemantics() ? tree.flutterFocus.includeSemantics : true),
          debugLabel: (tree.flutterFocus.hasDebugLabel() ? tree.flutterFocus.debugLabel : null));
    case messages.WidgetType_Constructor.flutterFocusNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.Focus.withExternalFocusNode(
          key: (tree.flutterFocusNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusNamedWithExternalFocusNode.child) : missing('child')),
          focusNode: (tree.flutterFocusNamedWithExternalFocusNode.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.focusNode) : missing('focusNode')),
          parentNode: (tree.flutterFocusNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null,
          includeSemantics: (tree.flutterFocusNamedWithExternalFocusNode.hasIncludeSemantics() ? tree.flutterFocusNamedWithExternalFocusNode.includeSemantics : missing('includeSemantics')));
    case messages.WidgetType_Constructor.flutterFocusScope:
      return $flutterSrcWidgetsFocusScope.FocusScope(
          key: (tree.flutterFocusScope.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScope.key) : null),
          node: (tree.flutterFocusScope.hasNode() ? evaluateFlutterFocusScopeNodeType(tree.flutterFocusScope.node) : null),
          parentNode: (tree.flutterFocusScope.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScope.parentNode) : null),
          child: (tree.flutterFocusScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScope.child) : missing('child')),
          autofocus: (tree.flutterFocusScope.hasAutofocus() ? tree.flutterFocusScope.autofocus : false),
          onFocusChange: null,
          canRequestFocus: (tree.flutterFocusScope.hasCanRequestFocus() ? tree.flutterFocusScope.canRequestFocus : null),
          skipTraversal: (tree.flutterFocusScope.hasSkipTraversal() ? tree.flutterFocusScope.skipTraversal : null),
          onKeyEvent: null,
          onKey: null,
          debugLabel: (tree.flutterFocusScope.hasDebugLabel() ? tree.flutterFocusScope.debugLabel : null));
    case messages.WidgetType_Constructor.flutterFocusScopeNamedWithExternalFocusNode:
      return $flutterSrcWidgetsFocusScope.FocusScope.withExternalFocusNode(
          key: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusScopeNamedWithExternalFocusNode.key) : null),
          child: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusScopeNamedWithExternalFocusNode.child) : missing('child')),
          focusScopeNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasFocusScopeNode() ? evaluateRequiredFlutterFocusScopeNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.focusScopeNode) : missing('focusScopeNode')),
          parentNode: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasParentNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusScopeNamedWithExternalFocusNode.parentNode) : null),
          autofocus: (tree.flutterFocusScopeNamedWithExternalFocusNode.hasAutofocus() ? tree.flutterFocusScopeNamedWithExternalFocusNode.autofocus : missing('autofocus')),
          onFocusChange: null);
    case messages.WidgetType_Constructor.flutterFocusTraversalGroup:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalGroup(
          key: (tree.flutterFocusTraversalGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalGroup.key) : null),
          policy: (tree.flutterFocusTraversalGroup.hasPolicy() ? evaluateFlutterFocusTraversalPolicyType(tree.flutterFocusTraversalGroup.policy) : null),
          descendantsAreFocusable: (tree.flutterFocusTraversalGroup.hasDescendantsAreFocusable() ? tree.flutterFocusTraversalGroup.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusTraversalGroup.hasDescendantsAreTraversable() ? tree.flutterFocusTraversalGroup.descendantsAreTraversable : true),
          child: (tree.flutterFocusTraversalGroup.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalGroup.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterFocusTraversalOrder:
      return $flutterSrcWidgetsFocusTraversal.FocusTraversalOrder(
          key: (tree.flutterFocusTraversalOrder.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusTraversalOrder.key) : null),
          order: (tree.flutterFocusTraversalOrder.hasOrder() ? evaluateRequiredFlutterFocusOrderType(tree.flutterFocusTraversalOrder.order) : missing('order')),
          child: (tree.flutterFocusTraversalOrder.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusTraversalOrder.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterFocusableActionDetector:
      return $flutterSrcWidgetsActions.FocusableActionDetector(
          key: (tree.flutterFocusableActionDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterFocusableActionDetector.key) : null),
          enabled: (tree.flutterFocusableActionDetector.hasEnabled() ? tree.flutterFocusableActionDetector.enabled : true),
          focusNode: (tree.flutterFocusableActionDetector.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.flutterFocusableActionDetector.focusNode) : null),
          autofocus: (tree.flutterFocusableActionDetector.hasAutofocus() ? tree.flutterFocusableActionDetector.autofocus : false),
          descendantsAreFocusable: (tree.flutterFocusableActionDetector.hasDescendantsAreFocusable() ? tree.flutterFocusableActionDetector.descendantsAreFocusable : true),
          descendantsAreTraversable: (tree.flutterFocusableActionDetector.hasDescendantsAreTraversable() ? tree.flutterFocusableActionDetector.descendantsAreTraversable : true),
          shortcuts: null,
          actions: null,
          onShowFocusHighlight: null,
          onShowHoverHighlight: null,
          onFocusChange: null,
          includeFocusSemantics: (tree.flutterFocusableActionDetector.hasIncludeFocusSemantics() ? tree.flutterFocusableActionDetector.includeFocusSemantics : true),
          child: (tree.flutterFocusableActionDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterFocusableActionDetector.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterForm:
      return $flutterSrcWidgetsForm.Form(
          key: (tree.flutterForm.hasKey() ? evaluateFlutterKeyType(tree.flutterForm.key) : null),
          child: (tree.flutterForm.hasChild() ? evaluateRequiredWidgetType(tree.flutterForm.child) : missing('child')),
          canPop: (tree.flutterForm.hasCanPop() ? tree.flutterForm.canPop : null),
          onPopInvoked: null,
          onChanged: null,
          autovalidateMode: (tree.flutterForm.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.flutterForm.autovalidateMode) : null));
    case messages.WidgetType_Constructor.flutterFractionalTranslation:
      return $flutterSrcWidgetsBasic.FractionalTranslation(
          key: (tree.flutterFractionalTranslation.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionalTranslation.key) : null),
          translation: (tree.flutterFractionalTranslation.hasTranslation() ? evaluateRequiredDartOffsetType(tree.flutterFractionalTranslation.translation) : missing('translation')),
          transformHitTests: (tree.flutterFractionalTranslation.hasTransformHitTests() ? tree.flutterFractionalTranslation.transformHitTests : true),
          child: (tree.flutterFractionalTranslation.hasChild() ? evaluateWidgetType(tree.flutterFractionalTranslation.child) : null));
    case messages.WidgetType_Constructor.flutterFractionallySizedBox:
      return $flutterSrcWidgetsBasic.FractionallySizedBox(
          key: (tree.flutterFractionallySizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterFractionallySizedBox.key) : null),
          alignment: (tree.flutterFractionallySizedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterFractionallySizedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          widthFactor: (tree.flutterFractionallySizedBox.hasWidthFactor() ? tree.flutterFractionallySizedBox.widthFactor : null),
          heightFactor: (tree.flutterFractionallySizedBox.hasHeightFactor() ? tree.flutterFractionallySizedBox.heightFactor : null),
          child: (tree.flutterFractionallySizedBox.hasChild() ? evaluateWidgetType(tree.flutterFractionallySizedBox.child) : null));
    case messages.WidgetType_Constructor.flutterGestureDetector:
      return $flutterSrcWidgetsGestureDetector.GestureDetector(
          key: (tree.flutterGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterGestureDetector.key) : null),
          child: (tree.flutterGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterGestureDetector.child) : null),
          onTapDown: null,
          onTapUp: null,
          onTap: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSecondaryTapUp: null,
          onSecondaryTapCancel: null,
          onTertiaryTapDown: null,
          onTertiaryTapUp: null,
          onTertiaryTapCancel: null,
          onDoubleTapDown: null,
          onDoubleTap: null,
          onDoubleTapCancel: null,
          onLongPressDown: null,
          onLongPressCancel: null,
          onLongPress: null,
          onLongPressStart: null,
          onLongPressMoveUpdate: null,
          onLongPressUp: null,
          onLongPressEnd: null,
          onSecondaryLongPressDown: null,
          onSecondaryLongPressCancel: null,
          onSecondaryLongPress: null,
          onSecondaryLongPressStart: null,
          onSecondaryLongPressMoveUpdate: null,
          onSecondaryLongPressUp: null,
          onSecondaryLongPressEnd: null,
          onTertiaryLongPressDown: null,
          onTertiaryLongPressCancel: null,
          onTertiaryLongPress: null,
          onTertiaryLongPressStart: null,
          onTertiaryLongPressMoveUpdate: null,
          onTertiaryLongPressUp: null,
          onTertiaryLongPressEnd: null,
          onVerticalDragDown: null,
          onVerticalDragStart: null,
          onVerticalDragUpdate: null,
          onVerticalDragEnd: null,
          onVerticalDragCancel: null,
          onHorizontalDragDown: null,
          onHorizontalDragStart: null,
          onHorizontalDragUpdate: null,
          onHorizontalDragEnd: null,
          onHorizontalDragCancel: null,
          onForcePressStart: null,
          onForcePressPeak: null,
          onForcePressUpdate: null,
          onForcePressEnd: null,
          onPanDown: null,
          onPanStart: null,
          onPanUpdate: null,
          onPanEnd: null,
          onPanCancel: null,
          onScaleStart: null,
          onScaleUpdate: null,
          onScaleEnd: null,
          behavior: (tree.flutterGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterGestureDetector.hasExcludeFromSemantics() ? tree.flutterGestureDetector.excludeFromSemantics : false),
          dragStartBehavior: (tree.flutterGestureDetector.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGestureDetector.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          trackpadScrollCausesScale: (tree.flutterGestureDetector.hasTrackpadScrollCausesScale() ? tree.flutterGestureDetector.trackpadScrollCausesScale : false),
          trackpadScrollToScaleFactor: (tree.flutterGestureDetector.hasTrackpadScrollToScaleFactor() ? evaluateRequiredDartOffsetType(tree.flutterGestureDetector.trackpadScrollToScaleFactor) : $flutterSrcGesturesScale.kDefaultTrackpadScrollToScaleFactor),
          supportedDevices: null);
    case messages.WidgetType_Constructor.flutterGlowingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.GlowingOverscrollIndicator(
          key: (tree.flutterGlowingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterGlowingOverscrollIndicator.key) : null),
          showLeading: (tree.flutterGlowingOverscrollIndicator.hasShowLeading() ? tree.flutterGlowingOverscrollIndicator.showLeading : true),
          showTrailing: (tree.flutterGlowingOverscrollIndicator.hasShowTrailing() ? tree.flutterGlowingOverscrollIndicator.showTrailing : true),
          axisDirection: (tree.flutterGlowingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterGlowingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          color: (tree.flutterGlowingOverscrollIndicator.hasColor() ? evaluateRequiredDartColorType(tree.flutterGlowingOverscrollIndicator.color) : missing('color')),
          child: (tree.flutterGlowingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterGlowingOverscrollIndicator.child) : null));
    case messages.WidgetType_Constructor.flutterGridPaper:
      return $flutterSrcWidgetsGridPaper.GridPaper(
          key: (tree.flutterGridPaper.hasKey() ? evaluateFlutterKeyType(tree.flutterGridPaper.key) : null),
          color: (tree.flutterGridPaper.hasColor() ? evaluateRequiredDartColorType(tree.flutterGridPaper.color) : $dartUi.Color(0x7FC3E8F3)),
          interval: (tree.flutterGridPaper.hasInterval() ? tree.flutterGridPaper.interval : 100.0),
          divisions: (tree.flutterGridPaper.hasDivisions() ? tree.flutterGridPaper.divisions : 2),
          subdivisions: (tree.flutterGridPaper.hasSubdivisions() ? tree.flutterGridPaper.subdivisions : 5),
          child: (tree.flutterGridPaper.hasChild() ? evaluateWidgetType(tree.flutterGridPaper.child) : null));
    case messages.WidgetType_Constructor.flutterGridView:
      return $flutterSrcWidgetsScrollView.GridView(
          key: (tree.flutterGridView.hasKey() ? evaluateFlutterKeyType(tree.flutterGridView.key) : null),
          scrollDirection: (tree.flutterGridView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridView.hasReverse() ? tree.flutterGridView.reverse : false),
          controller: (tree.flutterGridView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridView.controller) : null),
          primary: (tree.flutterGridView.hasPrimary() ? tree.flutterGridView.primary : null),
          physics: (tree.flutterGridView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridView.physics) : null),
          shrinkWrap: (tree.flutterGridView.hasShrinkWrap() ? tree.flutterGridView.shrinkWrap : false),
          padding: (tree.flutterGridView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridView.padding) : null),
          gridDelegate: (tree.flutterGridView.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridView.gridDelegate) : missing('gridDelegate')),
          addAutomaticKeepAlives: (tree.flutterGridView.hasAddAutomaticKeepAlives() ? tree.flutterGridView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridView.hasAddRepaintBoundaries() ? tree.flutterGridView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridView.hasAddSemanticIndexes() ? tree.flutterGridView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridView.hasCacheExtent() ? tree.flutterGridView.cacheExtent : null),
          children: tree.flutterGridView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridView.hasSemanticChildCount() ? tree.flutterGridView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterGridView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridView.clipBehavior) : $dartUi.Clip.hardEdge),
          keyboardDismissBehavior: (tree.flutterGridView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridView.hasRestorationId() ? tree.flutterGridView.restorationId : null));
    case messages.WidgetType_Constructor.flutterGridViewNamedCount:
      return $flutterSrcWidgetsScrollView.GridView.count(
          key: (tree.flutterGridViewNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCount.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCount.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCount.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCount.hasReverse() ? tree.flutterGridViewNamedCount.reverse : false),
          controller: (tree.flutterGridViewNamedCount.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCount.controller) : null),
          primary: (tree.flutterGridViewNamedCount.hasPrimary() ? tree.flutterGridViewNamedCount.primary : null),
          physics: (tree.flutterGridViewNamedCount.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCount.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCount.hasShrinkWrap() ? tree.flutterGridViewNamedCount.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCount.padding) : null),
          crossAxisCount: (tree.flutterGridViewNamedCount.hasCrossAxisCount() ? tree.flutterGridViewNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterGridViewNamedCount.hasMainAxisSpacing() ? tree.flutterGridViewNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedCount.hasCrossAxisSpacing() ? tree.flutterGridViewNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedCount.hasChildAspectRatio() ? tree.flutterGridViewNamedCount.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedCount.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedCount.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedCount.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedCount.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedCount.hasAddSemanticIndexes() ? tree.flutterGridViewNamedCount.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedCount.hasCacheExtent() ? tree.flutterGridViewNamedCount.cacheExtent : null),
          children: tree.flutterGridViewNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedCount.hasSemanticChildCount() ? tree.flutterGridViewNamedCount.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCount.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCount.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCount.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCount.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCount.hasRestorationId() ? tree.flutterGridViewNamedCount.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCount.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCount.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterGridViewNamedCustom:
      return $flutterSrcWidgetsScrollView.GridView.custom(
          key: (tree.flutterGridViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterGridViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedCustom.hasReverse() ? tree.flutterGridViewNamedCustom.reverse : false),
          controller: (tree.flutterGridViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedCustom.controller) : null),
          primary: (tree.flutterGridViewNamedCustom.hasPrimary() ? tree.flutterGridViewNamedCustom.primary : null),
          physics: (tree.flutterGridViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedCustom.hasShrinkWrap() ? tree.flutterGridViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedCustom.padding) : null),
          gridDelegate: (tree.flutterGridViewNamedCustom.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterGridViewNamedCustom.gridDelegate) : missing('gridDelegate')),
          childrenDelegate: (tree.flutterGridViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterGridViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterGridViewNamedCustom.hasCacheExtent() ? tree.flutterGridViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterGridViewNamedCustom.hasSemanticChildCount() ? tree.flutterGridViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedCustom.hasRestorationId() ? tree.flutterGridViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterGridViewNamedExtent:
      return $flutterSrcWidgetsScrollView.GridView.extent(
          key: (tree.flutterGridViewNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterGridViewNamedExtent.key) : null),
          scrollDirection: (tree.flutterGridViewNamedExtent.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterGridViewNamedExtent.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterGridViewNamedExtent.hasReverse() ? tree.flutterGridViewNamedExtent.reverse : false),
          controller: (tree.flutterGridViewNamedExtent.hasController() ? evaluateFlutterScrollControllerType(tree.flutterGridViewNamedExtent.controller) : null),
          primary: (tree.flutterGridViewNamedExtent.hasPrimary() ? tree.flutterGridViewNamedExtent.primary : null),
          physics: (tree.flutterGridViewNamedExtent.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterGridViewNamedExtent.physics) : null),
          shrinkWrap: (tree.flutterGridViewNamedExtent.hasShrinkWrap() ? tree.flutterGridViewNamedExtent.shrinkWrap : false),
          padding: (tree.flutterGridViewNamedExtent.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterGridViewNamedExtent.padding) : null),
          maxCrossAxisExtent: (tree.flutterGridViewNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterGridViewNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterGridViewNamedExtent.hasMainAxisSpacing() ? tree.flutterGridViewNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterGridViewNamedExtent.hasCrossAxisSpacing() ? tree.flutterGridViewNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterGridViewNamedExtent.hasChildAspectRatio() ? tree.flutterGridViewNamedExtent.childAspectRatio : 1.0),
          addAutomaticKeepAlives: (tree.flutterGridViewNamedExtent.hasAddAutomaticKeepAlives() ? tree.flutterGridViewNamedExtent.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterGridViewNamedExtent.hasAddRepaintBoundaries() ? tree.flutterGridViewNamedExtent.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterGridViewNamedExtent.hasAddSemanticIndexes() ? tree.flutterGridViewNamedExtent.addSemanticIndexes : true),
          cacheExtent: (tree.flutterGridViewNamedExtent.hasCacheExtent() ? tree.flutterGridViewNamedExtent.cacheExtent : null),
          children: tree.flutterGridViewNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterGridViewNamedExtent.hasSemanticChildCount() ? tree.flutterGridViewNamedExtent.semanticChildCount : null),
          dragStartBehavior: (tree.flutterGridViewNamedExtent.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterGridViewNamedExtent.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterGridViewNamedExtent.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterGridViewNamedExtent.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterGridViewNamedExtent.hasRestorationId() ? tree.flutterGridViewNamedExtent.restorationId : null),
          clipBehavior: (tree.flutterGridViewNamedExtent.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterGridViewNamedExtent.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterHeroControllerScope:
      return $flutterSrcWidgetsNavigator.HeroControllerScope(
          key: (tree.flutterHeroControllerScope.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScope.key) : null),
          controller: (tree.flutterHeroControllerScope.hasController() ? evaluateRequiredFlutterHeroControllerType(tree.flutterHeroControllerScope.controller) : missing('controller')),
          child: (tree.flutterHeroControllerScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScope.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterHeroControllerScopeNamedNone:
      return $flutterSrcWidgetsNavigator.HeroControllerScope.none(
          key: (tree.flutterHeroControllerScopeNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroControllerScopeNamedNone.key) : null),
          child: (tree.flutterHeroControllerScopeNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroControllerScopeNamedNone.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterHeroMode:
      return $flutterSrcWidgetsHeroes.HeroMode(
          key: (tree.flutterHeroMode.hasKey() ? evaluateFlutterKeyType(tree.flutterHeroMode.key) : null),
          child: (tree.flutterHeroMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterHeroMode.child) : missing('child')),
          enabled: (tree.flutterHeroMode.hasEnabled() ? tree.flutterHeroMode.enabled : true));
    case messages.WidgetType_Constructor.flutterHtmlElementView:
      return $flutterSrcWidgetsPlatformView.HtmlElementView(
          key: (tree.flutterHtmlElementView.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementView.key) : null),
          viewType: (tree.flutterHtmlElementView.hasViewType() ? tree.flutterHtmlElementView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          creationParams: null);
    case messages.WidgetType_Constructor.flutterHtmlElementViewNamedFromTagName:
      return $flutterSrcWidgetsPlatformView.HtmlElementView.fromTagName(
          key: (tree.flutterHtmlElementViewNamedFromTagName.hasKey() ? evaluateFlutterKeyType(tree.flutterHtmlElementViewNamedFromTagName.key) : null),
          tagName: (tree.flutterHtmlElementViewNamedFromTagName.hasTagName() ? tree.flutterHtmlElementViewNamedFromTagName.tagName : missing('tagName')),
          isVisible: (tree.flutterHtmlElementViewNamedFromTagName.hasIsVisible() ? tree.flutterHtmlElementViewNamedFromTagName.isVisible : true),
          onElementCreated: null);
    case messages.WidgetType_Constructor.flutterIcon:
      return $flutterSrcWidgetsIcon.Icon(
          (tree.flutterIcon.hasIcon() ? evaluateFlutterIconDataType(tree.flutterIcon.icon) : null),
          key: (tree.flutterIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterIcon.key) : null),
          size: (tree.flutterIcon.hasSize() ? tree.flutterIcon.size : null),
          fill: (tree.flutterIcon.hasFill() ? tree.flutterIcon.fill : null),
          weight: (tree.flutterIcon.hasWeight() ? tree.flutterIcon.weight : null),
          grade: (tree.flutterIcon.hasGrade() ? tree.flutterIcon.grade : null),
          opticalSize: (tree.flutterIcon.hasOpticalSize() ? tree.flutterIcon.opticalSize : null),
          color: (tree.flutterIcon.hasColor() ? evaluateDartColorType(tree.flutterIcon.color) : null),
          shadows: tree.flutterIcon.shadows.map((e) => evaluateRequiredDartShadowType(e)).toList(),
          semanticLabel: (tree.flutterIcon.hasSemanticLabel() ? tree.flutterIcon.semanticLabel : null),
          textDirection: (tree.flutterIcon.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIcon.textDirection) : null));
    case messages.WidgetType_Constructor.flutterIconTheme:
      return $flutterSrcWidgetsIconTheme.IconTheme(
          key: (tree.flutterIconTheme.hasKey() ? evaluateFlutterKeyType(tree.flutterIconTheme.key) : null),
          data: (tree.flutterIconTheme.hasData() ? evaluateRequiredFlutterIconThemeDataType(tree.flutterIconTheme.data) : missing('data')),
          child: (tree.flutterIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.flutterIconTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterIgnoreBaseline:
      return $flutterSrcWidgetsBasic.IgnoreBaseline(
          key: (tree.flutterIgnoreBaseline.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnoreBaseline.key) : null),
          child: (tree.flutterIgnoreBaseline.hasChild() ? evaluateWidgetType(tree.flutterIgnoreBaseline.child) : null));
    case messages.WidgetType_Constructor.flutterIgnorePointer:
      return $flutterSrcWidgetsBasic.IgnorePointer(
          key: (tree.flutterIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterIgnorePointer.key) : null),
          ignoring: (tree.flutterIgnorePointer.hasIgnoring() ? tree.flutterIgnorePointer.ignoring : true),
          child: (tree.flutterIgnorePointer.hasChild() ? evaluateWidgetType(tree.flutterIgnorePointer.child) : null));
    case messages.WidgetType_Constructor.flutterImageFiltered:
      return $flutterSrcWidgetsImageFilter.ImageFiltered(
          key: (tree.flutterImageFiltered.hasKey() ? evaluateFlutterKeyType(tree.flutterImageFiltered.key) : null),
          imageFilter: (tree.flutterImageFiltered.hasImageFilter() ? evaluateRequiredDartImageFilterType(tree.flutterImageFiltered.imageFilter) : missing('imageFilter')),
          child: (tree.flutterImageFiltered.hasChild() ? evaluateWidgetType(tree.flutterImageFiltered.child) : null),
          enabled: (tree.flutterImageFiltered.hasEnabled() ? tree.flutterImageFiltered.enabled : true));
    case messages.WidgetType_Constructor.flutterImageIcon:
      return $flutterSrcWidgetsImageIcon.ImageIcon(
          null,
          key: (tree.flutterImageIcon.hasKey() ? evaluateFlutterKeyType(tree.flutterImageIcon.key) : null),
          size: (tree.flutterImageIcon.hasSize() ? tree.flutterImageIcon.size : null),
          color: (tree.flutterImageIcon.hasColor() ? evaluateDartColorType(tree.flutterImageIcon.color) : null),
          semanticLabel: (tree.flutterImageIcon.hasSemanticLabel() ? tree.flutterImageIcon.semanticLabel : null));
    case messages.WidgetType_Constructor.flutterImageNamedAsset:
      return $flutterSrcWidgetsImage.Image.asset(
          (tree.flutterImageNamedAsset.hasName() ? tree.flutterImageNamedAsset.name : missing('name')),
          key: (tree.flutterImageNamedAsset.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedAsset.key) : null),
          bundle: (tree.flutterImageNamedAsset.hasBundle() ? evaluateFlutterAssetBundleType(tree.flutterImageNamedAsset.bundle) : null),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedAsset.hasSemanticLabel() ? tree.flutterImageNamedAsset.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedAsset.hasExcludeFromSemantics() ? tree.flutterImageNamedAsset.excludeFromSemantics : false),
          scale: (tree.flutterImageNamedAsset.hasScale() ? tree.flutterImageNamedAsset.scale : null),
          width: (tree.flutterImageNamedAsset.hasWidth() ? tree.flutterImageNamedAsset.width : null),
          height: (tree.flutterImageNamedAsset.hasHeight() ? tree.flutterImageNamedAsset.height : null),
          color: (tree.flutterImageNamedAsset.hasColor() ? evaluateDartColorType(tree.flutterImageNamedAsset.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedAsset.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedAsset.colorBlendMode) : null),
          fit: (tree.flutterImageNamedAsset.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedAsset.fit) : null),
          alignment: (tree.flutterImageNamedAsset.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedAsset.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedAsset.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedAsset.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedAsset.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedAsset.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedAsset.hasMatchTextDirection() ? tree.flutterImageNamedAsset.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedAsset.hasGaplessPlayback() ? tree.flutterImageNamedAsset.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedAsset.hasIsAntiAlias() ? tree.flutterImageNamedAsset.isAntiAlias : false),
          package: (tree.flutterImageNamedAsset.hasPackage() ? tree.flutterImageNamedAsset.package : null),
          filterQuality: (tree.flutterImageNamedAsset.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedAsset.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedAsset.hasCacheWidth() ? tree.flutterImageNamedAsset.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedAsset.hasCacheHeight() ? tree.flutterImageNamedAsset.cacheHeight : null));
    case messages.WidgetType_Constructor.flutterImageNamedFile:
      return $flutterSrcWidgetsImage.Image.file(
          (tree.flutterImageNamedFile.hasFile() ? evaluateRequiredDartFileType(tree.flutterImageNamedFile.file) : missing('file')),
          key: (tree.flutterImageNamedFile.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedFile.key) : null),
          scale: (tree.flutterImageNamedFile.hasScale() ? tree.flutterImageNamedFile.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedFile.hasSemanticLabel() ? tree.flutterImageNamedFile.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedFile.hasExcludeFromSemantics() ? tree.flutterImageNamedFile.excludeFromSemantics : false),
          width: (tree.flutterImageNamedFile.hasWidth() ? tree.flutterImageNamedFile.width : null),
          height: (tree.flutterImageNamedFile.hasHeight() ? tree.flutterImageNamedFile.height : null),
          color: (tree.flutterImageNamedFile.hasColor() ? evaluateDartColorType(tree.flutterImageNamedFile.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedFile.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedFile.colorBlendMode) : null),
          fit: (tree.flutterImageNamedFile.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedFile.fit) : null),
          alignment: (tree.flutterImageNamedFile.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedFile.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedFile.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedFile.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedFile.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedFile.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedFile.hasMatchTextDirection() ? tree.flutterImageNamedFile.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedFile.hasGaplessPlayback() ? tree.flutterImageNamedFile.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedFile.hasIsAntiAlias() ? tree.flutterImageNamedFile.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedFile.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedFile.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedFile.hasCacheWidth() ? tree.flutterImageNamedFile.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedFile.hasCacheHeight() ? tree.flutterImageNamedFile.cacheHeight : null));
    case messages.WidgetType_Constructor.flutterImageNamedMemory:
      return $flutterSrcWidgetsImage.Image.memory(
          (tree.flutterImageNamedMemory.hasBytes() ? evaluateRequiredDartUint8ListType(tree.flutterImageNamedMemory.bytes) : missing('bytes')),
          key: (tree.flutterImageNamedMemory.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedMemory.key) : null),
          scale: (tree.flutterImageNamedMemory.hasScale() ? tree.flutterImageNamedMemory.scale : 1.0),
          frameBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedMemory.hasSemanticLabel() ? tree.flutterImageNamedMemory.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedMemory.hasExcludeFromSemantics() ? tree.flutterImageNamedMemory.excludeFromSemantics : false),
          width: (tree.flutterImageNamedMemory.hasWidth() ? tree.flutterImageNamedMemory.width : null),
          height: (tree.flutterImageNamedMemory.hasHeight() ? tree.flutterImageNamedMemory.height : null),
          color: (tree.flutterImageNamedMemory.hasColor() ? evaluateDartColorType(tree.flutterImageNamedMemory.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedMemory.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedMemory.colorBlendMode) : null),
          fit: (tree.flutterImageNamedMemory.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedMemory.fit) : null),
          alignment: (tree.flutterImageNamedMemory.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedMemory.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedMemory.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedMemory.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedMemory.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedMemory.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedMemory.hasMatchTextDirection() ? tree.flutterImageNamedMemory.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedMemory.hasGaplessPlayback() ? tree.flutterImageNamedMemory.gaplessPlayback : false),
          isAntiAlias: (tree.flutterImageNamedMemory.hasIsAntiAlias() ? tree.flutterImageNamedMemory.isAntiAlias : false),
          filterQuality: (tree.flutterImageNamedMemory.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedMemory.filterQuality) : $dartUi.FilterQuality.low),
          cacheWidth: (tree.flutterImageNamedMemory.hasCacheWidth() ? tree.flutterImageNamedMemory.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedMemory.hasCacheHeight() ? tree.flutterImageNamedMemory.cacheHeight : null));
    case messages.WidgetType_Constructor.flutterImageNamedNetwork:
      return $flutterSrcWidgetsImage.Image.network(
          (tree.flutterImageNamedNetwork.hasSrc() ? tree.flutterImageNamedNetwork.src : missing('src')),
          key: (tree.flutterImageNamedNetwork.hasKey() ? evaluateFlutterKeyType(tree.flutterImageNamedNetwork.key) : null),
          scale: (tree.flutterImageNamedNetwork.hasScale() ? tree.flutterImageNamedNetwork.scale : 1.0),
          frameBuilder: null,
          loadingBuilder: null,
          errorBuilder: null,
          semanticLabel: (tree.flutterImageNamedNetwork.hasSemanticLabel() ? tree.flutterImageNamedNetwork.semanticLabel : null),
          excludeFromSemantics: (tree.flutterImageNamedNetwork.hasExcludeFromSemantics() ? tree.flutterImageNamedNetwork.excludeFromSemantics : false),
          width: (tree.flutterImageNamedNetwork.hasWidth() ? tree.flutterImageNamedNetwork.width : null),
          height: (tree.flutterImageNamedNetwork.hasHeight() ? tree.flutterImageNamedNetwork.height : null),
          color: (tree.flutterImageNamedNetwork.hasColor() ? evaluateDartColorType(tree.flutterImageNamedNetwork.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterImageNamedNetwork.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterImageNamedNetwork.colorBlendMode) : null),
          fit: (tree.flutterImageNamedNetwork.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterImageNamedNetwork.fit) : null),
          alignment: (tree.flutterImageNamedNetwork.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterImageNamedNetwork.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterImageNamedNetwork.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterImageNamedNetwork.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterImageNamedNetwork.hasCenterSlice() ? evaluateDartRectType(tree.flutterImageNamedNetwork.centerSlice) : null),
          matchTextDirection: (tree.flutterImageNamedNetwork.hasMatchTextDirection() ? tree.flutterImageNamedNetwork.matchTextDirection : false),
          gaplessPlayback: (tree.flutterImageNamedNetwork.hasGaplessPlayback() ? tree.flutterImageNamedNetwork.gaplessPlayback : false),
          filterQuality: (tree.flutterImageNamedNetwork.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterImageNamedNetwork.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterImageNamedNetwork.hasIsAntiAlias() ? tree.flutterImageNamedNetwork.isAntiAlias : false),
          headers: null,
          cacheWidth: (tree.flutterImageNamedNetwork.hasCacheWidth() ? tree.flutterImageNamedNetwork.cacheWidth : null),
          cacheHeight: (tree.flutterImageNamedNetwork.hasCacheHeight() ? tree.flutterImageNamedNetwork.cacheHeight : null));
    case messages.WidgetType_Constructor.flutterIndexedSemantics:
      return $flutterSrcWidgetsBasic.IndexedSemantics(
          key: (tree.flutterIndexedSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedSemantics.key) : null),
          index: (tree.flutterIndexedSemantics.hasIndex() ? tree.flutterIndexedSemantics.index : missing('index')),
          child: (tree.flutterIndexedSemantics.hasChild() ? evaluateWidgetType(tree.flutterIndexedSemantics.child) : null));
    case messages.WidgetType_Constructor.flutterIndexedStack:
      return $flutterSrcWidgetsBasic.IndexedStack(
          key: (tree.flutterIndexedStack.hasKey() ? evaluateFlutterKeyType(tree.flutterIndexedStack.key) : null),
          alignment: (tree.flutterIndexedStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterIndexedStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterIndexedStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterIndexedStack.textDirection) : null),
          clipBehavior: (tree.flutterIndexedStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterIndexedStack.clipBehavior) : $dartUi.Clip.hardEdge),
          sizing: (tree.flutterIndexedStack.hasSizing() ? enums.convertRequiredFlutterStackFitType(tree.flutterIndexedStack.sizing) : $flutterSrcRenderingStack.StackFit.loose),
          index: (tree.flutterIndexedStack.hasIndex() ? tree.flutterIndexedStack.index : 0),
          children: tree.flutterIndexedStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterInteractiveViewer:
      return $flutterSrcWidgetsInteractiveViewer.InteractiveViewer(
          key: (tree.flutterInteractiveViewer.hasKey() ? evaluateFlutterKeyType(tree.flutterInteractiveViewer.key) : null),
          clipBehavior: (tree.flutterInteractiveViewer.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterInteractiveViewer.clipBehavior) : $dartUi.Clip.hardEdge),
          panAxis: (tree.flutterInteractiveViewer.hasPanAxis() ? enums.convertRequiredFlutterPanAxisType(tree.flutterInteractiveViewer.panAxis) : $flutterSrcWidgetsInteractiveViewer.PanAxis.free),
          boundaryMargin: (tree.flutterInteractiveViewer.hasBoundaryMargin() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterInteractiveViewer.boundaryMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          constrained: (tree.flutterInteractiveViewer.hasConstrained() ? tree.flutterInteractiveViewer.constrained : true),
          maxScale: (tree.flutterInteractiveViewer.hasMaxScale() ? tree.flutterInteractiveViewer.maxScale : 2.5),
          minScale: (tree.flutterInteractiveViewer.hasMinScale() ? tree.flutterInteractiveViewer.minScale : 0.8),
          interactionEndFrictionCoefficient: (tree.flutterInteractiveViewer.hasInteractionEndFrictionCoefficient() ? tree.flutterInteractiveViewer.interactionEndFrictionCoefficient : 0.0000135),
          onInteractionEnd: null,
          onInteractionStart: null,
          onInteractionUpdate: null,
          panEnabled: (tree.flutterInteractiveViewer.hasPanEnabled() ? tree.flutterInteractiveViewer.panEnabled : true),
          scaleEnabled: (tree.flutterInteractiveViewer.hasScaleEnabled() ? tree.flutterInteractiveViewer.scaleEnabled : true),
          scaleFactor: (tree.flutterInteractiveViewer.hasScaleFactor() ? tree.flutterInteractiveViewer.scaleFactor : $flutterSrcGesturesScale.kDefaultMouseScrollToScaleFactor),
          transformationController: (tree.flutterInteractiveViewer.hasTransformationController() ? evaluateFlutterTransformationControllerType(tree.flutterInteractiveViewer.transformationController) : null),
          alignment: (tree.flutterInteractiveViewer.hasAlignment() ? evaluateFlutterAlignmentType(tree.flutterInteractiveViewer.alignment) : null),
          trackpadScrollCausesScale: (tree.flutterInteractiveViewer.hasTrackpadScrollCausesScale() ? tree.flutterInteractiveViewer.trackpadScrollCausesScale : false),
          child: (tree.flutterInteractiveViewer.hasChild() ? evaluateRequiredWidgetType(tree.flutterInteractiveViewer.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterIntrinsicHeight:
      return $flutterSrcWidgetsBasic.IntrinsicHeight(
          key: (tree.flutterIntrinsicHeight.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicHeight.key) : null),
          child: (tree.flutterIntrinsicHeight.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicHeight.child) : null));
    case messages.WidgetType_Constructor.flutterIntrinsicWidth:
      return $flutterSrcWidgetsBasic.IntrinsicWidth(
          key: (tree.flutterIntrinsicWidth.hasKey() ? evaluateFlutterKeyType(tree.flutterIntrinsicWidth.key) : null),
          stepWidth: (tree.flutterIntrinsicWidth.hasStepWidth() ? tree.flutterIntrinsicWidth.stepWidth : null),
          stepHeight: (tree.flutterIntrinsicWidth.hasStepHeight() ? tree.flutterIntrinsicWidth.stepHeight : null),
          child: (tree.flutterIntrinsicWidth.hasChild() ? evaluateWidgetType(tree.flutterIntrinsicWidth.child) : null));
    case messages.WidgetType_Constructor.flutterKeepAlive:
      return $flutterSrcWidgetsSliver.KeepAlive(
          key: (tree.flutterKeepAlive.hasKey() ? evaluateFlutterKeyType(tree.flutterKeepAlive.key) : null),
          keepAlive: (tree.flutterKeepAlive.hasKeepAlive() ? tree.flutterKeepAlive.keepAlive : missing('keepAlive')),
          child: (tree.flutterKeepAlive.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeepAlive.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterKeyboardListener:
      return $flutterSrcWidgetsKeyboardListener.KeyboardListener(
          key: (tree.flutterKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyboardListener.key) : null),
          focusNode: (tree.flutterKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterKeyboardListener.hasAutofocus() ? tree.flutterKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterKeyboardListener.hasIncludeSemantics() ? tree.flutterKeyboardListener.includeSemantics : true),
          onKeyEvent: null,
          child: (tree.flutterKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyboardListener.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterKeyedSubtree:
      return $flutterSrcWidgetsBasic.KeyedSubtree(
          key: (tree.flutterKeyedSubtree.hasKey() ? evaluateFlutterKeyType(tree.flutterKeyedSubtree.key) : null),
          child: (tree.flutterKeyedSubtree.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtree.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterKeyedSubtreeNamedWrap:
      return $flutterSrcWidgetsBasic.KeyedSubtree.wrap(
          (tree.flutterKeyedSubtreeNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterKeyedSubtreeNamedWrap.child) : missing('child')),
          (tree.flutterKeyedSubtreeNamedWrap.hasChildIndex() ? tree.flutterKeyedSubtreeNamedWrap.childIndex : missing('childIndex')));
    case messages.WidgetType_Constructor.flutterLimitedBox:
      return $flutterSrcWidgetsBasic.LimitedBox(
          key: (tree.flutterLimitedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterLimitedBox.key) : null),
          maxWidth: (tree.flutterLimitedBox.hasMaxWidth() ? tree.flutterLimitedBox.maxWidth : $dartCore.double.infinity),
          maxHeight: (tree.flutterLimitedBox.hasMaxHeight() ? tree.flutterLimitedBox.maxHeight : $dartCore.double.infinity),
          child: (tree.flutterLimitedBox.hasChild() ? evaluateWidgetType(tree.flutterLimitedBox.child) : null));
    case messages.WidgetType_Constructor.flutterListBody:
      return $flutterSrcWidgetsBasic.ListBody(
          key: (tree.flutterListBody.hasKey() ? evaluateFlutterKeyType(tree.flutterListBody.key) : null),
          mainAxis: (tree.flutterListBody.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.flutterListBody.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListBody.hasReverse() ? tree.flutterListBody.reverse : false),
          children: tree.flutterListBody.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterListView:
      return $flutterSrcWidgetsScrollView.ListView(
          key: (tree.flutterListView.hasKey() ? evaluateFlutterKeyType(tree.flutterListView.key) : null),
          scrollDirection: (tree.flutterListView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListView.hasReverse() ? tree.flutterListView.reverse : false),
          controller: (tree.flutterListView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListView.controller) : null),
          primary: (tree.flutterListView.hasPrimary() ? tree.flutterListView.primary : null),
          physics: (tree.flutterListView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListView.physics) : null),
          shrinkWrap: (tree.flutterListView.hasShrinkWrap() ? tree.flutterListView.shrinkWrap : false),
          padding: (tree.flutterListView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListView.padding) : null),
          itemExtent: (tree.flutterListView.hasItemExtent() ? tree.flutterListView.itemExtent : null),
          itemExtentBuilder: null,
          prototypeItem: (tree.flutterListView.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListView.prototypeItem) : null),
          addAutomaticKeepAlives: (tree.flutterListView.hasAddAutomaticKeepAlives() ? tree.flutterListView.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterListView.hasAddRepaintBoundaries() ? tree.flutterListView.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterListView.hasAddSemanticIndexes() ? tree.flutterListView.addSemanticIndexes : true),
          cacheExtent: (tree.flutterListView.hasCacheExtent() ? tree.flutterListView.cacheExtent : null),
          children: tree.flutterListView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          semanticChildCount: (tree.flutterListView.hasSemanticChildCount() ? tree.flutterListView.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListView.hasRestorationId() ? tree.flutterListView.restorationId : null),
          clipBehavior: (tree.flutterListView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterListViewNamedCustom:
      return $flutterSrcWidgetsScrollView.ListView.custom(
          key: (tree.flutterListViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterListViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterListViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterListViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterListViewNamedCustom.hasReverse() ? tree.flutterListViewNamedCustom.reverse : false),
          controller: (tree.flutterListViewNamedCustom.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListViewNamedCustom.controller) : null),
          primary: (tree.flutterListViewNamedCustom.hasPrimary() ? tree.flutterListViewNamedCustom.primary : null),
          physics: (tree.flutterListViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListViewNamedCustom.physics) : null),
          shrinkWrap: (tree.flutterListViewNamedCustom.hasShrinkWrap() ? tree.flutterListViewNamedCustom.shrinkWrap : false),
          padding: (tree.flutterListViewNamedCustom.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterListViewNamedCustom.padding) : null),
          itemExtent: (tree.flutterListViewNamedCustom.hasItemExtent() ? tree.flutterListViewNamedCustom.itemExtent : null),
          prototypeItem: (tree.flutterListViewNamedCustom.hasPrototypeItem() ? evaluateWidgetType(tree.flutterListViewNamedCustom.prototypeItem) : null),
          itemExtentBuilder: null,
          childrenDelegate: (tree.flutterListViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterListViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          cacheExtent: (tree.flutterListViewNamedCustom.hasCacheExtent() ? tree.flutterListViewNamedCustom.cacheExtent : null),
          semanticChildCount: (tree.flutterListViewNamedCustom.hasSemanticChildCount() ? tree.flutterListViewNamedCustom.semanticChildCount : null),
          dragStartBehavior: (tree.flutterListViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterListViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          keyboardDismissBehavior: (tree.flutterListViewNamedCustom.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterListViewNamedCustom.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual),
          restorationId: (tree.flutterListViewNamedCustom.hasRestorationId() ? tree.flutterListViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterListViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterListWheelScrollView:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView(
          key: (tree.flutterListWheelScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollView.key) : null),
          controller: (tree.flutterListWheelScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollView.controller) : null),
          physics: (tree.flutterListWheelScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollView.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollView.hasDiameterRatio() ? tree.flutterListWheelScrollView.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollView.hasPerspective() ? tree.flutterListWheelScrollView.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollView.hasOffAxisFraction() ? tree.flutterListWheelScrollView.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollView.hasUseMagnifier() ? tree.flutterListWheelScrollView.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollView.hasMagnification() ? tree.flutterListWheelScrollView.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollView.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollView.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollView.hasItemExtent() ? tree.flutterListWheelScrollView.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollView.hasSqueeze() ? tree.flutterListWheelScrollView.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollView.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollView.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollView.hasRestorationId() ? tree.flutterListWheelScrollView.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollView.scrollBehavior) : null),
          children: tree.flutterListWheelScrollView.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterListWheelScrollViewNamedUseDelegate:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelScrollView.useDelegate(
          key: (tree.flutterListWheelScrollViewNamedUseDelegate.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelScrollViewNamedUseDelegate.key) : null),
          controller: (tree.flutterListWheelScrollViewNamedUseDelegate.hasController() ? evaluateFlutterScrollControllerType(tree.flutterListWheelScrollViewNamedUseDelegate.controller) : null),
          physics: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterListWheelScrollViewNamedUseDelegate.physics) : null),
          diameterRatio: (tree.flutterListWheelScrollViewNamedUseDelegate.hasDiameterRatio() ? tree.flutterListWheelScrollViewNamedUseDelegate.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelScrollViewNamedUseDelegate.hasPerspective() ? tree.flutterListWheelScrollViewNamedUseDelegate.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOffAxisFraction() ? tree.flutterListWheelScrollViewNamedUseDelegate.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelScrollViewNamedUseDelegate.hasUseMagnifier() ? tree.flutterListWheelScrollViewNamedUseDelegate.useMagnifier : false),
          magnification: (tree.flutterListWheelScrollViewNamedUseDelegate.hasMagnification() ? tree.flutterListWheelScrollViewNamedUseDelegate.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelScrollViewNamedUseDelegate.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelScrollViewNamedUseDelegate.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelScrollViewNamedUseDelegate.hasItemExtent() ? tree.flutterListWheelScrollViewNamedUseDelegate.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelScrollViewNamedUseDelegate.hasSqueeze() ? tree.flutterListWheelScrollViewNamedUseDelegate.squeeze : 1.0),
          onSelectedItemChanged: null,
          renderChildrenOutsideViewport: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelScrollViewNamedUseDelegate.renderChildrenOutsideViewport : false),
          clipBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelScrollViewNamedUseDelegate.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterListWheelScrollViewNamedUseDelegate.hasRestorationId() ? tree.flutterListWheelScrollViewNamedUseDelegate.restorationId : null),
          scrollBehavior: (tree.flutterListWheelScrollViewNamedUseDelegate.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterListWheelScrollViewNamedUseDelegate.scrollBehavior) : null),
          childDelegate: (tree.flutterListWheelScrollViewNamedUseDelegate.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelScrollViewNamedUseDelegate.childDelegate) : missing('childDelegate')));
    case messages.WidgetType_Constructor.flutterListWheelViewport:
      return $flutterSrcWidgetsListWheelScrollView.ListWheelViewport(
          key: (tree.flutterListWheelViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterListWheelViewport.key) : null),
          diameterRatio: (tree.flutterListWheelViewport.hasDiameterRatio() ? tree.flutterListWheelViewport.diameterRatio : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultDiameterRatio),
          perspective: (tree.flutterListWheelViewport.hasPerspective() ? tree.flutterListWheelViewport.perspective : $flutterSrcRenderingListWheelViewport.RenderListWheelViewport.defaultPerspective),
          offAxisFraction: (tree.flutterListWheelViewport.hasOffAxisFraction() ? tree.flutterListWheelViewport.offAxisFraction : 0.0),
          useMagnifier: (tree.flutterListWheelViewport.hasUseMagnifier() ? tree.flutterListWheelViewport.useMagnifier : false),
          magnification: (tree.flutterListWheelViewport.hasMagnification() ? tree.flutterListWheelViewport.magnification : 1.0),
          overAndUnderCenterOpacity: (tree.flutterListWheelViewport.hasOverAndUnderCenterOpacity() ? tree.flutterListWheelViewport.overAndUnderCenterOpacity : 1.0),
          itemExtent: (tree.flutterListWheelViewport.hasItemExtent() ? tree.flutterListWheelViewport.itemExtent : missing('itemExtent')),
          squeeze: (tree.flutterListWheelViewport.hasSqueeze() ? tree.flutterListWheelViewport.squeeze : 1.0),
          renderChildrenOutsideViewport: (tree.flutterListWheelViewport.hasRenderChildrenOutsideViewport() ? tree.flutterListWheelViewport.renderChildrenOutsideViewport : false),
          offset: (tree.flutterListWheelViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterListWheelViewport.offset) : missing('offset')),
          childDelegate: (tree.flutterListWheelViewport.hasChildDelegate() ? evaluateRequiredFlutterListWheelChildDelegateType(tree.flutterListWheelViewport.childDelegate) : missing('childDelegate')),
          clipBehavior: (tree.flutterListWheelViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterListWheelViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterListener:
      return $flutterSrcWidgetsBasic.Listener(
          key: (tree.flutterListener.hasKey() ? evaluateFlutterKeyType(tree.flutterListener.key) : null),
          onPointerDown: null,
          onPointerMove: null,
          onPointerUp: null,
          onPointerHover: null,
          onPointerCancel: null,
          onPointerPanZoomStart: null,
          onPointerPanZoomUpdate: null,
          onPointerPanZoomEnd: null,
          onPointerSignal: null,
          behavior: (tree.flutterListener.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterListener.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterListener.hasChild() ? evaluateWidgetType(tree.flutterListener.child) : null));
    case messages.WidgetType_Constructor.flutterLocalizationsNamedOverride:
      return $flutterSrcWidgetsLocalizations.Localizations.override(
          key: (tree.flutterLocalizationsNamedOverride.hasKey() ? evaluateFlutterKeyType(tree.flutterLocalizationsNamedOverride.key) : null),
          context: (tree.flutterLocalizationsNamedOverride.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterLocalizationsNamedOverride.context) : missing('context')),
          locale: (tree.flutterLocalizationsNamedOverride.hasLocale() ? evaluateDartLocaleType(tree.flutterLocalizationsNamedOverride.locale) : null),
          delegates: null,
          child: (tree.flutterLocalizationsNamedOverride.hasChild() ? evaluateWidgetType(tree.flutterLocalizationsNamedOverride.child) : null));
    case messages.WidgetType_Constructor.flutterLongPressDraggable:
      return $flutterSrcWidgetsDragTarget.LongPressDraggable(
          key: (tree.flutterLongPressDraggable.hasKey() ? evaluateFlutterKeyType(tree.flutterLongPressDraggable.key) : null),
          child: (tree.flutterLongPressDraggable.hasChild() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.child) : missing('child')),
          feedback: (tree.flutterLongPressDraggable.hasFeedback() ? evaluateRequiredWidgetType(tree.flutterLongPressDraggable.feedback) : missing('feedback')),
          axis: (tree.flutterLongPressDraggable.hasAxis() ? enums.convertFlutterAxisType(tree.flutterLongPressDraggable.axis) : null),
          childWhenDragging: (tree.flutterLongPressDraggable.hasChildWhenDragging() ? evaluateWidgetType(tree.flutterLongPressDraggable.childWhenDragging) : null),
          feedbackOffset: (tree.flutterLongPressDraggable.hasFeedbackOffset() ? evaluateRequiredDartOffsetType(tree.flutterLongPressDraggable.feedbackOffset) : $dartUi.Offset.zero),
          maxSimultaneousDrags: (tree.flutterLongPressDraggable.hasMaxSimultaneousDrags() ? tree.flutterLongPressDraggable.maxSimultaneousDrags : null),
          onDragStarted: null,
          onDragUpdate: null,
          onDraggableCanceled: null,
          onDragEnd: null,
          onDragCompleted: null,
          hapticFeedbackOnStart: (tree.flutterLongPressDraggable.hasHapticFeedbackOnStart() ? tree.flutterLongPressDraggable.hapticFeedbackOnStart : true),
          ignoringFeedbackSemantics: (tree.flutterLongPressDraggable.hasIgnoringFeedbackSemantics() ? tree.flutterLongPressDraggable.ignoringFeedbackSemantics : true),
          ignoringFeedbackPointer: (tree.flutterLongPressDraggable.hasIgnoringFeedbackPointer() ? tree.flutterLongPressDraggable.ignoringFeedbackPointer : true),
          delay: (tree.flutterLongPressDraggable.hasDelay() ? evaluateRequiredDartDurationType(tree.flutterLongPressDraggable.delay) : $flutterSrcGesturesConstants.kLongPressTimeout),
          allowedButtonsFilter: null);
    case messages.WidgetType_Constructor.flutterLookupBoundary:
      return $flutterSrcWidgetsLookupBoundary.LookupBoundary(
          key: (tree.flutterLookupBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterLookupBoundary.key) : null),
          child: (tree.flutterLookupBoundary.hasChild() ? evaluateRequiredWidgetType(tree.flutterLookupBoundary.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterMediaQuery:
      return $flutterSrcWidgetsMediaQuery.MediaQuery(
          key: (tree.flutterMediaQuery.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQuery.key) : null),
          data: (tree.flutterMediaQuery.hasData() ? evaluateRequiredFlutterMediaQueryDataType(tree.flutterMediaQuery.data) : missing('data')),
          child: (tree.flutterMediaQuery.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQuery.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterMediaQueryNamedRemovePadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removePadding(
          key: (tree.flutterMediaQueryNamedRemovePadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemovePadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemovePadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemovePadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemovePadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemovePadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemovePadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemovePadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemovePadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemovePadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemovePadding.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterMediaQueryNamedRemoveViewInsets:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewInsets(
          key: (tree.flutterMediaQueryNamedRemoveViewInsets.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewInsets.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewInsets.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewInsets.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewInsets.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewInsets.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewInsets.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewInsets.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterMediaQueryNamedRemoveViewPadding:
      return $flutterSrcWidgetsMediaQuery.MediaQuery.removeViewPadding(
          key: (tree.flutterMediaQueryNamedRemoveViewPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterMediaQueryNamedRemoveViewPadding.key) : null),
          context: (tree.flutterMediaQueryNamedRemoveViewPadding.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.flutterMediaQueryNamedRemoveViewPadding.context) : missing('context')),
          removeLeft: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveLeft() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeLeft : false),
          removeTop: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveTop() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeTop : false),
          removeRight: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveRight() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeRight : false),
          removeBottom: (tree.flutterMediaQueryNamedRemoveViewPadding.hasRemoveBottom() ? tree.flutterMediaQueryNamedRemoveViewPadding.removeBottom : false),
          child: (tree.flutterMediaQueryNamedRemoveViewPadding.hasChild() ? evaluateRequiredWidgetType(tree.flutterMediaQueryNamedRemoveViewPadding.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterMergeSemantics:
      return $flutterSrcWidgetsBasic.MergeSemantics(
          key: (tree.flutterMergeSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterMergeSemantics.key) : null),
          child: (tree.flutterMergeSemantics.hasChild() ? evaluateWidgetType(tree.flutterMergeSemantics.child) : null));
    case messages.WidgetType_Constructor.flutterMetaData:
      return $flutterSrcWidgetsBasic.MetaData(
          key: (tree.flutterMetaData.hasKey() ? evaluateFlutterKeyType(tree.flutterMetaData.key) : null),
          behavior: (tree.flutterMetaData.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterMetaData.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          child: (tree.flutterMetaData.hasChild() ? evaluateWidgetType(tree.flutterMetaData.child) : null));
    case messages.WidgetType_Constructor.flutterModalBarrier:
      return $flutterSrcWidgetsModalBarrier.ModalBarrier(
          key: (tree.flutterModalBarrier.hasKey() ? evaluateFlutterKeyType(tree.flutterModalBarrier.key) : null),
          color: (tree.flutterModalBarrier.hasColor() ? evaluateDartColorType(tree.flutterModalBarrier.color) : null),
          dismissible: (tree.flutterModalBarrier.hasDismissible() ? tree.flutterModalBarrier.dismissible : true),
          onDismiss: null,
          semanticsLabel: (tree.flutterModalBarrier.hasSemanticsLabel() ? tree.flutterModalBarrier.semanticsLabel : null),
          barrierSemanticsDismissible: (tree.flutterModalBarrier.hasBarrierSemanticsDismissible() ? tree.flutterModalBarrier.barrierSemanticsDismissible : true),
          clipDetailsNotifier: null,
          semanticsOnTapHint: (tree.flutterModalBarrier.hasSemanticsOnTapHint() ? tree.flutterModalBarrier.semanticsOnTapHint : null));
    case messages.WidgetType_Constructor.flutterMouseRegion:
      return $flutterSrcWidgetsBasic.MouseRegion(
          key: (tree.flutterMouseRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterMouseRegion.key) : null),
          onEnter: null,
          onExit: null,
          onHover: null,
          opaque: (tree.flutterMouseRegion.hasOpaque() ? tree.flutterMouseRegion.opaque : true),
          hitTestBehavior: (tree.flutterMouseRegion.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterMouseRegion.hitTestBehavior) : null),
          child: (tree.flutterMouseRegion.hasChild() ? evaluateWidgetType(tree.flutterMouseRegion.child) : null));
    case messages.WidgetType_Constructor.flutterNavigationToolbar:
      return $flutterSrcWidgetsNavigationToolbar.NavigationToolbar(
          key: (tree.flutterNavigationToolbar.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigationToolbar.key) : null),
          leading: (tree.flutterNavigationToolbar.hasLeading() ? evaluateWidgetType(tree.flutterNavigationToolbar.leading) : null),
          middle: (tree.flutterNavigationToolbar.hasMiddle() ? evaluateWidgetType(tree.flutterNavigationToolbar.middle) : null),
          trailing: (tree.flutterNavigationToolbar.hasTrailing() ? evaluateWidgetType(tree.flutterNavigationToolbar.trailing) : null),
          centerMiddle: (tree.flutterNavigationToolbar.hasCenterMiddle() ? tree.flutterNavigationToolbar.centerMiddle : true),
          middleSpacing: (tree.flutterNavigationToolbar.hasMiddleSpacing() ? tree.flutterNavigationToolbar.middleSpacing : $flutterSrcWidgetsNavigationToolbar.NavigationToolbar.kMiddleSpacing));
    case messages.WidgetType_Constructor.flutterNavigator:
      return $flutterSrcWidgetsNavigator.Navigator(
          key: (tree.flutterNavigator.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigator.key) : null),
          onPopPage: null,
          initialRoute: (tree.flutterNavigator.hasInitialRoute() ? tree.flutterNavigator.initialRoute : null),
          onGenerateRoute: null,
          onUnknownRoute: null,
          reportsRouteUpdateToEngine: (tree.flutterNavigator.hasReportsRouteUpdateToEngine() ? tree.flutterNavigator.reportsRouteUpdateToEngine : false),
          clipBehavior: (tree.flutterNavigator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNavigator.clipBehavior) : $dartUi.Clip.hardEdge),
          observers: tree.flutterNavigator.observers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          requestFocus: (tree.flutterNavigator.hasRequestFocus() ? tree.flutterNavigator.requestFocus : true),
          restorationScopeId: (tree.flutterNavigator.hasRestorationScopeId() ? tree.flutterNavigator.restorationScopeId : null),
          routeTraversalEdgeBehavior: (tree.flutterNavigator.hasRouteTraversalEdgeBehavior() ? enums.convertRequiredFlutterTraversalEdgeBehaviorType(tree.flutterNavigator.routeTraversalEdgeBehavior) : $flutterSrcWidgetsNavigator.kDefaultRouteTraversalEdgeBehavior));
    case messages.WidgetType_Constructor.flutterNavigatorPopHandler:
      return $flutterSrcWidgetsNavigatorPopHandler.NavigatorPopHandler(
          key: (tree.flutterNavigatorPopHandler.hasKey() ? evaluateFlutterKeyType(tree.flutterNavigatorPopHandler.key) : null),
          onPop: null,
          enabled: (tree.flutterNavigatorPopHandler.hasEnabled() ? tree.flutterNavigatorPopHandler.enabled : true),
          child: (tree.flutterNavigatorPopHandler.hasChild() ? evaluateRequiredWidgetType(tree.flutterNavigatorPopHandler.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterNestedScrollViewViewport:
      return $flutterSrcWidgetsNestedScrollView.NestedScrollViewViewport(
          key: (tree.flutterNestedScrollViewViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.key) : null),
          axisDirection: (tree.flutterNestedScrollViewViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterNestedScrollViewViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterNestedScrollViewViewport.crossAxisDirection) : null),
          anchor: (tree.flutterNestedScrollViewViewport.hasAnchor() ? tree.flutterNestedScrollViewViewport.anchor : 0.0),
          offset: (tree.flutterNestedScrollViewViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterNestedScrollViewViewport.offset) : missing('offset')),
          center: (tree.flutterNestedScrollViewViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterNestedScrollViewViewport.center) : null),
          slivers: tree.flutterNestedScrollViewViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList(),
          handle: (tree.flutterNestedScrollViewViewport.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterNestedScrollViewViewport.handle) : missing('handle')),
          clipBehavior: (tree.flutterNestedScrollViewViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterNestedScrollViewViewport.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterNotificationListener:
      return $flutterSrcWidgetsNotificationListener.NotificationListener(
          key: (tree.flutterNotificationListener.hasKey() ? evaluateFlutterKeyType(tree.flutterNotificationListener.key) : null),
          child: (tree.flutterNotificationListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterNotificationListener.child) : missing('child')),
          onNotification: null);
    case messages.WidgetType_Constructor.flutterOffstage:
      return $flutterSrcWidgetsBasic.Offstage(
          key: (tree.flutterOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterOffstage.key) : null),
          offstage: (tree.flutterOffstage.hasOffstage() ? tree.flutterOffstage.offstage : true),
          child: (tree.flutterOffstage.hasChild() ? evaluateWidgetType(tree.flutterOffstage.child) : null));
    case messages.WidgetType_Constructor.flutterOpacity:
      return $flutterSrcWidgetsBasic.Opacity(
          key: (tree.flutterOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterOpacity.key) : null),
          opacity: (tree.flutterOpacity.hasOpacity() ? tree.flutterOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterOpacity.hasAlwaysIncludeSemantics() ? tree.flutterOpacity.alwaysIncludeSemantics : false),
          child: (tree.flutterOpacity.hasChild() ? evaluateWidgetType(tree.flutterOpacity.child) : null));
    case messages.WidgetType_Constructor.flutterOverflowBar:
      return $flutterSrcWidgetsOverflowBar.OverflowBar(
          key: (tree.flutterOverflowBar.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBar.key) : null),
          spacing: (tree.flutterOverflowBar.hasSpacing() ? tree.flutterOverflowBar.spacing : 0.0),
          alignment: (tree.flutterOverflowBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.flutterOverflowBar.alignment) : null),
          overflowSpacing: (tree.flutterOverflowBar.hasOverflowSpacing() ? tree.flutterOverflowBar.overflowSpacing : 0.0),
          overflowAlignment: (tree.flutterOverflowBar.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.flutterOverflowBar.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.start),
          overflowDirection: (tree.flutterOverflowBar.hasOverflowDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterOverflowBar.overflowDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textDirection: (tree.flutterOverflowBar.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterOverflowBar.textDirection) : null),
          clipBehavior: (tree.flutterOverflowBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverflowBar.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterOverflowBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterOverflowBox:
      return $flutterSrcWidgetsBasic.OverflowBox(
          key: (tree.flutterOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterOverflowBox.key) : null),
          alignment: (tree.flutterOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          minWidth: (tree.flutterOverflowBox.hasMinWidth() ? tree.flutterOverflowBox.minWidth : null),
          maxWidth: (tree.flutterOverflowBox.hasMaxWidth() ? tree.flutterOverflowBox.maxWidth : null),
          minHeight: (tree.flutterOverflowBox.hasMinHeight() ? tree.flutterOverflowBox.minHeight : null),
          maxHeight: (tree.flutterOverflowBox.hasMaxHeight() ? tree.flutterOverflowBox.maxHeight : null),
          child: (tree.flutterOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterOverflowBox.child) : null));
    case messages.WidgetType_Constructor.flutterOverlay:
      return $flutterSrcWidgetsOverlay.Overlay(
          key: (tree.flutterOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterOverlay.key) : null),
          clipBehavior: (tree.flutterOverlay.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterOverlay.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.flutterPadding:
      return $flutterSrcWidgetsBasic.Padding(
          key: (tree.flutterPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterPadding.key) : null),
          padding: (tree.flutterPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterPadding.padding) : missing('padding')),
          child: (tree.flutterPadding.hasChild() ? evaluateWidgetType(tree.flutterPadding.child) : null));
    case messages.WidgetType_Constructor.flutterPageStorage:
      return $flutterSrcWidgetsPageStorage.PageStorage(
          key: (tree.flutterPageStorage.hasKey() ? evaluateFlutterKeyType(tree.flutterPageStorage.key) : null),
          bucket: (tree.flutterPageStorage.hasBucket() ? evaluateRequiredFlutterPageStorageBucketType(tree.flutterPageStorage.bucket) : missing('bucket')),
          child: (tree.flutterPageStorage.hasChild() ? evaluateRequiredWidgetType(tree.flutterPageStorage.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPageView:
      return $flutterSrcWidgetsPageView.PageView(
          key: (tree.flutterPageView.hasKey() ? evaluateFlutterKeyType(tree.flutterPageView.key) : null),
          scrollDirection: (tree.flutterPageView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageView.hasReverse() ? tree.flutterPageView.reverse : false),
          controller: (tree.flutterPageView.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageView.controller) : null),
          physics: (tree.flutterPageView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageView.physics) : null),
          pageSnapping: (tree.flutterPageView.hasPageSnapping() ? tree.flutterPageView.pageSnapping : true),
          onPageChanged: null,
          children: tree.flutterPageView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dragStartBehavior: (tree.flutterPageView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageView.hasAllowImplicitScrolling() ? tree.flutterPageView.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageView.hasRestorationId() ? tree.flutterPageView.restorationId : null),
          clipBehavior: (tree.flutterPageView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageView.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageView.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageView.scrollBehavior) : null),
          padEnds: (tree.flutterPageView.hasPadEnds() ? tree.flutterPageView.padEnds : true));
    case messages.WidgetType_Constructor.flutterPageViewNamedCustom:
      return $flutterSrcWidgetsPageView.PageView.custom(
          key: (tree.flutterPageViewNamedCustom.hasKey() ? evaluateFlutterKeyType(tree.flutterPageViewNamedCustom.key) : null),
          scrollDirection: (tree.flutterPageViewNamedCustom.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterPageViewNamedCustom.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          reverse: (tree.flutterPageViewNamedCustom.hasReverse() ? tree.flutterPageViewNamedCustom.reverse : false),
          controller: (tree.flutterPageViewNamedCustom.hasController() ? evaluateFlutterPageControllerType(tree.flutterPageViewNamedCustom.controller) : null),
          physics: (tree.flutterPageViewNamedCustom.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterPageViewNamedCustom.physics) : null),
          pageSnapping: (tree.flutterPageViewNamedCustom.hasPageSnapping() ? tree.flutterPageViewNamedCustom.pageSnapping : true),
          onPageChanged: null,
          childrenDelegate: (tree.flutterPageViewNamedCustom.hasChildrenDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterPageViewNamedCustom.childrenDelegate) : missing('childrenDelegate')),
          dragStartBehavior: (tree.flutterPageViewNamedCustom.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterPageViewNamedCustom.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          allowImplicitScrolling: (tree.flutterPageViewNamedCustom.hasAllowImplicitScrolling() ? tree.flutterPageViewNamedCustom.allowImplicitScrolling : false),
          restorationId: (tree.flutterPageViewNamedCustom.hasRestorationId() ? tree.flutterPageViewNamedCustom.restorationId : null),
          clipBehavior: (tree.flutterPageViewNamedCustom.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPageViewNamedCustom.clipBehavior) : $dartUi.Clip.hardEdge),
          scrollBehavior: (tree.flutterPageViewNamedCustom.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.flutterPageViewNamedCustom.scrollBehavior) : null),
          padEnds: (tree.flutterPageViewNamedCustom.hasPadEnds() ? tree.flutterPageViewNamedCustom.padEnds : true));
    case messages.WidgetType_Constructor.flutterPerformanceOverlay:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay(
          key: (tree.flutterPerformanceOverlay.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlay.key) : null),
          optionsMask: (tree.flutterPerformanceOverlay.hasOptionsMask() ? tree.flutterPerformanceOverlay.optionsMask : 0),
          rasterizerThreshold: (tree.flutterPerformanceOverlay.hasRasterizerThreshold() ? tree.flutterPerformanceOverlay.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlay.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlay.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlay.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlay.checkerboardOffscreenLayers : false));
    case messages.WidgetType_Constructor.flutterPerformanceOverlayNamedAllEnabled:
      return $flutterSrcWidgetsPerformanceOverlay.PerformanceOverlay.allEnabled(
          key: (tree.flutterPerformanceOverlayNamedAllEnabled.hasKey() ? evaluateFlutterKeyType(tree.flutterPerformanceOverlayNamedAllEnabled.key) : null),
          rasterizerThreshold: (tree.flutterPerformanceOverlayNamedAllEnabled.hasRasterizerThreshold() ? tree.flutterPerformanceOverlayNamedAllEnabled.rasterizerThreshold : 0),
          checkerboardRasterCacheImages: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardRasterCacheImages() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterPerformanceOverlayNamedAllEnabled.hasCheckerboardOffscreenLayers() ? tree.flutterPerformanceOverlayNamedAllEnabled.checkerboardOffscreenLayers : false));
    case messages.WidgetType_Constructor.flutterPhysicalModel:
      return $flutterSrcWidgetsBasic.PhysicalModel(
          key: (tree.flutterPhysicalModel.hasKey() ? evaluateFlutterKeyType(tree.flutterPhysicalModel.key) : null),
          shape: (tree.flutterPhysicalModel.hasShape() ? enums.convertRequiredFlutterBoxShapeType(tree.flutterPhysicalModel.shape) : $flutterSrcPaintingBoxBorder.BoxShape.rectangle),
          clipBehavior: (tree.flutterPhysicalModel.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterPhysicalModel.clipBehavior) : $dartUi.Clip.none),
          borderRadius: (tree.flutterPhysicalModel.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.flutterPhysicalModel.borderRadius) : null),
          elevation: (tree.flutterPhysicalModel.hasElevation() ? tree.flutterPhysicalModel.elevation : 0.0),
          color: (tree.flutterPhysicalModel.hasColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.color) : missing('color')),
          shadowColor: (tree.flutterPhysicalModel.hasShadowColor() ? evaluateRequiredDartColorType(tree.flutterPhysicalModel.shadowColor) : $dartUi.Color(0xFF000000)),
          child: (tree.flutterPhysicalModel.hasChild() ? evaluateWidgetType(tree.flutterPhysicalModel.child) : null));
    case messages.WidgetType_Constructor.flutterPlaceholder:
      return $flutterSrcWidgetsPlaceholder.Placeholder(
          key: (tree.flutterPlaceholder.hasKey() ? evaluateFlutterKeyType(tree.flutterPlaceholder.key) : null),
          color: (tree.flutterPlaceholder.hasColor() ? evaluateRequiredDartColorType(tree.flutterPlaceholder.color) : $dartUi.Color(0xFF455A64)),
          strokeWidth: (tree.flutterPlaceholder.hasStrokeWidth() ? tree.flutterPlaceholder.strokeWidth : 2.0),
          fallbackWidth: (tree.flutterPlaceholder.hasFallbackWidth() ? tree.flutterPlaceholder.fallbackWidth : 400.0),
          fallbackHeight: (tree.flutterPlaceholder.hasFallbackHeight() ? tree.flutterPlaceholder.fallbackHeight : 400.0),
          child: (tree.flutterPlaceholder.hasChild() ? evaluateWidgetType(tree.flutterPlaceholder.child) : null));
    case messages.WidgetType_Constructor.flutterPlatformMenuBar:
      return $flutterSrcWidgetsPlatformMenuBar.PlatformMenuBar(
          key: (tree.flutterPlatformMenuBar.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformMenuBar.key) : null),
          menus: tree.flutterPlatformMenuBar.menus.map((e) => evaluateRequiredFlutterPlatformMenuItemType(e)).toList(),
          child: (tree.flutterPlatformMenuBar.hasChild() ? evaluateWidgetType(tree.flutterPlatformMenuBar.child) : null));
    case messages.WidgetType_Constructor.flutterPlatformSelectableRegionContextMenu:
      return $flutterSrcWidgetsPlatformSelectableRegionContextMenuIo.PlatformSelectableRegionContextMenu(
          child: (tree.flutterPlatformSelectableRegionContextMenu.hasChild() ? evaluateRequiredWidgetType(tree.flutterPlatformSelectableRegionContextMenu.child) : missing('child')),
          key: (tree.flutterPlatformSelectableRegionContextMenu.hasKey() ? evaluateFlutterKeyType(tree.flutterPlatformSelectableRegionContextMenu.key) : null));
    case messages.WidgetType_Constructor.flutterPopScope:
      return $flutterSrcWidgetsPopScope.PopScope(
          key: (tree.flutterPopScope.hasKey() ? evaluateFlutterKeyType(tree.flutterPopScope.key) : null),
          child: (tree.flutterPopScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterPopScope.child) : missing('child')),
          canPop: (tree.flutterPopScope.hasCanPop() ? tree.flutterPopScope.canPop : true),
          onPopInvoked: null);
    case messages.WidgetType_Constructor.flutterPositioned:
      return $flutterSrcWidgetsBasic.Positioned(
          key: (tree.flutterPositioned.hasKey() ? evaluateFlutterKeyType(tree.flutterPositioned.key) : null),
          left: (tree.flutterPositioned.hasLeft() ? tree.flutterPositioned.left : null),
          top: (tree.flutterPositioned.hasTop() ? tree.flutterPositioned.top : null),
          right: (tree.flutterPositioned.hasRight() ? tree.flutterPositioned.right : null),
          bottom: (tree.flutterPositioned.hasBottom() ? tree.flutterPositioned.bottom : null),
          width: (tree.flutterPositioned.hasWidth() ? tree.flutterPositioned.width : null),
          height: (tree.flutterPositioned.hasHeight() ? tree.flutterPositioned.height : null),
          child: (tree.flutterPositioned.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositioned.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPositionedDirectional:
      return $flutterSrcWidgetsBasic.PositionedDirectional(
          key: (tree.flutterPositionedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedDirectional.key) : null),
          start: (tree.flutterPositionedDirectional.hasStart() ? tree.flutterPositionedDirectional.start : null),
          top: (tree.flutterPositionedDirectional.hasTop() ? tree.flutterPositionedDirectional.top : null),
          end: (tree.flutterPositionedDirectional.hasEnd() ? tree.flutterPositionedDirectional.end : null),
          bottom: (tree.flutterPositionedDirectional.hasBottom() ? tree.flutterPositionedDirectional.bottom : null),
          width: (tree.flutterPositionedDirectional.hasWidth() ? tree.flutterPositionedDirectional.width : null),
          height: (tree.flutterPositionedDirectional.hasHeight() ? tree.flutterPositionedDirectional.height : null),
          child: (tree.flutterPositionedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedDirectional.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPositionedNamedDirectional:
      return $flutterSrcWidgetsBasic.Positioned.directional(
          key: (tree.flutterPositionedNamedDirectional.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedDirectional.key) : null),
          textDirection: (tree.flutterPositionedNamedDirectional.hasTextDirection() ? enums.convertRequiredDartTextDirectionType(tree.flutterPositionedNamedDirectional.textDirection) : missing('textDirection')),
          start: (tree.flutterPositionedNamedDirectional.hasStart() ? tree.flutterPositionedNamedDirectional.start : null),
          top: (tree.flutterPositionedNamedDirectional.hasTop() ? tree.flutterPositionedNamedDirectional.top : null),
          end: (tree.flutterPositionedNamedDirectional.hasEnd() ? tree.flutterPositionedNamedDirectional.end : null),
          bottom: (tree.flutterPositionedNamedDirectional.hasBottom() ? tree.flutterPositionedNamedDirectional.bottom : null),
          width: (tree.flutterPositionedNamedDirectional.hasWidth() ? tree.flutterPositionedNamedDirectional.width : null),
          height: (tree.flutterPositionedNamedDirectional.hasHeight() ? tree.flutterPositionedNamedDirectional.height : null),
          child: (tree.flutterPositionedNamedDirectional.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedDirectional.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPositionedNamedFill:
      return $flutterSrcWidgetsBasic.Positioned.fill(
          key: (tree.flutterPositionedNamedFill.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFill.key) : null),
          left: (tree.flutterPositionedNamedFill.hasLeft() ? tree.flutterPositionedNamedFill.left : 0.0),
          top: (tree.flutterPositionedNamedFill.hasTop() ? tree.flutterPositionedNamedFill.top : 0.0),
          right: (tree.flutterPositionedNamedFill.hasRight() ? tree.flutterPositionedNamedFill.right : 0.0),
          bottom: (tree.flutterPositionedNamedFill.hasBottom() ? tree.flutterPositionedNamedFill.bottom : 0.0),
          child: (tree.flutterPositionedNamedFill.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFill.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPositionedNamedFromRect:
      return $flutterSrcWidgetsBasic.Positioned.fromRect(
          key: (tree.flutterPositionedNamedFromRect.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFromRect.key) : null),
          rect: (tree.flutterPositionedNamedFromRect.hasRect() ? evaluateRequiredDartRectType(tree.flutterPositionedNamedFromRect.rect) : missing('rect')),
          child: (tree.flutterPositionedNamedFromRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFromRect.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPositionedNamedFromRelativeRect:
      return $flutterSrcWidgetsBasic.Positioned.fromRelativeRect(
          key: (tree.flutterPositionedNamedFromRelativeRect.hasKey() ? evaluateFlutterKeyType(tree.flutterPositionedNamedFromRelativeRect.key) : null),
          rect: (tree.flutterPositionedNamedFromRelativeRect.hasRect() ? evaluateRequiredFlutterRelativeRectType(tree.flutterPositionedNamedFromRelativeRect.rect) : missing('rect')),
          child: (tree.flutterPositionedNamedFromRelativeRect.hasChild() ? evaluateRequiredWidgetType(tree.flutterPositionedNamedFromRelativeRect.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPreferredSize:
      return $flutterSrcWidgetsPreferredSize.PreferredSize(
          key: (tree.flutterPreferredSize.hasKey() ? evaluateFlutterKeyType(tree.flutterPreferredSize.key) : null),
          preferredSize: (tree.flutterPreferredSize.hasPreferredSize() ? evaluateRequiredDartSizeType(tree.flutterPreferredSize.preferredSize) : missing('preferredSize')),
          child: (tree.flutterPreferredSize.hasChild() ? evaluateRequiredWidgetType(tree.flutterPreferredSize.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPrimaryScrollController:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController(
          key: (tree.flutterPrimaryScrollController.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollController.key) : null),
          controller: (tree.flutterPrimaryScrollController.hasController() ? evaluateRequiredFlutterScrollControllerType(tree.flutterPrimaryScrollController.controller) : missing('controller')),
          scrollDirection: (tree.flutterPrimaryScrollController.hasScrollDirection() ? enums.convertFlutterAxisType(tree.flutterPrimaryScrollController.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          child: (tree.flutterPrimaryScrollController.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollController.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterPrimaryScrollControllerNamedNone:
      return $flutterSrcWidgetsPrimaryScrollController.PrimaryScrollController.none(
          key: (tree.flutterPrimaryScrollControllerNamedNone.hasKey() ? evaluateFlutterKeyType(tree.flutterPrimaryScrollControllerNamedNone.key) : null),
          child: (tree.flutterPrimaryScrollControllerNamedNone.hasChild() ? evaluateRequiredWidgetType(tree.flutterPrimaryScrollControllerNamedNone.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterProjectMyApp:
      return $flutterProjectMain.MyApp(
          key: (tree.flutterProjectMyApp.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyApp.key) : null));
    case messages.WidgetType_Constructor.flutterProjectMyHomePage:
      return $flutterProjectMain.MyHomePage(
          key: (tree.flutterProjectMyHomePage.hasKey() ? evaluateFlutterKeyType(tree.flutterProjectMyHomePage.key) : null),
          title: (tree.flutterProjectMyHomePage.hasTitle() ? tree.flutterProjectMyHomePage.title : missing('title')));
    case messages.WidgetType_Constructor.flutterRawGestureDetector:
      return $flutterSrcWidgetsGestureDetector.RawGestureDetector(
          key: (tree.flutterRawGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterRawGestureDetector.key) : null),
          child: (tree.flutterRawGestureDetector.hasChild() ? evaluateWidgetType(tree.flutterRawGestureDetector.child) : null),
          behavior: (tree.flutterRawGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterRawGestureDetector.behavior) : null),
          excludeFromSemantics: (tree.flutterRawGestureDetector.hasExcludeFromSemantics() ? tree.flutterRawGestureDetector.excludeFromSemantics : false),
          semantics: null);
    case messages.WidgetType_Constructor.flutterRawImage:
      return $flutterSrcWidgetsBasic.RawImage(
          key: (tree.flutterRawImage.hasKey() ? evaluateFlutterKeyType(tree.flutterRawImage.key) : null),
          image: null,
          debugImageLabel: (tree.flutterRawImage.hasDebugImageLabel() ? tree.flutterRawImage.debugImageLabel : null),
          width: (tree.flutterRawImage.hasWidth() ? tree.flutterRawImage.width : null),
          height: (tree.flutterRawImage.hasHeight() ? tree.flutterRawImage.height : null),
          scale: (tree.flutterRawImage.hasScale() ? tree.flutterRawImage.scale : 1.0),
          color: (tree.flutterRawImage.hasColor() ? evaluateDartColorType(tree.flutterRawImage.color) : null),
          opacity: null,
          colorBlendMode: (tree.flutterRawImage.hasColorBlendMode() ? enums.convertDartBlendModeType(tree.flutterRawImage.colorBlendMode) : null),
          fit: (tree.flutterRawImage.hasFit() ? enums.convertFlutterBoxFitType(tree.flutterRawImage.fit) : null),
          alignment: (tree.flutterRawImage.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterRawImage.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          repeat: (tree.flutterRawImage.hasRepeat() ? enums.convertRequiredFlutterImageRepeatType(tree.flutterRawImage.repeat) : $flutterSrcPaintingDecorationImage.ImageRepeat.noRepeat),
          centerSlice: (tree.flutterRawImage.hasCenterSlice() ? evaluateDartRectType(tree.flutterRawImage.centerSlice) : null),
          matchTextDirection: (tree.flutterRawImage.hasMatchTextDirection() ? tree.flutterRawImage.matchTextDirection : false),
          invertColors: (tree.flutterRawImage.hasInvertColors() ? tree.flutterRawImage.invertColors : false),
          filterQuality: (tree.flutterRawImage.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterRawImage.filterQuality) : $dartUi.FilterQuality.low),
          isAntiAlias: (tree.flutterRawImage.hasIsAntiAlias() ? tree.flutterRawImage.isAntiAlias : false));
    case messages.WidgetType_Constructor.flutterRawKeyboardListener:
      return $flutterSrcWidgetsRawKeyboardListener.RawKeyboardListener(
          key: (tree.flutterRawKeyboardListener.hasKey() ? evaluateFlutterKeyType(tree.flutterRawKeyboardListener.key) : null),
          focusNode: (tree.flutterRawKeyboardListener.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterRawKeyboardListener.focusNode) : missing('focusNode')),
          autofocus: (tree.flutterRawKeyboardListener.hasAutofocus() ? tree.flutterRawKeyboardListener.autofocus : false),
          includeSemantics: (tree.flutterRawKeyboardListener.hasIncludeSemantics() ? tree.flutterRawKeyboardListener.includeSemantics : true),
          onKey: null,
          child: (tree.flutterRawKeyboardListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawKeyboardListener.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterRawMagnifier:
      return $flutterSrcWidgetsMagnifier.RawMagnifier(
          key: (tree.flutterRawMagnifier.hasKey() ? evaluateFlutterKeyType(tree.flutterRawMagnifier.key) : null),
          child: (tree.flutterRawMagnifier.hasChild() ? evaluateWidgetType(tree.flutterRawMagnifier.child) : null),
          decoration: (tree.flutterRawMagnifier.hasDecoration() ? evaluateRequiredFlutterMagnifierDecorationType(tree.flutterRawMagnifier.decoration) : $flutterSrcWidgetsMagnifier.MagnifierDecoration()),
          focalPointOffset: (tree.flutterRawMagnifier.hasFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.flutterRawMagnifier.focalPointOffset) : $dartUi.Offset.zero),
          magnificationScale: (tree.flutterRawMagnifier.hasMagnificationScale() ? tree.flutterRawMagnifier.magnificationScale : 1),
          size: (tree.flutterRawMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.flutterRawMagnifier.size) : missing('size')));
    case messages.WidgetType_Constructor.flutterRawScrollbar:
      return $flutterSrcWidgetsScrollbar.RawScrollbar(
          key: (tree.flutterRawScrollbar.hasKey() ? evaluateFlutterKeyType(tree.flutterRawScrollbar.key) : null),
          child: (tree.flutterRawScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.flutterRawScrollbar.child) : missing('child')),
          controller: (tree.flutterRawScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.flutterRawScrollbar.controller) : null),
          thumbVisibility: (tree.flutterRawScrollbar.hasThumbVisibility() ? tree.flutterRawScrollbar.thumbVisibility : null),
          shape: (tree.flutterRawScrollbar.hasShape() ? evaluateFlutterOutlinedBorderType(tree.flutterRawScrollbar.shape) : null),
          radius: (tree.flutterRawScrollbar.hasRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.radius) : null),
          thickness: (tree.flutterRawScrollbar.hasThickness() ? tree.flutterRawScrollbar.thickness : null),
          thumbColor: (tree.flutterRawScrollbar.hasThumbColor() ? evaluateDartColorType(tree.flutterRawScrollbar.thumbColor) : null),
          minThumbLength: (tree.flutterRawScrollbar.hasMinThumbLength() ? tree.flutterRawScrollbar.minThumbLength : 18.0),
          minOverscrollLength: (tree.flutterRawScrollbar.hasMinOverscrollLength() ? tree.flutterRawScrollbar.minOverscrollLength : null),
          trackVisibility: (tree.flutterRawScrollbar.hasTrackVisibility() ? tree.flutterRawScrollbar.trackVisibility : null),
          trackRadius: (tree.flutterRawScrollbar.hasTrackRadius() ? evaluateDartRadiusType(tree.flutterRawScrollbar.trackRadius) : null),
          trackColor: (tree.flutterRawScrollbar.hasTrackColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackColor) : null),
          trackBorderColor: (tree.flutterRawScrollbar.hasTrackBorderColor() ? evaluateDartColorType(tree.flutterRawScrollbar.trackBorderColor) : null),
          fadeDuration: (tree.flutterRawScrollbar.hasFadeDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.fadeDuration) : $dartCore.Duration(milliseconds: 300)),
          timeToFade: (tree.flutterRawScrollbar.hasTimeToFade() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.timeToFade) : $dartCore.Duration(milliseconds: 600)),
          pressDuration: (tree.flutterRawScrollbar.hasPressDuration() ? evaluateRequiredDartDurationType(tree.flutterRawScrollbar.pressDuration) : $dartCore.Duration.zero),
          interactive: (tree.flutterRawScrollbar.hasInteractive() ? tree.flutterRawScrollbar.interactive : null),
          scrollbarOrientation: (tree.flutterRawScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.flutterRawScrollbar.scrollbarOrientation) : null),
          mainAxisMargin: (tree.flutterRawScrollbar.hasMainAxisMargin() ? tree.flutterRawScrollbar.mainAxisMargin : 0.0),
          crossAxisMargin: (tree.flutterRawScrollbar.hasCrossAxisMargin() ? tree.flutterRawScrollbar.crossAxisMargin : 0.0),
          padding: (tree.flutterRawScrollbar.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.flutterRawScrollbar.padding) : null));
    case messages.WidgetType_Constructor.flutterReorderableDelayedDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDelayedDragStartListener(
          key: (tree.flutterReorderableDelayedDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDelayedDragStartListener.key) : null),
          child: (tree.flutterReorderableDelayedDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDelayedDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDelayedDragStartListener.hasIndex() ? tree.flutterReorderableDelayedDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDelayedDragStartListener.hasEnabled() ? tree.flutterReorderableDelayedDragStartListener.enabled : true));
    case messages.WidgetType_Constructor.flutterReorderableDragStartListener:
      return $flutterSrcWidgetsReorderableList.ReorderableDragStartListener(
          key: (tree.flutterReorderableDragStartListener.hasKey() ? evaluateFlutterKeyType(tree.flutterReorderableDragStartListener.key) : null),
          child: (tree.flutterReorderableDragStartListener.hasChild() ? evaluateRequiredWidgetType(tree.flutterReorderableDragStartListener.child) : missing('child')),
          index: (tree.flutterReorderableDragStartListener.hasIndex() ? tree.flutterReorderableDragStartListener.index : missing('index')),
          enabled: (tree.flutterReorderableDragStartListener.hasEnabled() ? tree.flutterReorderableDragStartListener.enabled : true));
    case messages.WidgetType_Constructor.flutterRepaintBoundary:
      return $flutterSrcWidgetsBasic.RepaintBoundary(
          key: (tree.flutterRepaintBoundary.hasKey() ? evaluateFlutterKeyType(tree.flutterRepaintBoundary.key) : null),
          child: (tree.flutterRepaintBoundary.hasChild() ? evaluateWidgetType(tree.flutterRepaintBoundary.child) : null));
    case messages.WidgetType_Constructor.flutterRepaintBoundaryNamedWrap:
      return $flutterSrcWidgetsBasic.RepaintBoundary.wrap(
          (tree.flutterRepaintBoundaryNamedWrap.hasChild() ? evaluateRequiredWidgetType(tree.flutterRepaintBoundaryNamedWrap.child) : missing('child')),
          (tree.flutterRepaintBoundaryNamedWrap.hasChildIndex() ? tree.flutterRepaintBoundaryNamedWrap.childIndex : missing('childIndex')));
    case messages.WidgetType_Constructor.flutterRestorationScope:
      return $flutterSrcWidgetsRestoration.RestorationScope(
          key: (tree.flutterRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRestorationScope.key) : null),
          restorationId: (tree.flutterRestorationScope.hasRestorationId() ? tree.flutterRestorationScope.restorationId : null),
          child: (tree.flutterRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRestorationScope.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterRichText:
      return $flutterSrcWidgetsBasic.RichText(
          key: (tree.flutterRichText.hasKey() ? evaluateFlutterKeyType(tree.flutterRichText.key) : null),
          text: (tree.flutterRichText.hasText() ? evaluateRequiredFlutterInlineSpanType(tree.flutterRichText.text) : missing('text')),
          textAlign: (tree.flutterRichText.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.flutterRichText.textAlign) : $dartUi.TextAlign.start),
          textDirection: (tree.flutterRichText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRichText.textDirection) : null),
          softWrap: (tree.flutterRichText.hasSoftWrap() ? tree.flutterRichText.softWrap : true),
          overflow: (tree.flutterRichText.hasOverflow() ? enums.convertRequiredFlutterTextOverflowType(tree.flutterRichText.overflow) : $flutterSrcPaintingTextPainter.TextOverflow.clip),
          textScaler: (tree.flutterRichText.hasTextScaler() ? evaluateRequiredFlutterTextScalerType(tree.flutterRichText.textScaler) : $flutterSrcPaintingTextScaler.TextScaler.noScaling),
          maxLines: (tree.flutterRichText.hasMaxLines() ? tree.flutterRichText.maxLines : null),
          locale: (tree.flutterRichText.hasLocale() ? evaluateDartLocaleType(tree.flutterRichText.locale) : null),
          strutStyle: (tree.flutterRichText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterRichText.strutStyle) : null),
          textWidthBasis: (tree.flutterRichText.hasTextWidthBasis() ? enums.convertRequiredFlutterTextWidthBasisType(tree.flutterRichText.textWidthBasis) : $flutterSrcPaintingTextPainter.TextWidthBasis.parent),
          textHeightBehavior: (tree.flutterRichText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterRichText.textHeightBehavior) : null),
          selectionRegistrar: (tree.flutterRichText.hasSelectionRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterRichText.selectionRegistrar) : null),
          selectionColor: (tree.flutterRichText.hasSelectionColor() ? evaluateDartColorType(tree.flutterRichText.selectionColor) : null));
    case messages.WidgetType_Constructor.flutterRootRestorationScope:
      return $flutterSrcWidgetsRestoration.RootRestorationScope(
          key: (tree.flutterRootRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterRootRestorationScope.key) : null),
          restorationId: (tree.flutterRootRestorationScope.hasRestorationId() ? tree.flutterRootRestorationScope.restorationId : null),
          child: (tree.flutterRootRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterRootRestorationScope.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterRootWidget:
      return $flutterSrcWidgetsBinding.RootWidget(
          key: (tree.flutterRootWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterRootWidget.key) : null),
          child: (tree.flutterRootWidget.hasChild() ? evaluateWidgetType(tree.flutterRootWidget.child) : null),
          debugShortDescription: (tree.flutterRootWidget.hasDebugShortDescription() ? tree.flutterRootWidget.debugShortDescription : null));
    case messages.WidgetType_Constructor.flutterRotatedBox:
      return $flutterSrcWidgetsBasic.RotatedBox(
          key: (tree.flutterRotatedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterRotatedBox.key) : null),
          quarterTurns: (tree.flutterRotatedBox.hasQuarterTurns() ? tree.flutterRotatedBox.quarterTurns : missing('quarterTurns')),
          child: (tree.flutterRotatedBox.hasChild() ? evaluateWidgetType(tree.flutterRotatedBox.child) : null));
    case messages.WidgetType_Constructor.flutterRow:
      return $flutterSrcWidgetsBasic.Row(
          key: (tree.flutterRow.hasKey() ? evaluateFlutterKeyType(tree.flutterRow.key) : null),
          mainAxisAlignment: (tree.flutterRow.hasMainAxisAlignment() ? enums.convertRequiredFlutterMainAxisAlignmentType(tree.flutterRow.mainAxisAlignment) : $flutterSrcRenderingFlex.MainAxisAlignment.start),
          mainAxisSize: (tree.flutterRow.hasMainAxisSize() ? enums.convertRequiredFlutterMainAxisSizeType(tree.flutterRow.mainAxisSize) : $flutterSrcRenderingFlex.MainAxisSize.max),
          crossAxisAlignment: (tree.flutterRow.hasCrossAxisAlignment() ? enums.convertRequiredFlutterCrossAxisAlignmentType(tree.flutterRow.crossAxisAlignment) : $flutterSrcRenderingFlex.CrossAxisAlignment.center),
          textDirection: (tree.flutterRow.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterRow.textDirection) : null),
          verticalDirection: (tree.flutterRow.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterRow.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          textBaseline: (tree.flutterRow.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterRow.textBaseline) : null),
          children: tree.flutterRow.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSafeArea:
      return $flutterSrcWidgetsSafeArea.SafeArea(
          key: (tree.flutterSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSafeArea.key) : null),
          left: (tree.flutterSafeArea.hasLeft() ? tree.flutterSafeArea.left : true),
          top: (tree.flutterSafeArea.hasTop() ? tree.flutterSafeArea.top : true),
          right: (tree.flutterSafeArea.hasRight() ? tree.flutterSafeArea.right : true),
          bottom: (tree.flutterSafeArea.hasBottom() ? tree.flutterSafeArea.bottom : true),
          minimum: (tree.flutterSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          maintainBottomViewPadding: (tree.flutterSafeArea.hasMaintainBottomViewPadding() ? tree.flutterSafeArea.maintainBottomViewPadding : false),
          child: (tree.flutterSafeArea.hasChild() ? evaluateRequiredWidgetType(tree.flutterSafeArea.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterScrollConfiguration:
      return $flutterSrcWidgetsScrollConfiguration.ScrollConfiguration(
          key: (tree.flutterScrollConfiguration.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollConfiguration.key) : null),
          behavior: (tree.flutterScrollConfiguration.hasBehavior() ? evaluateRequiredFlutterScrollBehaviorType(tree.flutterScrollConfiguration.behavior) : missing('behavior')),
          child: (tree.flutterScrollConfiguration.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollConfiguration.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterScrollNotificationObserver:
      return $flutterSrcWidgetsScrollNotificationObserver.ScrollNotificationObserver(
          key: (tree.flutterScrollNotificationObserver.hasKey() ? evaluateFlutterKeyType(tree.flutterScrollNotificationObserver.key) : null),
          child: (tree.flutterScrollNotificationObserver.hasChild() ? evaluateRequiredWidgetType(tree.flutterScrollNotificationObserver.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterSelectableRegion:
      return $flutterSrcWidgetsSelectableRegion.SelectableRegion(
          key: (tree.flutterSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectableRegion.key) : null),
          contextMenuBuilder: null,
          focusNode: (tree.flutterSelectableRegion.hasFocusNode() ? evaluateRequiredFlutterFocusNodeType(tree.flutterSelectableRegion.focusNode) : missing('focusNode')),
          selectionControls: (tree.flutterSelectableRegion.hasSelectionControls() ? evaluateRequiredFlutterTextSelectionControlsType(tree.flutterSelectableRegion.selectionControls) : missing('selectionControls')),
          child: (tree.flutterSelectableRegion.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectableRegion.child) : missing('child')),
          magnifierConfiguration: (tree.flutterSelectableRegion.hasMagnifierConfiguration() ? evaluateRequiredFlutterTextMagnifierConfigurationType(tree.flutterSelectableRegion.magnifierConfiguration) : $flutterSrcWidgetsMagnifier.TextMagnifierConfiguration.disabled),
          onSelectionChanged: null);
    case messages.WidgetType_Constructor.flutterSelectionContainer:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer(
          key: (tree.flutterSelectionContainer.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainer.key) : null),
          registrar: (tree.flutterSelectionContainer.hasRegistrar() ? evaluateFlutterSelectionRegistrarType(tree.flutterSelectionContainer.registrar) : null),
          delegate: missing('delegate'),
          child: (tree.flutterSelectionContainer.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainer.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterSelectionContainerNamedDisabled:
      return $flutterSrcWidgetsSelectionContainer.SelectionContainer.disabled(
          key: (tree.flutterSelectionContainerNamedDisabled.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionContainerNamedDisabled.key) : null),
          child: (tree.flutterSelectionContainerNamedDisabled.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionContainerNamedDisabled.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterSelectionRegistrarScope:
      return $flutterSrcWidgetsSelectionContainer.SelectionRegistrarScope(
          key: (tree.flutterSelectionRegistrarScope.hasKey() ? evaluateFlutterKeyType(tree.flutterSelectionRegistrarScope.key) : null),
          registrar: (tree.flutterSelectionRegistrarScope.hasRegistrar() ? evaluateRequiredFlutterSelectionRegistrarType(tree.flutterSelectionRegistrarScope.registrar) : missing('registrar')),
          child: (tree.flutterSelectionRegistrarScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterSelectionRegistrarScope.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterSemantics:
      return $flutterSrcWidgetsBasic.Semantics(
          key: (tree.flutterSemantics.hasKey() ? evaluateFlutterKeyType(tree.flutterSemantics.key) : null),
          child: (tree.flutterSemantics.hasChild() ? evaluateWidgetType(tree.flutterSemantics.child) : null),
          container: (tree.flutterSemantics.hasContainer() ? tree.flutterSemantics.container : false),
          explicitChildNodes: (tree.flutterSemantics.hasExplicitChildNodes() ? tree.flutterSemantics.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemantics.hasExcludeSemantics() ? tree.flutterSemantics.excludeSemantics : false),
          blockUserActions: (tree.flutterSemantics.hasBlockUserActions() ? tree.flutterSemantics.blockUserActions : false),
          enabled: (tree.flutterSemantics.hasEnabled() ? tree.flutterSemantics.enabled : null),
          checked: (tree.flutterSemantics.hasChecked() ? tree.flutterSemantics.checked : null),
          mixed: (tree.flutterSemantics.hasMixed() ? tree.flutterSemantics.mixed : null),
          selected: (tree.flutterSemantics.hasSelected() ? tree.flutterSemantics.selected : null),
          toggled: (tree.flutterSemantics.hasToggled() ? tree.flutterSemantics.toggled : null),
          button: (tree.flutterSemantics.hasButton() ? tree.flutterSemantics.button : null),
          slider: (tree.flutterSemantics.hasSlider() ? tree.flutterSemantics.slider : null),
          keyboardKey: (tree.flutterSemantics.hasKeyboardKey() ? tree.flutterSemantics.keyboardKey : null),
          link: (tree.flutterSemantics.hasLink() ? tree.flutterSemantics.link : null),
          header: (tree.flutterSemantics.hasHeader() ? tree.flutterSemantics.header : null),
          textField: (tree.flutterSemantics.hasTextField() ? tree.flutterSemantics.textField : null),
          readOnly: (tree.flutterSemantics.hasReadOnly() ? tree.flutterSemantics.readOnly : null),
          focusable: (tree.flutterSemantics.hasFocusable() ? tree.flutterSemantics.focusable : null),
          focused: (tree.flutterSemantics.hasFocused() ? tree.flutterSemantics.focused : null),
          inMutuallyExclusiveGroup: (tree.flutterSemantics.hasInMutuallyExclusiveGroup() ? tree.flutterSemantics.inMutuallyExclusiveGroup : null),
          obscured: (tree.flutterSemantics.hasObscured() ? tree.flutterSemantics.obscured : null),
          multiline: (tree.flutterSemantics.hasMultiline() ? tree.flutterSemantics.multiline : null),
          scopesRoute: (tree.flutterSemantics.hasScopesRoute() ? tree.flutterSemantics.scopesRoute : null),
          namesRoute: (tree.flutterSemantics.hasNamesRoute() ? tree.flutterSemantics.namesRoute : null),
          hidden: (tree.flutterSemantics.hasHidden() ? tree.flutterSemantics.hidden : null),
          image: (tree.flutterSemantics.hasImage() ? tree.flutterSemantics.image : null),
          liveRegion: (tree.flutterSemantics.hasLiveRegion() ? tree.flutterSemantics.liveRegion : null),
          expanded: (tree.flutterSemantics.hasExpanded() ? tree.flutterSemantics.expanded : null),
          maxValueLength: (tree.flutterSemantics.hasMaxValueLength() ? tree.flutterSemantics.maxValueLength : null),
          currentValueLength: (tree.flutterSemantics.hasCurrentValueLength() ? tree.flutterSemantics.currentValueLength : null),
          label: (tree.flutterSemantics.hasLabel() ? tree.flutterSemantics.label : null),
          attributedLabel: (tree.flutterSemantics.hasAttributedLabel() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedLabel) : null),
          value: (tree.flutterSemantics.hasValue() ? tree.flutterSemantics.value : null),
          attributedValue: (tree.flutterSemantics.hasAttributedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedValue) : null),
          increasedValue: (tree.flutterSemantics.hasIncreasedValue() ? tree.flutterSemantics.increasedValue : null),
          attributedIncreasedValue: (tree.flutterSemantics.hasAttributedIncreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedIncreasedValue) : null),
          decreasedValue: (tree.flutterSemantics.hasDecreasedValue() ? tree.flutterSemantics.decreasedValue : null),
          attributedDecreasedValue: (tree.flutterSemantics.hasAttributedDecreasedValue() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedDecreasedValue) : null),
          hint: (tree.flutterSemantics.hasHint() ? tree.flutterSemantics.hint : null),
          attributedHint: (tree.flutterSemantics.hasAttributedHint() ? evaluateFlutterSrcSemanticsAttributedStringType(tree.flutterSemantics.attributedHint) : null),
          tooltip: (tree.flutterSemantics.hasTooltip() ? tree.flutterSemantics.tooltip : null),
          onTapHint: (tree.flutterSemantics.hasOnTapHint() ? tree.flutterSemantics.onTapHint : null),
          onLongPressHint: (tree.flutterSemantics.hasOnLongPressHint() ? tree.flutterSemantics.onLongPressHint : null),
          textDirection: (tree.flutterSemantics.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterSemantics.textDirection) : null),
          sortKey: (tree.flutterSemantics.hasSortKey() ? evaluateFlutterSrcSemanticsSemanticsSortKeyType(tree.flutterSemantics.sortKey) : null),
          tagForChildren: (tree.flutterSemantics.hasTagForChildren() ? evaluateFlutterSrcSemanticsSemanticsTagType(tree.flutterSemantics.tagForChildren) : null),
          onTap: null,
          onLongPress: null,
          onScrollLeft: null,
          onScrollRight: null,
          onScrollUp: null,
          onScrollDown: null,
          onIncrease: null,
          onDecrease: null,
          onCopy: null,
          onCut: null,
          onPaste: null,
          onDismiss: null,
          onMoveCursorForwardByCharacter: null,
          onMoveCursorBackwardByCharacter: null,
          onSetSelection: null,
          onSetText: null,
          onDidGainAccessibilityFocus: null,
          onDidLoseAccessibilityFocus: null,
          customSemanticsActions: null);
    case messages.WidgetType_Constructor.flutterSemanticsDebugger:
      return $flutterSrcWidgetsSemanticsDebugger.SemanticsDebugger(
          key: (tree.flutterSemanticsDebugger.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsDebugger.key) : null),
          child: (tree.flutterSemanticsDebugger.hasChild() ? evaluateRequiredWidgetType(tree.flutterSemanticsDebugger.child) : missing('child')),
          labelStyle: (tree.flutterSemanticsDebugger.hasLabelStyle() ? evaluateRequiredFlutterTextStyleType(tree.flutterSemanticsDebugger.labelStyle) : $flutterSrcPaintingTextStyle.TextStyle(color: $dartUi.Color(0xFF000000), fontSize: 10.0, height: 0.8)));
    case messages.WidgetType_Constructor.flutterSemanticsNamedFromProperties:
      return $flutterSrcWidgetsBasic.Semantics.fromProperties(
          key: (tree.flutterSemanticsNamedFromProperties.hasKey() ? evaluateFlutterKeyType(tree.flutterSemanticsNamedFromProperties.key) : null),
          child: (tree.flutterSemanticsNamedFromProperties.hasChild() ? evaluateWidgetType(tree.flutterSemanticsNamedFromProperties.child) : null),
          container: (tree.flutterSemanticsNamedFromProperties.hasContainer() ? tree.flutterSemanticsNamedFromProperties.container : false),
          explicitChildNodes: (tree.flutterSemanticsNamedFromProperties.hasExplicitChildNodes() ? tree.flutterSemanticsNamedFromProperties.explicitChildNodes : false),
          excludeSemantics: (tree.flutterSemanticsNamedFromProperties.hasExcludeSemantics() ? tree.flutterSemanticsNamedFromProperties.excludeSemantics : false),
          blockUserActions: (tree.flutterSemanticsNamedFromProperties.hasBlockUserActions() ? tree.flutterSemanticsNamedFromProperties.blockUserActions : false),
          properties: (tree.flutterSemanticsNamedFromProperties.hasProperties() ? evaluateRequiredFlutterSrcSemanticsSemanticsPropertiesType(tree.flutterSemanticsNamedFromProperties.properties) : missing('properties')));
    case messages.WidgetType_Constructor.flutterSharedAppData:
      return $flutterSrcWidgetsSharedAppData.SharedAppData(
          key: (tree.flutterSharedAppData.hasKey() ? evaluateFlutterKeyType(tree.flutterSharedAppData.key) : null),
          child: (tree.flutterSharedAppData.hasChild() ? evaluateRequiredWidgetType(tree.flutterSharedAppData.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterShortcutRegistrar:
      return $flutterSrcWidgetsShortcuts.ShortcutRegistrar(
          key: (tree.flutterShortcutRegistrar.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutRegistrar.key) : null),
          child: (tree.flutterShortcutRegistrar.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutRegistrar.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterShortcutsNamedManager:
      return $flutterSrcWidgetsShortcuts.Shortcuts.manager(
          key: (tree.flutterShortcutsNamedManager.hasKey() ? evaluateFlutterKeyType(tree.flutterShortcutsNamedManager.key) : null),
          manager: (tree.flutterShortcutsNamedManager.hasManager() ? evaluateRequiredFlutterShortcutManagerType(tree.flutterShortcutsNamedManager.manager) : missing('manager')),
          child: (tree.flutterShortcutsNamedManager.hasChild() ? evaluateRequiredWidgetType(tree.flutterShortcutsNamedManager.child) : missing('child')),
          debugLabel: (tree.flutterShortcutsNamedManager.hasDebugLabel() ? tree.flutterShortcutsNamedManager.debugLabel : null));
    case messages.WidgetType_Constructor.flutterShrinkWrappingViewport:
      return $flutterSrcWidgetsViewport.ShrinkWrappingViewport(
          key: (tree.flutterShrinkWrappingViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterShrinkWrappingViewport.key) : null),
          axisDirection: (tree.flutterShrinkWrappingViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterShrinkWrappingViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterShrinkWrappingViewport.crossAxisDirection) : null),
          offset: (tree.flutterShrinkWrappingViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterShrinkWrappingViewport.offset) : missing('offset')),
          clipBehavior: (tree.flutterShrinkWrappingViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterShrinkWrappingViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterShrinkWrappingViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSingleChildScrollView:
      return $flutterSrcWidgetsSingleChildScrollView.SingleChildScrollView(
          key: (tree.flutterSingleChildScrollView.hasKey() ? evaluateFlutterKeyType(tree.flutterSingleChildScrollView.key) : null),
          scrollDirection: (tree.flutterSingleChildScrollView.hasScrollDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterSingleChildScrollView.scrollDirection) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          reverse: (tree.flutterSingleChildScrollView.hasReverse() ? tree.flutterSingleChildScrollView.reverse : false),
          padding: (tree.flutterSingleChildScrollView.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.flutterSingleChildScrollView.padding) : null),
          primary: (tree.flutterSingleChildScrollView.hasPrimary() ? tree.flutterSingleChildScrollView.primary : null),
          physics: (tree.flutterSingleChildScrollView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.flutterSingleChildScrollView.physics) : null),
          controller: (tree.flutterSingleChildScrollView.hasController() ? evaluateFlutterScrollControllerType(tree.flutterSingleChildScrollView.controller) : null),
          child: (tree.flutterSingleChildScrollView.hasChild() ? evaluateWidgetType(tree.flutterSingleChildScrollView.child) : null),
          dragStartBehavior: (tree.flutterSingleChildScrollView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.flutterSingleChildScrollView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          clipBehavior: (tree.flutterSingleChildScrollView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterSingleChildScrollView.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.flutterSingleChildScrollView.hasRestorationId() ? tree.flutterSingleChildScrollView.restorationId : null),
          keyboardDismissBehavior: (tree.flutterSingleChildScrollView.hasKeyboardDismissBehavior() ? enums.convertRequiredFlutterScrollViewKeyboardDismissBehaviorType(tree.flutterSingleChildScrollView.keyboardDismissBehavior) : $flutterSrcWidgetsScrollView.ScrollViewKeyboardDismissBehavior.manual));
    case messages.WidgetType_Constructor.flutterSizeChangedLayoutNotifier:
      return $flutterSrcWidgetsSizeChangedLayoutNotifier.SizeChangedLayoutNotifier(
          key: (tree.flutterSizeChangedLayoutNotifier.hasKey() ? evaluateFlutterKeyType(tree.flutterSizeChangedLayoutNotifier.key) : null),
          child: (tree.flutterSizeChangedLayoutNotifier.hasChild() ? evaluateWidgetType(tree.flutterSizeChangedLayoutNotifier.child) : null));
    case messages.WidgetType_Constructor.flutterSizedBox:
      return $flutterSrcWidgetsBasic.SizedBox(
          key: (tree.flutterSizedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBox.key) : null),
          width: (tree.flutterSizedBox.hasWidth() ? tree.flutterSizedBox.width : null),
          height: (tree.flutterSizedBox.hasHeight() ? tree.flutterSizedBox.height : null),
          child: (tree.flutterSizedBox.hasChild() ? evaluateWidgetType(tree.flutterSizedBox.child) : null));
    case messages.WidgetType_Constructor.flutterSizedBoxNamedExpand:
      return $flutterSrcWidgetsBasic.SizedBox.expand(
          key: (tree.flutterSizedBoxNamedExpand.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedExpand.key) : null),
          child: (tree.flutterSizedBoxNamedExpand.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedExpand.child) : null));
    case messages.WidgetType_Constructor.flutterSizedBoxNamedFromSize:
      return $flutterSrcWidgetsBasic.SizedBox.fromSize(
          key: (tree.flutterSizedBoxNamedFromSize.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedFromSize.key) : null),
          child: (tree.flutterSizedBoxNamedFromSize.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedFromSize.child) : null),
          size: (tree.flutterSizedBoxNamedFromSize.hasSize() ? evaluateDartSizeType(tree.flutterSizedBoxNamedFromSize.size) : null));
    case messages.WidgetType_Constructor.flutterSizedBoxNamedShrink:
      return $flutterSrcWidgetsBasic.SizedBox.shrink(
          key: (tree.flutterSizedBoxNamedShrink.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedShrink.key) : null),
          child: (tree.flutterSizedBoxNamedShrink.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedShrink.child) : null));
    case messages.WidgetType_Constructor.flutterSizedBoxNamedSquare:
      return $flutterSrcWidgetsBasic.SizedBox.square(
          key: (tree.flutterSizedBoxNamedSquare.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedBoxNamedSquare.key) : null),
          child: (tree.flutterSizedBoxNamedSquare.hasChild() ? evaluateWidgetType(tree.flutterSizedBoxNamedSquare.child) : null),
          dimension: (tree.flutterSizedBoxNamedSquare.hasDimension() ? tree.flutterSizedBoxNamedSquare.dimension : null));
    case messages.WidgetType_Constructor.flutterSizedOverflowBox:
      return $flutterSrcWidgetsBasic.SizedOverflowBox(
          key: (tree.flutterSizedOverflowBox.hasKey() ? evaluateFlutterKeyType(tree.flutterSizedOverflowBox.key) : null),
          size: (tree.flutterSizedOverflowBox.hasSize() ? evaluateRequiredDartSizeType(tree.flutterSizedOverflowBox.size) : missing('size')),
          alignment: (tree.flutterSizedOverflowBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterSizedOverflowBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          child: (tree.flutterSizedOverflowBox.hasChild() ? evaluateWidgetType(tree.flutterSizedOverflowBox.child) : null));
    case messages.WidgetType_Constructor.flutterSliverAnimatedOpacity:
      return $flutterSrcWidgetsImplicitAnimations.SliverAnimatedOpacity(
          key: (tree.flutterSliverAnimatedOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverAnimatedOpacity.key) : null),
          sliver: (tree.flutterSliverAnimatedOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverAnimatedOpacity.sliver) : null),
          opacity: (tree.flutterSliverAnimatedOpacity.hasOpacity() ? tree.flutterSliverAnimatedOpacity.opacity : missing('opacity')),
          curve: (tree.flutterSliverAnimatedOpacity.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.flutterSliverAnimatedOpacity.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.flutterSliverAnimatedOpacity.hasDuration() ? evaluateRequiredDartDurationType(tree.flutterSliverAnimatedOpacity.duration) : missing('duration')),
          onEnd: null,
          alwaysIncludeSemantics: (tree.flutterSliverAnimatedOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverAnimatedOpacity.alwaysIncludeSemantics : false));
    case messages.WidgetType_Constructor.flutterSliverConstrainedCrossAxis:
      return $flutterSrcWidgetsSliver.SliverConstrainedCrossAxis(
          key: (tree.flutterSliverConstrainedCrossAxis.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverConstrainedCrossAxis.key) : null),
          maxExtent: (tree.flutterSliverConstrainedCrossAxis.hasMaxExtent() ? tree.flutterSliverConstrainedCrossAxis.maxExtent : missing('maxExtent')),
          sliver: (tree.flutterSliverConstrainedCrossAxis.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverConstrainedCrossAxis.sliver) : missing('sliver')));
    case messages.WidgetType_Constructor.flutterSliverCrossAxisExpanded:
      return $flutterSrcWidgetsSliver.SliverCrossAxisExpanded(
          key: (tree.flutterSliverCrossAxisExpanded.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverCrossAxisExpanded.key) : null),
          flex: (tree.flutterSliverCrossAxisExpanded.hasFlex() ? tree.flutterSliverCrossAxisExpanded.flex : missing('flex')),
          sliver: (tree.flutterSliverCrossAxisExpanded.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverCrossAxisExpanded.sliver) : missing('sliver')));
    case messages.WidgetType_Constructor.flutterSliverCrossAxisGroup:
      return $flutterSrcWidgetsSliver.SliverCrossAxisGroup(
          key: (tree.flutterSliverCrossAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverCrossAxisGroup.key) : null),
          slivers: tree.flutterSliverCrossAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSliverFillRemaining:
      return $flutterSrcWidgetsSliverFill.SliverFillRemaining(
          key: (tree.flutterSliverFillRemaining.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillRemaining.key) : null),
          child: (tree.flutterSliverFillRemaining.hasChild() ? evaluateWidgetType(tree.flutterSliverFillRemaining.child) : null),
          hasScrollBody: (tree.flutterSliverFillRemaining.hasHasScrollBody() ? tree.flutterSliverFillRemaining.hasScrollBody : true),
          fillOverscroll: (tree.flutterSliverFillRemaining.hasFillOverscroll() ? tree.flutterSliverFillRemaining.fillOverscroll : false));
    case messages.WidgetType_Constructor.flutterSliverFillViewport:
      return $flutterSrcWidgetsSliverFill.SliverFillViewport(
          key: (tree.flutterSliverFillViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFillViewport.key) : null),
          delegate: (tree.flutterSliverFillViewport.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFillViewport.delegate) : missing('delegate')),
          viewportFraction: (tree.flutterSliverFillViewport.hasViewportFraction() ? tree.flutterSliverFillViewport.viewportFraction : 1.0),
          padEnds: (tree.flutterSliverFillViewport.hasPadEnds() ? tree.flutterSliverFillViewport.padEnds : true));
    case messages.WidgetType_Constructor.flutterSliverFixedExtentList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList(
          key: (tree.flutterSliverFixedExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentList.key) : null),
          delegate: (tree.flutterSliverFixedExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverFixedExtentList.delegate) : missing('delegate')),
          itemExtent: (tree.flutterSliverFixedExtentList.hasItemExtent() ? tree.flutterSliverFixedExtentList.itemExtent : missing('itemExtent')));
    case messages.WidgetType_Constructor.flutterSliverFixedExtentListNamedList:
      return $flutterSrcWidgetsSliver.SliverFixedExtentList.list(
          key: (tree.flutterSliverFixedExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverFixedExtentListNamedList.key) : null),
          children: tree.flutterSliverFixedExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          itemExtent: (tree.flutterSliverFixedExtentListNamedList.hasItemExtent() ? tree.flutterSliverFixedExtentListNamedList.itemExtent : missing('itemExtent')),
          addAutomaticKeepAlives: (tree.flutterSliverFixedExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverFixedExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverFixedExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverFixedExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverFixedExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverFixedExtentListNamedList.addSemanticIndexes : true));
    case messages.WidgetType_Constructor.flutterSliverGrid:
      return $flutterSrcWidgetsSliver.SliverGrid(
          key: (tree.flutterSliverGrid.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGrid.key) : null),
          delegate: (tree.flutterSliverGrid.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverGrid.delegate) : missing('delegate')),
          gridDelegate: (tree.flutterSliverGrid.hasGridDelegate() ? evaluateRequiredFlutterSliverGridDelegateType(tree.flutterSliverGrid.gridDelegate) : missing('gridDelegate')));
    case messages.WidgetType_Constructor.flutterSliverGridNamedCount:
      return $flutterSrcWidgetsSliver.SliverGrid.count(
          key: (tree.flutterSliverGridNamedCount.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedCount.key) : null),
          crossAxisCount: (tree.flutterSliverGridNamedCount.hasCrossAxisCount() ? tree.flutterSliverGridNamedCount.crossAxisCount : missing('crossAxisCount')),
          mainAxisSpacing: (tree.flutterSliverGridNamedCount.hasMainAxisSpacing() ? tree.flutterSliverGridNamedCount.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedCount.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedCount.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedCount.hasChildAspectRatio() ? tree.flutterSliverGridNamedCount.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedCount.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSliverGridNamedExtent:
      return $flutterSrcWidgetsSliver.SliverGrid.extent(
          key: (tree.flutterSliverGridNamedExtent.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverGridNamedExtent.key) : null),
          maxCrossAxisExtent: (tree.flutterSliverGridNamedExtent.hasMaxCrossAxisExtent() ? tree.flutterSliverGridNamedExtent.maxCrossAxisExtent : missing('maxCrossAxisExtent')),
          mainAxisSpacing: (tree.flutterSliverGridNamedExtent.hasMainAxisSpacing() ? tree.flutterSliverGridNamedExtent.mainAxisSpacing : 0.0),
          crossAxisSpacing: (tree.flutterSliverGridNamedExtent.hasCrossAxisSpacing() ? tree.flutterSliverGridNamedExtent.crossAxisSpacing : 0.0),
          childAspectRatio: (tree.flutterSliverGridNamedExtent.hasChildAspectRatio() ? tree.flutterSliverGridNamedExtent.childAspectRatio : 1.0),
          children: tree.flutterSliverGridNamedExtent.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSliverIgnorePointer:
      return $flutterSrcWidgetsSliver.SliverIgnorePointer(
          key: (tree.flutterSliverIgnorePointer.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverIgnorePointer.key) : null),
          ignoring: (tree.flutterSliverIgnorePointer.hasIgnoring() ? tree.flutterSliverIgnorePointer.ignoring : true),
          sliver: (tree.flutterSliverIgnorePointer.hasSliver() ? evaluateWidgetType(tree.flutterSliverIgnorePointer.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverList:
      return $flutterSrcWidgetsSliver.SliverList(
          key: (tree.flutterSliverList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverList.key) : null),
          delegate: (tree.flutterSliverList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverList.delegate) : missing('delegate')));
    case messages.WidgetType_Constructor.flutterSliverListNamedList:
      return $flutterSrcWidgetsSliver.SliverList.list(
          key: (tree.flutterSliverListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverListNamedList.key) : null),
          children: tree.flutterSliverListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          addAutomaticKeepAlives: (tree.flutterSliverListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverListNamedList.addSemanticIndexes : true));
    case messages.WidgetType_Constructor.flutterSliverMainAxisGroup:
      return $flutterSrcWidgetsSliver.SliverMainAxisGroup(
          key: (tree.flutterSliverMainAxisGroup.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverMainAxisGroup.key) : null),
          slivers: tree.flutterSliverMainAxisGroup.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterSliverOffstage:
      return $flutterSrcWidgetsSliver.SliverOffstage(
          key: (tree.flutterSliverOffstage.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOffstage.key) : null),
          offstage: (tree.flutterSliverOffstage.hasOffstage() ? tree.flutterSliverOffstage.offstage : true),
          sliver: (tree.flutterSliverOffstage.hasSliver() ? evaluateWidgetType(tree.flutterSliverOffstage.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverOpacity:
      return $flutterSrcWidgetsSliver.SliverOpacity(
          key: (tree.flutterSliverOpacity.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOpacity.key) : null),
          opacity: (tree.flutterSliverOpacity.hasOpacity() ? tree.flutterSliverOpacity.opacity : missing('opacity')),
          alwaysIncludeSemantics: (tree.flutterSliverOpacity.hasAlwaysIncludeSemantics() ? tree.flutterSliverOpacity.alwaysIncludeSemantics : false),
          sliver: (tree.flutterSliverOpacity.hasSliver() ? evaluateWidgetType(tree.flutterSliverOpacity.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverOverlapAbsorber:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapAbsorber(
          key: (tree.flutterSliverOverlapAbsorber.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapAbsorber.key) : null),
          handle: (tree.flutterSliverOverlapAbsorber.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapAbsorber.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapAbsorber.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapAbsorber.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverOverlapInjector:
      return $flutterSrcWidgetsNestedScrollView.SliverOverlapInjector(
          key: (tree.flutterSliverOverlapInjector.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverOverlapInjector.key) : null),
          handle: (tree.flutterSliverOverlapInjector.hasHandle() ? evaluateRequiredFlutterSliverOverlapAbsorberHandleType(tree.flutterSliverOverlapInjector.handle) : missing('handle')),
          sliver: (tree.flutterSliverOverlapInjector.hasSliver() ? evaluateWidgetType(tree.flutterSliverOverlapInjector.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverPadding:
      return $flutterSrcWidgetsBasic.SliverPadding(
          key: (tree.flutterSliverPadding.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPadding.key) : null),
          padding: (tree.flutterSliverPadding.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.flutterSliverPadding.padding) : missing('padding')),
          sliver: (tree.flutterSliverPadding.hasSliver() ? evaluateWidgetType(tree.flutterSliverPadding.sliver) : null));
    case messages.WidgetType_Constructor.flutterSliverPersistentHeader:
      return $flutterSrcWidgetsSliverPersistentHeader.SliverPersistentHeader(
          key: (tree.flutterSliverPersistentHeader.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPersistentHeader.key) : null),
          delegate: missing('delegate'),
          pinned: (tree.flutterSliverPersistentHeader.hasPinned() ? tree.flutterSliverPersistentHeader.pinned : false),
          floating: (tree.flutterSliverPersistentHeader.hasFloating() ? tree.flutterSliverPersistentHeader.floating : false));
    case messages.WidgetType_Constructor.flutterSliverPrototypeExtentList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList(
          key: (tree.flutterSliverPrototypeExtentList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentList.key) : null),
          delegate: (tree.flutterSliverPrototypeExtentList.hasDelegate() ? evaluateRequiredFlutterSliverChildDelegateType(tree.flutterSliverPrototypeExtentList.delegate) : missing('delegate')),
          prototypeItem: (tree.flutterSliverPrototypeExtentList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentList.prototypeItem) : missing('prototypeItem')));
    case messages.WidgetType_Constructor.flutterSliverPrototypeExtentListNamedList:
      return $flutterSrcWidgetsSliverPrototypeExtentList.SliverPrototypeExtentList.list(
          key: (tree.flutterSliverPrototypeExtentListNamedList.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverPrototypeExtentListNamedList.key) : null),
          children: tree.flutterSliverPrototypeExtentListNamedList.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          prototypeItem: (tree.flutterSliverPrototypeExtentListNamedList.hasPrototypeItem() ? evaluateRequiredWidgetType(tree.flutterSliverPrototypeExtentListNamedList.prototypeItem) : missing('prototypeItem')),
          addAutomaticKeepAlives: (tree.flutterSliverPrototypeExtentListNamedList.hasAddAutomaticKeepAlives() ? tree.flutterSliverPrototypeExtentListNamedList.addAutomaticKeepAlives : true),
          addRepaintBoundaries: (tree.flutterSliverPrototypeExtentListNamedList.hasAddRepaintBoundaries() ? tree.flutterSliverPrototypeExtentListNamedList.addRepaintBoundaries : true),
          addSemanticIndexes: (tree.flutterSliverPrototypeExtentListNamedList.hasAddSemanticIndexes() ? tree.flutterSliverPrototypeExtentListNamedList.addSemanticIndexes : true));
    case messages.WidgetType_Constructor.flutterSliverSafeArea:
      return $flutterSrcWidgetsSafeArea.SliverSafeArea(
          key: (tree.flutterSliverSafeArea.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverSafeArea.key) : null),
          left: (tree.flutterSliverSafeArea.hasLeft() ? tree.flutterSliverSafeArea.left : true),
          top: (tree.flutterSliverSafeArea.hasTop() ? tree.flutterSliverSafeArea.top : true),
          right: (tree.flutterSliverSafeArea.hasRight() ? tree.flutterSliverSafeArea.right : true),
          bottom: (tree.flutterSliverSafeArea.hasBottom() ? tree.flutterSliverSafeArea.bottom : true),
          minimum: (tree.flutterSliverSafeArea.hasMinimum() ? evaluateRequiredFlutterEdgeInsetsType(tree.flutterSliverSafeArea.minimum) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          sliver: (tree.flutterSliverSafeArea.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverSafeArea.sliver) : missing('sliver')));
    case messages.WidgetType_Constructor.flutterSliverToBoxAdapter:
      return $flutterSrcWidgetsBasic.SliverToBoxAdapter(
          key: (tree.flutterSliverToBoxAdapter.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverToBoxAdapter.key) : null),
          child: (tree.flutterSliverToBoxAdapter.hasChild() ? evaluateWidgetType(tree.flutterSliverToBoxAdapter.child) : null));
    case messages.WidgetType_Constructor.flutterSliverVisibility:
      return $flutterSrcWidgetsVisibility.SliverVisibility(
          key: (tree.flutterSliverVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibility.key) : null),
          sliver: (tree.flutterSliverVisibility.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibility.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibility.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibility.hasVisible() ? tree.flutterSliverVisibility.visible : true),
          maintainState: (tree.flutterSliverVisibility.hasMaintainState() ? tree.flutterSliverVisibility.maintainState : false),
          maintainAnimation: (tree.flutterSliverVisibility.hasMaintainAnimation() ? tree.flutterSliverVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterSliverVisibility.hasMaintainSize() ? tree.flutterSliverVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterSliverVisibility.hasMaintainSemantics() ? tree.flutterSliverVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterSliverVisibility.hasMaintainInteractivity() ? tree.flutterSliverVisibility.maintainInteractivity : false));
    case messages.WidgetType_Constructor.flutterSliverVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.SliverVisibility.maintain(
          key: (tree.flutterSliverVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterSliverVisibilityNamedMaintain.key) : null),
          sliver: (tree.flutterSliverVisibilityNamedMaintain.hasSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.sliver) : missing('sliver')),
          replacementSliver: (tree.flutterSliverVisibilityNamedMaintain.hasReplacementSliver() ? evaluateRequiredWidgetType(tree.flutterSliverVisibilityNamedMaintain.replacementSliver) : $flutterSrcWidgetsBasic.SliverToBoxAdapter()),
          visible: (tree.flutterSliverVisibilityNamedMaintain.hasVisible() ? tree.flutterSliverVisibilityNamedMaintain.visible : true));
    case messages.WidgetType_Constructor.flutterSnapshotWidget:
      return $flutterSrcWidgetsSnapshotWidget.SnapshotWidget(
          key: (tree.flutterSnapshotWidget.hasKey() ? evaluateFlutterKeyType(tree.flutterSnapshotWidget.key) : null),
          mode: (tree.flutterSnapshotWidget.hasMode() ? enums.convertRequiredFlutterSnapshotModeType(tree.flutterSnapshotWidget.mode) : $flutterSrcWidgetsSnapshotWidget.SnapshotMode.normal),
          autoresize: (tree.flutterSnapshotWidget.hasAutoresize() ? tree.flutterSnapshotWidget.autoresize : false),
          controller: (tree.flutterSnapshotWidget.hasController() ? evaluateRequiredFlutterSnapshotControllerType(tree.flutterSnapshotWidget.controller) : missing('controller')),
          child: (tree.flutterSnapshotWidget.hasChild() ? evaluateWidgetType(tree.flutterSnapshotWidget.child) : null));
    case messages.WidgetType_Constructor.flutterSpacer:
      return $flutterSrcWidgetsSpacer.Spacer(
          key: (tree.flutterSpacer.hasKey() ? evaluateFlutterKeyType(tree.flutterSpacer.key) : null),
          flex: (tree.flutterSpacer.hasFlex() ? tree.flutterSpacer.flex : 1));
    case messages.WidgetType_Constructor.flutterStack:
      return $flutterSrcWidgetsBasic.Stack(
          key: (tree.flutterStack.hasKey() ? evaluateFlutterKeyType(tree.flutterStack.key) : null),
          alignment: (tree.flutterStack.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterStack.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.topStart),
          textDirection: (tree.flutterStack.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterStack.textDirection) : null),
          fit: (tree.flutterStack.hasFit() ? enums.convertRequiredFlutterStackFitType(tree.flutterStack.fit) : $flutterSrcRenderingStack.StackFit.loose),
          clipBehavior: (tree.flutterStack.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStack.clipBehavior) : $dartUi.Clip.hardEdge),
          children: tree.flutterStack.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterStretchingOverscrollIndicator:
      return $flutterSrcWidgetsOverscrollIndicator.StretchingOverscrollIndicator(
          key: (tree.flutterStretchingOverscrollIndicator.hasKey() ? evaluateFlutterKeyType(tree.flutterStretchingOverscrollIndicator.key) : null),
          axisDirection: (tree.flutterStretchingOverscrollIndicator.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterStretchingOverscrollIndicator.axisDirection) : missing('axisDirection')),
          clipBehavior: (tree.flutterStretchingOverscrollIndicator.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterStretchingOverscrollIndicator.clipBehavior) : $dartUi.Clip.hardEdge),
          child: (tree.flutterStretchingOverscrollIndicator.hasChild() ? evaluateWidgetType(tree.flutterStretchingOverscrollIndicator.child) : null));
    case messages.WidgetType_Constructor.flutterTable:
      return $flutterSrcWidgetsTable.Table(
          key: (tree.flutterTable.hasKey() ? evaluateFlutterKeyType(tree.flutterTable.key) : null),
          children: tree.flutterTable.children.map((e) => evaluateRequiredFlutterTableRowType(e)).toList(),
          columnWidths: null,
          defaultColumnWidth: (tree.flutterTable.hasDefaultColumnWidth() ? evaluateRequiredFlutterTableColumnWidthType(tree.flutterTable.defaultColumnWidth) : $flutterSrcRenderingTable.FlexColumnWidth()),
          textDirection: (tree.flutterTable.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterTable.textDirection) : null),
          border: (tree.flutterTable.hasBorder() ? evaluateFlutterTableBorderType(tree.flutterTable.border) : null),
          defaultVerticalAlignment: (tree.flutterTable.hasDefaultVerticalAlignment() ? enums.convertRequiredFlutterTableCellVerticalAlignmentType(tree.flutterTable.defaultVerticalAlignment) : $flutterSrcRenderingTable.TableCellVerticalAlignment.top),
          textBaseline: (tree.flutterTable.hasTextBaseline() ? enums.convertDartTextBaselineType(tree.flutterTable.textBaseline) : null));
    case messages.WidgetType_Constructor.flutterTableCell:
      return $flutterSrcWidgetsTable.TableCell(
          key: (tree.flutterTableCell.hasKey() ? evaluateFlutterKeyType(tree.flutterTableCell.key) : null),
          verticalAlignment: (tree.flutterTableCell.hasVerticalAlignment() ? enums.convertFlutterTableCellVerticalAlignmentType(tree.flutterTableCell.verticalAlignment) : null),
          child: (tree.flutterTableCell.hasChild() ? evaluateRequiredWidgetType(tree.flutterTableCell.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterTapRegion:
      return $flutterSrcWidgetsTapRegion.TapRegion(
          key: (tree.flutterTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegion.key) : null),
          child: (tree.flutterTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTapRegion.child) : null),
          enabled: (tree.flutterTapRegion.hasEnabled() ? tree.flutterTapRegion.enabled : true),
          behavior: (tree.flutterTapRegion.hasBehavior() ? enums.convertRequiredFlutterHitTestBehaviorType(tree.flutterTapRegion.behavior) : $flutterSrcRenderingProxyBox.HitTestBehavior.deferToChild),
          onTapOutside: null,
          onTapInside: null,
          groupId: null,
          debugLabel: (tree.flutterTapRegion.hasDebugLabel() ? tree.flutterTapRegion.debugLabel : null));
    case messages.WidgetType_Constructor.flutterTapRegionSurface:
      return $flutterSrcWidgetsTapRegion.TapRegionSurface(
          key: (tree.flutterTapRegionSurface.hasKey() ? evaluateFlutterKeyType(tree.flutterTapRegionSurface.key) : null),
          child: (tree.flutterTapRegionSurface.hasChild() ? evaluateRequiredWidgetType(tree.flutterTapRegionSurface.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterText:
      return $flutterSrcWidgetsText.Text(
          (tree.flutterText.hasData() ? tree.flutterText.data : missing('data')),
          key: (tree.flutterText.hasKey() ? evaluateFlutterKeyType(tree.flutterText.key) : null),
          style: (tree.flutterText.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterText.style) : null),
          strutStyle: (tree.flutterText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterText.strutStyle) : null),
          textAlign: (tree.flutterText.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterText.textAlign) : null),
          textDirection: (tree.flutterText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterText.textDirection) : null),
          locale: (tree.flutterText.hasLocale() ? evaluateDartLocaleType(tree.flutterText.locale) : null),
          softWrap: (tree.flutterText.hasSoftWrap() ? tree.flutterText.softWrap : null),
          overflow: (tree.flutterText.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterText.overflow) : null),
          textScaler: (tree.flutterText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterText.textScaler) : null),
          maxLines: (tree.flutterText.hasMaxLines() ? tree.flutterText.maxLines : null),
          semanticsLabel: (tree.flutterText.hasSemanticsLabel() ? tree.flutterText.semanticsLabel : null),
          textWidthBasis: (tree.flutterText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterText.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterText.textHeightBehavior) : null),
          selectionColor: (tree.flutterText.hasSelectionColor() ? evaluateDartColorType(tree.flutterText.selectionColor) : null));
    case messages.WidgetType_Constructor.flutterTextFieldTapRegion:
      return $flutterSrcWidgetsTapRegion.TextFieldTapRegion(
          key: (tree.flutterTextFieldTapRegion.hasKey() ? evaluateFlutterKeyType(tree.flutterTextFieldTapRegion.key) : null),
          child: (tree.flutterTextFieldTapRegion.hasChild() ? evaluateWidgetType(tree.flutterTextFieldTapRegion.child) : null),
          enabled: (tree.flutterTextFieldTapRegion.hasEnabled() ? tree.flutterTextFieldTapRegion.enabled : true),
          onTapOutside: null,
          onTapInside: null,
          debugLabel: (tree.flutterTextFieldTapRegion.hasDebugLabel() ? tree.flutterTextFieldTapRegion.debugLabel : null));
    case messages.WidgetType_Constructor.flutterTextNamedRich:
      return $flutterSrcWidgetsText.Text.rich(
          (tree.flutterTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterInlineSpanType(tree.flutterTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.flutterTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.flutterTextNamedRich.key) : null),
          style: (tree.flutterTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.flutterTextNamedRich.style) : null),
          strutStyle: (tree.flutterTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.flutterTextNamedRich.strutStyle) : null),
          textAlign: (tree.flutterTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.flutterTextNamedRich.textAlign) : null),
          textDirection: (tree.flutterTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterTextNamedRich.textDirection) : null),
          locale: (tree.flutterTextNamedRich.hasLocale() ? evaluateDartLocaleType(tree.flutterTextNamedRich.locale) : null),
          softWrap: (tree.flutterTextNamedRich.hasSoftWrap() ? tree.flutterTextNamedRich.softWrap : null),
          overflow: (tree.flutterTextNamedRich.hasOverflow() ? enums.convertFlutterTextOverflowType(tree.flutterTextNamedRich.overflow) : null),
          textScaler: (tree.flutterTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.flutterTextNamedRich.textScaler) : null),
          maxLines: (tree.flutterTextNamedRich.hasMaxLines() ? tree.flutterTextNamedRich.maxLines : null),
          semanticsLabel: (tree.flutterTextNamedRich.hasSemanticsLabel() ? tree.flutterTextNamedRich.semanticsLabel : null),
          textWidthBasis: (tree.flutterTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.flutterTextNamedRich.textWidthBasis) : null),
          textHeightBehavior: (tree.flutterTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.flutterTextNamedRich.textHeightBehavior) : null),
          selectionColor: (tree.flutterTextNamedRich.hasSelectionColor() ? evaluateDartColorType(tree.flutterTextNamedRich.selectionColor) : null));
    case messages.WidgetType_Constructor.flutterTextSelectionGestureDetector:
      return $flutterSrcWidgetsTextSelection.TextSelectionGestureDetector(
          key: (tree.flutterTextSelectionGestureDetector.hasKey() ? evaluateFlutterKeyType(tree.flutterTextSelectionGestureDetector.key) : null),
          onTapTrackStart: null,
          onTapTrackReset: null,
          onTapDown: null,
          onForcePressStart: null,
          onForcePressEnd: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          onSingleTapUp: null,
          onSingleTapCancel: null,
          onSingleLongTapStart: null,
          onSingleLongTapMoveUpdate: null,
          onSingleLongTapEnd: null,
          onDoubleTapDown: null,
          onTripleTapDown: null,
          onDragSelectionStart: null,
          onDragSelectionUpdate: null,
          onDragSelectionEnd: null,
          behavior: (tree.flutterTextSelectionGestureDetector.hasBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.flutterTextSelectionGestureDetector.behavior) : null),
          child: (tree.flutterTextSelectionGestureDetector.hasChild() ? evaluateRequiredWidgetType(tree.flutterTextSelectionGestureDetector.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterTexture:
      return $flutterSrcWidgetsTexture.Texture(
          key: (tree.flutterTexture.hasKey() ? evaluateFlutterKeyType(tree.flutterTexture.key) : null),
          textureId: (tree.flutterTexture.hasTextureId() ? tree.flutterTexture.textureId : missing('textureId')),
          freeze: (tree.flutterTexture.hasFreeze_4() ? tree.flutterTexture.freeze_4 : false),
          filterQuality: (tree.flutterTexture.hasFilterQuality() ? enums.convertRequiredDartFilterQualityType(tree.flutterTexture.filterQuality) : $dartUi.FilterQuality.low));
    case messages.WidgetType_Constructor.flutterTickerMode:
      return $flutterSrcWidgetsTickerProvider.TickerMode(
          key: (tree.flutterTickerMode.hasKey() ? evaluateFlutterKeyType(tree.flutterTickerMode.key) : null),
          enabled: (tree.flutterTickerMode.hasEnabled() ? tree.flutterTickerMode.enabled : missing('enabled')),
          child: (tree.flutterTickerMode.hasChild() ? evaluateRequiredWidgetType(tree.flutterTickerMode.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterTitle:
      return $flutterSrcWidgetsTitle.Title(
          key: (tree.flutterTitle.hasKey() ? evaluateFlutterKeyType(tree.flutterTitle.key) : null),
          title: (tree.flutterTitle.hasTitle() ? tree.flutterTitle.title : ''),
          color: (tree.flutterTitle.hasColor() ? evaluateRequiredDartColorType(tree.flutterTitle.color) : missing('color')),
          child: (tree.flutterTitle.hasChild() ? evaluateRequiredWidgetType(tree.flutterTitle.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterTransform:
      return $flutterSrcWidgetsBasic.Transform(
          key: (tree.flutterTransform.hasKey() ? evaluateFlutterKeyType(tree.flutterTransform.key) : null),
          transform: (tree.flutterTransform.hasTransform() ? evaluateRequiredVectorMathMatrix4Type(tree.flutterTransform.transform) : missing('transform')),
          origin: (tree.flutterTransform.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransform.origin) : null),
          alignment: (tree.flutterTransform.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransform.alignment) : null),
          transformHitTests: (tree.flutterTransform.hasTransformHitTests() ? tree.flutterTransform.transformHitTests : true),
          filterQuality: (tree.flutterTransform.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransform.filterQuality) : null),
          child: (tree.flutterTransform.hasChild() ? evaluateWidgetType(tree.flutterTransform.child) : null));
    case messages.WidgetType_Constructor.flutterTransformNamedFlip:
      return $flutterSrcWidgetsBasic.Transform.flip(
          key: (tree.flutterTransformNamedFlip.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedFlip.key) : null),
          flipX: (tree.flutterTransformNamedFlip.hasFlipX() ? tree.flutterTransformNamedFlip.flipX : false),
          flipY: (tree.flutterTransformNamedFlip.hasFlipY() ? tree.flutterTransformNamedFlip.flipY : false),
          origin: (tree.flutterTransformNamedFlip.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedFlip.origin) : null),
          transformHitTests: (tree.flutterTransformNamedFlip.hasTransformHitTests() ? tree.flutterTransformNamedFlip.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedFlip.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedFlip.filterQuality) : null),
          child: (tree.flutterTransformNamedFlip.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedFlip.child) : null));
    case messages.WidgetType_Constructor.flutterTransformNamedRotate:
      return $flutterSrcWidgetsBasic.Transform.rotate(
          key: (tree.flutterTransformNamedRotate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedRotate.key) : null),
          angle: (tree.flutterTransformNamedRotate.hasAngle() ? tree.flutterTransformNamedRotate.angle : missing('angle')),
          origin: (tree.flutterTransformNamedRotate.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedRotate.origin) : null),
          alignment: (tree.flutterTransformNamedRotate.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedRotate.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedRotate.hasTransformHitTests() ? tree.flutterTransformNamedRotate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedRotate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedRotate.filterQuality) : null),
          child: (tree.flutterTransformNamedRotate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedRotate.child) : null));
    case messages.WidgetType_Constructor.flutterTransformNamedScale:
      return $flutterSrcWidgetsBasic.Transform.scale(
          key: (tree.flutterTransformNamedScale.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedScale.key) : null),
          scale: (tree.flutterTransformNamedScale.hasScale() ? tree.flutterTransformNamedScale.scale : null),
          scaleX: (tree.flutterTransformNamedScale.hasScaleX() ? tree.flutterTransformNamedScale.scaleX : null),
          scaleY: (tree.flutterTransformNamedScale.hasScaleY() ? tree.flutterTransformNamedScale.scaleY : null),
          origin: (tree.flutterTransformNamedScale.hasOrigin() ? evaluateDartOffsetType(tree.flutterTransformNamedScale.origin) : null),
          alignment: (tree.flutterTransformNamedScale.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.flutterTransformNamedScale.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          transformHitTests: (tree.flutterTransformNamedScale.hasTransformHitTests() ? tree.flutterTransformNamedScale.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedScale.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedScale.filterQuality) : null),
          child: (tree.flutterTransformNamedScale.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedScale.child) : null));
    case messages.WidgetType_Constructor.flutterTransformNamedTranslate:
      return $flutterSrcWidgetsBasic.Transform.translate(
          key: (tree.flutterTransformNamedTranslate.hasKey() ? evaluateFlutterKeyType(tree.flutterTransformNamedTranslate.key) : null),
          offset: (tree.flutterTransformNamedTranslate.hasOffset() ? evaluateRequiredDartOffsetType(tree.flutterTransformNamedTranslate.offset) : missing('offset')),
          transformHitTests: (tree.flutterTransformNamedTranslate.hasTransformHitTests() ? tree.flutterTransformNamedTranslate.transformHitTests : true),
          filterQuality: (tree.flutterTransformNamedTranslate.hasFilterQuality() ? enums.convertDartFilterQualityType(tree.flutterTransformNamedTranslate.filterQuality) : null),
          child: (tree.flutterTransformNamedTranslate.hasChild() ? evaluateWidgetType(tree.flutterTransformNamedTranslate.child) : null));
    case messages.WidgetType_Constructor.flutterUiKitView:
      return $flutterSrcWidgetsPlatformView.UiKitView(
          key: (tree.flutterUiKitView.hasKey() ? evaluateFlutterKeyType(tree.flutterUiKitView.key) : null),
          viewType: (tree.flutterUiKitView.hasViewType() ? tree.flutterUiKitView.viewType : missing('viewType')),
          onPlatformViewCreated: null,
          hitTestBehavior: (tree.flutterUiKitView.hasHitTestBehavior() ? enums.convertRequiredFlutterPlatformViewHitTestBehaviorType(tree.flutterUiKitView.hitTestBehavior) : $flutterSrcRenderingPlatformView.PlatformViewHitTestBehavior.opaque),
          layoutDirection: (tree.flutterUiKitView.hasLayoutDirection() ? enums.convertDartTextDirectionType(tree.flutterUiKitView.layoutDirection) : null),
          creationParamsCodec: null,
          gestureRecognizers: null);
    case messages.WidgetType_Constructor.flutterUnconstrainedBox:
      return $flutterSrcWidgetsBasic.UnconstrainedBox(
          key: (tree.flutterUnconstrainedBox.hasKey() ? evaluateFlutterKeyType(tree.flutterUnconstrainedBox.key) : null),
          child: (tree.flutterUnconstrainedBox.hasChild() ? evaluateWidgetType(tree.flutterUnconstrainedBox.child) : null),
          textDirection: (tree.flutterUnconstrainedBox.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterUnconstrainedBox.textDirection) : null),
          alignment: (tree.flutterUnconstrainedBox.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.flutterUnconstrainedBox.alignment) : $flutterSrcPaintingAlignment.Alignment.center),
          constrainedAxis: (tree.flutterUnconstrainedBox.hasConstrainedAxis() ? enums.convertFlutterAxisType(tree.flutterUnconstrainedBox.constrainedAxis) : null),
          clipBehavior: (tree.flutterUnconstrainedBox.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterUnconstrainedBox.clipBehavior) : $dartUi.Clip.none));
    case messages.WidgetType_Constructor.flutterUnmanagedRestorationScope:
      return $flutterSrcWidgetsRestoration.UnmanagedRestorationScope(
          key: (tree.flutterUnmanagedRestorationScope.hasKey() ? evaluateFlutterKeyType(tree.flutterUnmanagedRestorationScope.key) : null),
          bucket: (tree.flutterUnmanagedRestorationScope.hasBucket() ? evaluateFlutterRestorationBucketType(tree.flutterUnmanagedRestorationScope.bucket) : null),
          child: (tree.flutterUnmanagedRestorationScope.hasChild() ? evaluateRequiredWidgetType(tree.flutterUnmanagedRestorationScope.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterView:
      return $flutterSrcWidgetsView.View(
          key: (tree.flutterView.hasKey() ? evaluateFlutterKeyType(tree.flutterView.key) : null),
          view: missing('view'),
          child: (tree.flutterView.hasChild() ? evaluateRequiredWidgetType(tree.flutterView.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterViewAnchor:
      return $flutterSrcWidgetsView.ViewAnchor(
          key: (tree.flutterViewAnchor.hasKey() ? evaluateFlutterKeyType(tree.flutterViewAnchor.key) : null),
          view: (tree.flutterViewAnchor.hasView() ? evaluateWidgetType(tree.flutterViewAnchor.view) : null),
          child: (tree.flutterViewAnchor.hasChild() ? evaluateRequiredWidgetType(tree.flutterViewAnchor.child) : missing('child')));
    case messages.WidgetType_Constructor.flutterViewCollection:
      return $flutterSrcWidgetsView.ViewCollection(
          key: (tree.flutterViewCollection.hasKey() ? evaluateFlutterKeyType(tree.flutterViewCollection.key) : null),
          views: tree.flutterViewCollection.views.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterViewport:
      return $flutterSrcWidgetsViewport.Viewport(
          key: (tree.flutterViewport.hasKey() ? evaluateFlutterKeyType(tree.flutterViewport.key) : null),
          axisDirection: (tree.flutterViewport.hasAxisDirection() ? enums.convertRequiredFlutterAxisDirectionType(tree.flutterViewport.axisDirection) : $flutterSrcPaintingBasicTypes.AxisDirection.down),
          crossAxisDirection: (tree.flutterViewport.hasCrossAxisDirection() ? enums.convertFlutterAxisDirectionType(tree.flutterViewport.crossAxisDirection) : null),
          anchor: (tree.flutterViewport.hasAnchor() ? tree.flutterViewport.anchor : 0.0),
          offset: (tree.flutterViewport.hasOffset() ? evaluateRequiredFlutterViewportOffsetType(tree.flutterViewport.offset) : missing('offset')),
          center: (tree.flutterViewport.hasCenter() ? evaluateFlutterKeyType(tree.flutterViewport.center) : null),
          cacheExtent: (tree.flutterViewport.hasCacheExtent() ? tree.flutterViewport.cacheExtent : null),
          cacheExtentStyle: (tree.flutterViewport.hasCacheExtentStyle() ? enums.convertRequiredFlutterCacheExtentStyleType(tree.flutterViewport.cacheExtentStyle) : $flutterSrcRenderingViewport.CacheExtentStyle.pixel),
          clipBehavior: (tree.flutterViewport.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterViewport.clipBehavior) : $dartUi.Clip.hardEdge),
          slivers: tree.flutterViewport.slivers.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.flutterVisibility:
      return $flutterSrcWidgetsVisibility.Visibility(
          key: (tree.flutterVisibility.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibility.key) : null),
          child: (tree.flutterVisibility.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibility.child) : missing('child')),
          replacement: (tree.flutterVisibility.hasReplacement() ? evaluateRequiredWidgetType(tree.flutterVisibility.replacement) : $flutterSrcWidgetsBasic.SizedBox.shrink()),
          visible: (tree.flutterVisibility.hasVisible() ? tree.flutterVisibility.visible : true),
          maintainState: (tree.flutterVisibility.hasMaintainState() ? tree.flutterVisibility.maintainState : false),
          maintainAnimation: (tree.flutterVisibility.hasMaintainAnimation() ? tree.flutterVisibility.maintainAnimation : false),
          maintainSize: (tree.flutterVisibility.hasMaintainSize() ? tree.flutterVisibility.maintainSize : false),
          maintainSemantics: (tree.flutterVisibility.hasMaintainSemantics() ? tree.flutterVisibility.maintainSemantics : false),
          maintainInteractivity: (tree.flutterVisibility.hasMaintainInteractivity() ? tree.flutterVisibility.maintainInteractivity : false));
    case messages.WidgetType_Constructor.flutterVisibilityNamedMaintain:
      return $flutterSrcWidgetsVisibility.Visibility.maintain(
          key: (tree.flutterVisibilityNamedMaintain.hasKey() ? evaluateFlutterKeyType(tree.flutterVisibilityNamedMaintain.key) : null),
          child: (tree.flutterVisibilityNamedMaintain.hasChild() ? evaluateRequiredWidgetType(tree.flutterVisibilityNamedMaintain.child) : missing('child')),
          visible: (tree.flutterVisibilityNamedMaintain.hasVisible() ? tree.flutterVisibilityNamedMaintain.visible : true));
    case messages.WidgetType_Constructor.flutterWidgetInspector:
      return $flutterSrcWidgetsWidgetInspector.WidgetInspector(
          key: (tree.flutterWidgetInspector.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetInspector.key) : null),
          child: (tree.flutterWidgetInspector.hasChild() ? evaluateRequiredWidgetType(tree.flutterWidgetInspector.child) : missing('child')),
          selectButtonBuilder: null);
    case messages.WidgetType_Constructor.flutterWidgetToRenderBoxAdapter:
      return $flutterSrcWidgetsBasic.WidgetToRenderBoxAdapter(
          renderBox: (tree.flutterWidgetToRenderBoxAdapter.hasRenderBox() ? evaluateRequiredFlutterRenderBoxType(tree.flutterWidgetToRenderBoxAdapter.renderBox) : missing('renderBox')),
          onBuild: null,
          onUnmount: null);
    case messages.WidgetType_Constructor.flutterWidgetsApp:
      return $flutterSrcWidgetsApp.WidgetsApp(
          key: (tree.flutterWidgetsApp.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsApp.key) : null),
          navigatorKey: null,
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.flutterWidgetsApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          initialRoute: (tree.flutterWidgetsApp.hasInitialRoute() ? tree.flutterWidgetsApp.initialRoute : null),
          pageRouteBuilder: null,
          home: (tree.flutterWidgetsApp.hasHome() ? evaluateWidgetType(tree.flutterWidgetsApp.home) : null),
          builder: null,
          title: (tree.flutterWidgetsApp.hasTitle() ? tree.flutterWidgetsApp.title : ''),
          onGenerateTitle: null,
          textStyle: (tree.flutterWidgetsApp.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsApp.textStyle) : null),
          color: (tree.flutterWidgetsApp.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsApp.color) : missing('color')),
          locale: (tree.flutterWidgetsApp.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsApp.hasShowPerformanceOverlay() ? tree.flutterWidgetsApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsApp.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsApp.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsApp.hasShowSemanticsDebugger() ? tree.flutterWidgetsApp.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsApp.hasDebugShowWidgetInspector() ? tree.flutterWidgetsApp.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsApp.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsApp.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsApp.hasRestorationScopeId() ? tree.flutterWidgetsApp.restorationScopeId : null));
    case messages.WidgetType_Constructor.flutterWidgetsAppNamedRouter:
      return $flutterSrcWidgetsApp.WidgetsApp.router(
          key: (tree.flutterWidgetsAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.flutterWidgetsAppNamedRouter.key) : null),
          routeInformationProvider: (tree.flutterWidgetsAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.flutterWidgetsAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.flutterWidgetsAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.flutterWidgetsAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.flutterWidgetsAppNamedRouter.hasTitle() ? tree.flutterWidgetsAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          textStyle: (tree.flutterWidgetsAppNamedRouter.hasTextStyle() ? evaluateFlutterTextStyleType(tree.flutterWidgetsAppNamedRouter.textStyle) : null),
          color: (tree.flutterWidgetsAppNamedRouter.hasColor() ? evaluateRequiredDartColorType(tree.flutterWidgetsAppNamedRouter.color) : missing('color')),
          locale: (tree.flutterWidgetsAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.flutterWidgetsAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.flutterWidgetsAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          showPerformanceOverlay: (tree.flutterWidgetsAppNamedRouter.hasShowPerformanceOverlay() ? tree.flutterWidgetsAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.flutterWidgetsAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.flutterWidgetsAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.flutterWidgetsAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.flutterWidgetsAppNamedRouter.hasShowSemanticsDebugger() ? tree.flutterWidgetsAppNamedRouter.showSemanticsDebugger : false),
          debugShowWidgetInspector: (tree.flutterWidgetsAppNamedRouter.hasDebugShowWidgetInspector() ? tree.flutterWidgetsAppNamedRouter.debugShowWidgetInspector : false),
          debugShowCheckedModeBanner: (tree.flutterWidgetsAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.flutterWidgetsAppNamedRouter.debugShowCheckedModeBanner : true),
          inspectorSelectButtonBuilder: null,
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.flutterWidgetsAppNamedRouter.hasRestorationScopeId() ? tree.flutterWidgetsAppNamedRouter.restorationScopeId : null));
    case messages.WidgetType_Constructor.flutterWrap:
      return $flutterSrcWidgetsBasic.Wrap(
          key: (tree.flutterWrap.hasKey() ? evaluateFlutterKeyType(tree.flutterWrap.key) : null),
          direction: (tree.flutterWrap.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.flutterWrap.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          alignment: (tree.flutterWrap.hasAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.alignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          spacing: (tree.flutterWrap.hasSpacing() ? tree.flutterWrap.spacing : 0.0),
          runAlignment: (tree.flutterWrap.hasRunAlignment() ? enums.convertRequiredFlutterWrapAlignmentType(tree.flutterWrap.runAlignment) : $flutterSrcRenderingWrap.WrapAlignment.start),
          runSpacing: (tree.flutterWrap.hasRunSpacing() ? tree.flutterWrap.runSpacing : 0.0),
          crossAxisAlignment: (tree.flutterWrap.hasCrossAxisAlignment() ? enums.convertRequiredFlutterWrapCrossAlignmentType(tree.flutterWrap.crossAxisAlignment) : $flutterSrcRenderingWrap.WrapCrossAlignment.start),
          textDirection: (tree.flutterWrap.hasTextDirection() ? enums.convertDartTextDirectionType(tree.flutterWrap.textDirection) : null),
          verticalDirection: (tree.flutterWrap.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.flutterWrap.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down),
          clipBehavior: (tree.flutterWrap.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.flutterWrap.clipBehavior) : $dartUi.Clip.none),
          children: tree.flutterWrap.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialAboutDialog:
      return $flutterSrcMaterialAbout.AboutDialog(
          key: (tree.materialAboutDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAboutDialog.key) : null),
          applicationName: (tree.materialAboutDialog.hasApplicationName() ? tree.materialAboutDialog.applicationName : null),
          applicationVersion: (tree.materialAboutDialog.hasApplicationVersion() ? tree.materialAboutDialog.applicationVersion : null),
          applicationIcon: (tree.materialAboutDialog.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutDialog.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutDialog.hasApplicationLegalese() ? tree.materialAboutDialog.applicationLegalese : null),
          children: tree.materialAboutDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialAboutListTile:
      return $flutterSrcMaterialAbout.AboutListTile(
          key: (tree.materialAboutListTile.hasKey() ? evaluateFlutterKeyType(tree.materialAboutListTile.key) : null),
          icon: (tree.materialAboutListTile.hasIcon() ? evaluateWidgetType(tree.materialAboutListTile.icon) : null),
          child: (tree.materialAboutListTile.hasChild() ? evaluateWidgetType(tree.materialAboutListTile.child) : null),
          applicationName: (tree.materialAboutListTile.hasApplicationName() ? tree.materialAboutListTile.applicationName : null),
          applicationVersion: (tree.materialAboutListTile.hasApplicationVersion() ? tree.materialAboutListTile.applicationVersion : null),
          applicationIcon: (tree.materialAboutListTile.hasApplicationIcon() ? evaluateWidgetType(tree.materialAboutListTile.applicationIcon) : null),
          applicationLegalese: (tree.materialAboutListTile.hasApplicationLegalese() ? tree.materialAboutListTile.applicationLegalese : null),
          aboutBoxChildren: tree.materialAboutListTile.aboutBoxChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          dense: (tree.materialAboutListTile.hasDense() ? tree.materialAboutListTile.dense : null));
    case messages.WidgetType_Constructor.materialActionChip:
      return $flutterSrcMaterialActionChip.ActionChip(
          key: (tree.materialActionChip.hasKey() ? evaluateFlutterKeyType(tree.materialActionChip.key) : null),
          avatar: (tree.materialActionChip.hasAvatar() ? evaluateWidgetType(tree.materialActionChip.avatar) : null),
          label: (tree.materialActionChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChip.label) : missing('label')),
          labelStyle: (tree.materialActionChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChip.labelStyle) : null),
          labelPadding: (tree.materialActionChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChip.hasPressElevation() ? tree.materialActionChip.pressElevation : null),
          tooltip: (tree.materialActionChip.hasTooltip() ? tree.materialActionChip.tooltip : null),
          side: (tree.materialActionChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChip.side) : null),
          shape: (tree.materialActionChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChip.shape) : null),
          clipBehavior: (tree.materialActionChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChip.focusNode) : null),
          autofocus: (tree.materialActionChip.hasAutofocus() ? tree.materialActionChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChip.backgroundColor) : null),
          disabledColor: (tree.materialActionChip.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChip.disabledColor) : null),
          padding: (tree.materialActionChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChip.padding) : null),
          visualDensity: (tree.materialActionChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChip.materialTapTargetSize) : null),
          elevation: (tree.materialActionChip.hasElevation() ? tree.materialActionChip.elevation : null),
          shadowColor: (tree.materialActionChip.hasShadowColor() ? evaluateDartColorType(tree.materialActionChip.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChip.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChip.iconTheme) : null));
    case messages.WidgetType_Constructor.materialActionChipNamedElevated:
      return $flutterSrcMaterialActionChip.ActionChip.elevated(
          key: (tree.materialActionChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialActionChipNamedElevated.key) : null),
          avatar: (tree.materialActionChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialActionChipNamedElevated.avatar) : null),
          label: (tree.materialActionChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialActionChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialActionChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialActionChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialActionChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.labelPadding) : null),
          onPressed: null,
          pressElevation: (tree.materialActionChipNamedElevated.hasPressElevation() ? tree.materialActionChipNamedElevated.pressElevation : null),
          tooltip: (tree.materialActionChipNamedElevated.hasTooltip() ? tree.materialActionChipNamedElevated.tooltip : null),
          side: (tree.materialActionChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialActionChipNamedElevated.side) : null),
          shape: (tree.materialActionChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialActionChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialActionChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialActionChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialActionChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialActionChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialActionChipNamedElevated.hasAutofocus() ? tree.materialActionChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialActionChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.backgroundColor) : null),
          disabledColor: (tree.materialActionChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.disabledColor) : null),
          padding: (tree.materialActionChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialActionChipNamedElevated.padding) : null),
          visualDensity: (tree.materialActionChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialActionChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialActionChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialActionChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialActionChipNamedElevated.hasElevation() ? tree.materialActionChipNamedElevated.elevation : null),
          shadowColor: (tree.materialActionChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialActionChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialActionChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialActionChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialActionChipNamedElevated.iconTheme) : null));
    case messages.WidgetType_Constructor.materialActionIconTheme:
      return $flutterSrcMaterialActionIconsTheme.ActionIconTheme(
          key: (tree.materialActionIconTheme.hasKey() ? evaluateFlutterKeyType(tree.materialActionIconTheme.key) : null),
          data: (tree.materialActionIconTheme.hasData() ? evaluateRequiredMaterialActionIconThemeDataType(tree.materialActionIconTheme.data) : missing('data')),
          child: (tree.materialActionIconTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialActionIconTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialAdaptiveTextSelectionToolbar:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar(
          key: (tree.materialAdaptiveTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbar.key) : null),
          children: tree.materialAdaptiveTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbar.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbar.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedButtonItems:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.buttonItems(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.key) : null),
          buttonItems: tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList(),
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedButtonItems.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditable:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editable(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.key) : null),
          clipboardStatus: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasClipboardStatus() ? enums.convertRequiredFlutterClipboardStatusType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.clipboardStatus) : missing('clipboardStatus')),
          onCopy: null,
          onCut: null,
          onPaste: null,
          onSelectAll: null,
          onLookUp: null,
          onSearchWeb: null,
          onShare: null,
          onLiveTextInput: null,
          anchors: (tree.materialAdaptiveTextSelectionToolbarNamedEditable.hasAnchors() ? evaluateRequiredFlutterTextSelectionToolbarAnchorsType(tree.materialAdaptiveTextSelectionToolbarNamedEditable.anchors) : missing('anchors')));
    case messages.WidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedEditableText:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.editableText(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialAdaptiveTextSelectionToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialAdaptiveTextSelectionToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.WidgetType_Constructor.materialAdaptiveTextSelectionToolbarNamedSelectableRegion:
      return $flutterSrcMaterialAdaptiveTextSelectionToolbar.AdaptiveTextSelectionToolbar.selectableRegion(
          key: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasKey() ? evaluateFlutterKeyType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.key) : null),
          selectableRegionState: (tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.hasSelectableRegionState() ? evaluateRequiredFlutterSelectableRegionStateType(tree.materialAdaptiveTextSelectionToolbarNamedSelectableRegion.selectableRegionState) : missing('selectableRegionState')));
    case messages.WidgetType_Constructor.materialAlertDialog:
      return $flutterSrcMaterialDialog.AlertDialog(
          key: (tree.materialAlertDialog.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialog.key) : null),
          icon: (tree.materialAlertDialog.hasIcon() ? evaluateWidgetType(tree.materialAlertDialog.icon) : null),
          iconPadding: (tree.materialAlertDialog.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.iconPadding) : null),
          iconColor: (tree.materialAlertDialog.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialog.iconColor) : null),
          title: (tree.materialAlertDialog.hasTitle() ? evaluateWidgetType(tree.materialAlertDialog.title) : null),
          titlePadding: (tree.materialAlertDialog.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.titleTextStyle) : null),
          content: (tree.materialAlertDialog.hasContent() ? evaluateWidgetType(tree.materialAlertDialog.content) : null),
          contentPadding: (tree.materialAlertDialog.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialog.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialog.contentTextStyle) : null),
          actions: tree.materialAlertDialog.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialog.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialog.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialog.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialog.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialog.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialog.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialog.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialog.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialog.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialog.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialog.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialog.backgroundColor) : null),
          elevation: (tree.materialAlertDialog.hasElevation() ? tree.materialAlertDialog.elevation : null),
          shadowColor: (tree.materialAlertDialog.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialog.hasSemanticLabel() ? tree.materialAlertDialog.semanticLabel : null),
          insetPadding: (tree.materialAlertDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialAlertDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialAlertDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialog.shape) : null),
          alignment: (tree.materialAlertDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialog.alignment) : null),
          scrollable: (tree.materialAlertDialog.hasScrollable() ? tree.materialAlertDialog.scrollable : false));
    case messages.WidgetType_Constructor.materialAlertDialogNamedAdaptive:
      return $flutterSrcMaterialDialog.AlertDialog.adaptive(
          key: (tree.materialAlertDialogNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialAlertDialogNamedAdaptive.key) : null),
          icon: (tree.materialAlertDialogNamedAdaptive.hasIcon() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.icon) : null),
          iconPadding: (tree.materialAlertDialogNamedAdaptive.hasIconPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.iconPadding) : null),
          iconColor: (tree.materialAlertDialogNamedAdaptive.hasIconColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.iconColor) : null),
          title: (tree.materialAlertDialogNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.title) : null),
          titlePadding: (tree.materialAlertDialogNamedAdaptive.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.titlePadding) : null),
          titleTextStyle: (tree.materialAlertDialogNamedAdaptive.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.titleTextStyle) : null),
          content: (tree.materialAlertDialogNamedAdaptive.hasContent() ? evaluateWidgetType(tree.materialAlertDialogNamedAdaptive.content) : null),
          contentPadding: (tree.materialAlertDialogNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.contentPadding) : null),
          contentTextStyle: (tree.materialAlertDialogNamedAdaptive.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialAlertDialogNamedAdaptive.contentTextStyle) : null),
          actions: tree.materialAlertDialogNamedAdaptive.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          actionsPadding: (tree.materialAlertDialogNamedAdaptive.hasActionsPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.actionsPadding) : null),
          actionsAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsAlignment) : null),
          actionsOverflowAlignment: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowAlignment() ? enums.convertFlutterOverflowBarAlignmentType(tree.materialAlertDialogNamedAdaptive.actionsOverflowAlignment) : null),
          actionsOverflowDirection: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialAlertDialogNamedAdaptive.actionsOverflowDirection) : null),
          actionsOverflowButtonSpacing: (tree.materialAlertDialogNamedAdaptive.hasActionsOverflowButtonSpacing() ? tree.materialAlertDialogNamedAdaptive.actionsOverflowButtonSpacing : null),
          buttonPadding: (tree.materialAlertDialogNamedAdaptive.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialAlertDialogNamedAdaptive.buttonPadding) : null),
          backgroundColor: (tree.materialAlertDialogNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.backgroundColor) : null),
          elevation: (tree.materialAlertDialogNamedAdaptive.hasElevation() ? tree.materialAlertDialogNamedAdaptive.elevation : null),
          shadowColor: (tree.materialAlertDialogNamedAdaptive.hasShadowColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.shadowColor) : null),
          surfaceTintColor: (tree.materialAlertDialogNamedAdaptive.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAlertDialogNamedAdaptive.surfaceTintColor) : null),
          semanticLabel: (tree.materialAlertDialogNamedAdaptive.hasSemanticLabel() ? tree.materialAlertDialogNamedAdaptive.semanticLabel : null),
          insetPadding: (tree.materialAlertDialogNamedAdaptive.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialAlertDialogNamedAdaptive.insetPadding) : missing('insetPadding')),
          clipBehavior: (tree.materialAlertDialogNamedAdaptive.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialAlertDialogNamedAdaptive.clipBehavior) : missing('clipBehavior')),
          shape: (tree.materialAlertDialogNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAlertDialogNamedAdaptive.shape) : null),
          alignment: (tree.materialAlertDialogNamedAdaptive.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialAlertDialogNamedAdaptive.alignment) : null),
          scrollable: (tree.materialAlertDialogNamedAdaptive.hasScrollable() ? tree.materialAlertDialogNamedAdaptive.scrollable : missing('scrollable')),
          scrollController: (tree.materialAlertDialogNamedAdaptive.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.scrollController) : null),
          actionScrollController: (tree.materialAlertDialogNamedAdaptive.hasActionScrollController() ? evaluateFlutterScrollControllerType(tree.materialAlertDialogNamedAdaptive.actionScrollController) : null),
          insetAnimationDuration: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialAlertDialogNamedAdaptive.insetAnimationDuration) : missing('insetAnimationDuration')),
          insetAnimationCurve: (tree.materialAlertDialogNamedAdaptive.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAlertDialogNamedAdaptive.insetAnimationCurve) : missing('insetAnimationCurve')));
    case messages.WidgetType_Constructor.materialAnimatedTheme:
      return $flutterSrcMaterialTheme.AnimatedTheme(
          key: (tree.materialAnimatedTheme.hasKey() ? evaluateFlutterKeyType(tree.materialAnimatedTheme.key) : null),
          data: (tree.materialAnimatedTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialAnimatedTheme.data) : missing('data')),
          curve: (tree.materialAnimatedTheme.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialAnimatedTheme.curve) : $flutterSrcAnimationCurves.Curves.linear),
          duration: (tree.materialAnimatedTheme.hasDuration() ? evaluateRequiredDartDurationType(tree.materialAnimatedTheme.duration) : missing('duration')),
          onEnd: null,
          child: (tree.materialAnimatedTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialAnimatedTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialAppBar:
      return $flutterSrcMaterialAppBar.AppBar(
          key: (tree.materialAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialAppBar.key) : null),
          leading: (tree.materialAppBar.hasLeading() ? evaluateWidgetType(tree.materialAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialAppBar.hasAutomaticallyImplyLeading() ? tree.materialAppBar.automaticallyImplyLeading : true),
          title: (tree.materialAppBar.hasTitle() ? evaluateWidgetType(tree.materialAppBar.title) : null),
          actions: tree.materialAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialAppBar.flexibleSpace) : null),
          bottom: (tree.materialAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialAppBar.bottom) : null),
          elevation: (tree.materialAppBar.hasElevation() ? tree.materialAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialAppBar.hasScrolledUnderElevation() ? tree.materialAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialAppBar.surfaceTintColor) : null),
          shape: (tree.materialAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialAppBar.shape) : null),
          backgroundColor: (tree.materialAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialAppBar.foregroundColor) : null),
          iconTheme: (tree.materialAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialAppBar.actionsIconTheme) : null),
          primary: (tree.materialAppBar.hasPrimary() ? tree.materialAppBar.primary : true),
          centerTitle: (tree.materialAppBar.hasCenterTitle() ? tree.materialAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialAppBar.hasExcludeHeaderSemantics() ? tree.materialAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialAppBar.hasTitleSpacing() ? tree.materialAppBar.titleSpacing : null),
          toolbarOpacity: (tree.materialAppBar.hasToolbarOpacity() ? tree.materialAppBar.toolbarOpacity : 1.0),
          bottomOpacity: (tree.materialAppBar.hasBottomOpacity() ? tree.materialAppBar.bottomOpacity : 1.0),
          toolbarHeight: (tree.materialAppBar.hasToolbarHeight() ? tree.materialAppBar.toolbarHeight : null),
          leadingWidth: (tree.materialAppBar.hasLeadingWidth() ? tree.materialAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialAppBar.hasForceMaterialTransparency() ? tree.materialAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialAppBar.clipBehavior) : null));
    case messages.WidgetType_Constructor.materialBackButton:
      return $flutterSrcMaterialActionButtons.BackButton(
          key: (tree.materialBackButton.hasKey() ? evaluateFlutterKeyType(tree.materialBackButton.key) : null),
          color: (tree.materialBackButton.hasColor() ? evaluateDartColorType(tree.materialBackButton.color) : null),
          style: (tree.materialBackButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialBackButton.style) : null),
          onPressed: null);
    case messages.WidgetType_Constructor.materialBackButtonIcon:
      return $flutterSrcMaterialActionButtons.BackButtonIcon(
          key: (tree.materialBackButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialBackButtonIcon.key) : null));
    case messages.WidgetType_Constructor.materialBadge:
      return $flutterSrcMaterialBadge.Badge(
          key: (tree.materialBadge.hasKey() ? evaluateFlutterKeyType(tree.materialBadge.key) : null),
          backgroundColor: (tree.materialBadge.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadge.backgroundColor) : null),
          textColor: (tree.materialBadge.hasTextColor() ? evaluateDartColorType(tree.materialBadge.textColor) : null),
          smallSize: (tree.materialBadge.hasSmallSize() ? tree.materialBadge.smallSize : null),
          largeSize: (tree.materialBadge.hasLargeSize() ? tree.materialBadge.largeSize : null),
          textStyle: (tree.materialBadge.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadge.textStyle) : null),
          padding: (tree.materialBadge.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadge.padding) : null),
          alignment: (tree.materialBadge.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadge.alignment) : null),
          offset: (tree.materialBadge.hasOffset() ? evaluateDartOffsetType(tree.materialBadge.offset) : null),
          label: (tree.materialBadge.hasLabel() ? evaluateWidgetType(tree.materialBadge.label) : null),
          isLabelVisible: (tree.materialBadge.hasIsLabelVisible() ? tree.materialBadge.isLabelVisible : true),
          child: (tree.materialBadge.hasChild() ? evaluateWidgetType(tree.materialBadge.child) : null));
    case messages.WidgetType_Constructor.materialBadgeNamedCount:
      return $flutterSrcMaterialBadge.Badge.count(
          key: (tree.materialBadgeNamedCount.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeNamedCount.key) : null),
          backgroundColor: (tree.materialBadgeNamedCount.hasBackgroundColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.backgroundColor) : null),
          textColor: (tree.materialBadgeNamedCount.hasTextColor() ? evaluateDartColorType(tree.materialBadgeNamedCount.textColor) : null),
          smallSize: (tree.materialBadgeNamedCount.hasSmallSize() ? tree.materialBadgeNamedCount.smallSize : null),
          largeSize: (tree.materialBadgeNamedCount.hasLargeSize() ? tree.materialBadgeNamedCount.largeSize : null),
          textStyle: (tree.materialBadgeNamedCount.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialBadgeNamedCount.textStyle) : null),
          padding: (tree.materialBadgeNamedCount.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBadgeNamedCount.padding) : null),
          alignment: (tree.materialBadgeNamedCount.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialBadgeNamedCount.alignment) : null),
          offset: (tree.materialBadgeNamedCount.hasOffset() ? evaluateDartOffsetType(tree.materialBadgeNamedCount.offset) : null),
          count: (tree.materialBadgeNamedCount.hasCount() ? tree.materialBadgeNamedCount.count : missing('count')),
          isLabelVisible: (tree.materialBadgeNamedCount.hasIsLabelVisible() ? tree.materialBadgeNamedCount.isLabelVisible : true),
          child: (tree.materialBadgeNamedCount.hasChild() ? evaluateWidgetType(tree.materialBadgeNamedCount.child) : null));
    case messages.WidgetType_Constructor.materialBadgeTheme:
      return $flutterSrcMaterialBadgeTheme.BadgeTheme(
          key: (tree.materialBadgeTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBadgeTheme.key) : null),
          data: (tree.materialBadgeTheme.hasData() ? evaluateRequiredMaterialBadgeThemeDataType(tree.materialBadgeTheme.data) : missing('data')),
          child: (tree.materialBadgeTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBadgeTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialBottomAppBar:
      return $flutterSrcMaterialBottomAppBar.BottomAppBar(
          key: (tree.materialBottomAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomAppBar.key) : null),
          color: (tree.materialBottomAppBar.hasColor() ? evaluateDartColorType(tree.materialBottomAppBar.color) : null),
          elevation: (tree.materialBottomAppBar.hasElevation() ? tree.materialBottomAppBar.elevation : null),
          shape: (tree.materialBottomAppBar.hasShape() ? evaluateFlutterNotchedShapeType(tree.materialBottomAppBar.shape) : null),
          clipBehavior: (tree.materialBottomAppBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialBottomAppBar.clipBehavior) : $dartUi.Clip.none),
          notchMargin: (tree.materialBottomAppBar.hasNotchMargin() ? tree.materialBottomAppBar.notchMargin : 4.0),
          child: (tree.materialBottomAppBar.hasChild() ? evaluateWidgetType(tree.materialBottomAppBar.child) : null),
          padding: (tree.materialBottomAppBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialBottomAppBar.padding) : null),
          surfaceTintColor: (tree.materialBottomAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialBottomAppBar.surfaceTintColor) : null),
          shadowColor: (tree.materialBottomAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialBottomAppBar.shadowColor) : null),
          height: (tree.materialBottomAppBar.hasHeight() ? tree.materialBottomAppBar.height : null));
    case messages.WidgetType_Constructor.materialBottomNavigationBar:
      return $flutterSrcMaterialBottomNavigationBar.BottomNavigationBar(
          key: (tree.materialBottomNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBar.key) : null),
          items: tree.materialBottomNavigationBar.items.map((e) => evaluateRequiredFlutterBottomNavigationBarItemType(e)).toList(),
          onTap: null,
          currentIndex: (tree.materialBottomNavigationBar.hasCurrentIndex() ? tree.materialBottomNavigationBar.currentIndex : 0),
          elevation: (tree.materialBottomNavigationBar.hasElevation() ? tree.materialBottomNavigationBar.elevation : null),
          type: (tree.materialBottomNavigationBar.hasType() ? enums.convertMaterialBottomNavigationBarTypeType(tree.materialBottomNavigationBar.type) : null),
          fixedColor: (tree.materialBottomNavigationBar.hasFixedColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.fixedColor) : null),
          backgroundColor: (tree.materialBottomNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.backgroundColor) : null),
          iconSize: (tree.materialBottomNavigationBar.hasIconSize() ? tree.materialBottomNavigationBar.iconSize : 24.0),
          selectedItemColor: (tree.materialBottomNavigationBar.hasSelectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.selectedItemColor) : null),
          unselectedItemColor: (tree.materialBottomNavigationBar.hasUnselectedItemColor() ? evaluateDartColorType(tree.materialBottomNavigationBar.unselectedItemColor) : null),
          selectedIconTheme: (tree.materialBottomNavigationBar.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.selectedIconTheme) : null),
          unselectedIconTheme: (tree.materialBottomNavigationBar.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialBottomNavigationBar.unselectedIconTheme) : null),
          selectedFontSize: (tree.materialBottomNavigationBar.hasSelectedFontSize() ? tree.materialBottomNavigationBar.selectedFontSize : 14.0),
          unselectedFontSize: (tree.materialBottomNavigationBar.hasUnselectedFontSize() ? tree.materialBottomNavigationBar.unselectedFontSize : 12.0),
          selectedLabelStyle: (tree.materialBottomNavigationBar.hasSelectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.selectedLabelStyle) : null),
          unselectedLabelStyle: (tree.materialBottomNavigationBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialBottomNavigationBar.unselectedLabelStyle) : null),
          showSelectedLabels: (tree.materialBottomNavigationBar.hasShowSelectedLabels() ? tree.materialBottomNavigationBar.showSelectedLabels : null),
          showUnselectedLabels: (tree.materialBottomNavigationBar.hasShowUnselectedLabels() ? tree.materialBottomNavigationBar.showUnselectedLabels : null),
          mouseCursor: null,
          enableFeedback: (tree.materialBottomNavigationBar.hasEnableFeedback() ? tree.materialBottomNavigationBar.enableFeedback : null),
          landscapeLayout: (tree.materialBottomNavigationBar.hasLandscapeLayout() ? enums.convertMaterialBottomNavigationBarLandscapeLayoutType(tree.materialBottomNavigationBar.landscapeLayout) : null),
          useLegacyColorScheme: (tree.materialBottomNavigationBar.hasUseLegacyColorScheme() ? tree.materialBottomNavigationBar.useLegacyColorScheme : true));
    case messages.WidgetType_Constructor.materialBottomNavigationBarTheme:
      return $flutterSrcMaterialBottomNavigationBarTheme.BottomNavigationBarTheme(
          key: (tree.materialBottomNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialBottomNavigationBarTheme.key) : null),
          data: (tree.materialBottomNavigationBarTheme.hasData() ? evaluateRequiredMaterialBottomNavigationBarThemeDataType(tree.materialBottomNavigationBarTheme.data) : missing('data')),
          child: (tree.materialBottomNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialBottomNavigationBarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialButtonBar:
      return $flutterSrcMaterialButtonBar.ButtonBar(
          key: (tree.materialButtonBar.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBar.key) : null),
          alignment: (tree.materialButtonBar.hasAlignment() ? enums.convertFlutterMainAxisAlignmentType(tree.materialButtonBar.alignment) : null),
          mainAxisSize: (tree.materialButtonBar.hasMainAxisSize() ? enums.convertFlutterMainAxisSizeType(tree.materialButtonBar.mainAxisSize) : null),
          buttonTextTheme: (tree.materialButtonBar.hasButtonTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialButtonBar.buttonTextTheme) : null),
          buttonMinWidth: (tree.materialButtonBar.hasButtonMinWidth() ? tree.materialButtonBar.buttonMinWidth : null),
          buttonHeight: (tree.materialButtonBar.hasButtonHeight() ? tree.materialButtonBar.buttonHeight : null),
          buttonPadding: (tree.materialButtonBar.hasButtonPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonBar.buttonPadding) : null),
          buttonAlignedDropdown: (tree.materialButtonBar.hasButtonAlignedDropdown() ? tree.materialButtonBar.buttonAlignedDropdown : null),
          layoutBehavior: (tree.materialButtonBar.hasLayoutBehavior() ? enums.convertMaterialButtonBarLayoutBehaviorType(tree.materialButtonBar.layoutBehavior) : null),
          overflowDirection: (tree.materialButtonBar.hasOverflowDirection() ? enums.convertFlutterVerticalDirectionType(tree.materialButtonBar.overflowDirection) : null),
          overflowButtonSpacing: (tree.materialButtonBar.hasOverflowButtonSpacing() ? tree.materialButtonBar.overflowButtonSpacing : null),
          children: tree.materialButtonBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialButtonBarTheme:
      return $flutterSrcMaterialButtonBarTheme.ButtonBarTheme(
          key: (tree.materialButtonBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonBarTheme.key) : null),
          data: (tree.materialButtonBarTheme.hasData() ? evaluateRequiredMaterialButtonBarThemeDataType(tree.materialButtonBarTheme.data) : missing('data')),
          child: (tree.materialButtonBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonBarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialButtonTheme:
      return $flutterSrcMaterialButtonTheme.ButtonTheme(
          key: (tree.materialButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialButtonTheme.key) : null),
          textTheme: (tree.materialButtonTheme.hasTextTheme() ? enums.convertRequiredMaterialButtonTextThemeType(tree.materialButtonTheme.textTheme) : $flutterSrcMaterialButtonTheme.ButtonTextTheme.normal),
          layoutBehavior: (tree.materialButtonTheme.hasLayoutBehavior() ? enums.convertRequiredMaterialButtonBarLayoutBehaviorType(tree.materialButtonTheme.layoutBehavior) : $flutterSrcMaterialButtonTheme.ButtonBarLayoutBehavior.padded),
          minWidth: (tree.materialButtonTheme.hasMinWidth() ? tree.materialButtonTheme.minWidth : 88.0),
          height: (tree.materialButtonTheme.hasHeight() ? tree.materialButtonTheme.height : 36.0),
          padding: (tree.materialButtonTheme.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialButtonTheme.padding) : null),
          shape: (tree.materialButtonTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialButtonTheme.shape) : null),
          alignedDropdown: (tree.materialButtonTheme.hasAlignedDropdown() ? tree.materialButtonTheme.alignedDropdown : false),
          buttonColor: (tree.materialButtonTheme.hasButtonColor() ? evaluateDartColorType(tree.materialButtonTheme.buttonColor) : null),
          disabledColor: (tree.materialButtonTheme.hasDisabledColor() ? evaluateDartColorType(tree.materialButtonTheme.disabledColor) : null),
          focusColor: (tree.materialButtonTheme.hasFocusColor() ? evaluateDartColorType(tree.materialButtonTheme.focusColor) : null),
          hoverColor: (tree.materialButtonTheme.hasHoverColor() ? evaluateDartColorType(tree.materialButtonTheme.hoverColor) : null),
          highlightColor: (tree.materialButtonTheme.hasHighlightColor() ? evaluateDartColorType(tree.materialButtonTheme.highlightColor) : null),
          splashColor: (tree.materialButtonTheme.hasSplashColor() ? evaluateDartColorType(tree.materialButtonTheme.splashColor) : null),
          colorScheme: (tree.materialButtonTheme.hasColorScheme() ? evaluateMaterialColorSchemeType(tree.materialButtonTheme.colorScheme) : null),
          materialTapTargetSize: (tree.materialButtonTheme.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialButtonTheme.materialTapTargetSize) : null),
          child: (tree.materialButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialButtonThemeNamedFromButtonThemeData:
      return $flutterSrcMaterialButtonTheme.ButtonTheme.fromButtonThemeData(
          key: (tree.materialButtonThemeNamedFromButtonThemeData.hasKey() ? evaluateFlutterKeyType(tree.materialButtonThemeNamedFromButtonThemeData.key) : null),
          data: (tree.materialButtonThemeNamedFromButtonThemeData.hasData() ? evaluateRequiredMaterialButtonThemeDataType(tree.materialButtonThemeNamedFromButtonThemeData.data) : missing('data')),
          child: (tree.materialButtonThemeNamedFromButtonThemeData.hasChild() ? evaluateRequiredWidgetType(tree.materialButtonThemeNamedFromButtonThemeData.child) : missing('child')));
    case messages.WidgetType_Constructor.materialCard:
      return $flutterSrcMaterialCard.Card(
          key: (tree.materialCard.hasKey() ? evaluateFlutterKeyType(tree.materialCard.key) : null),
          color: (tree.materialCard.hasColor() ? evaluateDartColorType(tree.materialCard.color) : null),
          shadowColor: (tree.materialCard.hasShadowColor() ? evaluateDartColorType(tree.materialCard.shadowColor) : null),
          surfaceTintColor: (tree.materialCard.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialCard.surfaceTintColor) : null),
          elevation: (tree.materialCard.hasElevation() ? tree.materialCard.elevation : null),
          shape: (tree.materialCard.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCard.shape) : null),
          borderOnForeground: (tree.materialCard.hasBorderOnForeground() ? tree.materialCard.borderOnForeground : true),
          margin: (tree.materialCard.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCard.margin) : null),
          clipBehavior: (tree.materialCard.hasClipBehavior() ? enums.convertDartClipType(tree.materialCard.clipBehavior) : null),
          child: (tree.materialCard.hasChild() ? evaluateWidgetType(tree.materialCard.child) : null),
          semanticContainer: (tree.materialCard.hasSemanticContainer() ? tree.materialCard.semanticContainer : true));
    case messages.WidgetType_Constructor.materialCheckbox:
      return $flutterSrcMaterialCheckbox.Checkbox(
          key: (tree.materialCheckbox.hasKey() ? evaluateFlutterKeyType(tree.materialCheckbox.key) : null),
          value: (tree.materialCheckbox.hasValue() ? tree.materialCheckbox.value : null),
          tristate: (tree.materialCheckbox.hasTristate() ? tree.materialCheckbox.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckbox.hasActiveColor() ? evaluateDartColorType(tree.materialCheckbox.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckbox.hasCheckColor() ? evaluateDartColorType(tree.materialCheckbox.checkColor) : null),
          focusColor: (tree.materialCheckbox.hasFocusColor() ? evaluateDartColorType(tree.materialCheckbox.focusColor) : null),
          hoverColor: (tree.materialCheckbox.hasHoverColor() ? evaluateDartColorType(tree.materialCheckbox.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckbox.hasSplashRadius() ? tree.materialCheckbox.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckbox.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckbox.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckbox.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckbox.visualDensity) : null),
          focusNode: (tree.materialCheckbox.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckbox.focusNode) : null),
          autofocus: (tree.materialCheckbox.hasAutofocus() ? tree.materialCheckbox.autofocus : false),
          shape: (tree.materialCheckbox.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckbox.shape) : null),
          side: (tree.materialCheckbox.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckbox.side) : null),
          isError: (tree.materialCheckbox.hasIsError() ? tree.materialCheckbox.isError : false),
          semanticLabel: (tree.materialCheckbox.hasSemanticLabel() ? tree.materialCheckbox.semanticLabel : null));
    case messages.WidgetType_Constructor.materialCheckboxListTile:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile(
          key: (tree.materialCheckboxListTile.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTile.key) : null),
          value: (tree.materialCheckboxListTile.hasValue() ? tree.materialCheckboxListTile.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTile.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTile.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTile.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTile.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTile.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTile.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTile.hasSplashRadius() ? tree.materialCheckboxListTile.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTile.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTile.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTile.focusNode) : null),
          autofocus: (tree.materialCheckboxListTile.hasAutofocus() ? tree.materialCheckboxListTile.autofocus : false),
          shape: (tree.materialCheckboxListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTile.shape) : null),
          side: (tree.materialCheckboxListTile.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTile.side) : null),
          isError: (tree.materialCheckboxListTile.hasIsError() ? tree.materialCheckboxListTile.isError : false),
          enabled: (tree.materialCheckboxListTile.hasEnabled() ? tree.materialCheckboxListTile.enabled : null),
          tileColor: (tree.materialCheckboxListTile.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.tileColor) : null),
          title: (tree.materialCheckboxListTile.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTile.title) : null),
          subtitle: (tree.materialCheckboxListTile.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTile.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTile.hasIsThreeLine() ? tree.materialCheckboxListTile.isThreeLine : false),
          dense: (tree.materialCheckboxListTile.hasDense() ? tree.materialCheckboxListTile.dense : null),
          secondary: (tree.materialCheckboxListTile.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTile.secondary) : null),
          selected: (tree.materialCheckboxListTile.hasSelected() ? tree.materialCheckboxListTile.selected : false),
          controlAffinity: (tree.materialCheckboxListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTile.contentPadding) : null),
          tristate: (tree.materialCheckboxListTile.hasTristate() ? tree.materialCheckboxListTile.tristate : false),
          checkboxShape: (tree.materialCheckboxListTile.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTile.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTile.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTile.hasEnableFeedback() ? tree.materialCheckboxListTile.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTile.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTile.checkboxSemanticLabel : null));
    case messages.WidgetType_Constructor.materialCheckboxListTileNamedAdaptive:
      return $flutterSrcMaterialCheckboxListTile.CheckboxListTile.adaptive(
          key: (tree.materialCheckboxListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxListTileNamedAdaptive.key) : null),
          value: (tree.materialCheckboxListTileNamedAdaptive.hasValue() ? tree.materialCheckboxListTileNamedAdaptive.value : null),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxListTileNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.checkColor) : null),
          hoverColor: (tree.materialCheckboxListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxListTileNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxListTileNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxListTileNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxListTileNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxListTileNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxListTileNamedAdaptive.hasAutofocus() ? tree.materialCheckboxListTileNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialCheckboxListTileNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxListTileNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxListTileNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxListTileNamedAdaptive.hasIsError() ? tree.materialCheckboxListTileNamedAdaptive.isError : false),
          enabled: (tree.materialCheckboxListTileNamedAdaptive.hasEnabled() ? tree.materialCheckboxListTileNamedAdaptive.enabled : null),
          tileColor: (tree.materialCheckboxListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialCheckboxListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialCheckboxListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialCheckboxListTileNamedAdaptive.hasIsThreeLine() ? tree.materialCheckboxListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialCheckboxListTileNamedAdaptive.hasDense() ? tree.materialCheckboxListTileNamedAdaptive.dense : null),
          secondary: (tree.materialCheckboxListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialCheckboxListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialCheckboxListTileNamedAdaptive.hasSelected() ? tree.materialCheckboxListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialCheckboxListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialCheckboxListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          contentPadding: (tree.materialCheckboxListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialCheckboxListTileNamedAdaptive.contentPadding) : null),
          tristate: (tree.materialCheckboxListTileNamedAdaptive.hasTristate() ? tree.materialCheckboxListTileNamedAdaptive.tristate : false),
          checkboxShape: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxListTileNamedAdaptive.checkboxShape) : null),
          selectedTileColor: (tree.materialCheckboxListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialCheckboxListTileNamedAdaptive.selectedTileColor) : null),
          onFocusChange: null,
          enableFeedback: (tree.materialCheckboxListTileNamedAdaptive.hasEnableFeedback() ? tree.materialCheckboxListTileNamedAdaptive.enableFeedback : null),
          checkboxSemanticLabel: (tree.materialCheckboxListTileNamedAdaptive.hasCheckboxSemanticLabel() ? tree.materialCheckboxListTileNamedAdaptive.checkboxSemanticLabel : null));
    case messages.WidgetType_Constructor.materialCheckboxMenuButton:
      return $flutterSrcMaterialMenuAnchor.CheckboxMenuButton(
          key: (tree.materialCheckboxMenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxMenuButton.key) : null),
          value: (tree.materialCheckboxMenuButton.hasValue() ? tree.materialCheckboxMenuButton.value : null),
          tristate: (tree.materialCheckboxMenuButton.hasTristate() ? tree.materialCheckboxMenuButton.tristate : false),
          isError: (tree.materialCheckboxMenuButton.hasIsError() ? tree.materialCheckboxMenuButton.isError : false),
          onChanged: null,
          onHover: null,
          onFocusChange: null,
          focusNode: (tree.materialCheckboxMenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxMenuButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialCheckboxMenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCheckboxMenuButton.style) : null),
          statesController: (tree.materialCheckboxMenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialCheckboxMenuButton.statesController) : null),
          clipBehavior: (tree.materialCheckboxMenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialCheckboxMenuButton.clipBehavior) : $dartUi.Clip.none),
          trailingIcon: (tree.materialCheckboxMenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialCheckboxMenuButton.trailingIcon) : null),
          closeOnActivate: (tree.materialCheckboxMenuButton.hasCloseOnActivate() ? tree.materialCheckboxMenuButton.closeOnActivate : true),
          child: (tree.materialCheckboxMenuButton.hasChild() ? evaluateWidgetType(tree.materialCheckboxMenuButton.child) : null));
    case messages.WidgetType_Constructor.materialCheckboxNamedAdaptive:
      return $flutterSrcMaterialCheckbox.Checkbox.adaptive(
          key: (tree.materialCheckboxNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxNamedAdaptive.key) : null),
          value: (tree.materialCheckboxNamedAdaptive.hasValue() ? tree.materialCheckboxNamedAdaptive.value : null),
          tristate: (tree.materialCheckboxNamedAdaptive.hasTristate() ? tree.materialCheckboxNamedAdaptive.tristate : false),
          onChanged: null,
          mouseCursor: null,
          activeColor: (tree.materialCheckboxNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.activeColor) : null),
          fillColor: null,
          checkColor: (tree.materialCheckboxNamedAdaptive.hasCheckColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.checkColor) : null),
          focusColor: (tree.materialCheckboxNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialCheckboxNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialCheckboxNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialCheckboxNamedAdaptive.hasSplashRadius() ? tree.materialCheckboxNamedAdaptive.splashRadius : null),
          materialTapTargetSize: (tree.materialCheckboxNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialCheckboxNamedAdaptive.materialTapTargetSize) : null),
          visualDensity: (tree.materialCheckboxNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialCheckboxNamedAdaptive.visualDensity) : null),
          focusNode: (tree.materialCheckboxNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialCheckboxNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialCheckboxNamedAdaptive.hasAutofocus() ? tree.materialCheckboxNamedAdaptive.autofocus : false),
          shape: (tree.materialCheckboxNamedAdaptive.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialCheckboxNamedAdaptive.shape) : null),
          side: (tree.materialCheckboxNamedAdaptive.hasSide() ? evaluateFlutterBorderSideType(tree.materialCheckboxNamedAdaptive.side) : null),
          isError: (tree.materialCheckboxNamedAdaptive.hasIsError() ? tree.materialCheckboxNamedAdaptive.isError : false),
          semanticLabel: (tree.materialCheckboxNamedAdaptive.hasSemanticLabel() ? tree.materialCheckboxNamedAdaptive.semanticLabel : null));
    case messages.WidgetType_Constructor.materialCheckboxTheme:
      return $flutterSrcMaterialCheckboxTheme.CheckboxTheme(
          key: (tree.materialCheckboxTheme.hasKey() ? evaluateFlutterKeyType(tree.materialCheckboxTheme.key) : null),
          data: (tree.materialCheckboxTheme.hasData() ? evaluateRequiredMaterialCheckboxThemeDataType(tree.materialCheckboxTheme.data) : missing('data')),
          child: (tree.materialCheckboxTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialCheckboxTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialCheckedPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.CheckedPopupMenuItem(
          key: (tree.materialCheckedPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialCheckedPopupMenuItem.key) : null),
          checked: (tree.materialCheckedPopupMenuItem.hasChecked() ? tree.materialCheckedPopupMenuItem.checked : false),
          enabled: (tree.materialCheckedPopupMenuItem.hasEnabled() ? tree.materialCheckedPopupMenuItem.enabled : true),
          padding: (tree.materialCheckedPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialCheckedPopupMenuItem.padding) : null),
          height: (tree.materialCheckedPopupMenuItem.hasHeight() ? tree.materialCheckedPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialCheckedPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialCheckedPopupMenuItem.child) : null),
          onTap: null);
    case messages.WidgetType_Constructor.materialChip:
      return $flutterSrcMaterialChip.Chip(
          key: (tree.materialChip.hasKey() ? evaluateFlutterKeyType(tree.materialChip.key) : null),
          avatar: (tree.materialChip.hasAvatar() ? evaluateWidgetType(tree.materialChip.avatar) : null),
          label: (tree.materialChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChip.label) : missing('label')),
          labelStyle: (tree.materialChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChip.labelStyle) : null),
          labelPadding: (tree.materialChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.labelPadding) : null),
          deleteIcon: (tree.materialChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialChip.hasDeleteButtonTooltipMessage() ? tree.materialChip.deleteButtonTooltipMessage : null),
          side: (tree.materialChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChip.side) : null),
          shape: (tree.materialChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChip.shape) : null),
          clipBehavior: (tree.materialChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChip.focusNode) : null),
          autofocus: (tree.materialChip.hasAutofocus() ? tree.materialChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChip.backgroundColor) : null),
          padding: (tree.materialChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChip.padding) : null),
          visualDensity: (tree.materialChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChip.materialTapTargetSize) : null),
          elevation: (tree.materialChip.hasElevation() ? tree.materialChip.elevation : null),
          shadowColor: (tree.materialChip.hasShadowColor() ? evaluateDartColorType(tree.materialChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChip.iconTheme) : null));
    case messages.WidgetType_Constructor.materialChipTheme:
      return $flutterSrcMaterialChipTheme.ChipTheme(
          key: (tree.materialChipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialChipTheme.key) : null),
          data: (tree.materialChipTheme.hasData() ? evaluateRequiredMaterialChipThemeDataType(tree.materialChipTheme.data) : missing('data')),
          child: (tree.materialChipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialChipTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialChoiceChip:
      return $flutterSrcMaterialChoiceChip.ChoiceChip(
          key: (tree.materialChoiceChip.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChip.key) : null),
          avatar: (tree.materialChoiceChip.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChip.avatar) : null),
          label: (tree.materialChoiceChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChip.label) : missing('label')),
          labelStyle: (tree.materialChoiceChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChip.labelStyle) : null),
          labelPadding: (tree.materialChoiceChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChip.hasPressElevation() ? tree.materialChoiceChip.pressElevation : null),
          selected: (tree.materialChoiceChip.hasSelected() ? tree.materialChoiceChip.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChip.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedColor) : null),
          disabledColor: (tree.materialChoiceChip.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChip.disabledColor) : null),
          tooltip: (tree.materialChoiceChip.hasTooltip() ? tree.materialChoiceChip.tooltip : null),
          side: (tree.materialChoiceChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChip.side) : null),
          shape: (tree.materialChoiceChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChip.shape) : null),
          clipBehavior: (tree.materialChoiceChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChip.focusNode) : null),
          autofocus: (tree.materialChoiceChip.hasAutofocus() ? tree.materialChoiceChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChip.backgroundColor) : null),
          padding: (tree.materialChoiceChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChip.padding) : null),
          visualDensity: (tree.materialChoiceChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChip.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChip.hasElevation() ? tree.materialChoiceChip.elevation : null),
          shadowColor: (tree.materialChoiceChip.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChip.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChip.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChip.hasShowCheckmark() ? tree.materialChoiceChip.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChip.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialChoiceChipNamedElevated:
      return $flutterSrcMaterialChoiceChip.ChoiceChip.elevated(
          key: (tree.materialChoiceChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialChoiceChipNamedElevated.key) : null),
          avatar: (tree.materialChoiceChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialChoiceChipNamedElevated.avatar) : null),
          label: (tree.materialChoiceChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialChoiceChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialChoiceChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialChoiceChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialChoiceChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.labelPadding) : null),
          onSelected: null,
          pressElevation: (tree.materialChoiceChipNamedElevated.hasPressElevation() ? tree.materialChoiceChipNamedElevated.pressElevation : null),
          selected: (tree.materialChoiceChipNamedElevated.hasSelected() ? tree.materialChoiceChipNamedElevated.selected : missing('selected')),
          selectedColor: (tree.materialChoiceChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedColor) : null),
          disabledColor: (tree.materialChoiceChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.disabledColor) : null),
          tooltip: (tree.materialChoiceChipNamedElevated.hasTooltip() ? tree.materialChoiceChipNamedElevated.tooltip : null),
          side: (tree.materialChoiceChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialChoiceChipNamedElevated.side) : null),
          shape: (tree.materialChoiceChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialChoiceChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialChoiceChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialChoiceChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialChoiceChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialChoiceChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialChoiceChipNamedElevated.hasAutofocus() ? tree.materialChoiceChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialChoiceChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialChoiceChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialChoiceChipNamedElevated.padding) : null),
          visualDensity: (tree.materialChoiceChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialChoiceChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialChoiceChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialChoiceChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialChoiceChipNamedElevated.hasElevation() ? tree.materialChoiceChipNamedElevated.elevation : null),
          shadowColor: (tree.materialChoiceChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialChoiceChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialChoiceChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialChoiceChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialChoiceChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialChoiceChipNamedElevated.hasShowCheckmark() ? tree.materialChoiceChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialChoiceChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialChoiceChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialChoiceChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialChoiceChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialCircleAvatar:
      return $flutterSrcMaterialCircleAvatar.CircleAvatar(
          key: (tree.materialCircleAvatar.hasKey() ? evaluateFlutterKeyType(tree.materialCircleAvatar.key) : null),
          child: (tree.materialCircleAvatar.hasChild() ? evaluateWidgetType(tree.materialCircleAvatar.child) : null),
          backgroundColor: (tree.materialCircleAvatar.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.backgroundColor) : null),
          backgroundImage: null,
          foregroundImage: null,
          onBackgroundImageError: null,
          onForegroundImageError: null,
          foregroundColor: (tree.materialCircleAvatar.hasForegroundColor() ? evaluateDartColorType(tree.materialCircleAvatar.foregroundColor) : null),
          radius: (tree.materialCircleAvatar.hasRadius() ? tree.materialCircleAvatar.radius : null),
          minRadius: (tree.materialCircleAvatar.hasMinRadius() ? tree.materialCircleAvatar.minRadius : null),
          maxRadius: (tree.materialCircleAvatar.hasMaxRadius() ? tree.materialCircleAvatar.maxRadius : null));
    case messages.WidgetType_Constructor.materialCircularProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator(
          key: (tree.materialCircularProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicator.key) : null),
          value: (tree.materialCircularProgressIndicator.hasValue() ? tree.materialCircularProgressIndicator.value : null),
          backgroundColor: (tree.materialCircularProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.backgroundColor) : null),
          color: (tree.materialCircularProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialCircularProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicator.hasStrokeWidth() ? tree.materialCircularProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialCircularProgressIndicator.hasStrokeAlign() ? tree.materialCircularProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialCircularProgressIndicator.hasSemanticsLabel() ? tree.materialCircularProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicator.hasSemanticsValue() ? tree.materialCircularProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicator.strokeCap) : null));
    case messages.WidgetType_Constructor.materialCircularProgressIndicatorNamedAdaptive:
      return $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.adaptive(
          key: (tree.materialCircularProgressIndicatorNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialCircularProgressIndicatorNamedAdaptive.key) : null),
          value: (tree.materialCircularProgressIndicatorNamedAdaptive.hasValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.value : null),
          backgroundColor: (tree.materialCircularProgressIndicatorNamedAdaptive.hasBackgroundColor() ? evaluateDartColorType(tree.materialCircularProgressIndicatorNamedAdaptive.backgroundColor) : null),
          valueColor: null,
          strokeWidth: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeWidth() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeWidth : 4.0),
          semanticsLabel: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsLabel() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsLabel : null),
          semanticsValue: (tree.materialCircularProgressIndicatorNamedAdaptive.hasSemanticsValue() ? tree.materialCircularProgressIndicatorNamedAdaptive.semanticsValue : null),
          strokeCap: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialCircularProgressIndicatorNamedAdaptive.strokeCap) : null),
          strokeAlign: (tree.materialCircularProgressIndicatorNamedAdaptive.hasStrokeAlign() ? tree.materialCircularProgressIndicatorNamedAdaptive.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter));
    case messages.WidgetType_Constructor.materialCloseButton:
      return $flutterSrcMaterialActionButtons.CloseButton(
          key: (tree.materialCloseButton.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButton.key) : null),
          color: (tree.materialCloseButton.hasColor() ? evaluateDartColorType(tree.materialCloseButton.color) : null),
          onPressed: null,
          style: (tree.materialCloseButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialCloseButton.style) : null));
    case messages.WidgetType_Constructor.materialCloseButtonIcon:
      return $flutterSrcMaterialActionButtons.CloseButtonIcon(
          key: (tree.materialCloseButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialCloseButtonIcon.key) : null));
    case messages.WidgetType_Constructor.materialDataTable:
      return $flutterSrcMaterialDataTable.DataTable(
          key: (tree.materialDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialDataTable.key) : null),
          columns: tree.materialDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialDataTable.hasSortColumnIndex() ? tree.materialDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialDataTable.hasSortAscending() ? tree.materialDataTable.sortAscending : true),
          onSelectAll: null,
          decoration: (tree.materialDataTable.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDataTable.decoration) : null),
          dataRowColor: null,
          dataRowMinHeight: (tree.materialDataTable.hasDataRowMinHeight() ? tree.materialDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialDataTable.hasDataRowMaxHeight() ? tree.materialDataTable.dataRowMaxHeight : null),
          dataTextStyle: (tree.materialDataTable.hasDataTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.dataTextStyle) : null),
          headingRowColor: null,
          headingRowHeight: (tree.materialDataTable.hasHeadingRowHeight() ? tree.materialDataTable.headingRowHeight : null),
          headingTextStyle: (tree.materialDataTable.hasHeadingTextStyle() ? evaluateFlutterTextStyleType(tree.materialDataTable.headingTextStyle) : null),
          horizontalMargin: (tree.materialDataTable.hasHorizontalMargin() ? tree.materialDataTable.horizontalMargin : null),
          columnSpacing: (tree.materialDataTable.hasColumnSpacing() ? tree.materialDataTable.columnSpacing : null),
          showCheckboxColumn: (tree.materialDataTable.hasShowCheckboxColumn() ? tree.materialDataTable.showCheckboxColumn : true),
          showBottomBorder: (tree.materialDataTable.hasShowBottomBorder() ? tree.materialDataTable.showBottomBorder : false),
          dividerThickness: (tree.materialDataTable.hasDividerThickness() ? tree.materialDataTable.dividerThickness : null),
          rows: tree.materialDataTable.rows.map((e) => evaluateRequiredMaterialDataRowType(e)).toList(),
          checkboxHorizontalMargin: (tree.materialDataTable.hasCheckboxHorizontalMargin() ? tree.materialDataTable.checkboxHorizontalMargin : null),
          border: (tree.materialDataTable.hasBorder() ? evaluateFlutterTableBorderType(tree.materialDataTable.border) : null),
          clipBehavior: (tree.materialDataTable.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDataTable.clipBehavior) : $dartUi.Clip.none));
    case messages.WidgetType_Constructor.materialDataTableTheme:
      return $flutterSrcMaterialDataTableTheme.DataTableTheme(
          key: (tree.materialDataTableTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDataTableTheme.key) : null),
          data: (tree.materialDataTableTheme.hasData() ? evaluateRequiredMaterialDataTableThemeDataType(tree.materialDataTableTheme.data) : missing('data')),
          child: (tree.materialDataTableTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDataTableTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDatePickerDialog:
      return $flutterSrcMaterialDatePicker.DatePickerDialog(
          key: (tree.materialDatePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerDialog.key) : null),
          initialDate: (tree.materialDatePickerDialog.hasInitialDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.initialDate) : null),
          firstDate: (tree.materialDatePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDatePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDatePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDatePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDatePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDatePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDatePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          selectableDayPredicate: null,
          cancelText: (tree.materialDatePickerDialog.hasCancelText() ? tree.materialDatePickerDialog.cancelText : null),
          confirmText: (tree.materialDatePickerDialog.hasConfirmText() ? tree.materialDatePickerDialog.confirmText : null),
          helpText: (tree.materialDatePickerDialog.hasHelpText() ? tree.materialDatePickerDialog.helpText : null),
          initialCalendarMode: (tree.materialDatePickerDialog.hasInitialCalendarMode() ? enums.convertRequiredMaterialDatePickerModeType(tree.materialDatePickerDialog.initialCalendarMode) : $flutterSrcMaterialDate.DatePickerMode.day),
          errorFormatText: (tree.materialDatePickerDialog.hasErrorFormatText() ? tree.materialDatePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDatePickerDialog.hasErrorInvalidText() ? tree.materialDatePickerDialog.errorInvalidText : null),
          fieldHintText: (tree.materialDatePickerDialog.hasFieldHintText() ? tree.materialDatePickerDialog.fieldHintText : null),
          fieldLabelText: (tree.materialDatePickerDialog.hasFieldLabelText() ? tree.materialDatePickerDialog.fieldLabelText : null),
          keyboardType: (tree.materialDatePickerDialog.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialDatePickerDialog.keyboardType) : null),
          restorationId: (tree.materialDatePickerDialog.hasRestorationId() ? tree.materialDatePickerDialog.restorationId : null),
          onDatePickerModeChange: null,
          switchToInputEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDatePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDatePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.WidgetType_Constructor.materialDatePickerTheme:
      return $flutterSrcMaterialDatePickerTheme.DatePickerTheme(
          key: (tree.materialDatePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDatePickerTheme.key) : null),
          data: (tree.materialDatePickerTheme.hasData() ? evaluateRequiredMaterialDatePickerThemeDataType(tree.materialDatePickerTheme.data) : missing('data')),
          child: (tree.materialDatePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDatePickerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDateRangePickerDialog:
      return $flutterSrcMaterialDatePicker.DateRangePickerDialog(
          key: (tree.materialDateRangePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDateRangePickerDialog.key) : null),
          initialDateRange: (tree.materialDateRangePickerDialog.hasInitialDateRange() ? evaluateMaterialDateTimeRangeType(tree.materialDateRangePickerDialog.initialDateRange) : null),
          firstDate: (tree.materialDateRangePickerDialog.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.firstDate) : missing('firstDate')),
          lastDate: (tree.materialDateRangePickerDialog.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialDateRangePickerDialog.lastDate) : missing('lastDate')),
          currentDate: (tree.materialDateRangePickerDialog.hasCurrentDate() ? evaluateDartDateTimeType(tree.materialDateRangePickerDialog.currentDate) : null),
          initialEntryMode: (tree.materialDateRangePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialDatePickerEntryModeType(tree.materialDateRangePickerDialog.initialEntryMode) : $flutterSrcMaterialDate.DatePickerEntryMode.calendar),
          helpText: (tree.materialDateRangePickerDialog.hasHelpText() ? tree.materialDateRangePickerDialog.helpText : null),
          cancelText: (tree.materialDateRangePickerDialog.hasCancelText() ? tree.materialDateRangePickerDialog.cancelText : null),
          confirmText: (tree.materialDateRangePickerDialog.hasConfirmText() ? tree.materialDateRangePickerDialog.confirmText : null),
          saveText: (tree.materialDateRangePickerDialog.hasSaveText() ? tree.materialDateRangePickerDialog.saveText : null),
          errorInvalidRangeText: (tree.materialDateRangePickerDialog.hasErrorInvalidRangeText() ? tree.materialDateRangePickerDialog.errorInvalidRangeText : null),
          errorFormatText: (tree.materialDateRangePickerDialog.hasErrorFormatText() ? tree.materialDateRangePickerDialog.errorFormatText : null),
          errorInvalidText: (tree.materialDateRangePickerDialog.hasErrorInvalidText() ? tree.materialDateRangePickerDialog.errorInvalidText : null),
          fieldStartHintText: (tree.materialDateRangePickerDialog.hasFieldStartHintText() ? tree.materialDateRangePickerDialog.fieldStartHintText : null),
          fieldEndHintText: (tree.materialDateRangePickerDialog.hasFieldEndHintText() ? tree.materialDateRangePickerDialog.fieldEndHintText : null),
          fieldStartLabelText: (tree.materialDateRangePickerDialog.hasFieldStartLabelText() ? tree.materialDateRangePickerDialog.fieldStartLabelText : null),
          fieldEndLabelText: (tree.materialDateRangePickerDialog.hasFieldEndLabelText() ? tree.materialDateRangePickerDialog.fieldEndLabelText : null),
          keyboardType: (tree.materialDateRangePickerDialog.hasKeyboardType() ? evaluateRequiredFlutterTextInputTypeType(tree.materialDateRangePickerDialog.keyboardType) : $flutterSrcServicesTextInput.TextInputType.datetime),
          restorationId: (tree.materialDateRangePickerDialog.hasRestorationId() ? tree.materialDateRangePickerDialog.restorationId : null),
          switchToInputEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToInputEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToInputEntryModeIcon) : null),
          switchToCalendarEntryModeIcon: (tree.materialDateRangePickerDialog.hasSwitchToCalendarEntryModeIcon() ? evaluateFlutterIconType(tree.materialDateRangePickerDialog.switchToCalendarEntryModeIcon) : null));
    case messages.WidgetType_Constructor.materialDefaultTabController:
      return $flutterSrcMaterialTabController.DefaultTabController(
          key: (tree.materialDefaultTabController.hasKey() ? evaluateFlutterKeyType(tree.materialDefaultTabController.key) : null),
          length: (tree.materialDefaultTabController.hasLength() ? tree.materialDefaultTabController.length : missing('length')),
          initialIndex: (tree.materialDefaultTabController.hasInitialIndex() ? tree.materialDefaultTabController.initialIndex : 0),
          child: (tree.materialDefaultTabController.hasChild() ? evaluateRequiredWidgetType(tree.materialDefaultTabController.child) : missing('child')),
          animationDuration: (tree.materialDefaultTabController.hasAnimationDuration() ? evaluateDartDurationType(tree.materialDefaultTabController.animationDuration) : null));
    case messages.WidgetType_Constructor.materialDesktopTextSelectionToolbar:
      return $flutterSrcMaterialDesktopTextSelectionToolbar.DesktopTextSelectionToolbar(
          key: (tree.materialDesktopTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbar.key) : null),
          anchor: (tree.materialDesktopTextSelectionToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialDesktopTextSelectionToolbar.anchor) : missing('anchor')),
          children: tree.materialDesktopTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialDesktopTextSelectionToolbarButton:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton(
          key: (tree.materialDesktopTextSelectionToolbarButton.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButton.key) : null),
          onPressed: null,
          child: (tree.materialDesktopTextSelectionToolbarButton.hasChild() ? evaluateRequiredWidgetType(tree.materialDesktopTextSelectionToolbarButton.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDesktopTextSelectionToolbarButtonNamedText:
      return $flutterSrcMaterialDesktopTextSelectionToolbarButton.DesktopTextSelectionToolbarButton.text(
          key: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasKey() ? evaluateFlutterKeyType(tree.materialDesktopTextSelectionToolbarButtonNamedText.key) : null),
          context: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasContext() ? evaluateRequiredFlutterBuildContextType(tree.materialDesktopTextSelectionToolbarButtonNamedText.context) : missing('context')),
          onPressed: null,
          text: (tree.materialDesktopTextSelectionToolbarButtonNamedText.hasText() ? tree.materialDesktopTextSelectionToolbarButtonNamedText.text : missing('text')));
    case messages.WidgetType_Constructor.materialDialog:
      return $flutterSrcMaterialDialog.Dialog(
          key: (tree.materialDialog.hasKey() ? evaluateFlutterKeyType(tree.materialDialog.key) : null),
          backgroundColor: (tree.materialDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialog.backgroundColor) : null),
          elevation: (tree.materialDialog.hasElevation() ? tree.materialDialog.elevation : null),
          shadowColor: (tree.materialDialog.hasShadowColor() ? evaluateDartColorType(tree.materialDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDialog.surfaceTintColor) : null),
          insetAnimationDuration: (tree.materialDialog.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialog.insetAnimationDuration) : $dartCore.Duration(milliseconds: 100)),
          insetAnimationCurve: (tree.materialDialog.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialog.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          insetPadding: (tree.materialDialog.hasInsetPadding() ? evaluateFlutterEdgeInsetsType(tree.materialDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDialog.shape) : null),
          alignment: (tree.materialDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialDialog.alignment) : null),
          child: (tree.materialDialog.hasChild() ? evaluateWidgetType(tree.materialDialog.child) : null));
    case messages.WidgetType_Constructor.materialDialogNamedFullscreen:
      return $flutterSrcMaterialDialog.Dialog.fullscreen(
          key: (tree.materialDialogNamedFullscreen.hasKey() ? evaluateFlutterKeyType(tree.materialDialogNamedFullscreen.key) : null),
          backgroundColor: (tree.materialDialogNamedFullscreen.hasBackgroundColor() ? evaluateDartColorType(tree.materialDialogNamedFullscreen.backgroundColor) : null),
          insetAnimationDuration: (tree.materialDialogNamedFullscreen.hasInsetAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialDialogNamedFullscreen.insetAnimationDuration) : $dartCore.Duration.zero),
          insetAnimationCurve: (tree.materialDialogNamedFullscreen.hasInsetAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDialogNamedFullscreen.insetAnimationCurve) : $flutterSrcAnimationCurves.Curves.decelerate),
          child: (tree.materialDialogNamedFullscreen.hasChild() ? evaluateWidgetType(tree.materialDialogNamedFullscreen.child) : null));
    case messages.WidgetType_Constructor.materialDivider:
      return $flutterSrcMaterialDivider.Divider(
          key: (tree.materialDivider.hasKey() ? evaluateFlutterKeyType(tree.materialDivider.key) : null),
          height: (tree.materialDivider.hasHeight() ? tree.materialDivider.height : null),
          thickness: (tree.materialDivider.hasThickness() ? tree.materialDivider.thickness : null),
          indent: (tree.materialDivider.hasIndent() ? tree.materialDivider.indent : null),
          endIndent: (tree.materialDivider.hasEndIndent() ? tree.materialDivider.endIndent : null),
          color: (tree.materialDivider.hasColor() ? evaluateDartColorType(tree.materialDivider.color) : null));
    case messages.WidgetType_Constructor.materialDividerTheme:
      return $flutterSrcMaterialDividerTheme.DividerTheme(
          key: (tree.materialDividerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDividerTheme.key) : null),
          data: (tree.materialDividerTheme.hasData() ? evaluateRequiredMaterialDividerThemeDataType(tree.materialDividerTheme.data) : missing('data')),
          child: (tree.materialDividerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDividerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDrawer:
      return $flutterSrcMaterialDrawer.Drawer(
          key: (tree.materialDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialDrawer.key) : null),
          backgroundColor: (tree.materialDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialDrawer.backgroundColor) : null),
          elevation: (tree.materialDrawer.hasElevation() ? tree.materialDrawer.elevation : null),
          shadowColor: (tree.materialDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialDrawer.surfaceTintColor) : null),
          shape: (tree.materialDrawer.hasShape() ? evaluateFlutterShapeBorderType(tree.materialDrawer.shape) : null),
          width: (tree.materialDrawer.hasWidth() ? tree.materialDrawer.width : null),
          child: (tree.materialDrawer.hasChild() ? evaluateWidgetType(tree.materialDrawer.child) : null),
          semanticLabel: (tree.materialDrawer.hasSemanticLabel() ? tree.materialDrawer.semanticLabel : null),
          clipBehavior: (tree.materialDrawer.hasClipBehavior() ? enums.convertDartClipType(tree.materialDrawer.clipBehavior) : null));
    case messages.WidgetType_Constructor.materialDrawerButton:
      return $flutterSrcMaterialActionButtons.DrawerButton(
          key: (tree.materialDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButton.key) : null),
          style: (tree.materialDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialDrawerButton.style) : null),
          onPressed: null);
    case messages.WidgetType_Constructor.materialDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.DrawerButtonIcon(
          key: (tree.materialDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerButtonIcon.key) : null));
    case messages.WidgetType_Constructor.materialDrawerController:
      return $flutterSrcMaterialDrawer.DrawerController(
          key: null,
          child: (tree.materialDrawerController.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerController.child) : missing('child')),
          alignment: (tree.materialDrawerController.hasAlignment() ? enums.convertRequiredMaterialDrawerAlignmentType(tree.materialDrawerController.alignment) : missing('alignment')),
          isDrawerOpen: (tree.materialDrawerController.hasIsDrawerOpen() ? tree.materialDrawerController.isDrawerOpen : false),
          drawerCallback: null,
          dragStartBehavior: (tree.materialDrawerController.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialDrawerController.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          scrimColor: (tree.materialDrawerController.hasScrimColor() ? evaluateDartColorType(tree.materialDrawerController.scrimColor) : null),
          edgeDragWidth: (tree.materialDrawerController.hasEdgeDragWidth() ? tree.materialDrawerController.edgeDragWidth : null),
          enableOpenDragGesture: (tree.materialDrawerController.hasEnableOpenDragGesture() ? tree.materialDrawerController.enableOpenDragGesture : true));
    case messages.WidgetType_Constructor.materialDrawerHeader:
      return $flutterSrcMaterialDrawerHeader.DrawerHeader(
          key: (tree.materialDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerHeader.key) : null),
          decoration: (tree.materialDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialDrawerHeader.decoration) : null),
          margin: (tree.materialDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          padding: (tree.materialDrawerHeader.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialDrawerHeader.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0)),
          duration: (tree.materialDrawerHeader.hasDuration() ? evaluateRequiredDartDurationType(tree.materialDrawerHeader.duration) : $dartCore.Duration(milliseconds: 250)),
          curve: (tree.materialDrawerHeader.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialDrawerHeader.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn),
          child: (tree.materialDrawerHeader.hasChild() ? evaluateWidgetType(tree.materialDrawerHeader.child) : null));
    case messages.WidgetType_Constructor.materialDrawerTheme:
      return $flutterSrcMaterialDrawerTheme.DrawerTheme(
          key: (tree.materialDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDrawerTheme.key) : null),
          data: (tree.materialDrawerTheme.hasData() ? evaluateRequiredMaterialDrawerThemeDataType(tree.materialDrawerTheme.data) : missing('data')),
          child: (tree.materialDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDrawerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDropdownButton:
      return $flutterSrcMaterialDropdown.DropdownButton(
          key: (tree.materialDropdownButton.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButton.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButton.hasHint() ? evaluateWidgetType(tree.materialDropdownButton.hint) : null),
          disabledHint: (tree.materialDropdownButton.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButton.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButton.hasElevation() ? tree.materialDropdownButton.elevation : 8),
          style: (tree.materialDropdownButton.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButton.style) : null),
          underline: (tree.materialDropdownButton.hasUnderline() ? evaluateWidgetType(tree.materialDropdownButton.underline) : null),
          icon: (tree.materialDropdownButton.hasIcon() ? evaluateWidgetType(tree.materialDropdownButton.icon) : null),
          iconDisabledColor: (tree.materialDropdownButton.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButton.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButton.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButton.hasIconSize() ? tree.materialDropdownButton.iconSize : 24.0),
          isDense: (tree.materialDropdownButton.hasIsDense() ? tree.materialDropdownButton.isDense : false),
          isExpanded: (tree.materialDropdownButton.hasIsExpanded() ? tree.materialDropdownButton.isExpanded : false),
          itemHeight: (tree.materialDropdownButton.hasItemHeight() ? tree.materialDropdownButton.itemHeight : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          focusColor: (tree.materialDropdownButton.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButton.focusColor) : null),
          focusNode: (tree.materialDropdownButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButton.focusNode) : null),
          autofocus: (tree.materialDropdownButton.hasAutofocus() ? tree.materialDropdownButton.autofocus : false),
          dropdownColor: (tree.materialDropdownButton.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButton.dropdownColor) : null),
          menuMaxHeight: (tree.materialDropdownButton.hasMenuMaxHeight() ? tree.materialDropdownButton.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButton.hasEnableFeedback() ? tree.materialDropdownButton.enableFeedback : null),
          alignment: (tree.materialDropdownButton.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButton.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButton.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButton.borderRadius) : null),
          padding: (tree.materialDropdownButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButton.padding) : null));
    case messages.WidgetType_Constructor.materialDropdownButtonFormField:
      return $flutterSrcMaterialDropdown.DropdownButtonFormField(
          key: (tree.materialDropdownButtonFormField.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonFormField.key) : null),
          items: null,
          selectedItemBuilder: null,
          hint: (tree.materialDropdownButtonFormField.hasHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.hint) : null),
          disabledHint: (tree.materialDropdownButtonFormField.hasDisabledHint() ? evaluateWidgetType(tree.materialDropdownButtonFormField.disabledHint) : null),
          onChanged: null,
          onTap: null,
          elevation: (tree.materialDropdownButtonFormField.hasElevation() ? tree.materialDropdownButtonFormField.elevation : 8),
          style: (tree.materialDropdownButtonFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialDropdownButtonFormField.style) : null),
          icon: (tree.materialDropdownButtonFormField.hasIcon() ? evaluateWidgetType(tree.materialDropdownButtonFormField.icon) : null),
          iconDisabledColor: (tree.materialDropdownButtonFormField.hasIconDisabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconDisabledColor) : null),
          iconEnabledColor: (tree.materialDropdownButtonFormField.hasIconEnabledColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.iconEnabledColor) : null),
          iconSize: (tree.materialDropdownButtonFormField.hasIconSize() ? tree.materialDropdownButtonFormField.iconSize : 24.0),
          isDense: (tree.materialDropdownButtonFormField.hasIsDense() ? tree.materialDropdownButtonFormField.isDense : true),
          isExpanded: (tree.materialDropdownButtonFormField.hasIsExpanded() ? tree.materialDropdownButtonFormField.isExpanded : false),
          itemHeight: (tree.materialDropdownButtonFormField.hasItemHeight() ? tree.materialDropdownButtonFormField.itemHeight : null),
          focusColor: (tree.materialDropdownButtonFormField.hasFocusColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.focusColor) : null),
          focusNode: (tree.materialDropdownButtonFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialDropdownButtonFormField.focusNode) : null),
          autofocus: (tree.materialDropdownButtonFormField.hasAutofocus() ? tree.materialDropdownButtonFormField.autofocus : false),
          dropdownColor: (tree.materialDropdownButtonFormField.hasDropdownColor() ? evaluateDartColorType(tree.materialDropdownButtonFormField.dropdownColor) : null),
          decoration: (tree.materialDropdownButtonFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialDropdownButtonFormField.decoration) : null),
          onSaved: null,
          validator: null,
          autovalidateMode: (tree.materialDropdownButtonFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialDropdownButtonFormField.autovalidateMode) : null),
          menuMaxHeight: (tree.materialDropdownButtonFormField.hasMenuMaxHeight() ? tree.materialDropdownButtonFormField.menuMaxHeight : null),
          enableFeedback: (tree.materialDropdownButtonFormField.hasEnableFeedback() ? tree.materialDropdownButtonFormField.enableFeedback : null),
          alignment: (tree.materialDropdownButtonFormField.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownButtonFormField.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          borderRadius: (tree.materialDropdownButtonFormField.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialDropdownButtonFormField.borderRadius) : null),
          padding: (tree.materialDropdownButtonFormField.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialDropdownButtonFormField.padding) : null));
    case messages.WidgetType_Constructor.materialDropdownButtonHideUnderline:
      return $flutterSrcMaterialDropdown.DropdownButtonHideUnderline(
          key: (tree.materialDropdownButtonHideUnderline.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownButtonHideUnderline.key) : null),
          child: (tree.materialDropdownButtonHideUnderline.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownButtonHideUnderline.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDropdownMenuItem:
      return $flutterSrcMaterialDropdown.DropdownMenuItem(
          key: (tree.materialDropdownMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialDropdownMenuItem.hasEnabled() ? tree.materialDropdownMenuItem.enabled : true),
          alignment: (tree.materialDropdownMenuItem.hasAlignment() ? evaluateRequiredFlutterAlignmentGeometryType(tree.materialDropdownMenuItem.alignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerStart),
          child: (tree.materialDropdownMenuItem.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuItem.child) : missing('child')));
    case messages.WidgetType_Constructor.materialDropdownMenuTheme:
      return $flutterSrcMaterialDropdownMenuTheme.DropdownMenuTheme(
          key: (tree.materialDropdownMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialDropdownMenuTheme.key) : null),
          data: (tree.materialDropdownMenuTheme.hasData() ? evaluateRequiredMaterialDropdownMenuThemeDataType(tree.materialDropdownMenuTheme.data) : missing('data')),
          child: (tree.materialDropdownMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialDropdownMenuTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialElevatedButton:
      return $flutterSrcMaterialElevatedButton.ElevatedButton(
          key: (tree.materialElevatedButton.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButton.style) : null),
          focusNode: (tree.materialElevatedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButton.focusNode) : null),
          autofocus: (tree.materialElevatedButton.hasAutofocus() ? tree.materialElevatedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialElevatedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialElevatedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialElevatedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButton.statesController) : null),
          child: (tree.materialElevatedButton.hasChild() ? evaluateWidgetType(tree.materialElevatedButton.child) : null));
    case messages.WidgetType_Constructor.materialElevatedButtonNamedIcon:
      return $flutterSrcMaterialElevatedButton.ElevatedButton.icon(
          key: (tree.materialElevatedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialElevatedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialElevatedButtonNamedIcon.style) : null),
          focusNode: (tree.materialElevatedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialElevatedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialElevatedButtonNamedIcon.hasAutofocus() ? tree.materialElevatedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialElevatedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialElevatedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialElevatedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialElevatedButtonNamedIcon.statesController) : null),
          icon: (tree.materialElevatedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialElevatedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialElevatedButtonNamedIcon.label) : missing('label')));
    case messages.WidgetType_Constructor.materialElevatedButtonTheme:
      return $flutterSrcMaterialElevatedButtonTheme.ElevatedButtonTheme(
          key: (tree.materialElevatedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialElevatedButtonTheme.key) : null),
          data: (tree.materialElevatedButtonTheme.hasData() ? evaluateRequiredMaterialElevatedButtonThemeDataType(tree.materialElevatedButtonTheme.data) : missing('data')),
          child: (tree.materialElevatedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialElevatedButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialEndDrawerButton:
      return $flutterSrcMaterialActionButtons.EndDrawerButton(
          key: (tree.materialEndDrawerButton.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButton.key) : null),
          style: (tree.materialEndDrawerButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialEndDrawerButton.style) : null),
          onPressed: null);
    case messages.WidgetType_Constructor.materialEndDrawerButtonIcon:
      return $flutterSrcMaterialActionButtons.EndDrawerButtonIcon(
          key: (tree.materialEndDrawerButtonIcon.hasKey() ? evaluateFlutterKeyType(tree.materialEndDrawerButtonIcon.key) : null));
    case messages.WidgetType_Constructor.materialExpandIcon:
      return $flutterSrcMaterialExpandIcon.ExpandIcon(
          key: (tree.materialExpandIcon.hasKey() ? evaluateFlutterKeyType(tree.materialExpandIcon.key) : null),
          isExpanded: (tree.materialExpandIcon.hasIsExpanded() ? tree.materialExpandIcon.isExpanded : false),
          size: (tree.materialExpandIcon.hasSize() ? tree.materialExpandIcon.size : 24.0),
          onPressed: null,
          padding: (tree.materialExpandIcon.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialExpandIcon.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(8.0)),
          color: (tree.materialExpandIcon.hasColor() ? evaluateDartColorType(tree.materialExpandIcon.color) : null),
          disabledColor: (tree.materialExpandIcon.hasDisabledColor() ? evaluateDartColorType(tree.materialExpandIcon.disabledColor) : null),
          expandedColor: (tree.materialExpandIcon.hasExpandedColor() ? evaluateDartColorType(tree.materialExpandIcon.expandedColor) : null));
    case messages.WidgetType_Constructor.materialExpansionPanelList:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList(
          key: (tree.materialExpansionPanelList.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelList.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelList.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelList.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          expandedHeaderPadding: (tree.materialExpansionPanelList.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelList.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelList.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelList.dividerColor) : null),
          elevation: (tree.materialExpansionPanelList.hasElevation() ? tree.materialExpansionPanelList.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelList.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelList.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelList.hasMaterialGapSize() ? tree.materialExpansionPanelList.materialGapSize : 16.0));
    case messages.WidgetType_Constructor.materialExpansionPanelListNamedRadio:
      return $flutterSrcMaterialExpansionPanel.ExpansionPanelList.radio(
          key: (tree.materialExpansionPanelListNamedRadio.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionPanelListNamedRadio.key) : null),
          expansionCallback: null,
          animationDuration: (tree.materialExpansionPanelListNamedRadio.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialExpansionPanelListNamedRadio.animationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          initialOpenPanelValue: null,
          expandedHeaderPadding: (tree.materialExpansionPanelListNamedRadio.hasExpandedHeaderPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialExpansionPanelListNamedRadio.expandedHeaderPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(vertical: 64.0 - $flutterSrcMaterialConstants.kMinInteractiveDimension)),
          dividerColor: (tree.materialExpansionPanelListNamedRadio.hasDividerColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.dividerColor) : null),
          elevation: (tree.materialExpansionPanelListNamedRadio.hasElevation() ? tree.materialExpansionPanelListNamedRadio.elevation : 2),
          expandIconColor: (tree.materialExpansionPanelListNamedRadio.hasExpandIconColor() ? evaluateDartColorType(tree.materialExpansionPanelListNamedRadio.expandIconColor) : null),
          materialGapSize: (tree.materialExpansionPanelListNamedRadio.hasMaterialGapSize() ? tree.materialExpansionPanelListNamedRadio.materialGapSize : 16.0));
    case messages.WidgetType_Constructor.materialExpansionTile:
      return $flutterSrcMaterialExpansionTile.ExpansionTile(
          key: (tree.materialExpansionTile.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTile.key) : null),
          leading: (tree.materialExpansionTile.hasLeading() ? evaluateWidgetType(tree.materialExpansionTile.leading) : null),
          title: (tree.materialExpansionTile.hasTitle() ? evaluateRequiredWidgetType(tree.materialExpansionTile.title) : missing('title')),
          subtitle: (tree.materialExpansionTile.hasSubtitle() ? evaluateWidgetType(tree.materialExpansionTile.subtitle) : null),
          onExpansionChanged: null,
          children: tree.materialExpansionTile.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          trailing: (tree.materialExpansionTile.hasTrailing() ? evaluateWidgetType(tree.materialExpansionTile.trailing) : null),
          initiallyExpanded: (tree.materialExpansionTile.hasInitiallyExpanded() ? tree.materialExpansionTile.initiallyExpanded : false),
          maintainState: (tree.materialExpansionTile.hasMaintainState() ? tree.materialExpansionTile.maintainState : false),
          tilePadding: (tree.materialExpansionTile.hasTilePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.tilePadding) : null),
          expandedCrossAxisAlignment: (tree.materialExpansionTile.hasExpandedCrossAxisAlignment() ? enums.convertFlutterCrossAxisAlignmentType(tree.materialExpansionTile.expandedCrossAxisAlignment) : null),
          expandedAlignment: (tree.materialExpansionTile.hasExpandedAlignment() ? evaluateFlutterAlignmentType(tree.materialExpansionTile.expandedAlignment) : null),
          childrenPadding: (tree.materialExpansionTile.hasChildrenPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialExpansionTile.childrenPadding) : null),
          backgroundColor: (tree.materialExpansionTile.hasBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.backgroundColor) : null),
          collapsedBackgroundColor: (tree.materialExpansionTile.hasCollapsedBackgroundColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedBackgroundColor) : null),
          textColor: (tree.materialExpansionTile.hasTextColor() ? evaluateDartColorType(tree.materialExpansionTile.textColor) : null),
          collapsedTextColor: (tree.materialExpansionTile.hasCollapsedTextColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedTextColor) : null),
          iconColor: (tree.materialExpansionTile.hasIconColor() ? evaluateDartColorType(tree.materialExpansionTile.iconColor) : null),
          collapsedIconColor: (tree.materialExpansionTile.hasCollapsedIconColor() ? evaluateDartColorType(tree.materialExpansionTile.collapsedIconColor) : null),
          shape: (tree.materialExpansionTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.shape) : null),
          collapsedShape: (tree.materialExpansionTile.hasCollapsedShape() ? evaluateFlutterShapeBorderType(tree.materialExpansionTile.collapsedShape) : null),
          clipBehavior: (tree.materialExpansionTile.hasClipBehavior() ? enums.convertDartClipType(tree.materialExpansionTile.clipBehavior) : null),
          controlAffinity: (tree.materialExpansionTile.hasControlAffinity() ? enums.convertMaterialListTileControlAffinityType(tree.materialExpansionTile.controlAffinity) : null),
          controller: (tree.materialExpansionTile.hasController() ? evaluateMaterialExpansionTileControllerType(tree.materialExpansionTile.controller) : null));
    case messages.WidgetType_Constructor.materialExpansionTileTheme:
      return $flutterSrcMaterialExpansionTileTheme.ExpansionTileTheme(
          key: (tree.materialExpansionTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialExpansionTileTheme.key) : null),
          data: (tree.materialExpansionTileTheme.hasData() ? evaluateRequiredMaterialExpansionTileThemeDataType(tree.materialExpansionTileTheme.data) : missing('data')),
          child: (tree.materialExpansionTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialExpansionTileTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialFilledButton:
      return $flutterSrcMaterialFilledButton.FilledButton(
          key: (tree.materialFilledButton.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButton.style) : null),
          focusNode: (tree.materialFilledButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButton.focusNode) : null),
          autofocus: (tree.materialFilledButton.hasAutofocus() ? tree.materialFilledButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButton.statesController) : null),
          child: (tree.materialFilledButton.hasChild() ? evaluateWidgetType(tree.materialFilledButton.child) : null));
    case messages.WidgetType_Constructor.materialFilledButtonNamedIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.icon(
          key: (tree.materialFilledButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedIcon.hasAutofocus() ? tree.materialFilledButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedIcon.label) : missing('label')));
    case messages.WidgetType_Constructor.materialFilledButtonNamedTonal:
      return $flutterSrcMaterialFilledButton.FilledButton.tonal(
          key: (tree.materialFilledButtonNamedTonal.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonal.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonal.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonal.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonal.hasAutofocus() ? tree.materialFilledButtonNamedTonal.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialFilledButtonNamedTonal.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilledButtonNamedTonal.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialFilledButtonNamedTonal.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonal.statesController) : null),
          child: (tree.materialFilledButtonNamedTonal.hasChild() ? evaluateWidgetType(tree.materialFilledButtonNamedTonal.child) : null));
    case messages.WidgetType_Constructor.materialFilledButtonNamedTonalIcon:
      return $flutterSrcMaterialFilledButton.FilledButton.tonalIcon(
          key: (tree.materialFilledButtonNamedTonalIcon.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonNamedTonalIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialFilledButtonNamedTonalIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialFilledButtonNamedTonalIcon.style) : null),
          focusNode: (tree.materialFilledButtonNamedTonalIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilledButtonNamedTonalIcon.focusNode) : null),
          autofocus: (tree.materialFilledButtonNamedTonalIcon.hasAutofocus() ? tree.materialFilledButtonNamedTonalIcon.autofocus : null),
          clipBehavior: (tree.materialFilledButtonNamedTonalIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialFilledButtonNamedTonalIcon.clipBehavior) : null),
          statesController: (tree.materialFilledButtonNamedTonalIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialFilledButtonNamedTonalIcon.statesController) : null),
          icon: (tree.materialFilledButtonNamedTonalIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.icon) : missing('icon')),
          label: (tree.materialFilledButtonNamedTonalIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilledButtonNamedTonalIcon.label) : missing('label')));
    case messages.WidgetType_Constructor.materialFilledButtonTheme:
      return $flutterSrcMaterialFilledButtonTheme.FilledButtonTheme(
          key: (tree.materialFilledButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialFilledButtonTheme.key) : null),
          data: (tree.materialFilledButtonTheme.hasData() ? evaluateRequiredMaterialFilledButtonThemeDataType(tree.materialFilledButtonTheme.data) : missing('data')),
          child: (tree.materialFilledButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialFilledButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialFilterChip:
      return $flutterSrcMaterialFilterChip.FilterChip(
          key: (tree.materialFilterChip.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChip.key) : null),
          avatar: (tree.materialFilterChip.hasAvatar() ? evaluateWidgetType(tree.materialFilterChip.avatar) : null),
          label: (tree.materialFilterChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChip.label) : missing('label')),
          labelStyle: (tree.materialFilterChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChip.labelStyle) : null),
          labelPadding: (tree.materialFilterChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.labelPadding) : null),
          selected: (tree.materialFilterChip.hasSelected() ? tree.materialFilterChip.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChip.hasPressElevation() ? tree.materialFilterChip.pressElevation : null),
          disabledColor: (tree.materialFilterChip.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChip.disabledColor) : null),
          selectedColor: (tree.materialFilterChip.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChip.selectedColor) : null),
          tooltip: (tree.materialFilterChip.hasTooltip() ? tree.materialFilterChip.tooltip : null),
          side: (tree.materialFilterChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChip.side) : null),
          shape: (tree.materialFilterChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChip.shape) : null),
          clipBehavior: (tree.materialFilterChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChip.focusNode) : null),
          autofocus: (tree.materialFilterChip.hasAutofocus() ? tree.materialFilterChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChip.backgroundColor) : null),
          padding: (tree.materialFilterChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChip.padding) : null),
          visualDensity: (tree.materialFilterChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChip.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChip.hasElevation() ? tree.materialFilterChip.elevation : null),
          shadowColor: (tree.materialFilterChip.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChip.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChip.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChip.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChip.hasShowCheckmark() ? tree.materialFilterChip.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChip.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialFilterChipNamedElevated:
      return $flutterSrcMaterialFilterChip.FilterChip.elevated(
          key: (tree.materialFilterChipNamedElevated.hasKey() ? evaluateFlutterKeyType(tree.materialFilterChipNamedElevated.key) : null),
          avatar: (tree.materialFilterChipNamedElevated.hasAvatar() ? evaluateWidgetType(tree.materialFilterChipNamedElevated.avatar) : null),
          label: (tree.materialFilterChipNamedElevated.hasLabel() ? evaluateRequiredWidgetType(tree.materialFilterChipNamedElevated.label) : missing('label')),
          labelStyle: (tree.materialFilterChipNamedElevated.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialFilterChipNamedElevated.labelStyle) : null),
          labelPadding: (tree.materialFilterChipNamedElevated.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.labelPadding) : null),
          selected: (tree.materialFilterChipNamedElevated.hasSelected() ? tree.materialFilterChipNamedElevated.selected : false),
          onSelected: null,
          pressElevation: (tree.materialFilterChipNamedElevated.hasPressElevation() ? tree.materialFilterChipNamedElevated.pressElevation : null),
          disabledColor: (tree.materialFilterChipNamedElevated.hasDisabledColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.disabledColor) : null),
          selectedColor: (tree.materialFilterChipNamedElevated.hasSelectedColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedColor) : null),
          tooltip: (tree.materialFilterChipNamedElevated.hasTooltip() ? tree.materialFilterChipNamedElevated.tooltip : null),
          side: (tree.materialFilterChipNamedElevated.hasSide() ? evaluateFlutterBorderSideType(tree.materialFilterChipNamedElevated.side) : null),
          shape: (tree.materialFilterChipNamedElevated.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialFilterChipNamedElevated.shape) : null),
          clipBehavior: (tree.materialFilterChipNamedElevated.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFilterChipNamedElevated.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFilterChipNamedElevated.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFilterChipNamedElevated.focusNode) : null),
          autofocus: (tree.materialFilterChipNamedElevated.hasAutofocus() ? tree.materialFilterChipNamedElevated.autofocus : false),
          color: null,
          backgroundColor: (tree.materialFilterChipNamedElevated.hasBackgroundColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.backgroundColor) : null),
          padding: (tree.materialFilterChipNamedElevated.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFilterChipNamedElevated.padding) : null),
          visualDensity: (tree.materialFilterChipNamedElevated.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialFilterChipNamedElevated.visualDensity) : null),
          materialTapTargetSize: (tree.materialFilterChipNamedElevated.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFilterChipNamedElevated.materialTapTargetSize) : null),
          elevation: (tree.materialFilterChipNamedElevated.hasElevation() ? tree.materialFilterChipNamedElevated.elevation : null),
          shadowColor: (tree.materialFilterChipNamedElevated.hasShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.shadowColor) : null),
          surfaceTintColor: (tree.materialFilterChipNamedElevated.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.surfaceTintColor) : null),
          iconTheme: (tree.materialFilterChipNamedElevated.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialFilterChipNamedElevated.iconTheme) : null),
          selectedShadowColor: (tree.materialFilterChipNamedElevated.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.selectedShadowColor) : null),
          showCheckmark: (tree.materialFilterChipNamedElevated.hasShowCheckmark() ? tree.materialFilterChipNamedElevated.showCheckmark : null),
          checkmarkColor: (tree.materialFilterChipNamedElevated.hasCheckmarkColor() ? evaluateDartColorType(tree.materialFilterChipNamedElevated.checkmarkColor) : null),
          avatarBorder: (tree.materialFilterChipNamedElevated.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialFilterChipNamedElevated.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialFlexibleSpaceBar:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBar(
          key: (tree.materialFlexibleSpaceBar.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBar.key) : null),
          title: (tree.materialFlexibleSpaceBar.hasTitle() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.title) : null),
          background: (tree.materialFlexibleSpaceBar.hasBackground() ? evaluateWidgetType(tree.materialFlexibleSpaceBar.background) : null),
          centerTitle: (tree.materialFlexibleSpaceBar.hasCenterTitle() ? tree.materialFlexibleSpaceBar.centerTitle : null),
          titlePadding: (tree.materialFlexibleSpaceBar.hasTitlePadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFlexibleSpaceBar.titlePadding) : null),
          collapseMode: (tree.materialFlexibleSpaceBar.hasCollapseMode() ? enums.convertRequiredMaterialCollapseModeType(tree.materialFlexibleSpaceBar.collapseMode) : $flutterSrcMaterialFlexibleSpaceBar.CollapseMode.parallax),
          stretchModes: tree.materialFlexibleSpaceBar.stretchModes.map((e) => enums.convertRequiredMaterialStretchModeType(e)).toList(),
          expandedTitleScale: (tree.materialFlexibleSpaceBar.hasExpandedTitleScale() ? tree.materialFlexibleSpaceBar.expandedTitleScale : 1.5));
    case messages.WidgetType_Constructor.materialFlexibleSpaceBarSettings:
      return $flutterSrcMaterialFlexibleSpaceBar.FlexibleSpaceBarSettings(
          key: (tree.materialFlexibleSpaceBarSettings.hasKey() ? evaluateFlutterKeyType(tree.materialFlexibleSpaceBarSettings.key) : null),
          toolbarOpacity: (tree.materialFlexibleSpaceBarSettings.hasToolbarOpacity() ? tree.materialFlexibleSpaceBarSettings.toolbarOpacity : missing('toolbarOpacity')),
          minExtent: (tree.materialFlexibleSpaceBarSettings.hasMinExtent() ? tree.materialFlexibleSpaceBarSettings.minExtent : missing('minExtent')),
          maxExtent: (tree.materialFlexibleSpaceBarSettings.hasMaxExtent() ? tree.materialFlexibleSpaceBarSettings.maxExtent : missing('maxExtent')),
          currentExtent: (tree.materialFlexibleSpaceBarSettings.hasCurrentExtent() ? tree.materialFlexibleSpaceBarSettings.currentExtent : missing('currentExtent')),
          child: (tree.materialFlexibleSpaceBarSettings.hasChild() ? evaluateRequiredWidgetType(tree.materialFlexibleSpaceBarSettings.child) : missing('child')),
          isScrolledUnder: (tree.materialFlexibleSpaceBarSettings.hasIsScrolledUnder() ? tree.materialFlexibleSpaceBarSettings.isScrolledUnder : null),
          hasLeading: (tree.materialFlexibleSpaceBarSettings.hasHasLeading() ? tree.materialFlexibleSpaceBarSettings.hasLeading : null));
    case messages.WidgetType_Constructor.materialFloatingActionButton:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton(
          key: (tree.materialFloatingActionButton.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButton.key) : null),
          child: (tree.materialFloatingActionButton.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButton.child) : null),
          tooltip: (tree.materialFloatingActionButton.hasTooltip() ? tree.materialFloatingActionButton.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButton.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButton.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButton.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButton.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButton.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButton.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButton.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButton.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButton.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButton.hasElevation() ? tree.materialFloatingActionButton.elevation : null),
          focusElevation: (tree.materialFloatingActionButton.hasFocusElevation() ? tree.materialFloatingActionButton.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButton.hasHoverElevation() ? tree.materialFloatingActionButton.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButton.hasHighlightElevation() ? tree.materialFloatingActionButton.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButton.hasDisabledElevation() ? tree.materialFloatingActionButton.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          mini: (tree.materialFloatingActionButton.hasMini() ? tree.materialFloatingActionButton.mini : false),
          shape: (tree.materialFloatingActionButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButton.shape) : null),
          clipBehavior: (tree.materialFloatingActionButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButton.focusNode) : null),
          autofocus: (tree.materialFloatingActionButton.hasAutofocus() ? tree.materialFloatingActionButton.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButton.materialTapTargetSize) : null),
          isExtended: (tree.materialFloatingActionButton.hasIsExtended() ? tree.materialFloatingActionButton.isExtended : false),
          enableFeedback: (tree.materialFloatingActionButton.hasEnableFeedback() ? tree.materialFloatingActionButton.enableFeedback : null));
    case messages.WidgetType_Constructor.materialFloatingActionButtonNamedExtended:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.extended(
          key: (tree.materialFloatingActionButtonNamedExtended.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedExtended.key) : null),
          tooltip: (tree.materialFloatingActionButtonNamedExtended.hasTooltip() ? tree.materialFloatingActionButtonNamedExtended.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedExtended.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedExtended.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedExtended.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedExtended.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.hoverColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedExtended.hasElevation() ? tree.materialFloatingActionButtonNamedExtended.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedExtended.hasFocusElevation() ? tree.materialFloatingActionButtonNamedExtended.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedExtended.hasHoverElevation() ? tree.materialFloatingActionButtonNamedExtended.hoverElevation : null),
          splashColor: (tree.materialFloatingActionButtonNamedExtended.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedExtended.splashColor) : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedExtended.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedExtended.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedExtended.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedExtended.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedExtended.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedExtended.shape) : null),
          isExtended: (tree.materialFloatingActionButtonNamedExtended.hasIsExtended() ? tree.materialFloatingActionButtonNamedExtended.isExtended : true),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedExtended.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedExtended.materialTapTargetSize) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedExtended.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedExtended.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedExtended.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedExtended.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedExtended.hasAutofocus() ? tree.materialFloatingActionButtonNamedExtended.autofocus : false),
          extendedIconLabelSpacing: (tree.materialFloatingActionButtonNamedExtended.hasExtendedIconLabelSpacing() ? tree.materialFloatingActionButtonNamedExtended.extendedIconLabelSpacing : null),
          extendedPadding: (tree.materialFloatingActionButtonNamedExtended.hasExtendedPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialFloatingActionButtonNamedExtended.extendedPadding) : null),
          extendedTextStyle: (tree.materialFloatingActionButtonNamedExtended.hasExtendedTextStyle() ? evaluateFlutterTextStyleType(tree.materialFloatingActionButtonNamedExtended.extendedTextStyle) : null),
          icon: (tree.materialFloatingActionButtonNamedExtended.hasIcon() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedExtended.icon) : null),
          label: (tree.materialFloatingActionButtonNamedExtended.hasLabel() ? evaluateRequiredWidgetType(tree.materialFloatingActionButtonNamedExtended.label) : missing('label')),
          enableFeedback: (tree.materialFloatingActionButtonNamedExtended.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedExtended.enableFeedback : null));
    case messages.WidgetType_Constructor.materialFloatingActionButtonNamedLarge:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.large(
          key: (tree.materialFloatingActionButtonNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedLarge.key) : null),
          child: (tree.materialFloatingActionButtonNamedLarge.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedLarge.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedLarge.hasTooltip() ? tree.materialFloatingActionButtonNamedLarge.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedLarge.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedLarge.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedLarge.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedLarge.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedLarge.hasElevation() ? tree.materialFloatingActionButtonNamedLarge.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedLarge.hasFocusElevation() ? tree.materialFloatingActionButtonNamedLarge.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedLarge.hasHoverElevation() ? tree.materialFloatingActionButtonNamedLarge.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedLarge.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedLarge.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedLarge.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedLarge.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedLarge.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedLarge.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedLarge.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedLarge.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedLarge.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedLarge.hasAutofocus() ? tree.materialFloatingActionButtonNamedLarge.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedLarge.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedLarge.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedLarge.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedLarge.enableFeedback : null));
    case messages.WidgetType_Constructor.materialFloatingActionButtonNamedSmall:
      return $flutterSrcMaterialFloatingActionButton.FloatingActionButton.small(
          key: (tree.materialFloatingActionButtonNamedSmall.hasKey() ? evaluateFlutterKeyType(tree.materialFloatingActionButtonNamedSmall.key) : null),
          child: (tree.materialFloatingActionButtonNamedSmall.hasChild() ? evaluateWidgetType(tree.materialFloatingActionButtonNamedSmall.child) : null),
          tooltip: (tree.materialFloatingActionButtonNamedSmall.hasTooltip() ? tree.materialFloatingActionButtonNamedSmall.tooltip : null),
          foregroundColor: (tree.materialFloatingActionButtonNamedSmall.hasForegroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.foregroundColor) : null),
          backgroundColor: (tree.materialFloatingActionButtonNamedSmall.hasBackgroundColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.backgroundColor) : null),
          focusColor: (tree.materialFloatingActionButtonNamedSmall.hasFocusColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.focusColor) : null),
          hoverColor: (tree.materialFloatingActionButtonNamedSmall.hasHoverColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.hoverColor) : null),
          splashColor: (tree.materialFloatingActionButtonNamedSmall.hasSplashColor() ? evaluateDartColorType(tree.materialFloatingActionButtonNamedSmall.splashColor) : null),
          heroTag: null,
          elevation: (tree.materialFloatingActionButtonNamedSmall.hasElevation() ? tree.materialFloatingActionButtonNamedSmall.elevation : null),
          focusElevation: (tree.materialFloatingActionButtonNamedSmall.hasFocusElevation() ? tree.materialFloatingActionButtonNamedSmall.focusElevation : null),
          hoverElevation: (tree.materialFloatingActionButtonNamedSmall.hasHoverElevation() ? tree.materialFloatingActionButtonNamedSmall.hoverElevation : null),
          highlightElevation: (tree.materialFloatingActionButtonNamedSmall.hasHighlightElevation() ? tree.materialFloatingActionButtonNamedSmall.highlightElevation : null),
          disabledElevation: (tree.materialFloatingActionButtonNamedSmall.hasDisabledElevation() ? tree.materialFloatingActionButtonNamedSmall.disabledElevation : null),
          onPressed: null,
          mouseCursor: null,
          shape: (tree.materialFloatingActionButtonNamedSmall.hasShape() ? evaluateFlutterShapeBorderType(tree.materialFloatingActionButtonNamedSmall.shape) : null),
          clipBehavior: (tree.materialFloatingActionButtonNamedSmall.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialFloatingActionButtonNamedSmall.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialFloatingActionButtonNamedSmall.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialFloatingActionButtonNamedSmall.focusNode) : null),
          autofocus: (tree.materialFloatingActionButtonNamedSmall.hasAutofocus() ? tree.materialFloatingActionButtonNamedSmall.autofocus : false),
          materialTapTargetSize: (tree.materialFloatingActionButtonNamedSmall.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialFloatingActionButtonNamedSmall.materialTapTargetSize) : null),
          enableFeedback: (tree.materialFloatingActionButtonNamedSmall.hasEnableFeedback() ? tree.materialFloatingActionButtonNamedSmall.enableFeedback : null));
    case messages.WidgetType_Constructor.materialFlutterLogo:
      return $flutterSrcMaterialFlutterLogo.FlutterLogo(
          key: (tree.materialFlutterLogo.hasKey() ? evaluateFlutterKeyType(tree.materialFlutterLogo.key) : null),
          size: (tree.materialFlutterLogo.hasSize() ? tree.materialFlutterLogo.size : null),
          textColor: (tree.materialFlutterLogo.hasTextColor() ? evaluateRequiredDartColorType(tree.materialFlutterLogo.textColor) : $dartUi.Color(0xFF757575)),
          style: (tree.materialFlutterLogo.hasStyle() ? enums.convertRequiredFlutterFlutterLogoStyleType(tree.materialFlutterLogo.style) : $flutterSrcPaintingFlutterLogo.FlutterLogoStyle.markOnly),
          duration: (tree.materialFlutterLogo.hasDuration() ? evaluateRequiredDartDurationType(tree.materialFlutterLogo.duration) : $dartCore.Duration(milliseconds: 750)),
          curve: (tree.materialFlutterLogo.hasCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialFlutterLogo.curve) : $flutterSrcAnimationCurves.Curves.fastOutSlowIn));
    case messages.WidgetType_Constructor.materialGridTile:
      return $flutterSrcMaterialGridTile.GridTile(
          key: (tree.materialGridTile.hasKey() ? evaluateFlutterKeyType(tree.materialGridTile.key) : null),
          header: (tree.materialGridTile.hasHeader() ? evaluateWidgetType(tree.materialGridTile.header) : null),
          footer: (tree.materialGridTile.hasFooter() ? evaluateWidgetType(tree.materialGridTile.footer) : null),
          child: (tree.materialGridTile.hasChild() ? evaluateRequiredWidgetType(tree.materialGridTile.child) : missing('child')));
    case messages.WidgetType_Constructor.materialGridTileBar:
      return $flutterSrcMaterialGridTileBar.GridTileBar(
          key: (tree.materialGridTileBar.hasKey() ? evaluateFlutterKeyType(tree.materialGridTileBar.key) : null),
          backgroundColor: (tree.materialGridTileBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialGridTileBar.backgroundColor) : null),
          leading: (tree.materialGridTileBar.hasLeading() ? evaluateWidgetType(tree.materialGridTileBar.leading) : null),
          title: (tree.materialGridTileBar.hasTitle() ? evaluateWidgetType(tree.materialGridTileBar.title) : null),
          subtitle: (tree.materialGridTileBar.hasSubtitle() ? evaluateWidgetType(tree.materialGridTileBar.subtitle) : null),
          trailing: (tree.materialGridTileBar.hasTrailing() ? evaluateWidgetType(tree.materialGridTileBar.trailing) : null));
    case messages.WidgetType_Constructor.materialIconButton:
      return $flutterSrcMaterialIconButton.IconButton(
          key: (tree.materialIconButton.hasKey() ? evaluateFlutterKeyType(tree.materialIconButton.key) : null),
          iconSize: (tree.materialIconButton.hasIconSize() ? tree.materialIconButton.iconSize : null),
          visualDensity: (tree.materialIconButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButton.visualDensity) : null),
          padding: (tree.materialIconButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButton.padding) : null),
          alignment: (tree.materialIconButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButton.alignment) : null),
          splashRadius: (tree.materialIconButton.hasSplashRadius() ? tree.materialIconButton.splashRadius : null),
          color: (tree.materialIconButton.hasColor() ? evaluateDartColorType(tree.materialIconButton.color) : null),
          focusColor: (tree.materialIconButton.hasFocusColor() ? evaluateDartColorType(tree.materialIconButton.focusColor) : null),
          hoverColor: (tree.materialIconButton.hasHoverColor() ? evaluateDartColorType(tree.materialIconButton.hoverColor) : null),
          highlightColor: (tree.materialIconButton.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButton.highlightColor) : null),
          splashColor: (tree.materialIconButton.hasSplashColor() ? evaluateDartColorType(tree.materialIconButton.splashColor) : null),
          disabledColor: (tree.materialIconButton.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButton.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButton.focusNode) : null),
          autofocus: (tree.materialIconButton.hasAutofocus() ? tree.materialIconButton.autofocus : false),
          tooltip: (tree.materialIconButton.hasTooltip() ? tree.materialIconButton.tooltip : null),
          enableFeedback: (tree.materialIconButton.hasEnableFeedback() ? tree.materialIconButton.enableFeedback : null),
          constraints: (tree.materialIconButton.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButton.constraints) : null),
          style: (tree.materialIconButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButton.style) : null),
          isSelected: (tree.materialIconButton.hasIsSelected() ? tree.materialIconButton.isSelected : null),
          selectedIcon: (tree.materialIconButton.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButton.selectedIcon) : null),
          icon: (tree.materialIconButton.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButton.icon) : missing('icon')));
    case messages.WidgetType_Constructor.materialIconButtonNamedFilled:
      return $flutterSrcMaterialIconButton.IconButton.filled(
          key: (tree.materialIconButtonNamedFilled.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilled.key) : null),
          iconSize: (tree.materialIconButtonNamedFilled.hasIconSize() ? tree.materialIconButtonNamedFilled.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilled.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilled.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilled.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilled.padding) : null),
          alignment: (tree.materialIconButtonNamedFilled.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilled.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilled.hasSplashRadius() ? tree.materialIconButtonNamedFilled.splashRadius : null),
          color: (tree.materialIconButtonNamedFilled.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.color) : null),
          focusColor: (tree.materialIconButtonNamedFilled.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilled.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilled.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilled.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilled.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilled.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilled.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilled.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilled.hasAutofocus() ? tree.materialIconButtonNamedFilled.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilled.hasTooltip() ? tree.materialIconButtonNamedFilled.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilled.hasEnableFeedback() ? tree.materialIconButtonNamedFilled.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilled.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilled.constraints) : null),
          style: (tree.materialIconButtonNamedFilled.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilled.style) : null),
          isSelected: (tree.materialIconButtonNamedFilled.hasIsSelected() ? tree.materialIconButtonNamedFilled.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilled.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilled.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilled.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilled.icon) : missing('icon')));
    case messages.WidgetType_Constructor.materialIconButtonNamedFilledTonal:
      return $flutterSrcMaterialIconButton.IconButton.filledTonal(
          key: (tree.materialIconButtonNamedFilledTonal.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedFilledTonal.key) : null),
          iconSize: (tree.materialIconButtonNamedFilledTonal.hasIconSize() ? tree.materialIconButtonNamedFilledTonal.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedFilledTonal.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedFilledTonal.visualDensity) : null),
          padding: (tree.materialIconButtonNamedFilledTonal.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedFilledTonal.padding) : null),
          alignment: (tree.materialIconButtonNamedFilledTonal.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedFilledTonal.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedFilledTonal.hasSplashRadius() ? tree.materialIconButtonNamedFilledTonal.splashRadius : null),
          color: (tree.materialIconButtonNamedFilledTonal.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.color) : null),
          focusColor: (tree.materialIconButtonNamedFilledTonal.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedFilledTonal.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedFilledTonal.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedFilledTonal.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedFilledTonal.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedFilledTonal.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedFilledTonal.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedFilledTonal.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedFilledTonal.hasAutofocus() ? tree.materialIconButtonNamedFilledTonal.autofocus : false),
          tooltip: (tree.materialIconButtonNamedFilledTonal.hasTooltip() ? tree.materialIconButtonNamedFilledTonal.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedFilledTonal.hasEnableFeedback() ? tree.materialIconButtonNamedFilledTonal.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedFilledTonal.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedFilledTonal.constraints) : null),
          style: (tree.materialIconButtonNamedFilledTonal.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedFilledTonal.style) : null),
          isSelected: (tree.materialIconButtonNamedFilledTonal.hasIsSelected() ? tree.materialIconButtonNamedFilledTonal.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedFilledTonal.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedFilledTonal.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedFilledTonal.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedFilledTonal.icon) : missing('icon')));
    case messages.WidgetType_Constructor.materialIconButtonNamedOutlined:
      return $flutterSrcMaterialIconButton.IconButton.outlined(
          key: (tree.materialIconButtonNamedOutlined.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonNamedOutlined.key) : null),
          iconSize: (tree.materialIconButtonNamedOutlined.hasIconSize() ? tree.materialIconButtonNamedOutlined.iconSize : null),
          visualDensity: (tree.materialIconButtonNamedOutlined.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialIconButtonNamedOutlined.visualDensity) : null),
          padding: (tree.materialIconButtonNamedOutlined.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialIconButtonNamedOutlined.padding) : null),
          alignment: (tree.materialIconButtonNamedOutlined.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialIconButtonNamedOutlined.alignment) : null),
          splashRadius: (tree.materialIconButtonNamedOutlined.hasSplashRadius() ? tree.materialIconButtonNamedOutlined.splashRadius : null),
          color: (tree.materialIconButtonNamedOutlined.hasColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.color) : null),
          focusColor: (tree.materialIconButtonNamedOutlined.hasFocusColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.focusColor) : null),
          hoverColor: (tree.materialIconButtonNamedOutlined.hasHoverColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.hoverColor) : null),
          highlightColor: (tree.materialIconButtonNamedOutlined.hasHighlightColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.highlightColor) : null),
          splashColor: (tree.materialIconButtonNamedOutlined.hasSplashColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.splashColor) : null),
          disabledColor: (tree.materialIconButtonNamedOutlined.hasDisabledColor() ? evaluateDartColorType(tree.materialIconButtonNamedOutlined.disabledColor) : null),
          onPressed: null,
          mouseCursor: null,
          focusNode: (tree.materialIconButtonNamedOutlined.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialIconButtonNamedOutlined.focusNode) : null),
          autofocus: (tree.materialIconButtonNamedOutlined.hasAutofocus() ? tree.materialIconButtonNamedOutlined.autofocus : false),
          tooltip: (tree.materialIconButtonNamedOutlined.hasTooltip() ? tree.materialIconButtonNamedOutlined.tooltip : null),
          enableFeedback: (tree.materialIconButtonNamedOutlined.hasEnableFeedback() ? tree.materialIconButtonNamedOutlined.enableFeedback : null),
          constraints: (tree.materialIconButtonNamedOutlined.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialIconButtonNamedOutlined.constraints) : null),
          style: (tree.materialIconButtonNamedOutlined.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialIconButtonNamedOutlined.style) : null),
          isSelected: (tree.materialIconButtonNamedOutlined.hasIsSelected() ? tree.materialIconButtonNamedOutlined.isSelected : null),
          selectedIcon: (tree.materialIconButtonNamedOutlined.hasSelectedIcon() ? evaluateWidgetType(tree.materialIconButtonNamedOutlined.selectedIcon) : null),
          icon: (tree.materialIconButtonNamedOutlined.hasIcon() ? evaluateRequiredWidgetType(tree.materialIconButtonNamedOutlined.icon) : missing('icon')));
    case messages.WidgetType_Constructor.materialIconButtonTheme:
      return $flutterSrcMaterialIconButtonTheme.IconButtonTheme(
          key: (tree.materialIconButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialIconButtonTheme.key) : null),
          data: (tree.materialIconButtonTheme.hasData() ? evaluateRequiredMaterialIconButtonThemeDataType(tree.materialIconButtonTheme.data) : missing('data')),
          child: (tree.materialIconButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialIconButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialInk:
      return $flutterSrcMaterialInkDecoration.Ink(
          key: (tree.materialInk.hasKey() ? evaluateFlutterKeyType(tree.materialInk.key) : null),
          padding: (tree.materialInk.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInk.padding) : null),
          color: (tree.materialInk.hasColor() ? evaluateDartColorType(tree.materialInk.color) : null),
          decoration: (tree.materialInk.hasDecoration() ? evaluateFlutterDecorationType(tree.materialInk.decoration) : null),
          width: (tree.materialInk.hasWidth() ? tree.materialInk.width : null),
          height: (tree.materialInk.hasHeight() ? tree.materialInk.height : null),
          child: (tree.materialInk.hasChild() ? evaluateWidgetType(tree.materialInk.child) : null));
    case messages.WidgetType_Constructor.materialInkResponse:
      return $flutterSrcMaterialInkWell.InkResponse(
          key: (tree.materialInkResponse.hasKey() ? evaluateFlutterKeyType(tree.materialInkResponse.key) : null),
          child: (tree.materialInkResponse.hasChild() ? evaluateWidgetType(tree.materialInkResponse.child) : null),
          onTap: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onDoubleTap: null,
          onLongPress: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          containedInkWell: (tree.materialInkResponse.hasContainedInkWell() ? tree.materialInkResponse.containedInkWell : false),
          highlightShape: (tree.materialInkResponse.hasHighlightShape() ? enums.convertRequiredFlutterBoxShapeType(tree.materialInkResponse.highlightShape) : $flutterSrcPaintingBoxBorder.BoxShape.circle),
          radius: (tree.materialInkResponse.hasRadius() ? tree.materialInkResponse.radius : null),
          borderRadius: (tree.materialInkResponse.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkResponse.borderRadius) : null),
          customBorder: (tree.materialInkResponse.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkResponse.customBorder) : null),
          focusColor: (tree.materialInkResponse.hasFocusColor() ? evaluateDartColorType(tree.materialInkResponse.focusColor) : null),
          hoverColor: (tree.materialInkResponse.hasHoverColor() ? evaluateDartColorType(tree.materialInkResponse.hoverColor) : null),
          highlightColor: (tree.materialInkResponse.hasHighlightColor() ? evaluateDartColorType(tree.materialInkResponse.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkResponse.hasSplashColor() ? evaluateDartColorType(tree.materialInkResponse.splashColor) : null),
          splashFactory: null,
          enableFeedback: (tree.materialInkResponse.hasEnableFeedback() ? tree.materialInkResponse.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkResponse.hasExcludeFromSemantics() ? tree.materialInkResponse.excludeFromSemantics : false),
          focusNode: (tree.materialInkResponse.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkResponse.focusNode) : null),
          canRequestFocus: (tree.materialInkResponse.hasCanRequestFocus() ? tree.materialInkResponse.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkResponse.hasAutofocus() ? tree.materialInkResponse.autofocus : false),
          statesController: (tree.materialInkResponse.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkResponse.statesController) : null),
          hoverDuration: (tree.materialInkResponse.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkResponse.hoverDuration) : null));
    case messages.WidgetType_Constructor.materialInkWell:
      return $flutterSrcMaterialInkWell.InkWell(
          key: (tree.materialInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialInkWell.key) : null),
          child: (tree.materialInkWell.hasChild() ? evaluateWidgetType(tree.materialInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onTapDown: null,
          onTapUp: null,
          onTapCancel: null,
          onSecondaryTap: null,
          onSecondaryTapUp: null,
          onSecondaryTapDown: null,
          onSecondaryTapCancel: null,
          onHighlightChanged: null,
          onHover: null,
          mouseCursor: null,
          focusColor: (tree.materialInkWell.hasFocusColor() ? evaluateDartColorType(tree.materialInkWell.focusColor) : null),
          hoverColor: (tree.materialInkWell.hasHoverColor() ? evaluateDartColorType(tree.materialInkWell.hoverColor) : null),
          highlightColor: (tree.materialInkWell.hasHighlightColor() ? evaluateDartColorType(tree.materialInkWell.highlightColor) : null),
          overlayColor: null,
          splashColor: (tree.materialInkWell.hasSplashColor() ? evaluateDartColorType(tree.materialInkWell.splashColor) : null),
          splashFactory: null,
          radius: (tree.materialInkWell.hasRadius() ? tree.materialInkWell.radius : null),
          borderRadius: (tree.materialInkWell.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialInkWell.borderRadius) : null),
          customBorder: (tree.materialInkWell.hasCustomBorder() ? evaluateFlutterShapeBorderType(tree.materialInkWell.customBorder) : null),
          enableFeedback: (tree.materialInkWell.hasEnableFeedback() ? tree.materialInkWell.enableFeedback : true),
          excludeFromSemantics: (tree.materialInkWell.hasExcludeFromSemantics() ? tree.materialInkWell.excludeFromSemantics : false),
          focusNode: (tree.materialInkWell.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInkWell.focusNode) : null),
          canRequestFocus: (tree.materialInkWell.hasCanRequestFocus() ? tree.materialInkWell.canRequestFocus : true),
          onFocusChange: null,
          autofocus: (tree.materialInkWell.hasAutofocus() ? tree.materialInkWell.autofocus : false),
          statesController: (tree.materialInkWell.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialInkWell.statesController) : null),
          hoverDuration: (tree.materialInkWell.hasHoverDuration() ? evaluateDartDurationType(tree.materialInkWell.hoverDuration) : null));
    case messages.WidgetType_Constructor.materialInputChip:
      return $flutterSrcMaterialInputChip.InputChip(
          key: (tree.materialInputChip.hasKey() ? evaluateFlutterKeyType(tree.materialInputChip.key) : null),
          avatar: (tree.materialInputChip.hasAvatar() ? evaluateWidgetType(tree.materialInputChip.avatar) : null),
          label: (tree.materialInputChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialInputChip.label) : missing('label')),
          labelStyle: (tree.materialInputChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialInputChip.labelStyle) : null),
          labelPadding: (tree.materialInputChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.labelPadding) : null),
          selected: (tree.materialInputChip.hasSelected() ? tree.materialInputChip.selected : false),
          isEnabled: (tree.materialInputChip.hasIsEnabled() ? tree.materialInputChip.isEnabled : true),
          onSelected: null,
          deleteIcon: (tree.materialInputChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialInputChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialInputChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialInputChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialInputChip.hasDeleteButtonTooltipMessage() ? tree.materialInputChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          pressElevation: (tree.materialInputChip.hasPressElevation() ? tree.materialInputChip.pressElevation : null),
          disabledColor: (tree.materialInputChip.hasDisabledColor() ? evaluateDartColorType(tree.materialInputChip.disabledColor) : null),
          selectedColor: (tree.materialInputChip.hasSelectedColor() ? evaluateDartColorType(tree.materialInputChip.selectedColor) : null),
          tooltip: (tree.materialInputChip.hasTooltip() ? tree.materialInputChip.tooltip : null),
          side: (tree.materialInputChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialInputChip.side) : null),
          shape: (tree.materialInputChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialInputChip.shape) : null),
          clipBehavior: (tree.materialInputChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialInputChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialInputChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialInputChip.focusNode) : null),
          autofocus: (tree.materialInputChip.hasAutofocus() ? tree.materialInputChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialInputChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialInputChip.backgroundColor) : null),
          padding: (tree.materialInputChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialInputChip.padding) : null),
          visualDensity: (tree.materialInputChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialInputChip.visualDensity) : null),
          materialTapTargetSize: (tree.materialInputChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialInputChip.materialTapTargetSize) : null),
          elevation: (tree.materialInputChip.hasElevation() ? tree.materialInputChip.elevation : null),
          shadowColor: (tree.materialInputChip.hasShadowColor() ? evaluateDartColorType(tree.materialInputChip.shadowColor) : null),
          surfaceTintColor: (tree.materialInputChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialInputChip.surfaceTintColor) : null),
          iconTheme: (tree.materialInputChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialInputChip.iconTheme) : null),
          selectedShadowColor: (tree.materialInputChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialInputChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialInputChip.hasShowCheckmark() ? tree.materialInputChip.showCheckmark : null),
          checkmarkColor: (tree.materialInputChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialInputChip.checkmarkColor) : null),
          avatarBorder: (tree.materialInputChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialInputChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialInputDatePickerFormField:
      return $flutterSrcMaterialInputDatePickerFormField.InputDatePickerFormField(
          key: (tree.materialInputDatePickerFormField.hasKey() ? evaluateFlutterKeyType(tree.materialInputDatePickerFormField.key) : null),
          initialDate: (tree.materialInputDatePickerFormField.hasInitialDate() ? evaluateDartDateTimeType(tree.materialInputDatePickerFormField.initialDate) : null),
          firstDate: (tree.materialInputDatePickerFormField.hasFirstDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.firstDate) : missing('firstDate')),
          lastDate: (tree.materialInputDatePickerFormField.hasLastDate() ? evaluateRequiredDartDateTimeType(tree.materialInputDatePickerFormField.lastDate) : missing('lastDate')),
          onDateSubmitted: null,
          onDateSaved: null,
          selectableDayPredicate: null,
          errorFormatText: (tree.materialInputDatePickerFormField.hasErrorFormatText() ? tree.materialInputDatePickerFormField.errorFormatText : null),
          errorInvalidText: (tree.materialInputDatePickerFormField.hasErrorInvalidText() ? tree.materialInputDatePickerFormField.errorInvalidText : null),
          fieldHintText: (tree.materialInputDatePickerFormField.hasFieldHintText() ? tree.materialInputDatePickerFormField.fieldHintText : null),
          fieldLabelText: (tree.materialInputDatePickerFormField.hasFieldLabelText() ? tree.materialInputDatePickerFormField.fieldLabelText : null),
          keyboardType: (tree.materialInputDatePickerFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialInputDatePickerFormField.keyboardType) : null),
          autofocus: (tree.materialInputDatePickerFormField.hasAutofocus() ? tree.materialInputDatePickerFormField.autofocus : false),
          acceptEmptyDate: (tree.materialInputDatePickerFormField.hasAcceptEmptyDate() ? tree.materialInputDatePickerFormField.acceptEmptyDate : false));
    case messages.WidgetType_Constructor.materialInputDecorator:
      return $flutterSrcMaterialInputDecorator.InputDecorator(
          key: (tree.materialInputDecorator.hasKey() ? evaluateFlutterKeyType(tree.materialInputDecorator.key) : null),
          decoration: (tree.materialInputDecorator.hasDecoration() ? evaluateRequiredMaterialInputDecorationType(tree.materialInputDecorator.decoration) : missing('decoration')),
          baseStyle: (tree.materialInputDecorator.hasBaseStyle() ? evaluateFlutterTextStyleType(tree.materialInputDecorator.baseStyle) : null),
          textAlign: (tree.materialInputDecorator.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialInputDecorator.textAlign) : null),
          textAlignVertical: (tree.materialInputDecorator.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialInputDecorator.textAlignVertical) : null),
          isFocused: (tree.materialInputDecorator.hasIsFocused() ? tree.materialInputDecorator.isFocused : false),
          isHovering: (tree.materialInputDecorator.hasIsHovering() ? tree.materialInputDecorator.isHovering : false),
          expands: (tree.materialInputDecorator.hasExpands() ? tree.materialInputDecorator.expands : false),
          isEmpty: (tree.materialInputDecorator.hasIsEmpty() ? tree.materialInputDecorator.isEmpty : false),
          child: (tree.materialInputDecorator.hasChild() ? evaluateWidgetType(tree.materialInputDecorator.child) : null));
    case messages.WidgetType_Constructor.materialLicensePage:
      return $flutterSrcMaterialAbout.LicensePage(
          key: (tree.materialLicensePage.hasKey() ? evaluateFlutterKeyType(tree.materialLicensePage.key) : null),
          applicationName: (tree.materialLicensePage.hasApplicationName() ? tree.materialLicensePage.applicationName : null),
          applicationVersion: (tree.materialLicensePage.hasApplicationVersion() ? tree.materialLicensePage.applicationVersion : null),
          applicationIcon: (tree.materialLicensePage.hasApplicationIcon() ? evaluateWidgetType(tree.materialLicensePage.applicationIcon) : null),
          applicationLegalese: (tree.materialLicensePage.hasApplicationLegalese() ? tree.materialLicensePage.applicationLegalese : null));
    case messages.WidgetType_Constructor.materialLinearProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.LinearProgressIndicator(
          key: (tree.materialLinearProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialLinearProgressIndicator.key) : null),
          value: (tree.materialLinearProgressIndicator.hasValue() ? tree.materialLinearProgressIndicator.value : null),
          backgroundColor: (tree.materialLinearProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.backgroundColor) : null),
          color: (tree.materialLinearProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialLinearProgressIndicator.color) : null),
          valueColor: null,
          minHeight: (tree.materialLinearProgressIndicator.hasMinHeight() ? tree.materialLinearProgressIndicator.minHeight : null),
          semanticsLabel: (tree.materialLinearProgressIndicator.hasSemanticsLabel() ? tree.materialLinearProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialLinearProgressIndicator.hasSemanticsValue() ? tree.materialLinearProgressIndicator.semanticsValue : null),
          borderRadius: (tree.materialLinearProgressIndicator.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusGeometryType(tree.materialLinearProgressIndicator.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.zero));
    case messages.WidgetType_Constructor.materialListTile:
      return $flutterSrcMaterialListTile.ListTile(
          key: (tree.materialListTile.hasKey() ? evaluateFlutterKeyType(tree.materialListTile.key) : null),
          leading: (tree.materialListTile.hasLeading() ? evaluateWidgetType(tree.materialListTile.leading) : null),
          title: (tree.materialListTile.hasTitle() ? evaluateWidgetType(tree.materialListTile.title) : null),
          subtitle: (tree.materialListTile.hasSubtitle() ? evaluateWidgetType(tree.materialListTile.subtitle) : null),
          trailing: (tree.materialListTile.hasTrailing() ? evaluateWidgetType(tree.materialListTile.trailing) : null),
          isThreeLine: (tree.materialListTile.hasIsThreeLine() ? tree.materialListTile.isThreeLine : false),
          dense: (tree.materialListTile.hasDense() ? tree.materialListTile.dense : null),
          visualDensity: (tree.materialListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialListTile.visualDensity) : null),
          shape: (tree.materialListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTile.shape) : null),
          style: (tree.materialListTile.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTile.style) : null),
          selectedColor: (tree.materialListTile.hasSelectedColor() ? evaluateDartColorType(tree.materialListTile.selectedColor) : null),
          iconColor: (tree.materialListTile.hasIconColor() ? evaluateDartColorType(tree.materialListTile.iconColor) : null),
          textColor: (tree.materialListTile.hasTextColor() ? evaluateDartColorType(tree.materialListTile.textColor) : null),
          titleTextStyle: (tree.materialListTile.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.titleTextStyle) : null),
          subtitleTextStyle: (tree.materialListTile.hasSubtitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.subtitleTextStyle) : null),
          leadingAndTrailingTextStyle: (tree.materialListTile.hasLeadingAndTrailingTextStyle() ? evaluateFlutterTextStyleType(tree.materialListTile.leadingAndTrailingTextStyle) : null),
          contentPadding: (tree.materialListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTile.contentPadding) : null),
          enabled: (tree.materialListTile.hasEnabled() ? tree.materialListTile.enabled : true),
          onTap: null,
          onLongPress: null,
          onFocusChange: null,
          mouseCursor: null,
          selected: (tree.materialListTile.hasSelected() ? tree.materialListTile.selected : false),
          focusColor: (tree.materialListTile.hasFocusColor() ? evaluateDartColorType(tree.materialListTile.focusColor) : null),
          hoverColor: (tree.materialListTile.hasHoverColor() ? evaluateDartColorType(tree.materialListTile.hoverColor) : null),
          splashColor: (tree.materialListTile.hasSplashColor() ? evaluateDartColorType(tree.materialListTile.splashColor) : null),
          focusNode: (tree.materialListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialListTile.focusNode) : null),
          autofocus: (tree.materialListTile.hasAutofocus() ? tree.materialListTile.autofocus : false),
          tileColor: (tree.materialListTile.hasTileColor() ? evaluateDartColorType(tree.materialListTile.tileColor) : null),
          selectedTileColor: (tree.materialListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTile.selectedTileColor) : null),
          enableFeedback: (tree.materialListTile.hasEnableFeedback() ? tree.materialListTile.enableFeedback : null),
          horizontalTitleGap: (tree.materialListTile.hasHorizontalTitleGap() ? tree.materialListTile.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTile.hasMinVerticalPadding() ? tree.materialListTile.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTile.hasMinLeadingWidth() ? tree.materialListTile.minLeadingWidth : null),
          titleAlignment: (tree.materialListTile.hasTitleAlignment() ? enums.convertMaterialListTileTitleAlignmentType(tree.materialListTile.titleAlignment) : null));
    case messages.WidgetType_Constructor.materialListTileTheme:
      return $flutterSrcMaterialListTileTheme.ListTileTheme(
          key: (tree.materialListTileTheme.hasKey() ? evaluateFlutterKeyType(tree.materialListTileTheme.key) : null),
          data: (tree.materialListTileTheme.hasData() ? evaluateMaterialListTileThemeDataType(tree.materialListTileTheme.data) : null),
          dense: (tree.materialListTileTheme.hasDense() ? tree.materialListTileTheme.dense : null),
          shape: (tree.materialListTileTheme.hasShape() ? evaluateFlutterShapeBorderType(tree.materialListTileTheme.shape) : null),
          style: (tree.materialListTileTheme.hasStyle() ? enums.convertMaterialListTileStyleType(tree.materialListTileTheme.style) : null),
          selectedColor: (tree.materialListTileTheme.hasSelectedColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedColor) : null),
          iconColor: (tree.materialListTileTheme.hasIconColor() ? evaluateDartColorType(tree.materialListTileTheme.iconColor) : null),
          textColor: (tree.materialListTileTheme.hasTextColor() ? evaluateDartColorType(tree.materialListTileTheme.textColor) : null),
          contentPadding: (tree.materialListTileTheme.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialListTileTheme.contentPadding) : null),
          tileColor: (tree.materialListTileTheme.hasTileColor() ? evaluateDartColorType(tree.materialListTileTheme.tileColor) : null),
          selectedTileColor: (tree.materialListTileTheme.hasSelectedTileColor() ? evaluateDartColorType(tree.materialListTileTheme.selectedTileColor) : null),
          enableFeedback: (tree.materialListTileTheme.hasEnableFeedback() ? tree.materialListTileTheme.enableFeedback : null),
          mouseCursor: null,
          horizontalTitleGap: (tree.materialListTileTheme.hasHorizontalTitleGap() ? tree.materialListTileTheme.horizontalTitleGap : null),
          minVerticalPadding: (tree.materialListTileTheme.hasMinVerticalPadding() ? tree.materialListTileTheme.minVerticalPadding : null),
          minLeadingWidth: (tree.materialListTileTheme.hasMinLeadingWidth() ? tree.materialListTileTheme.minLeadingWidth : null),
          child: (tree.materialListTileTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialListTileTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMagnifier:
      return $flutterSrcMaterialMagnifier.Magnifier(
          key: (tree.materialMagnifier.hasKey() ? evaluateFlutterKeyType(tree.materialMagnifier.key) : null),
          additionalFocalPointOffset: (tree.materialMagnifier.hasAdditionalFocalPointOffset() ? evaluateRequiredDartOffsetType(tree.materialMagnifier.additionalFocalPointOffset) : $dartUi.Offset.zero),
          borderRadius: (tree.materialMagnifier.hasBorderRadius() ? evaluateRequiredFlutterBorderRadiusType(tree.materialMagnifier.borderRadius) : $flutterSrcPaintingBorderRadius.BorderRadius.all($dartUi.Radius.circular(40))),
          filmColor: (tree.materialMagnifier.hasFilmColor() ? evaluateRequiredDartColorType(tree.materialMagnifier.filmColor) : $dartUi.Color.fromARGB(8, 158, 158, 158)),
          shadows: tree.materialMagnifier.shadows.map((e) => evaluateRequiredFlutterBoxShadowType(e)).toList(),
          size: (tree.materialMagnifier.hasSize() ? evaluateRequiredDartSizeType(tree.materialMagnifier.size) : $dartUi.Size(77.37, 37.9)));
    case messages.WidgetType_Constructor.materialMaterial:
      return $flutterSrcMaterialMaterial.Material(
          key: (tree.materialMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMaterial.key) : null),
          type: (tree.materialMaterial.hasType() ? enums.convertRequiredMaterialMaterialTypeType(tree.materialMaterial.type) : $flutterSrcMaterialMaterial.MaterialType.canvas),
          elevation: (tree.materialMaterial.hasElevation() ? tree.materialMaterial.elevation : 0.0),
          color: (tree.materialMaterial.hasColor() ? evaluateDartColorType(tree.materialMaterial.color) : null),
          shadowColor: (tree.materialMaterial.hasShadowColor() ? evaluateDartColorType(tree.materialMaterial.shadowColor) : null),
          surfaceTintColor: (tree.materialMaterial.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterial.surfaceTintColor) : null),
          textStyle: (tree.materialMaterial.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterial.textStyle) : null),
          borderRadius: (tree.materialMaterial.hasBorderRadius() ? evaluateFlutterBorderRadiusGeometryType(tree.materialMaterial.borderRadius) : null),
          shape: (tree.materialMaterial.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterial.shape) : null),
          borderOnForeground: (tree.materialMaterial.hasBorderOnForeground() ? tree.materialMaterial.borderOnForeground : true),
          clipBehavior: (tree.materialMaterial.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterial.clipBehavior) : $dartUi.Clip.none),
          animationDuration: (tree.materialMaterial.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterial.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          child: (tree.materialMaterial.hasChild() ? evaluateWidgetType(tree.materialMaterial.child) : null));
    case messages.WidgetType_Constructor.materialMaterialApp:
      return $flutterSrcMaterialApp.MaterialApp(
          key: (tree.materialMaterialApp.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialApp.key) : null),
          navigatorKey: null,
          scaffoldMessengerKey: null,
          home: (tree.materialMaterialApp.hasHome() ? evaluateWidgetType(tree.materialMaterialApp.home) : null),
          initialRoute: (tree.materialMaterialApp.hasInitialRoute() ? tree.materialMaterialApp.initialRoute : null),
          onGenerateRoute: null,
          onGenerateInitialRoutes: null,
          onUnknownRoute: null,
          onNavigationNotification: null,
          navigatorObservers: tree.materialMaterialApp.navigatorObservers.map((e) => evaluateRequiredFlutterNavigatorObserverType(e)).toList(),
          builder: null,
          title: (tree.materialMaterialApp.hasTitle() ? tree.materialMaterialApp.title : ''),
          onGenerateTitle: null,
          color: (tree.materialMaterialApp.hasColor() ? evaluateDartColorType(tree.materialMaterialApp.color) : null),
          theme: (tree.materialMaterialApp.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.theme) : null),
          darkTheme: (tree.materialMaterialApp.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialApp.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialApp.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialApp.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialApp.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialApp.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialApp.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialApp.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialApp.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialApp.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialApp.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialApp.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialApp.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialApp.hasDebugShowMaterialGrid() ? tree.materialMaterialApp.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialApp.hasShowPerformanceOverlay() ? tree.materialMaterialApp.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialApp.hasCheckerboardRasterCacheImages() ? tree.materialMaterialApp.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialApp.hasCheckerboardOffscreenLayers() ? tree.materialMaterialApp.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialApp.hasShowSemanticsDebugger() ? tree.materialMaterialApp.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialApp.hasDebugShowCheckedModeBanner() ? tree.materialMaterialApp.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialApp.hasRestorationScopeId() ? tree.materialMaterialApp.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialApp.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialApp.scrollBehavior) : null));
    case messages.WidgetType_Constructor.materialMaterialAppNamedRouter:
      return $flutterSrcMaterialApp.MaterialApp.router(
          key: (tree.materialMaterialAppNamedRouter.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialAppNamedRouter.key) : null),
          scaffoldMessengerKey: null,
          routeInformationProvider: (tree.materialMaterialAppNamedRouter.hasRouteInformationProvider() ? evaluateFlutterRouteInformationProviderType(tree.materialMaterialAppNamedRouter.routeInformationProvider) : null),
          routeInformationParser: null,
          routerDelegate: null,
          routerConfig: null,
          backButtonDispatcher: (tree.materialMaterialAppNamedRouter.hasBackButtonDispatcher() ? evaluateFlutterBackButtonDispatcherType(tree.materialMaterialAppNamedRouter.backButtonDispatcher) : null),
          builder: null,
          title: (tree.materialMaterialAppNamedRouter.hasTitle() ? tree.materialMaterialAppNamedRouter.title : ''),
          onGenerateTitle: null,
          onNavigationNotification: null,
          color: (tree.materialMaterialAppNamedRouter.hasColor() ? evaluateDartColorType(tree.materialMaterialAppNamedRouter.color) : null),
          theme: (tree.materialMaterialAppNamedRouter.hasTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.theme) : null),
          darkTheme: (tree.materialMaterialAppNamedRouter.hasDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.darkTheme) : null),
          highContrastTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastTheme) : null),
          highContrastDarkTheme: (tree.materialMaterialAppNamedRouter.hasHighContrastDarkTheme() ? evaluateMaterialThemeDataType(tree.materialMaterialAppNamedRouter.highContrastDarkTheme) : null),
          themeMode: (tree.materialMaterialAppNamedRouter.hasThemeMode() ? enums.convertMaterialThemeModeType(tree.materialMaterialAppNamedRouter.themeMode) : $flutterSrcMaterialApp.ThemeMode.system),
          themeAnimationDuration: (tree.materialMaterialAppNamedRouter.hasThemeAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialMaterialAppNamedRouter.themeAnimationDuration) : $flutterSrcMaterialTheme.kThemeAnimationDuration),
          themeAnimationCurve: (tree.materialMaterialAppNamedRouter.hasThemeAnimationCurve() ? evaluateRequiredFlutterSrcAnimationCurveType(tree.materialMaterialAppNamedRouter.themeAnimationCurve) : $flutterSrcAnimationCurves.Curves.linear),
          locale: (tree.materialMaterialAppNamedRouter.hasLocale() ? evaluateDartLocaleType(tree.materialMaterialAppNamedRouter.locale) : null),
          localizationsDelegates: null,
          localeListResolutionCallback: null,
          localeResolutionCallback: null,
          supportedLocales: tree.materialMaterialAppNamedRouter.supportedLocales.map((e) => evaluateRequiredDartLocaleType(e)).toList(),
          debugShowMaterialGrid: (tree.materialMaterialAppNamedRouter.hasDebugShowMaterialGrid() ? tree.materialMaterialAppNamedRouter.debugShowMaterialGrid : false),
          showPerformanceOverlay: (tree.materialMaterialAppNamedRouter.hasShowPerformanceOverlay() ? tree.materialMaterialAppNamedRouter.showPerformanceOverlay : false),
          checkerboardRasterCacheImages: (tree.materialMaterialAppNamedRouter.hasCheckerboardRasterCacheImages() ? tree.materialMaterialAppNamedRouter.checkerboardRasterCacheImages : false),
          checkerboardOffscreenLayers: (tree.materialMaterialAppNamedRouter.hasCheckerboardOffscreenLayers() ? tree.materialMaterialAppNamedRouter.checkerboardOffscreenLayers : false),
          showSemanticsDebugger: (tree.materialMaterialAppNamedRouter.hasShowSemanticsDebugger() ? tree.materialMaterialAppNamedRouter.showSemanticsDebugger : false),
          debugShowCheckedModeBanner: (tree.materialMaterialAppNamedRouter.hasDebugShowCheckedModeBanner() ? tree.materialMaterialAppNamedRouter.debugShowCheckedModeBanner : true),
          shortcuts: null,
          actions: null,
          restorationScopeId: (tree.materialMaterialAppNamedRouter.hasRestorationScopeId() ? tree.materialMaterialAppNamedRouter.restorationScopeId : null),
          scrollBehavior: (tree.materialMaterialAppNamedRouter.hasScrollBehavior() ? evaluateFlutterScrollBehaviorType(tree.materialMaterialAppNamedRouter.scrollBehavior) : null));
    case messages.WidgetType_Constructor.materialMaterialBanner:
      return $flutterSrcMaterialBanner.MaterialBanner(
          key: (tree.materialMaterialBanner.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBanner.key) : null),
          content: (tree.materialMaterialBanner.hasContent() ? evaluateRequiredWidgetType(tree.materialMaterialBanner.content) : missing('content')),
          contentTextStyle: (tree.materialMaterialBanner.hasContentTextStyle() ? evaluateFlutterTextStyleType(tree.materialMaterialBanner.contentTextStyle) : null),
          actions: tree.materialMaterialBanner.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          elevation: (tree.materialMaterialBanner.hasElevation() ? tree.materialMaterialBanner.elevation : null),
          leading: (tree.materialMaterialBanner.hasLeading() ? evaluateWidgetType(tree.materialMaterialBanner.leading) : null),
          backgroundColor: (tree.materialMaterialBanner.hasBackgroundColor() ? evaluateDartColorType(tree.materialMaterialBanner.backgroundColor) : null),
          surfaceTintColor: (tree.materialMaterialBanner.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialMaterialBanner.surfaceTintColor) : null),
          shadowColor: (tree.materialMaterialBanner.hasShadowColor() ? evaluateDartColorType(tree.materialMaterialBanner.shadowColor) : null),
          dividerColor: (tree.materialMaterialBanner.hasDividerColor() ? evaluateDartColorType(tree.materialMaterialBanner.dividerColor) : null),
          padding: (tree.materialMaterialBanner.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.padding) : null),
          margin: (tree.materialMaterialBanner.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.margin) : null),
          leadingPadding: (tree.materialMaterialBanner.hasLeadingPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialBanner.leadingPadding) : null),
          forceActionsBelow: (tree.materialMaterialBanner.hasForceActionsBelow() ? tree.materialMaterialBanner.forceActionsBelow : false),
          overflowAlignment: (tree.materialMaterialBanner.hasOverflowAlignment() ? enums.convertRequiredFlutterOverflowBarAlignmentType(tree.materialMaterialBanner.overflowAlignment) : $flutterSrcWidgetsOverflowBar.OverflowBarAlignment.end),
          animation: null,
          onVisible: null);
    case messages.WidgetType_Constructor.materialMaterialBannerTheme:
      return $flutterSrcMaterialBannerTheme.MaterialBannerTheme(
          key: (tree.materialMaterialBannerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialBannerTheme.key) : null),
          data: (tree.materialMaterialBannerTheme.hasData() ? evaluateMaterialMaterialBannerThemeDataType(tree.materialMaterialBannerTheme.data) : null),
          child: (tree.materialMaterialBannerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMaterialBannerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMaterialButton:
      return $flutterSrcMaterialMaterialButton.MaterialButton(
          key: (tree.materialMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textTheme: (tree.materialMaterialButton.hasTextTheme() ? enums.convertMaterialButtonTextThemeType(tree.materialMaterialButton.textTheme) : null),
          textColor: (tree.materialMaterialButton.hasTextColor() ? evaluateDartColorType(tree.materialMaterialButton.textColor) : null),
          disabledTextColor: (tree.materialMaterialButton.hasDisabledTextColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledTextColor) : null),
          color: (tree.materialMaterialButton.hasColor() ? evaluateDartColorType(tree.materialMaterialButton.color) : null),
          disabledColor: (tree.materialMaterialButton.hasDisabledColor() ? evaluateDartColorType(tree.materialMaterialButton.disabledColor) : null),
          focusColor: (tree.materialMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialMaterialButton.focusColor) : null),
          hoverColor: (tree.materialMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialMaterialButton.highlightColor) : null),
          splashColor: (tree.materialMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialMaterialButton.splashColor) : null),
          colorBrightness: (tree.materialMaterialButton.hasColorBrightness() ? enums.convertDartBrightnessType(tree.materialMaterialButton.colorBrightness) : null),
          elevation: (tree.materialMaterialButton.hasElevation() ? tree.materialMaterialButton.elevation : null),
          focusElevation: (tree.materialMaterialButton.hasFocusElevation() ? tree.materialMaterialButton.focusElevation : null),
          hoverElevation: (tree.materialMaterialButton.hasHoverElevation() ? tree.materialMaterialButton.hoverElevation : null),
          highlightElevation: (tree.materialMaterialButton.hasHighlightElevation() ? tree.materialMaterialButton.highlightElevation : null),
          disabledElevation: (tree.materialMaterialButton.hasDisabledElevation() ? tree.materialMaterialButton.disabledElevation : null),
          padding: (tree.materialMaterialButton.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialMaterialButton.padding) : null),
          visualDensity: (tree.materialMaterialButton.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialMaterialButton.visualDensity) : null),
          shape: (tree.materialMaterialButton.hasShape() ? evaluateFlutterShapeBorderType(tree.materialMaterialButton.shape) : null),
          clipBehavior: (tree.materialMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMaterialButton.focusNode) : null),
          autofocus: (tree.materialMaterialButton.hasAutofocus() ? tree.materialMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialMaterialButton.materialTapTargetSize) : null),
          animationDuration: (tree.materialMaterialButton.hasAnimationDuration() ? evaluateDartDurationType(tree.materialMaterialButton.animationDuration) : null),
          minWidth: (tree.materialMaterialButton.hasMinWidth() ? tree.materialMaterialButton.minWidth : null),
          height: (tree.materialMaterialButton.hasHeight() ? tree.materialMaterialButton.height : null),
          enableFeedback: (tree.materialMaterialButton.hasEnableFeedback() ? tree.materialMaterialButton.enableFeedback : true),
          child: (tree.materialMaterialButton.hasChild() ? evaluateWidgetType(tree.materialMaterialButton.child) : null));
    case messages.WidgetType_Constructor.materialMenuAcceleratorCallbackBinding:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorCallbackBinding(
          key: (tree.materialMenuAcceleratorCallbackBinding.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorCallbackBinding.key) : null),
          onInvoke: null,
          hasSubmenu: (tree.materialMenuAcceleratorCallbackBinding.hasHasSubmenu() ? tree.materialMenuAcceleratorCallbackBinding.hasSubmenu : false),
          child: (tree.materialMenuAcceleratorCallbackBinding.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuAcceleratorCallbackBinding.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMenuAcceleratorLabel:
      return $flutterSrcMaterialMenuAnchor.MenuAcceleratorLabel(
          (tree.materialMenuAcceleratorLabel.hasLabel() ? tree.materialMenuAcceleratorLabel.label : missing('label')),
          key: (tree.materialMenuAcceleratorLabel.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAcceleratorLabel.key) : null));
    case messages.WidgetType_Constructor.materialMenuAnchor:
      return $flutterSrcMaterialMenuAnchor.MenuAnchor(
          key: (tree.materialMenuAnchor.hasKey() ? evaluateFlutterKeyType(tree.materialMenuAnchor.key) : null),
          controller: (tree.materialMenuAnchor.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuAnchor.controller) : null),
          childFocusNode: (tree.materialMenuAnchor.hasChildFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuAnchor.childFocusNode) : null),
          style: (tree.materialMenuAnchor.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuAnchor.style) : null),
          alignmentOffset: (tree.materialMenuAnchor.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialMenuAnchor.alignmentOffset) : $dartUi.Offset.zero),
          clipBehavior: (tree.materialMenuAnchor.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuAnchor.clipBehavior) : $dartUi.Clip.hardEdge),
          anchorTapClosesMenu: (tree.materialMenuAnchor.hasAnchorTapClosesMenu() ? tree.materialMenuAnchor.anchorTapClosesMenu : false),
          onOpen: null,
          onClose: null,
          crossAxisUnconstrained: (tree.materialMenuAnchor.hasCrossAxisUnconstrained() ? tree.materialMenuAnchor.crossAxisUnconstrained : true),
          menuChildren: tree.materialMenuAnchor.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          builder: null,
          child: (tree.materialMenuAnchor.hasChild() ? evaluateWidgetType(tree.materialMenuAnchor.child) : null));
    case messages.WidgetType_Constructor.materialMenuBar:
      return $flutterSrcMaterialMenuAnchor.MenuBar(
          key: (tree.materialMenuBar.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBar.key) : null),
          style: (tree.materialMenuBar.hasStyle() ? evaluateMaterialMenuStyleType(tree.materialMenuBar.style) : null),
          clipBehavior: (tree.materialMenuBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuBar.clipBehavior) : $dartUi.Clip.none),
          controller: (tree.materialMenuBar.hasController() ? evaluateMaterialMenuControllerType(tree.materialMenuBar.controller) : null),
          children: tree.materialMenuBar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialMenuBarTheme:
      return $flutterSrcMaterialMenuBarTheme.MenuBarTheme(
          key: (tree.materialMenuBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuBarTheme.key) : null),
          data: (tree.materialMenuBarTheme.hasData() ? evaluateRequiredMaterialMenuBarThemeDataType(tree.materialMenuBarTheme.data) : missing('data')),
          child: (tree.materialMenuBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuBarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMenuButtonTheme:
      return $flutterSrcMaterialMenuButtonTheme.MenuButtonTheme(
          key: (tree.materialMenuButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuButtonTheme.key) : null),
          data: (tree.materialMenuButtonTheme.hasData() ? evaluateRequiredMaterialMenuButtonThemeDataType(tree.materialMenuButtonTheme.data) : missing('data')),
          child: (tree.materialMenuButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMenuItemButton:
      return $flutterSrcMaterialMenuAnchor.MenuItemButton(
          key: (tree.materialMenuItemButton.hasKey() ? evaluateFlutterKeyType(tree.materialMenuItemButton.key) : null),
          onPressed: null,
          onHover: null,
          requestFocusOnHover: (tree.materialMenuItemButton.hasRequestFocusOnHover() ? tree.materialMenuItemButton.requestFocusOnHover : true),
          onFocusChange: null,
          focusNode: (tree.materialMenuItemButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialMenuItemButton.focusNode) : null),
          shortcut: null,
          style: (tree.materialMenuItemButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialMenuItemButton.style) : null),
          statesController: (tree.materialMenuItemButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialMenuItemButton.statesController) : null),
          clipBehavior: (tree.materialMenuItemButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialMenuItemButton.clipBehavior) : $dartUi.Clip.none),
          leadingIcon: (tree.materialMenuItemButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.leadingIcon) : null),
          trailingIcon: (tree.materialMenuItemButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialMenuItemButton.trailingIcon) : null),
          closeOnActivate: (tree.materialMenuItemButton.hasCloseOnActivate() ? tree.materialMenuItemButton.closeOnActivate : true),
          child: (tree.materialMenuItemButton.hasChild() ? evaluateWidgetType(tree.materialMenuItemButton.child) : null));
    case messages.WidgetType_Constructor.materialMenuTheme:
      return $flutterSrcMaterialMenuTheme.MenuTheme(
          key: (tree.materialMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialMenuTheme.key) : null),
          data: (tree.materialMenuTheme.hasData() ? evaluateRequiredMaterialMenuThemeDataType(tree.materialMenuTheme.data) : missing('data')),
          child: (tree.materialMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialMenuTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialMergeableMaterial:
      return $flutterSrcMaterialMergeableMaterial.MergeableMaterial(
          key: (tree.materialMergeableMaterial.hasKey() ? evaluateFlutterKeyType(tree.materialMergeableMaterial.key) : null),
          mainAxis: (tree.materialMergeableMaterial.hasMainAxis() ? enums.convertRequiredFlutterAxisType(tree.materialMergeableMaterial.mainAxis) : $flutterSrcPaintingBasicTypes.Axis.vertical),
          elevation: (tree.materialMergeableMaterial.hasElevation() ? tree.materialMergeableMaterial.elevation : 2),
          hasDividers: (tree.materialMergeableMaterial.hasHasDividers() ? tree.materialMergeableMaterial.hasDividers : false),
          children: tree.materialMergeableMaterial.children.map((e) => evaluateRequiredMaterialMergeableMaterialItemType(e)).toList(),
          dividerColor: (tree.materialMergeableMaterial.hasDividerColor() ? evaluateDartColorType(tree.materialMergeableMaterial.dividerColor) : null));
    case messages.WidgetType_Constructor.materialNavigationBar:
      return $flutterSrcMaterialNavigationBar.NavigationBar(
          key: (tree.materialNavigationBar.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBar.key) : null),
          animationDuration: (tree.materialNavigationBar.hasAnimationDuration() ? evaluateDartDurationType(tree.materialNavigationBar.animationDuration) : null),
          selectedIndex: (tree.materialNavigationBar.hasSelectedIndex() ? tree.materialNavigationBar.selectedIndex : 0),
          destinations: tree.materialNavigationBar.destinations.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onDestinationSelected: null,
          backgroundColor: (tree.materialNavigationBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationBar.backgroundColor) : null),
          elevation: (tree.materialNavigationBar.hasElevation() ? tree.materialNavigationBar.elevation : null),
          shadowColor: (tree.materialNavigationBar.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationBar.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationBar.surfaceTintColor) : null),
          indicatorColor: (tree.materialNavigationBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationBar.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationBar.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationBar.indicatorShape) : null),
          height: (tree.materialNavigationBar.hasHeight() ? tree.materialNavigationBar.height : null),
          labelBehavior: (tree.materialNavigationBar.hasLabelBehavior() ? enums.convertMaterialNavigationDestinationLabelBehaviorType(tree.materialNavigationBar.labelBehavior) : null));
    case messages.WidgetType_Constructor.materialNavigationBarTheme:
      return $flutterSrcMaterialNavigationBarTheme.NavigationBarTheme(
          key: (tree.materialNavigationBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationBarTheme.key) : null),
          data: (tree.materialNavigationBarTheme.hasData() ? evaluateRequiredMaterialNavigationBarThemeDataType(tree.materialNavigationBarTheme.data) : missing('data')),
          child: (tree.materialNavigationBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationBarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialNavigationDestination:
      return $flutterSrcMaterialNavigationBar.NavigationDestination(
          key: (tree.materialNavigationDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDestination.key) : null),
          icon: (tree.materialNavigationDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDestination.selectedIcon) : null),
          label: (tree.materialNavigationDestination.hasLabel() ? tree.materialNavigationDestination.label : missing('label')),
          tooltip: (tree.materialNavigationDestination.hasTooltip() ? tree.materialNavigationDestination.tooltip : null),
          enabled: (tree.materialNavigationDestination.hasEnabled() ? tree.materialNavigationDestination.enabled : true));
    case messages.WidgetType_Constructor.materialNavigationDrawer:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawer(
          key: (tree.materialNavigationDrawer.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawer.key) : null),
          children: tree.materialNavigationDrawer.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          backgroundColor: (tree.materialNavigationDrawer.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawer.backgroundColor) : null),
          shadowColor: (tree.materialNavigationDrawer.hasShadowColor() ? evaluateDartColorType(tree.materialNavigationDrawer.shadowColor) : null),
          surfaceTintColor: (tree.materialNavigationDrawer.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialNavigationDrawer.surfaceTintColor) : null),
          elevation: (tree.materialNavigationDrawer.hasElevation() ? tree.materialNavigationDrawer.elevation : null),
          indicatorColor: (tree.materialNavigationDrawer.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationDrawer.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationDrawer.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationDrawer.indicatorShape) : null),
          onDestinationSelected: null,
          selectedIndex: (tree.materialNavigationDrawer.hasSelectedIndex() ? tree.materialNavigationDrawer.selectedIndex : 0),
          tilePadding: (tree.materialNavigationDrawer.hasTilePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialNavigationDrawer.tilePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 12.0)));
    case messages.WidgetType_Constructor.materialNavigationDrawerDestination:
      return $flutterSrcMaterialNavigationDrawer.NavigationDrawerDestination(
          key: (tree.materialNavigationDrawerDestination.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerDestination.key) : null),
          backgroundColor: (tree.materialNavigationDrawerDestination.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationDrawerDestination.backgroundColor) : null),
          icon: (tree.materialNavigationDrawerDestination.hasIcon() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.icon) : missing('icon')),
          selectedIcon: (tree.materialNavigationDrawerDestination.hasSelectedIcon() ? evaluateWidgetType(tree.materialNavigationDrawerDestination.selectedIcon) : null),
          label: (tree.materialNavigationDrawerDestination.hasLabel() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerDestination.label) : missing('label')),
          enabled: (tree.materialNavigationDrawerDestination.hasEnabled() ? tree.materialNavigationDrawerDestination.enabled : true));
    case messages.WidgetType_Constructor.materialNavigationDrawerTheme:
      return $flutterSrcMaterialNavigationDrawerTheme.NavigationDrawerTheme(
          key: (tree.materialNavigationDrawerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationDrawerTheme.key) : null),
          data: (tree.materialNavigationDrawerTheme.hasData() ? evaluateRequiredMaterialNavigationDrawerThemeDataType(tree.materialNavigationDrawerTheme.data) : missing('data')),
          child: (tree.materialNavigationDrawerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationDrawerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialNavigationRail:
      return $flutterSrcMaterialNavigationRail.NavigationRail(
          key: (tree.materialNavigationRail.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRail.key) : null),
          backgroundColor: (tree.materialNavigationRail.hasBackgroundColor() ? evaluateDartColorType(tree.materialNavigationRail.backgroundColor) : null),
          extended: (tree.materialNavigationRail.hasExtended() ? tree.materialNavigationRail.extended : false),
          leading: (tree.materialNavigationRail.hasLeading() ? evaluateWidgetType(tree.materialNavigationRail.leading) : null),
          trailing: (tree.materialNavigationRail.hasTrailing() ? evaluateWidgetType(tree.materialNavigationRail.trailing) : null),
          destinations: tree.materialNavigationRail.destinations.map((e) => evaluateRequiredMaterialNavigationRailDestinationType(e)).toList(),
          selectedIndex: (tree.materialNavigationRail.hasSelectedIndex() ? tree.materialNavigationRail.selectedIndex : null),
          onDestinationSelected: null,
          elevation: (tree.materialNavigationRail.hasElevation() ? tree.materialNavigationRail.elevation : null),
          groupAlignment: (tree.materialNavigationRail.hasGroupAlignment() ? tree.materialNavigationRail.groupAlignment : null),
          labelType: (tree.materialNavigationRail.hasLabelType() ? enums.convertMaterialNavigationRailLabelTypeType(tree.materialNavigationRail.labelType) : null),
          unselectedLabelTextStyle: (tree.materialNavigationRail.hasUnselectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.unselectedLabelTextStyle) : null),
          selectedLabelTextStyle: (tree.materialNavigationRail.hasSelectedLabelTextStyle() ? evaluateFlutterTextStyleType(tree.materialNavigationRail.selectedLabelTextStyle) : null),
          unselectedIconTheme: (tree.materialNavigationRail.hasUnselectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.unselectedIconTheme) : null),
          selectedIconTheme: (tree.materialNavigationRail.hasSelectedIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialNavigationRail.selectedIconTheme) : null),
          minWidth: (tree.materialNavigationRail.hasMinWidth() ? tree.materialNavigationRail.minWidth : null),
          minExtendedWidth: (tree.materialNavigationRail.hasMinExtendedWidth() ? tree.materialNavigationRail.minExtendedWidth : null),
          useIndicator: (tree.materialNavigationRail.hasUseIndicator() ? tree.materialNavigationRail.useIndicator : null),
          indicatorColor: (tree.materialNavigationRail.hasIndicatorColor() ? evaluateDartColorType(tree.materialNavigationRail.indicatorColor) : null),
          indicatorShape: (tree.materialNavigationRail.hasIndicatorShape() ? evaluateFlutterShapeBorderType(tree.materialNavigationRail.indicatorShape) : null));
    case messages.WidgetType_Constructor.materialNavigationRailTheme:
      return $flutterSrcMaterialNavigationRailTheme.NavigationRailTheme(
          key: (tree.materialNavigationRailTheme.hasKey() ? evaluateFlutterKeyType(tree.materialNavigationRailTheme.key) : null),
          data: (tree.materialNavigationRailTheme.hasData() ? evaluateRequiredMaterialNavigationRailThemeDataType(tree.materialNavigationRailTheme.data) : missing('data')),
          child: (tree.materialNavigationRailTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialNavigationRailTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialOutlinedButton:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton(
          key: (tree.materialOutlinedButton.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialOutlinedButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButton.style) : null),
          focusNode: (tree.materialOutlinedButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButton.focusNode) : null),
          autofocus: (tree.materialOutlinedButton.hasAutofocus() ? tree.materialOutlinedButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialOutlinedButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialOutlinedButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialOutlinedButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButton.statesController) : null),
          child: (tree.materialOutlinedButton.hasChild() ? evaluateWidgetType(tree.materialOutlinedButton.child) : null));
    case messages.WidgetType_Constructor.materialOutlinedButtonNamedIcon:
      return $flutterSrcMaterialOutlinedButton.OutlinedButton.icon(
          key: (tree.materialOutlinedButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          style: (tree.materialOutlinedButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialOutlinedButtonNamedIcon.style) : null),
          focusNode: (tree.materialOutlinedButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialOutlinedButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialOutlinedButtonNamedIcon.hasAutofocus() ? tree.materialOutlinedButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialOutlinedButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialOutlinedButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialOutlinedButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialOutlinedButtonNamedIcon.statesController) : null),
          icon: (tree.materialOutlinedButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialOutlinedButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonNamedIcon.label) : missing('label')));
    case messages.WidgetType_Constructor.materialOutlinedButtonTheme:
      return $flutterSrcMaterialOutlinedButtonTheme.OutlinedButtonTheme(
          key: (tree.materialOutlinedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialOutlinedButtonTheme.key) : null),
          data: (tree.materialOutlinedButtonTheme.hasData() ? evaluateRequiredMaterialOutlinedButtonThemeDataType(tree.materialOutlinedButtonTheme.data) : missing('data')),
          child: (tree.materialOutlinedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialOutlinedButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialPaginatedDataTable:
      return $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable(
          key: (tree.materialPaginatedDataTable.hasKey() ? evaluateFlutterKeyType(tree.materialPaginatedDataTable.key) : null),
          header: (tree.materialPaginatedDataTable.hasHeader() ? evaluateWidgetType(tree.materialPaginatedDataTable.header) : null),
          actions: tree.materialPaginatedDataTable.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          columns: tree.materialPaginatedDataTable.columns.map((e) => evaluateRequiredMaterialDataColumnType(e)).toList(),
          sortColumnIndex: (tree.materialPaginatedDataTable.hasSortColumnIndex() ? tree.materialPaginatedDataTable.sortColumnIndex : null),
          sortAscending: (tree.materialPaginatedDataTable.hasSortAscending() ? tree.materialPaginatedDataTable.sortAscending : true),
          onSelectAll: null,
          dataRowMinHeight: (tree.materialPaginatedDataTable.hasDataRowMinHeight() ? tree.materialPaginatedDataTable.dataRowMinHeight : null),
          dataRowMaxHeight: (tree.materialPaginatedDataTable.hasDataRowMaxHeight() ? tree.materialPaginatedDataTable.dataRowMaxHeight : null),
          headingRowHeight: (tree.materialPaginatedDataTable.hasHeadingRowHeight() ? tree.materialPaginatedDataTable.headingRowHeight : 56.0),
          horizontalMargin: (tree.materialPaginatedDataTable.hasHorizontalMargin() ? tree.materialPaginatedDataTable.horizontalMargin : 24.0),
          columnSpacing: (tree.materialPaginatedDataTable.hasColumnSpacing() ? tree.materialPaginatedDataTable.columnSpacing : 56.0),
          showCheckboxColumn: (tree.materialPaginatedDataTable.hasShowCheckboxColumn() ? tree.materialPaginatedDataTable.showCheckboxColumn : true),
          showFirstLastButtons: (tree.materialPaginatedDataTable.hasShowFirstLastButtons() ? tree.materialPaginatedDataTable.showFirstLastButtons : false),
          initialFirstRowIndex: (tree.materialPaginatedDataTable.hasInitialFirstRowIndex() ? tree.materialPaginatedDataTable.initialFirstRowIndex : 0),
          onPageChanged: null,
          rowsPerPage: (tree.materialPaginatedDataTable.hasRowsPerPage() ? tree.materialPaginatedDataTable.rowsPerPage : $flutterSrcMaterialPaginatedDataTable.PaginatedDataTable.defaultRowsPerPage),
          availableRowsPerPage: tree.materialPaginatedDataTable.availableRowsPerPage,
          onRowsPerPageChanged: null,
          dragStartBehavior: (tree.materialPaginatedDataTable.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialPaginatedDataTable.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          arrowHeadColor: (tree.materialPaginatedDataTable.hasArrowHeadColor() ? evaluateDartColorType(tree.materialPaginatedDataTable.arrowHeadColor) : null),
          source: missing('source'),
          checkboxHorizontalMargin: (tree.materialPaginatedDataTable.hasCheckboxHorizontalMargin() ? tree.materialPaginatedDataTable.checkboxHorizontalMargin : null),
          controller: (tree.materialPaginatedDataTable.hasController() ? evaluateFlutterScrollControllerType(tree.materialPaginatedDataTable.controller) : null),
          primary: (tree.materialPaginatedDataTable.hasPrimary() ? tree.materialPaginatedDataTable.primary : null),
          headingRowColor: null);
    case messages.WidgetType_Constructor.materialPopupMenuDivider:
      return $flutterSrcMaterialPopupMenu.PopupMenuDivider(
          key: (tree.materialPopupMenuDivider.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuDivider.key) : null),
          height: (tree.materialPopupMenuDivider.hasHeight() ? tree.materialPopupMenuDivider.height : 16.0));
    case messages.WidgetType_Constructor.materialPopupMenuItem:
      return $flutterSrcMaterialPopupMenu.PopupMenuItem(
          key: (tree.materialPopupMenuItem.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuItem.key) : null),
          onTap: null,
          enabled: (tree.materialPopupMenuItem.hasEnabled() ? tree.materialPopupMenuItem.enabled : true),
          height: (tree.materialPopupMenuItem.hasHeight() ? tree.materialPopupMenuItem.height : $flutterSrcMaterialConstants.kMinInteractiveDimension),
          padding: (tree.materialPopupMenuItem.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialPopupMenuItem.padding) : null),
          textStyle: (tree.materialPopupMenuItem.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialPopupMenuItem.textStyle) : null),
          labelTextStyle: null,
          mouseCursor: null,
          child: (tree.materialPopupMenuItem.hasChild() ? evaluateWidgetType(tree.materialPopupMenuItem.child) : null));
    case messages.WidgetType_Constructor.materialPopupMenuTheme:
      return $flutterSrcMaterialPopupMenuTheme.PopupMenuTheme(
          key: (tree.materialPopupMenuTheme.hasKey() ? evaluateFlutterKeyType(tree.materialPopupMenuTheme.key) : null),
          data: (tree.materialPopupMenuTheme.hasData() ? evaluateRequiredMaterialPopupMenuThemeDataType(tree.materialPopupMenuTheme.data) : missing('data')),
          child: (tree.materialPopupMenuTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialPopupMenuTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialProgressIndicatorTheme:
      return $flutterSrcMaterialProgressIndicatorTheme.ProgressIndicatorTheme(
          key: (tree.materialProgressIndicatorTheme.hasKey() ? evaluateFlutterKeyType(tree.materialProgressIndicatorTheme.key) : null),
          data: (tree.materialProgressIndicatorTheme.hasData() ? evaluateRequiredMaterialProgressIndicatorThemeDataType(tree.materialProgressIndicatorTheme.data) : missing('data')),
          child: (tree.materialProgressIndicatorTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialProgressIndicatorTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialRadioTheme:
      return $flutterSrcMaterialRadioTheme.RadioTheme(
          key: (tree.materialRadioTheme.hasKey() ? evaluateFlutterKeyType(tree.materialRadioTheme.key) : null),
          data: (tree.materialRadioTheme.hasData() ? evaluateRequiredMaterialRadioThemeDataType(tree.materialRadioTheme.data) : missing('data')),
          child: (tree.materialRadioTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialRadioTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialRangeSlider:
      return $flutterSrcMaterialRangeSlider.RangeSlider(
          key: (tree.materialRangeSlider.hasKey() ? evaluateFlutterKeyType(tree.materialRangeSlider.key) : null),
          values: (tree.materialRangeSlider.hasValues() ? evaluateRequiredMaterialRangeValuesType(tree.materialRangeSlider.values) : missing('values')),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialRangeSlider.hasMin() ? tree.materialRangeSlider.min : 0.0),
          max: (tree.materialRangeSlider.hasMax() ? tree.materialRangeSlider.max : 1.0),
          divisions: (tree.materialRangeSlider.hasDivisions() ? tree.materialRangeSlider.divisions : null),
          labels: (tree.materialRangeSlider.hasLabels() ? evaluateMaterialRangeLabelsType(tree.materialRangeSlider.labels) : null),
          activeColor: (tree.materialRangeSlider.hasActiveColor() ? evaluateDartColorType(tree.materialRangeSlider.activeColor) : null),
          inactiveColor: (tree.materialRangeSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialRangeSlider.inactiveColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null);
    case messages.WidgetType_Constructor.materialRawChip:
      return $flutterSrcMaterialChip.RawChip(
          key: (tree.materialRawChip.hasKey() ? evaluateFlutterKeyType(tree.materialRawChip.key) : null),
          defaultProperties: (tree.materialRawChip.hasDefaultProperties() ? evaluateMaterialChipThemeDataType(tree.materialRawChip.defaultProperties) : null),
          avatar: (tree.materialRawChip.hasAvatar() ? evaluateWidgetType(tree.materialRawChip.avatar) : null),
          label: (tree.materialRawChip.hasLabel() ? evaluateRequiredWidgetType(tree.materialRawChip.label) : missing('label')),
          labelStyle: (tree.materialRawChip.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialRawChip.labelStyle) : null),
          padding: (tree.materialRawChip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.padding) : null),
          visualDensity: (tree.materialRawChip.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialRawChip.visualDensity) : null),
          labelPadding: (tree.materialRawChip.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialRawChip.labelPadding) : null),
          deleteIcon: (tree.materialRawChip.hasDeleteIcon() ? evaluateWidgetType(tree.materialRawChip.deleteIcon) : null),
          onDeleted: null,
          deleteIconColor: (tree.materialRawChip.hasDeleteIconColor() ? evaluateDartColorType(tree.materialRawChip.deleteIconColor) : null),
          deleteButtonTooltipMessage: (tree.materialRawChip.hasDeleteButtonTooltipMessage() ? tree.materialRawChip.deleteButtonTooltipMessage : null),
          onPressed: null,
          onSelected: null,
          pressElevation: (tree.materialRawChip.hasPressElevation() ? tree.materialRawChip.pressElevation : null),
          tapEnabled: (tree.materialRawChip.hasTapEnabled() ? tree.materialRawChip.tapEnabled : true),
          selected: (tree.materialRawChip.hasSelected() ? tree.materialRawChip.selected : false),
          isEnabled: (tree.materialRawChip.hasIsEnabled() ? tree.materialRawChip.isEnabled : true),
          disabledColor: (tree.materialRawChip.hasDisabledColor() ? evaluateDartColorType(tree.materialRawChip.disabledColor) : null),
          selectedColor: (tree.materialRawChip.hasSelectedColor() ? evaluateDartColorType(tree.materialRawChip.selectedColor) : null),
          tooltip: (tree.materialRawChip.hasTooltip() ? tree.materialRawChip.tooltip : null),
          side: (tree.materialRawChip.hasSide() ? evaluateFlutterBorderSideType(tree.materialRawChip.side) : null),
          shape: (tree.materialRawChip.hasShape() ? evaluateFlutterOutlinedBorderType(tree.materialRawChip.shape) : null),
          clipBehavior: (tree.materialRawChip.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawChip.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawChip.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawChip.focusNode) : null),
          autofocus: (tree.materialRawChip.hasAutofocus() ? tree.materialRawChip.autofocus : false),
          color: null,
          backgroundColor: (tree.materialRawChip.hasBackgroundColor() ? evaluateDartColorType(tree.materialRawChip.backgroundColor) : null),
          materialTapTargetSize: (tree.materialRawChip.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawChip.materialTapTargetSize) : null),
          elevation: (tree.materialRawChip.hasElevation() ? tree.materialRawChip.elevation : null),
          shadowColor: (tree.materialRawChip.hasShadowColor() ? evaluateDartColorType(tree.materialRawChip.shadowColor) : null),
          surfaceTintColor: (tree.materialRawChip.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialRawChip.surfaceTintColor) : null),
          iconTheme: (tree.materialRawChip.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialRawChip.iconTheme) : null),
          selectedShadowColor: (tree.materialRawChip.hasSelectedShadowColor() ? evaluateDartColorType(tree.materialRawChip.selectedShadowColor) : null),
          showCheckmark: (tree.materialRawChip.hasShowCheckmark() ? tree.materialRawChip.showCheckmark : null),
          checkmarkColor: (tree.materialRawChip.hasCheckmarkColor() ? evaluateDartColorType(tree.materialRawChip.checkmarkColor) : null),
          avatarBorder: (tree.materialRawChip.hasAvatarBorder() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawChip.avatarBorder) : $flutterSrcPaintingCircleBorder.CircleBorder()));
    case messages.WidgetType_Constructor.materialRawMaterialButton:
      return $flutterSrcMaterialButton.RawMaterialButton(
          key: (tree.materialRawMaterialButton.hasKey() ? evaluateFlutterKeyType(tree.materialRawMaterialButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHighlightChanged: null,
          mouseCursor: null,
          textStyle: (tree.materialRawMaterialButton.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialRawMaterialButton.textStyle) : null),
          fillColor: (tree.materialRawMaterialButton.hasFillColor() ? evaluateDartColorType(tree.materialRawMaterialButton.fillColor) : null),
          focusColor: (tree.materialRawMaterialButton.hasFocusColor() ? evaluateDartColorType(tree.materialRawMaterialButton.focusColor) : null),
          hoverColor: (tree.materialRawMaterialButton.hasHoverColor() ? evaluateDartColorType(tree.materialRawMaterialButton.hoverColor) : null),
          highlightColor: (tree.materialRawMaterialButton.hasHighlightColor() ? evaluateDartColorType(tree.materialRawMaterialButton.highlightColor) : null),
          splashColor: (tree.materialRawMaterialButton.hasSplashColor() ? evaluateDartColorType(tree.materialRawMaterialButton.splashColor) : null),
          elevation: (tree.materialRawMaterialButton.hasElevation() ? tree.materialRawMaterialButton.elevation : 2.0),
          focusElevation: (tree.materialRawMaterialButton.hasFocusElevation() ? tree.materialRawMaterialButton.focusElevation : 4.0),
          hoverElevation: (tree.materialRawMaterialButton.hasHoverElevation() ? tree.materialRawMaterialButton.hoverElevation : 4.0),
          highlightElevation: (tree.materialRawMaterialButton.hasHighlightElevation() ? tree.materialRawMaterialButton.highlightElevation : 8.0),
          disabledElevation: (tree.materialRawMaterialButton.hasDisabledElevation() ? tree.materialRawMaterialButton.disabledElevation : 0.0),
          padding: (tree.materialRawMaterialButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRawMaterialButton.padding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          visualDensity: (tree.materialRawMaterialButton.hasVisualDensity() ? evaluateRequiredMaterialVisualDensityType(tree.materialRawMaterialButton.visualDensity) : $flutterSrcMaterialThemeData.VisualDensity.standard),
          constraints: (tree.materialRawMaterialButton.hasConstraints() ? evaluateRequiredFlutterBoxConstraintsType(tree.materialRawMaterialButton.constraints) : $flutterSrcRenderingBox.BoxConstraints(minWidth: 88.0, minHeight: 36.0)),
          shape: (tree.materialRawMaterialButton.hasShape() ? evaluateRequiredFlutterShapeBorderType(tree.materialRawMaterialButton.shape) : $flutterSrcPaintingRoundedRectangleBorder.RoundedRectangleBorder()),
          animationDuration: (tree.materialRawMaterialButton.hasAnimationDuration() ? evaluateRequiredDartDurationType(tree.materialRawMaterialButton.animationDuration) : $flutterSrcMaterialConstants.kThemeChangeDuration),
          clipBehavior: (tree.materialRawMaterialButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialRawMaterialButton.clipBehavior) : $dartUi.Clip.none),
          focusNode: (tree.materialRawMaterialButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialRawMaterialButton.focusNode) : null),
          autofocus: (tree.materialRawMaterialButton.hasAutofocus() ? tree.materialRawMaterialButton.autofocus : false),
          materialTapTargetSize: (tree.materialRawMaterialButton.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialRawMaterialButton.materialTapTargetSize) : null),
          child: (tree.materialRawMaterialButton.hasChild() ? evaluateWidgetType(tree.materialRawMaterialButton.child) : null),
          enableFeedback: (tree.materialRawMaterialButton.hasEnableFeedback() ? tree.materialRawMaterialButton.enableFeedback : true));
    case messages.WidgetType_Constructor.materialRefreshProgressIndicator:
      return $flutterSrcMaterialProgressIndicator.RefreshProgressIndicator(
          key: (tree.materialRefreshProgressIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialRefreshProgressIndicator.key) : null),
          value: (tree.materialRefreshProgressIndicator.hasValue() ? tree.materialRefreshProgressIndicator.value : null),
          backgroundColor: (tree.materialRefreshProgressIndicator.hasBackgroundColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.backgroundColor) : null),
          color: (tree.materialRefreshProgressIndicator.hasColor() ? evaluateDartColorType(tree.materialRefreshProgressIndicator.color) : null),
          valueColor: null,
          strokeWidth: (tree.materialRefreshProgressIndicator.hasStrokeWidth() ? tree.materialRefreshProgressIndicator.strokeWidth : 4.0),
          strokeAlign: (tree.materialRefreshProgressIndicator.hasStrokeAlign() ? tree.materialRefreshProgressIndicator.strokeAlign : $flutterSrcMaterialProgressIndicator.CircularProgressIndicator.strokeAlignCenter),
          semanticsLabel: (tree.materialRefreshProgressIndicator.hasSemanticsLabel() ? tree.materialRefreshProgressIndicator.semanticsLabel : null),
          semanticsValue: (tree.materialRefreshProgressIndicator.hasSemanticsValue() ? tree.materialRefreshProgressIndicator.semanticsValue : null),
          strokeCap: (tree.materialRefreshProgressIndicator.hasStrokeCap() ? enums.convertDartStrokeCapType(tree.materialRefreshProgressIndicator.strokeCap) : null),
          elevation: (tree.materialRefreshProgressIndicator.hasElevation() ? tree.materialRefreshProgressIndicator.elevation : 2.0),
          indicatorMargin: (tree.materialRefreshProgressIndicator.hasIndicatorMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(4.0)),
          indicatorPadding: (tree.materialRefreshProgressIndicator.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialRefreshProgressIndicator.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(12.0)));
    case messages.WidgetType_Constructor.materialScaffold:
      return $flutterSrcMaterialScaffold.Scaffold(
          key: (tree.materialScaffold.hasKey() ? evaluateFlutterKeyType(tree.materialScaffold.key) : null),
          appBar: (tree.materialScaffold.hasAppBar() ? evaluateFlutterPreferredSizeWidgetType(tree.materialScaffold.appBar) : null),
          body: (tree.materialScaffold.hasBody() ? evaluateWidgetType(tree.materialScaffold.body) : null),
          floatingActionButton: (tree.materialScaffold.hasFloatingActionButton() ? evaluateWidgetType(tree.materialScaffold.floatingActionButton) : null),
          floatingActionButtonLocation: null,
          floatingActionButtonAnimator: null,
          persistentFooterButtons: tree.materialScaffold.persistentFooterButtons.map((e) => evaluateRequiredWidgetType(e)).toList(),
          persistentFooterAlignment: (tree.materialScaffold.hasPersistentFooterAlignment() ? evaluateRequiredFlutterAlignmentDirectionalType(tree.materialScaffold.persistentFooterAlignment) : $flutterSrcPaintingAlignment.AlignmentDirectional.centerEnd),
          drawer: (tree.materialScaffold.hasDrawer() ? evaluateWidgetType(tree.materialScaffold.drawer) : null),
          onDrawerChanged: null,
          endDrawer: (tree.materialScaffold.hasEndDrawer() ? evaluateWidgetType(tree.materialScaffold.endDrawer) : null),
          onEndDrawerChanged: null,
          bottomNavigationBar: (tree.materialScaffold.hasBottomNavigationBar() ? evaluateWidgetType(tree.materialScaffold.bottomNavigationBar) : null),
          bottomSheet: (tree.materialScaffold.hasBottomSheet() ? evaluateWidgetType(tree.materialScaffold.bottomSheet) : null),
          backgroundColor: (tree.materialScaffold.hasBackgroundColor() ? evaluateDartColorType(tree.materialScaffold.backgroundColor) : null),
          resizeToAvoidBottomInset: (tree.materialScaffold.hasResizeToAvoidBottomInset() ? tree.materialScaffold.resizeToAvoidBottomInset : null),
          primary: (tree.materialScaffold.hasPrimary() ? tree.materialScaffold.primary : true),
          drawerDragStartBehavior: (tree.materialScaffold.hasDrawerDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialScaffold.drawerDragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          extendBody: (tree.materialScaffold.hasExtendBody() ? tree.materialScaffold.extendBody : false),
          extendBodyBehindAppBar: (tree.materialScaffold.hasExtendBodyBehindAppBar() ? tree.materialScaffold.extendBodyBehindAppBar : false),
          drawerScrimColor: (tree.materialScaffold.hasDrawerScrimColor() ? evaluateDartColorType(tree.materialScaffold.drawerScrimColor) : null),
          drawerEdgeDragWidth: (tree.materialScaffold.hasDrawerEdgeDragWidth() ? tree.materialScaffold.drawerEdgeDragWidth : null),
          drawerEnableOpenDragGesture: (tree.materialScaffold.hasDrawerEnableOpenDragGesture() ? tree.materialScaffold.drawerEnableOpenDragGesture : true),
          endDrawerEnableOpenDragGesture: (tree.materialScaffold.hasEndDrawerEnableOpenDragGesture() ? tree.materialScaffold.endDrawerEnableOpenDragGesture : true),
          restorationId: (tree.materialScaffold.hasRestorationId() ? tree.materialScaffold.restorationId : null));
    case messages.WidgetType_Constructor.materialScaffoldMessenger:
      return $flutterSrcMaterialScaffold.ScaffoldMessenger(
          key: (tree.materialScaffoldMessenger.hasKey() ? evaluateFlutterKeyType(tree.materialScaffoldMessenger.key) : null),
          child: (tree.materialScaffoldMessenger.hasChild() ? evaluateRequiredWidgetType(tree.materialScaffoldMessenger.child) : missing('child')));
    case messages.WidgetType_Constructor.materialScrollbar:
      return $flutterSrcMaterialScrollbar.Scrollbar(
          key: (tree.materialScrollbar.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbar.key) : null),
          child: (tree.materialScrollbar.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbar.child) : missing('child')),
          controller: (tree.materialScrollbar.hasController() ? evaluateFlutterScrollControllerType(tree.materialScrollbar.controller) : null),
          thumbVisibility: (tree.materialScrollbar.hasThumbVisibility() ? tree.materialScrollbar.thumbVisibility : null),
          trackVisibility: (tree.materialScrollbar.hasTrackVisibility() ? tree.materialScrollbar.trackVisibility : null),
          thickness: (tree.materialScrollbar.hasThickness() ? tree.materialScrollbar.thickness : null),
          radius: (tree.materialScrollbar.hasRadius() ? evaluateDartRadiusType(tree.materialScrollbar.radius) : null),
          notificationPredicate: null,
          interactive: (tree.materialScrollbar.hasInteractive() ? tree.materialScrollbar.interactive : null),
          scrollbarOrientation: (tree.materialScrollbar.hasScrollbarOrientation() ? enums.convertFlutterScrollbarOrientationType(tree.materialScrollbar.scrollbarOrientation) : null));
    case messages.WidgetType_Constructor.materialScrollbarTheme:
      return $flutterSrcMaterialScrollbarTheme.ScrollbarTheme(
          key: (tree.materialScrollbarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialScrollbarTheme.key) : null),
          data: (tree.materialScrollbarTheme.hasData() ? evaluateRequiredMaterialScrollbarThemeDataType(tree.materialScrollbarTheme.data) : missing('data')),
          child: (tree.materialScrollbarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialScrollbarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSearchBar:
      return $flutterSrcMaterialSearchAnchor.SearchBar(
          key: (tree.materialSearchBar.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBar.key) : null),
          controller: (tree.materialSearchBar.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialSearchBar.controller) : null),
          focusNode: (tree.materialSearchBar.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSearchBar.focusNode) : null),
          hintText: (tree.materialSearchBar.hasHintText() ? tree.materialSearchBar.hintText : null),
          leading: (tree.materialSearchBar.hasLeading() ? evaluateWidgetType(tree.materialSearchBar.leading) : null),
          trailing: tree.materialSearchBar.trailing.map((e) => evaluateRequiredWidgetType(e)).toList(),
          onTap: null,
          onChanged: null,
          onSubmitted: null,
          constraints: (tree.materialSearchBar.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialSearchBar.constraints) : null),
          elevation: null,
          backgroundColor: null,
          shadowColor: null,
          surfaceTintColor: null,
          overlayColor: null,
          side: null,
          shape: null,
          padding: null,
          textStyle: null,
          hintStyle: null,
          textCapitalization: (tree.materialSearchBar.hasTextCapitalization() ? enums.convertFlutterTextCapitalizationType(tree.materialSearchBar.textCapitalization) : null));
    case messages.WidgetType_Constructor.materialSearchBarTheme:
      return $flutterSrcMaterialSearchBarTheme.SearchBarTheme(
          key: (tree.materialSearchBarTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchBarTheme.key) : null),
          data: (tree.materialSearchBarTheme.hasData() ? evaluateRequiredMaterialSearchBarThemeDataType(tree.materialSearchBarTheme.data) : missing('data')),
          child: (tree.materialSearchBarTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchBarTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSearchViewTheme:
      return $flutterSrcMaterialSearchViewTheme.SearchViewTheme(
          key: (tree.materialSearchViewTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSearchViewTheme.key) : null),
          data: (tree.materialSearchViewTheme.hasData() ? evaluateRequiredMaterialSearchViewThemeDataType(tree.materialSearchViewTheme.data) : missing('data')),
          child: (tree.materialSearchViewTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSearchViewTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSegmentedButtonTheme:
      return $flutterSrcMaterialSegmentedButtonTheme.SegmentedButtonTheme(
          key: (tree.materialSegmentedButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSegmentedButtonTheme.key) : null),
          data: (tree.materialSegmentedButtonTheme.hasData() ? evaluateRequiredMaterialSegmentedButtonThemeDataType(tree.materialSegmentedButtonTheme.data) : missing('data')),
          child: (tree.materialSegmentedButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSegmentedButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSelectableText:
      return $flutterSrcMaterialSelectableText.SelectableText(
          (tree.materialSelectableText.hasData() ? tree.materialSelectableText.data : missing('data')),
          key: (tree.materialSelectableText.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableText.key) : null),
          focusNode: (tree.materialSelectableText.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableText.focusNode) : null),
          style: (tree.materialSelectableText.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableText.style) : null),
          strutStyle: (tree.materialSelectableText.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableText.strutStyle) : null),
          textAlign: (tree.materialSelectableText.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableText.textAlign) : null),
          textDirection: (tree.materialSelectableText.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableText.textDirection) : null),
          textScaler: (tree.materialSelectableText.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableText.textScaler) : null),
          showCursor: (tree.materialSelectableText.hasShowCursor() ? tree.materialSelectableText.showCursor : false),
          autofocus: (tree.materialSelectableText.hasAutofocus() ? tree.materialSelectableText.autofocus : false),
          minLines: (tree.materialSelectableText.hasMinLines() ? tree.materialSelectableText.minLines : null),
          maxLines: (tree.materialSelectableText.hasMaxLines() ? tree.materialSelectableText.maxLines : null),
          cursorWidth: (tree.materialSelectableText.hasCursorWidth() ? tree.materialSelectableText.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableText.hasCursorHeight() ? tree.materialSelectableText.cursorHeight : null),
          cursorRadius: (tree.materialSelectableText.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableText.cursorRadius) : null),
          cursorColor: (tree.materialSelectableText.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableText.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableText.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableText.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableText.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableText.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableText.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableText.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableText.hasEnableInteractiveSelection() ? tree.materialSelectableText.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableText.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableText.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableText.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableText.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableText.hasSemanticsLabel() ? tree.materialSelectableText.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableText.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableText.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableText.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableText.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableText.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableText.magnifierConfiguration) : null));
    case messages.WidgetType_Constructor.materialSelectableTextNamedRich:
      return $flutterSrcMaterialSelectableText.SelectableText.rich(
          (tree.materialSelectableTextNamedRich.hasTextSpan() ? evaluateRequiredFlutterTextSpanType(tree.materialSelectableTextNamedRich.textSpan) : missing('textSpan')),
          key: (tree.materialSelectableTextNamedRich.hasKey() ? evaluateFlutterKeyType(tree.materialSelectableTextNamedRich.key) : null),
          focusNode: (tree.materialSelectableTextNamedRich.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectableTextNamedRich.focusNode) : null),
          style: (tree.materialSelectableTextNamedRich.hasStyle() ? evaluateFlutterTextStyleType(tree.materialSelectableTextNamedRich.style) : null),
          strutStyle: (tree.materialSelectableTextNamedRich.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialSelectableTextNamedRich.strutStyle) : null),
          textAlign: (tree.materialSelectableTextNamedRich.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialSelectableTextNamedRich.textAlign) : null),
          textDirection: (tree.materialSelectableTextNamedRich.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialSelectableTextNamedRich.textDirection) : null),
          textScaler: (tree.materialSelectableTextNamedRich.hasTextScaler() ? evaluateFlutterTextScalerType(tree.materialSelectableTextNamedRich.textScaler) : null),
          showCursor: (tree.materialSelectableTextNamedRich.hasShowCursor() ? tree.materialSelectableTextNamedRich.showCursor : false),
          autofocus: (tree.materialSelectableTextNamedRich.hasAutofocus() ? tree.materialSelectableTextNamedRich.autofocus : false),
          minLines: (tree.materialSelectableTextNamedRich.hasMinLines() ? tree.materialSelectableTextNamedRich.minLines : null),
          maxLines: (tree.materialSelectableTextNamedRich.hasMaxLines() ? tree.materialSelectableTextNamedRich.maxLines : null),
          cursorWidth: (tree.materialSelectableTextNamedRich.hasCursorWidth() ? tree.materialSelectableTextNamedRich.cursorWidth : 2.0),
          cursorHeight: (tree.materialSelectableTextNamedRich.hasCursorHeight() ? tree.materialSelectableTextNamedRich.cursorHeight : null),
          cursorRadius: (tree.materialSelectableTextNamedRich.hasCursorRadius() ? evaluateDartRadiusType(tree.materialSelectableTextNamedRich.cursorRadius) : null),
          cursorColor: (tree.materialSelectableTextNamedRich.hasCursorColor() ? evaluateDartColorType(tree.materialSelectableTextNamedRich.cursorColor) : null),
          selectionHeightStyle: (tree.materialSelectableTextNamedRich.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialSelectableTextNamedRich.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialSelectableTextNamedRich.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialSelectableTextNamedRich.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialSelectableTextNamedRich.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSelectableTextNamedRich.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialSelectableTextNamedRich.hasEnableInteractiveSelection() ? tree.materialSelectableTextNamedRich.enableInteractiveSelection : true),
          selectionControls: (tree.materialSelectableTextNamedRich.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectableTextNamedRich.selectionControls) : null),
          onTap: null,
          scrollPhysics: (tree.materialSelectableTextNamedRich.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialSelectableTextNamedRich.scrollPhysics) : null),
          semanticsLabel: (tree.materialSelectableTextNamedRich.hasSemanticsLabel() ? tree.materialSelectableTextNamedRich.semanticsLabel : null),
          textHeightBehavior: (tree.materialSelectableTextNamedRich.hasTextHeightBehavior() ? evaluateDartTextHeightBehaviorType(tree.materialSelectableTextNamedRich.textHeightBehavior) : null),
          textWidthBasis: (tree.materialSelectableTextNamedRich.hasTextWidthBasis() ? enums.convertFlutterTextWidthBasisType(tree.materialSelectableTextNamedRich.textWidthBasis) : null),
          onSelectionChanged: null,
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectableTextNamedRich.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectableTextNamedRich.magnifierConfiguration) : null));
    case messages.WidgetType_Constructor.materialSelectionArea:
      return $flutterSrcMaterialSelectionArea.SelectionArea(
          key: (tree.materialSelectionArea.hasKey() ? evaluateFlutterKeyType(tree.materialSelectionArea.key) : null),
          focusNode: (tree.materialSelectionArea.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSelectionArea.focusNode) : null),
          selectionControls: (tree.materialSelectionArea.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialSelectionArea.selectionControls) : null),
          contextMenuBuilder: null,
          magnifierConfiguration: (tree.materialSelectionArea.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialSelectionArea.magnifierConfiguration) : null),
          onSelectionChanged: null,
          child: (tree.materialSelectionArea.hasChild() ? evaluateRequiredWidgetType(tree.materialSelectionArea.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSimpleDialog:
      return $flutterSrcMaterialDialog.SimpleDialog(
          key: (tree.materialSimpleDialog.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialog.key) : null),
          title: (tree.materialSimpleDialog.hasTitle() ? evaluateWidgetType(tree.materialSimpleDialog.title) : null),
          titlePadding: (tree.materialSimpleDialog.hasTitlePadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.titlePadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(24.0, 24.0, 24.0, 0.0)),
          titleTextStyle: (tree.materialSimpleDialog.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSimpleDialog.titleTextStyle) : null),
          children: tree.materialSimpleDialog.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          contentPadding: (tree.materialSimpleDialog.hasContentPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialSimpleDialog.contentPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.fromLTRB(0.0, 12.0, 0.0, 16.0)),
          backgroundColor: (tree.materialSimpleDialog.hasBackgroundColor() ? evaluateDartColorType(tree.materialSimpleDialog.backgroundColor) : null),
          elevation: (tree.materialSimpleDialog.hasElevation() ? tree.materialSimpleDialog.elevation : null),
          shadowColor: (tree.materialSimpleDialog.hasShadowColor() ? evaluateDartColorType(tree.materialSimpleDialog.shadowColor) : null),
          surfaceTintColor: (tree.materialSimpleDialog.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSimpleDialog.surfaceTintColor) : null),
          semanticLabel: (tree.materialSimpleDialog.hasSemanticLabel() ? tree.materialSimpleDialog.semanticLabel : null),
          insetPadding: (tree.materialSimpleDialog.hasInsetPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialSimpleDialog.insetPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.symmetric(horizontal: 40.0, vertical: 24.0)),
          clipBehavior: (tree.materialSimpleDialog.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSimpleDialog.clipBehavior) : $dartUi.Clip.none),
          shape: (tree.materialSimpleDialog.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSimpleDialog.shape) : null),
          alignment: (tree.materialSimpleDialog.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialSimpleDialog.alignment) : null));
    case messages.WidgetType_Constructor.materialSimpleDialogOption:
      return $flutterSrcMaterialDialog.SimpleDialogOption(
          key: (tree.materialSimpleDialogOption.hasKey() ? evaluateFlutterKeyType(tree.materialSimpleDialogOption.key) : null),
          onPressed: null,
          padding: (tree.materialSimpleDialogOption.hasPadding() ? evaluateFlutterEdgeInsetsType(tree.materialSimpleDialogOption.padding) : null),
          child: (tree.materialSimpleDialogOption.hasChild() ? evaluateWidgetType(tree.materialSimpleDialogOption.child) : null));
    case messages.WidgetType_Constructor.materialSlider:
      return $flutterSrcMaterialSlider.Slider(
          key: (tree.materialSlider.hasKey() ? evaluateFlutterKeyType(tree.materialSlider.key) : null),
          value: (tree.materialSlider.hasValue() ? tree.materialSlider.value : missing('value')),
          secondaryTrackValue: (tree.materialSlider.hasSecondaryTrackValue() ? tree.materialSlider.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSlider.hasMin() ? tree.materialSlider.min : 0.0),
          max: (tree.materialSlider.hasMax() ? tree.materialSlider.max : 1.0),
          divisions: (tree.materialSlider.hasDivisions() ? tree.materialSlider.divisions : null),
          label: (tree.materialSlider.hasLabel() ? tree.materialSlider.label : null),
          activeColor: (tree.materialSlider.hasActiveColor() ? evaluateDartColorType(tree.materialSlider.activeColor) : null),
          inactiveColor: (tree.materialSlider.hasInactiveColor() ? evaluateDartColorType(tree.materialSlider.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSlider.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSlider.secondaryActiveColor) : null),
          thumbColor: (tree.materialSlider.hasThumbColor() ? evaluateDartColorType(tree.materialSlider.thumbColor) : null),
          overlayColor: null,
          mouseCursor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSlider.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSlider.focusNode) : null),
          autofocus: (tree.materialSlider.hasAutofocus() ? tree.materialSlider.autofocus : false),
          allowedInteraction: (tree.materialSlider.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSlider.allowedInteraction) : null));
    case messages.WidgetType_Constructor.materialSliderNamedAdaptive:
      return $flutterSrcMaterialSlider.Slider.adaptive(
          key: (tree.materialSliderNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSliderNamedAdaptive.key) : null),
          value: (tree.materialSliderNamedAdaptive.hasValue() ? tree.materialSliderNamedAdaptive.value : missing('value')),
          secondaryTrackValue: (tree.materialSliderNamedAdaptive.hasSecondaryTrackValue() ? tree.materialSliderNamedAdaptive.secondaryTrackValue : null),
          onChanged: null,
          onChangeStart: null,
          onChangeEnd: null,
          min: (tree.materialSliderNamedAdaptive.hasMin() ? tree.materialSliderNamedAdaptive.min : 0.0),
          max: (tree.materialSliderNamedAdaptive.hasMax() ? tree.materialSliderNamedAdaptive.max : 1.0),
          divisions: (tree.materialSliderNamedAdaptive.hasDivisions() ? tree.materialSliderNamedAdaptive.divisions : null),
          label: (tree.materialSliderNamedAdaptive.hasLabel() ? tree.materialSliderNamedAdaptive.label : null),
          mouseCursor: null,
          activeColor: (tree.materialSliderNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.activeColor) : null),
          inactiveColor: (tree.materialSliderNamedAdaptive.hasInactiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.inactiveColor) : null),
          secondaryActiveColor: (tree.materialSliderNamedAdaptive.hasSecondaryActiveColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.secondaryActiveColor) : null),
          thumbColor: (tree.materialSliderNamedAdaptive.hasThumbColor() ? evaluateDartColorType(tree.materialSliderNamedAdaptive.thumbColor) : null),
          overlayColor: null,
          semanticFormatterCallback: null,
          focusNode: (tree.materialSliderNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSliderNamedAdaptive.focusNode) : null),
          autofocus: (tree.materialSliderNamedAdaptive.hasAutofocus() ? tree.materialSliderNamedAdaptive.autofocus : false),
          allowedInteraction: (tree.materialSliderNamedAdaptive.hasAllowedInteraction() ? enums.convertMaterialSliderInteractionType(tree.materialSliderNamedAdaptive.allowedInteraction) : null));
    case messages.WidgetType_Constructor.materialSliderTheme:
      return $flutterSrcMaterialSliderTheme.SliderTheme(
          key: (tree.materialSliderTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSliderTheme.key) : null),
          data: (tree.materialSliderTheme.hasData() ? evaluateRequiredMaterialSliderThemeDataType(tree.materialSliderTheme.data) : missing('data')),
          child: (tree.materialSliderTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSliderTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialSliverAppBar:
      return $flutterSrcMaterialAppBar.SliverAppBar(
          key: (tree.materialSliverAppBar.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBar.key) : null),
          leading: (tree.materialSliverAppBar.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBar.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBar.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBar.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBar.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBar.title) : null),
          actions: tree.materialSliverAppBar.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBar.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBar.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBar.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBar.bottom) : null),
          elevation: (tree.materialSliverAppBar.hasElevation() ? tree.materialSliverAppBar.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBar.hasScrolledUnderElevation() ? tree.materialSliverAppBar.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBar.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBar.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBar.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBar.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBar.hasForceElevated() ? tree.materialSliverAppBar.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBar.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBar.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBar.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBar.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBar.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBar.hasPrimary() ? tree.materialSliverAppBar.primary : true),
          centerTitle: (tree.materialSliverAppBar.hasCenterTitle() ? tree.materialSliverAppBar.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBar.hasExcludeHeaderSemantics() ? tree.materialSliverAppBar.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBar.hasTitleSpacing() ? tree.materialSliverAppBar.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBar.hasCollapsedHeight() ? tree.materialSliverAppBar.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBar.hasExpandedHeight() ? tree.materialSliverAppBar.expandedHeight : null),
          floating: (tree.materialSliverAppBar.hasFloating() ? tree.materialSliverAppBar.floating : false),
          pinned: (tree.materialSliverAppBar.hasPinned() ? tree.materialSliverAppBar.pinned : false),
          snap: (tree.materialSliverAppBar.hasSnap() ? tree.materialSliverAppBar.snap : false),
          stretch: (tree.materialSliverAppBar.hasStretch() ? tree.materialSliverAppBar.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBar.hasStretchTriggerOffset() ? tree.materialSliverAppBar.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBar.shape) : null),
          toolbarHeight: (tree.materialSliverAppBar.hasToolbarHeight() ? tree.materialSliverAppBar.toolbarHeight : $flutterSrcMaterialConstants.kToolbarHeight),
          leadingWidth: (tree.materialSliverAppBar.hasLeadingWidth() ? tree.materialSliverAppBar.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBar.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBar.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBar.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBar.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBar.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBar.hasForceMaterialTransparency() ? tree.materialSliverAppBar.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBar.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBar.clipBehavior) : null));
    case messages.WidgetType_Constructor.materialSliverAppBarNamedLarge:
      return $flutterSrcMaterialAppBar.SliverAppBar.large(
          key: (tree.materialSliverAppBarNamedLarge.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedLarge.key) : null),
          leading: (tree.materialSliverAppBarNamedLarge.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedLarge.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedLarge.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedLarge.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.title) : null),
          actions: tree.materialSliverAppBarNamedLarge.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedLarge.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedLarge.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedLarge.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedLarge.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedLarge.hasElevation() ? tree.materialSliverAppBarNamedLarge.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedLarge.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedLarge.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedLarge.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedLarge.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedLarge.hasForceElevated() ? tree.materialSliverAppBarNamedLarge.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedLarge.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedLarge.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedLarge.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedLarge.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedLarge.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedLarge.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedLarge.hasPrimary() ? tree.materialSliverAppBarNamedLarge.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedLarge.hasCenterTitle() ? tree.materialSliverAppBarNamedLarge.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedLarge.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedLarge.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedLarge.hasTitleSpacing() ? tree.materialSliverAppBarNamedLarge.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedLarge.hasCollapsedHeight() ? tree.materialSliverAppBarNamedLarge.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedLarge.hasExpandedHeight() ? tree.materialSliverAppBarNamedLarge.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedLarge.hasFloating() ? tree.materialSliverAppBarNamedLarge.floating : false),
          pinned: (tree.materialSliverAppBarNamedLarge.hasPinned() ? tree.materialSliverAppBarNamedLarge.pinned : true),
          snap: (tree.materialSliverAppBarNamedLarge.hasSnap() ? tree.materialSliverAppBarNamedLarge.snap : false),
          stretch: (tree.materialSliverAppBarNamedLarge.hasStretch() ? tree.materialSliverAppBarNamedLarge.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedLarge.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedLarge.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedLarge.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedLarge.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedLarge.hasToolbarHeight() ? tree.materialSliverAppBarNamedLarge.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedLarge.hasLeadingWidth() ? tree.materialSliverAppBarNamedLarge.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedLarge.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedLarge.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedLarge.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedLarge.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedLarge.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedLarge.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedLarge.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedLarge.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedLarge.clipBehavior) : null));
    case messages.WidgetType_Constructor.materialSliverAppBarNamedMedium:
      return $flutterSrcMaterialAppBar.SliverAppBar.medium(
          key: (tree.materialSliverAppBarNamedMedium.hasKey() ? evaluateFlutterKeyType(tree.materialSliverAppBarNamedMedium.key) : null),
          leading: (tree.materialSliverAppBarNamedMedium.hasLeading() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.leading) : null),
          automaticallyImplyLeading: (tree.materialSliverAppBarNamedMedium.hasAutomaticallyImplyLeading() ? tree.materialSliverAppBarNamedMedium.automaticallyImplyLeading : true),
          title: (tree.materialSliverAppBarNamedMedium.hasTitle() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.title) : null),
          actions: tree.materialSliverAppBarNamedMedium.actions.map((e) => evaluateRequiredWidgetType(e)).toList(),
          flexibleSpace: (tree.materialSliverAppBarNamedMedium.hasFlexibleSpace() ? evaluateWidgetType(tree.materialSliverAppBarNamedMedium.flexibleSpace) : null),
          bottom: (tree.materialSliverAppBarNamedMedium.hasBottom() ? evaluateFlutterPreferredSizeWidgetType(tree.materialSliverAppBarNamedMedium.bottom) : null),
          elevation: (tree.materialSliverAppBarNamedMedium.hasElevation() ? tree.materialSliverAppBarNamedMedium.elevation : null),
          scrolledUnderElevation: (tree.materialSliverAppBarNamedMedium.hasScrolledUnderElevation() ? tree.materialSliverAppBarNamedMedium.scrolledUnderElevation : null),
          shadowColor: (tree.materialSliverAppBarNamedMedium.hasShadowColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.shadowColor) : null),
          surfaceTintColor: (tree.materialSliverAppBarNamedMedium.hasSurfaceTintColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.surfaceTintColor) : null),
          forceElevated: (tree.materialSliverAppBarNamedMedium.hasForceElevated() ? tree.materialSliverAppBarNamedMedium.forceElevated : false),
          backgroundColor: (tree.materialSliverAppBarNamedMedium.hasBackgroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.backgroundColor) : null),
          foregroundColor: (tree.materialSliverAppBarNamedMedium.hasForegroundColor() ? evaluateDartColorType(tree.materialSliverAppBarNamedMedium.foregroundColor) : null),
          iconTheme: (tree.materialSliverAppBarNamedMedium.hasIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.iconTheme) : null),
          actionsIconTheme: (tree.materialSliverAppBarNamedMedium.hasActionsIconTheme() ? evaluateFlutterIconThemeDataType(tree.materialSliverAppBarNamedMedium.actionsIconTheme) : null),
          primary: (tree.materialSliverAppBarNamedMedium.hasPrimary() ? tree.materialSliverAppBarNamedMedium.primary : true),
          centerTitle: (tree.materialSliverAppBarNamedMedium.hasCenterTitle() ? tree.materialSliverAppBarNamedMedium.centerTitle : null),
          excludeHeaderSemantics: (tree.materialSliverAppBarNamedMedium.hasExcludeHeaderSemantics() ? tree.materialSliverAppBarNamedMedium.excludeHeaderSemantics : false),
          titleSpacing: (tree.materialSliverAppBarNamedMedium.hasTitleSpacing() ? tree.materialSliverAppBarNamedMedium.titleSpacing : null),
          collapsedHeight: (tree.materialSliverAppBarNamedMedium.hasCollapsedHeight() ? tree.materialSliverAppBarNamedMedium.collapsedHeight : null),
          expandedHeight: (tree.materialSliverAppBarNamedMedium.hasExpandedHeight() ? tree.materialSliverAppBarNamedMedium.expandedHeight : null),
          floating: (tree.materialSliverAppBarNamedMedium.hasFloating() ? tree.materialSliverAppBarNamedMedium.floating : false),
          pinned: (tree.materialSliverAppBarNamedMedium.hasPinned() ? tree.materialSliverAppBarNamedMedium.pinned : true),
          snap: (tree.materialSliverAppBarNamedMedium.hasSnap() ? tree.materialSliverAppBarNamedMedium.snap : false),
          stretch: (tree.materialSliverAppBarNamedMedium.hasStretch() ? tree.materialSliverAppBarNamedMedium.stretch : false),
          stretchTriggerOffset: (tree.materialSliverAppBarNamedMedium.hasStretchTriggerOffset() ? tree.materialSliverAppBarNamedMedium.stretchTriggerOffset : 100.0),
          onStretchTrigger: null,
          shape: (tree.materialSliverAppBarNamedMedium.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSliverAppBarNamedMedium.shape) : null),
          toolbarHeight: (tree.materialSliverAppBarNamedMedium.hasToolbarHeight() ? tree.materialSliverAppBarNamedMedium.toolbarHeight : 64.0),
          leadingWidth: (tree.materialSliverAppBarNamedMedium.hasLeadingWidth() ? tree.materialSliverAppBarNamedMedium.leadingWidth : null),
          toolbarTextStyle: (tree.materialSliverAppBarNamedMedium.hasToolbarTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.toolbarTextStyle) : null),
          titleTextStyle: (tree.materialSliverAppBarNamedMedium.hasTitleTextStyle() ? evaluateFlutterTextStyleType(tree.materialSliverAppBarNamedMedium.titleTextStyle) : null),
          systemOverlayStyle: (tree.materialSliverAppBarNamedMedium.hasSystemOverlayStyle() ? evaluateFlutterSystemUiOverlayStyleType(tree.materialSliverAppBarNamedMedium.systemOverlayStyle) : null),
          forceMaterialTransparency: (tree.materialSliverAppBarNamedMedium.hasForceMaterialTransparency() ? tree.materialSliverAppBarNamedMedium.forceMaterialTransparency : false),
          clipBehavior: (tree.materialSliverAppBarNamedMedium.hasClipBehavior() ? enums.convertDartClipType(tree.materialSliverAppBarNamedMedium.clipBehavior) : null));
    case messages.WidgetType_Constructor.materialSnackBar:
      return $flutterSrcMaterialSnackBar.SnackBar(
          key: (tree.materialSnackBar.hasKey() ? evaluateFlutterKeyType(tree.materialSnackBar.key) : null),
          content: (tree.materialSnackBar.hasContent() ? evaluateRequiredWidgetType(tree.materialSnackBar.content) : missing('content')),
          backgroundColor: (tree.materialSnackBar.hasBackgroundColor() ? evaluateDartColorType(tree.materialSnackBar.backgroundColor) : null),
          elevation: (tree.materialSnackBar.hasElevation() ? tree.materialSnackBar.elevation : null),
          margin: (tree.materialSnackBar.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.margin) : null),
          padding: (tree.materialSnackBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSnackBar.padding) : null),
          width: (tree.materialSnackBar.hasWidth() ? tree.materialSnackBar.width : null),
          shape: (tree.materialSnackBar.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSnackBar.shape) : null),
          hitTestBehavior: (tree.materialSnackBar.hasHitTestBehavior() ? enums.convertFlutterHitTestBehaviorType(tree.materialSnackBar.hitTestBehavior) : null),
          behavior: (tree.materialSnackBar.hasBehavior() ? enums.convertMaterialSnackBarBehaviorType(tree.materialSnackBar.behavior) : null),
          action: null,
          actionOverflowThreshold: (tree.materialSnackBar.hasActionOverflowThreshold() ? tree.materialSnackBar.actionOverflowThreshold : null),
          showCloseIcon: (tree.materialSnackBar.hasShowCloseIcon() ? tree.materialSnackBar.showCloseIcon : null),
          closeIconColor: (tree.materialSnackBar.hasCloseIconColor() ? evaluateDartColorType(tree.materialSnackBar.closeIconColor) : null),
          duration: (tree.materialSnackBar.hasDuration() ? evaluateRequiredDartDurationType(tree.materialSnackBar.duration) : $dartCore.Duration(milliseconds: 4000)),
          animation: null,
          onVisible: null,
          dismissDirection: (tree.materialSnackBar.hasDismissDirection() ? enums.convertRequiredFlutterDismissDirectionType(tree.materialSnackBar.dismissDirection) : $flutterSrcWidgetsDismissible.DismissDirection.down),
          clipBehavior: (tree.materialSnackBar.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSnackBar.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.materialSpellCheckSuggestionsToolbar:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar(
          key: (tree.materialSpellCheckSuggestionsToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbar.key) : null),
          anchor: (tree.materialSpellCheckSuggestionsToolbar.hasAnchor() ? evaluateRequiredDartOffsetType(tree.materialSpellCheckSuggestionsToolbar.anchor) : missing('anchor')),
          buttonItems: tree.materialSpellCheckSuggestionsToolbar.buttonItems.map((e) => evaluateRequiredFlutterContextMenuButtonItemType(e)).toList());
    case messages.WidgetType_Constructor.materialSpellCheckSuggestionsToolbarNamedEditableText:
      return $flutterSrcMaterialSpellCheckSuggestionsToolbar.SpellCheckSuggestionsToolbar.editableText(
          key: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasKey() ? evaluateFlutterKeyType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.key) : null),
          editableTextState: (tree.materialSpellCheckSuggestionsToolbarNamedEditableText.hasEditableTextState() ? evaluateRequiredFlutterEditableTextStateType(tree.materialSpellCheckSuggestionsToolbarNamedEditableText.editableTextState) : missing('editableTextState')));
    case messages.WidgetType_Constructor.materialStepper:
      return $flutterSrcMaterialStepper.Stepper(
          key: (tree.materialStepper.hasKey() ? evaluateFlutterKeyType(tree.materialStepper.key) : null),
          steps: tree.materialStepper.steps.map((e) => evaluateRequiredMaterialStepType(e)).toList(),
          controller: (tree.materialStepper.hasController() ? evaluateFlutterScrollControllerType(tree.materialStepper.controller) : null),
          physics: (tree.materialStepper.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialStepper.physics) : null),
          type: (tree.materialStepper.hasType() ? enums.convertRequiredMaterialStepperTypeType(tree.materialStepper.type) : $flutterSrcMaterialStepper.StepperType.vertical),
          currentStep: (tree.materialStepper.hasCurrentStep() ? tree.materialStepper.currentStep : 0),
          onStepTapped: null,
          onStepContinue: null,
          onStepCancel: null,
          controlsBuilder: null,
          elevation: (tree.materialStepper.hasElevation() ? tree.materialStepper.elevation : null),
          margin: (tree.materialStepper.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialStepper.margin) : null),
          connectorColor: null,
          connectorThickness: (tree.materialStepper.hasConnectorThickness() ? tree.materialStepper.connectorThickness : null),
          stepIconBuilder: null);
    case messages.WidgetType_Constructor.materialSubmenuButton:
      return $flutterSrcMaterialMenuAnchor.SubmenuButton(
          key: (tree.materialSubmenuButton.hasKey() ? evaluateFlutterKeyType(tree.materialSubmenuButton.key) : null),
          onHover: null,
          onFocusChange: null,
          onOpen: null,
          onClose: null,
          controller: (tree.materialSubmenuButton.hasController() ? evaluateMaterialMenuControllerType(tree.materialSubmenuButton.controller) : null),
          style: (tree.materialSubmenuButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialSubmenuButton.style) : null),
          menuStyle: (tree.materialSubmenuButton.hasMenuStyle() ? evaluateMaterialMenuStyleType(tree.materialSubmenuButton.menuStyle) : null),
          alignmentOffset: (tree.materialSubmenuButton.hasAlignmentOffset() ? evaluateDartOffsetType(tree.materialSubmenuButton.alignmentOffset) : null),
          clipBehavior: (tree.materialSubmenuButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialSubmenuButton.clipBehavior) : $dartUi.Clip.hardEdge),
          focusNode: (tree.materialSubmenuButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSubmenuButton.focusNode) : null),
          statesController: (tree.materialSubmenuButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialSubmenuButton.statesController) : null),
          leadingIcon: (tree.materialSubmenuButton.hasLeadingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.leadingIcon) : null),
          trailingIcon: (tree.materialSubmenuButton.hasTrailingIcon() ? evaluateWidgetType(tree.materialSubmenuButton.trailingIcon) : null),
          menuChildren: tree.materialSubmenuButton.menuChildren.map((e) => evaluateRequiredWidgetType(e)).toList(),
          child: (tree.materialSubmenuButton.hasChild() ? evaluateWidgetType(tree.materialSubmenuButton.child) : null));
    case messages.WidgetType_Constructor.materialSwitch:
      return $flutterSrcMaterialSwitch.Switch(
          key: (tree.materialSwitch.hasKey() ? evaluateFlutterKeyType(tree.materialSwitch.key) : null),
          value: (tree.materialSwitch.hasValue() ? tree.materialSwitch.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitch.hasActiveColor() ? evaluateDartColorType(tree.materialSwitch.activeColor) : null),
          activeTrackColor: (tree.materialSwitch.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitch.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitch.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitch.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitch.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitch.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitch.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitch.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitch.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitch.hasFocusColor() ? evaluateDartColorType(tree.materialSwitch.focusColor) : null),
          hoverColor: (tree.materialSwitch.hasHoverColor() ? evaluateDartColorType(tree.materialSwitch.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitch.hasSplashRadius() ? tree.materialSwitch.splashRadius : null),
          focusNode: (tree.materialSwitch.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitch.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitch.hasAutofocus() ? tree.materialSwitch.autofocus : false));
    case messages.WidgetType_Constructor.materialSwitchListTile:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile(
          key: (tree.materialSwitchListTile.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTile.key) : null),
          value: (tree.materialSwitchListTile.hasValue() ? tree.materialSwitchListTile.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTile.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTile.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTile.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTile.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTile.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTile.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTile.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTile.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTile.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTile.hasSplashRadius() ? tree.materialSwitchListTile.splashRadius : null),
          focusNode: (tree.materialSwitchListTile.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTile.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTile.hasAutofocus() ? tree.materialSwitchListTile.autofocus : false),
          tileColor: (tree.materialSwitchListTile.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.tileColor) : null),
          title: (tree.materialSwitchListTile.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTile.title) : null),
          subtitle: (tree.materialSwitchListTile.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTile.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTile.hasIsThreeLine() ? tree.materialSwitchListTile.isThreeLine : false),
          dense: (tree.materialSwitchListTile.hasDense() ? tree.materialSwitchListTile.dense : null),
          contentPadding: (tree.materialSwitchListTile.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTile.contentPadding) : null),
          secondary: (tree.materialSwitchListTile.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTile.secondary) : null),
          selected: (tree.materialSwitchListTile.hasSelected() ? tree.materialSwitchListTile.selected : false),
          controlAffinity: (tree.materialSwitchListTile.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTile.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTile.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTile.shape) : null),
          selectedTileColor: (tree.materialSwitchListTile.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTile.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTile.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTile.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTile.hasEnableFeedback() ? tree.materialSwitchListTile.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTile.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTile.hoverColor) : null));
    case messages.WidgetType_Constructor.materialSwitchListTileNamedAdaptive:
      return $flutterSrcMaterialSwitchListTile.SwitchListTile.adaptive(
          key: (tree.materialSwitchListTileNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchListTileNamedAdaptive.key) : null),
          value: (tree.materialSwitchListTileNamedAdaptive.hasValue() ? tree.materialSwitchListTileNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchListTileNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          thumbIcon: null,
          materialTapTargetSize: (tree.materialSwitchListTileNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchListTileNamedAdaptive.materialTapTargetSize) : null),
          dragStartBehavior: (tree.materialSwitchListTileNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchListTileNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          overlayColor: null,
          splashRadius: (tree.materialSwitchListTileNamedAdaptive.hasSplashRadius() ? tree.materialSwitchListTileNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchListTileNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchListTileNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchListTileNamedAdaptive.hasAutofocus() ? tree.materialSwitchListTileNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchListTileNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchListTileNamedAdaptive.applyCupertinoTheme : null),
          tileColor: (tree.materialSwitchListTileNamedAdaptive.hasTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.tileColor) : null),
          title: (tree.materialSwitchListTileNamedAdaptive.hasTitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.title) : null),
          subtitle: (tree.materialSwitchListTileNamedAdaptive.hasSubtitle() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.subtitle) : null),
          isThreeLine: (tree.materialSwitchListTileNamedAdaptive.hasIsThreeLine() ? tree.materialSwitchListTileNamedAdaptive.isThreeLine : false),
          dense: (tree.materialSwitchListTileNamedAdaptive.hasDense() ? tree.materialSwitchListTileNamedAdaptive.dense : null),
          contentPadding: (tree.materialSwitchListTileNamedAdaptive.hasContentPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialSwitchListTileNamedAdaptive.contentPadding) : null),
          secondary: (tree.materialSwitchListTileNamedAdaptive.hasSecondary() ? evaluateWidgetType(tree.materialSwitchListTileNamedAdaptive.secondary) : null),
          selected: (tree.materialSwitchListTileNamedAdaptive.hasSelected() ? tree.materialSwitchListTileNamedAdaptive.selected : false),
          controlAffinity: (tree.materialSwitchListTileNamedAdaptive.hasControlAffinity() ? enums.convertRequiredMaterialListTileControlAffinityType(tree.materialSwitchListTileNamedAdaptive.controlAffinity) : $flutterSrcMaterialListTile.ListTileControlAffinity.platform),
          shape: (tree.materialSwitchListTileNamedAdaptive.hasShape() ? evaluateFlutterShapeBorderType(tree.materialSwitchListTileNamedAdaptive.shape) : null),
          selectedTileColor: (tree.materialSwitchListTileNamedAdaptive.hasSelectedTileColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.selectedTileColor) : null),
          visualDensity: (tree.materialSwitchListTileNamedAdaptive.hasVisualDensity() ? evaluateMaterialVisualDensityType(tree.materialSwitchListTileNamedAdaptive.visualDensity) : null),
          enableFeedback: (tree.materialSwitchListTileNamedAdaptive.hasEnableFeedback() ? tree.materialSwitchListTileNamedAdaptive.enableFeedback : null),
          hoverColor: (tree.materialSwitchListTileNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchListTileNamedAdaptive.hoverColor) : null));
    case messages.WidgetType_Constructor.materialSwitchNamedAdaptive:
      return $flutterSrcMaterialSwitch.Switch.adaptive(
          key: (tree.materialSwitchNamedAdaptive.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchNamedAdaptive.key) : null),
          value: (tree.materialSwitchNamedAdaptive.hasValue() ? tree.materialSwitchNamedAdaptive.value : missing('value')),
          onChanged: null,
          activeColor: (tree.materialSwitchNamedAdaptive.hasActiveColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeColor) : null),
          activeTrackColor: (tree.materialSwitchNamedAdaptive.hasActiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.activeTrackColor) : null),
          inactiveThumbColor: (tree.materialSwitchNamedAdaptive.hasInactiveThumbColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveThumbColor) : null),
          inactiveTrackColor: (tree.materialSwitchNamedAdaptive.hasInactiveTrackColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.inactiveTrackColor) : null),
          activeThumbImage: null,
          onActiveThumbImageError: null,
          inactiveThumbImage: null,
          onInactiveThumbImageError: null,
          materialTapTargetSize: (tree.materialSwitchNamedAdaptive.hasMaterialTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialSwitchNamedAdaptive.materialTapTargetSize) : null),
          thumbColor: null,
          trackColor: null,
          trackOutlineColor: null,
          trackOutlineWidth: null,
          thumbIcon: null,
          dragStartBehavior: (tree.materialSwitchNamedAdaptive.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialSwitchNamedAdaptive.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          mouseCursor: null,
          focusColor: (tree.materialSwitchNamedAdaptive.hasFocusColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.focusColor) : null),
          hoverColor: (tree.materialSwitchNamedAdaptive.hasHoverColor() ? evaluateDartColorType(tree.materialSwitchNamedAdaptive.hoverColor) : null),
          overlayColor: null,
          splashRadius: (tree.materialSwitchNamedAdaptive.hasSplashRadius() ? tree.materialSwitchNamedAdaptive.splashRadius : null),
          focusNode: (tree.materialSwitchNamedAdaptive.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialSwitchNamedAdaptive.focusNode) : null),
          onFocusChange: null,
          autofocus: (tree.materialSwitchNamedAdaptive.hasAutofocus() ? tree.materialSwitchNamedAdaptive.autofocus : false),
          applyCupertinoTheme: (tree.materialSwitchNamedAdaptive.hasApplyCupertinoTheme() ? tree.materialSwitchNamedAdaptive.applyCupertinoTheme : null));
    case messages.WidgetType_Constructor.materialSwitchTheme:
      return $flutterSrcMaterialSwitchTheme.SwitchTheme(
          key: (tree.materialSwitchTheme.hasKey() ? evaluateFlutterKeyType(tree.materialSwitchTheme.key) : null),
          data: (tree.materialSwitchTheme.hasData() ? evaluateRequiredMaterialSwitchThemeDataType(tree.materialSwitchTheme.data) : missing('data')),
          child: (tree.materialSwitchTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialSwitchTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTab:
      return $flutterSrcMaterialTabs.Tab(
          key: (tree.materialTab.hasKey() ? evaluateFlutterKeyType(tree.materialTab.key) : null),
          text: (tree.materialTab.hasText() ? tree.materialTab.text : null),
          icon: (tree.materialTab.hasIcon() ? evaluateWidgetType(tree.materialTab.icon) : null),
          iconMargin: (tree.materialTab.hasIconMargin() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTab.iconMargin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 10.0)),
          height: (tree.materialTab.hasHeight() ? tree.materialTab.height : null),
          child: (tree.materialTab.hasChild() ? evaluateWidgetType(tree.materialTab.child) : null));
    case messages.WidgetType_Constructor.materialTabBar:
      return $flutterSrcMaterialTabs.TabBar(
          key: (tree.materialTabBar.hasKey() ? evaluateFlutterKeyType(tree.materialTabBar.key) : null),
          tabs: tree.materialTabBar.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBar.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBar.controller) : null),
          isScrollable: (tree.materialTabBar.hasIsScrollable() ? tree.materialTabBar.isScrollable : false),
          padding: (tree.materialTabBar.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.padding) : null),
          indicatorColor: (tree.materialTabBar.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBar.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBar.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBar.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBar.hasIndicatorWeight() ? tree.materialTabBar.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBar.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBar.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBar.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBar.indicator) : null),
          indicatorSize: (tree.materialTabBar.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBar.indicatorSize) : null),
          dividerColor: (tree.materialTabBar.hasDividerColor() ? evaluateDartColorType(tree.materialTabBar.dividerColor) : null),
          dividerHeight: (tree.materialTabBar.hasDividerHeight() ? tree.materialTabBar.dividerHeight : null),
          labelColor: (tree.materialTabBar.hasLabelColor() ? evaluateDartColorType(tree.materialTabBar.labelColor) : null),
          labelStyle: (tree.materialTabBar.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.labelStyle) : null),
          labelPadding: (tree.materialTabBar.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBar.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBar.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBar.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBar.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBar.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBar.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBar.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBar.hasEnableFeedback() ? tree.materialTabBar.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBar.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBar.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBar.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBar.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBar.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBar.tabAlignment) : null));
    case messages.WidgetType_Constructor.materialTabBarNamedSecondary:
      return $flutterSrcMaterialTabs.TabBar.secondary(
          key: (tree.materialTabBarNamedSecondary.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarNamedSecondary.key) : null),
          tabs: tree.materialTabBarNamedSecondary.tabs.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarNamedSecondary.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarNamedSecondary.controller) : null),
          isScrollable: (tree.materialTabBarNamedSecondary.hasIsScrollable() ? tree.materialTabBarNamedSecondary.isScrollable : false),
          padding: (tree.materialTabBarNamedSecondary.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.padding) : null),
          indicatorColor: (tree.materialTabBarNamedSecondary.hasIndicatorColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.indicatorColor) : null),
          automaticIndicatorColorAdjustment: (tree.materialTabBarNamedSecondary.hasAutomaticIndicatorColorAdjustment() ? tree.materialTabBarNamedSecondary.automaticIndicatorColorAdjustment : true),
          indicatorWeight: (tree.materialTabBarNamedSecondary.hasIndicatorWeight() ? tree.materialTabBarNamedSecondary.indicatorWeight : 2.0),
          indicatorPadding: (tree.materialTabBarNamedSecondary.hasIndicatorPadding() ? evaluateRequiredFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.indicatorPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.zero),
          indicator: (tree.materialTabBarNamedSecondary.hasIndicator() ? evaluateFlutterDecorationType(tree.materialTabBarNamedSecondary.indicator) : null),
          indicatorSize: (tree.materialTabBarNamedSecondary.hasIndicatorSize() ? enums.convertMaterialTabBarIndicatorSizeType(tree.materialTabBarNamedSecondary.indicatorSize) : null),
          dividerColor: (tree.materialTabBarNamedSecondary.hasDividerColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.dividerColor) : null),
          dividerHeight: (tree.materialTabBarNamedSecondary.hasDividerHeight() ? tree.materialTabBarNamedSecondary.dividerHeight : null),
          labelColor: (tree.materialTabBarNamedSecondary.hasLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.labelColor) : null),
          labelStyle: (tree.materialTabBarNamedSecondary.hasLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.labelStyle) : null),
          labelPadding: (tree.materialTabBarNamedSecondary.hasLabelPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTabBarNamedSecondary.labelPadding) : null),
          unselectedLabelColor: (tree.materialTabBarNamedSecondary.hasUnselectedLabelColor() ? evaluateDartColorType(tree.materialTabBarNamedSecondary.unselectedLabelColor) : null),
          unselectedLabelStyle: (tree.materialTabBarNamedSecondary.hasUnselectedLabelStyle() ? evaluateFlutterTextStyleType(tree.materialTabBarNamedSecondary.unselectedLabelStyle) : null),
          dragStartBehavior: (tree.materialTabBarNamedSecondary.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarNamedSecondary.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          overlayColor: null,
          mouseCursor: null,
          enableFeedback: (tree.materialTabBarNamedSecondary.hasEnableFeedback() ? tree.materialTabBarNamedSecondary.enableFeedback : null),
          onTap: null,
          physics: (tree.materialTabBarNamedSecondary.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarNamedSecondary.physics) : null),
          splashFactory: null,
          splashBorderRadius: (tree.materialTabBarNamedSecondary.hasSplashBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialTabBarNamedSecondary.splashBorderRadius) : null),
          tabAlignment: (tree.materialTabBarNamedSecondary.hasTabAlignment() ? enums.convertMaterialTabAlignmentType(tree.materialTabBarNamedSecondary.tabAlignment) : null));
    case messages.WidgetType_Constructor.materialTabBarView:
      return $flutterSrcMaterialTabs.TabBarView(
          key: (tree.materialTabBarView.hasKey() ? evaluateFlutterKeyType(tree.materialTabBarView.key) : null),
          children: tree.materialTabBarView.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          controller: (tree.materialTabBarView.hasController() ? evaluateMaterialTabControllerType(tree.materialTabBarView.controller) : null),
          physics: (tree.materialTabBarView.hasPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTabBarView.physics) : null),
          dragStartBehavior: (tree.materialTabBarView.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTabBarView.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          viewportFraction: (tree.materialTabBarView.hasViewportFraction() ? tree.materialTabBarView.viewportFraction : 1.0),
          clipBehavior: (tree.materialTabBarView.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTabBarView.clipBehavior) : $dartUi.Clip.hardEdge));
    case messages.WidgetType_Constructor.materialTabPageSelector:
      return $flutterSrcMaterialTabs.TabPageSelector(
          key: (tree.materialTabPageSelector.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelector.key) : null),
          controller: (tree.materialTabPageSelector.hasController() ? evaluateMaterialTabControllerType(tree.materialTabPageSelector.controller) : null),
          indicatorSize: (tree.materialTabPageSelector.hasIndicatorSize() ? tree.materialTabPageSelector.indicatorSize : 12.0),
          color: (tree.materialTabPageSelector.hasColor() ? evaluateDartColorType(tree.materialTabPageSelector.color) : null),
          selectedColor: (tree.materialTabPageSelector.hasSelectedColor() ? evaluateDartColorType(tree.materialTabPageSelector.selectedColor) : null),
          borderStyle: (tree.materialTabPageSelector.hasBorderStyle() ? enums.convertFlutterBorderStyleType(tree.materialTabPageSelector.borderStyle) : null));
    case messages.WidgetType_Constructor.materialTabPageSelectorIndicator:
      return $flutterSrcMaterialTabs.TabPageSelectorIndicator(
          key: (tree.materialTabPageSelectorIndicator.hasKey() ? evaluateFlutterKeyType(tree.materialTabPageSelectorIndicator.key) : null),
          backgroundColor: (tree.materialTabPageSelectorIndicator.hasBackgroundColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.backgroundColor) : missing('backgroundColor')),
          borderColor: (tree.materialTabPageSelectorIndicator.hasBorderColor() ? evaluateRequiredDartColorType(tree.materialTabPageSelectorIndicator.borderColor) : missing('borderColor')),
          size: (tree.materialTabPageSelectorIndicator.hasSize() ? tree.materialTabPageSelectorIndicator.size : missing('size')),
          borderStyle: (tree.materialTabPageSelectorIndicator.hasBorderStyle() ? enums.convertRequiredFlutterBorderStyleType(tree.materialTabPageSelectorIndicator.borderStyle) : $flutterSrcPaintingBorders.BorderStyle.solid));
    case messages.WidgetType_Constructor.materialTableRowInkWell:
      return $flutterSrcMaterialDataTable.TableRowInkWell(
          key: (tree.materialTableRowInkWell.hasKey() ? evaluateFlutterKeyType(tree.materialTableRowInkWell.key) : null),
          child: (tree.materialTableRowInkWell.hasChild() ? evaluateWidgetType(tree.materialTableRowInkWell.child) : null),
          onTap: null,
          onDoubleTap: null,
          onLongPress: null,
          onHighlightChanged: null,
          onSecondaryTap: null,
          onSecondaryTapDown: null,
          overlayColor: null,
          mouseCursor: null);
    case messages.WidgetType_Constructor.materialTextButton:
      return $flutterSrcMaterialTextButton.TextButton(
          key: (tree.materialTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextButton.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButton.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButton.style) : null),
          focusNode: (tree.materialTextButton.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButton.focusNode) : null),
          autofocus: (tree.materialTextButton.hasAutofocus() ? tree.materialTextButton.autofocus : missing('autofocus')),
          clipBehavior: (tree.materialTextButton.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextButton.clipBehavior) : missing('clipBehavior')),
          statesController: (tree.materialTextButton.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButton.statesController) : null),
          isSemanticButton: (tree.materialTextButton.hasIsSemanticButton() ? tree.materialTextButton.isSemanticButton : true),
          child: (tree.materialTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButton.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTextButtonNamedIcon:
      return $flutterSrcMaterialTextButton.TextButton.icon(
          key: (tree.materialTextButtonNamedIcon.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonNamedIcon.key) : null),
          onPressed: null,
          onLongPress: null,
          onHover: null,
          onFocusChange: null,
          style: (tree.materialTextButtonNamedIcon.hasStyle() ? evaluateMaterialButtonStyleType(tree.materialTextButtonNamedIcon.style) : null),
          focusNode: (tree.materialTextButtonNamedIcon.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextButtonNamedIcon.focusNode) : null),
          autofocus: (tree.materialTextButtonNamedIcon.hasAutofocus() ? tree.materialTextButtonNamedIcon.autofocus : null),
          clipBehavior: (tree.materialTextButtonNamedIcon.hasClipBehavior() ? enums.convertDartClipType(tree.materialTextButtonNamedIcon.clipBehavior) : null),
          statesController: (tree.materialTextButtonNamedIcon.hasStatesController() ? evaluateMaterialMaterialStatesControllerType(tree.materialTextButtonNamedIcon.statesController) : null),
          icon: (tree.materialTextButtonNamedIcon.hasIcon() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.icon) : missing('icon')),
          label: (tree.materialTextButtonNamedIcon.hasLabel() ? evaluateRequiredWidgetType(tree.materialTextButtonNamedIcon.label) : missing('label')));
    case messages.WidgetType_Constructor.materialTextButtonTheme:
      return $flutterSrcMaterialTextButtonTheme.TextButtonTheme(
          key: (tree.materialTextButtonTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextButtonTheme.key) : null),
          data: (tree.materialTextButtonTheme.hasData() ? evaluateRequiredMaterialTextButtonThemeDataType(tree.materialTextButtonTheme.data) : missing('data')),
          child: (tree.materialTextButtonTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextButtonTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTextField:
      return $flutterSrcMaterialTextField.TextField(
          key: (tree.materialTextField.hasKey() ? evaluateFlutterKeyType(tree.materialTextField.key) : null),
          controller: (tree.materialTextField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextField.controller) : null),
          focusNode: (tree.materialTextField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextField.focusNode) : null),
          undoController: (tree.materialTextField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextField.undoController) : null),
          decoration: (tree.materialTextField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextField.keyboardType) : null),
          textInputAction: (tree.materialTextField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextField.textInputAction) : null),
          textCapitalization: (tree.materialTextField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          style: (tree.materialTextField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextField.style) : null),
          strutStyle: (tree.materialTextField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextField.strutStyle) : null),
          textAlign: (tree.materialTextField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextField.textAlignVertical) : null),
          textDirection: (tree.materialTextField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextField.textDirection) : null),
          readOnly: (tree.materialTextField.hasReadOnly() ? tree.materialTextField.readOnly : false),
          showCursor: (tree.materialTextField.hasShowCursor() ? tree.materialTextField.showCursor : null),
          autofocus: (tree.materialTextField.hasAutofocus() ? tree.materialTextField.autofocus : false),
          obscuringCharacter: (tree.materialTextField.hasObscuringCharacter() ? tree.materialTextField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextField.hasObscureText() ? tree.materialTextField.obscureText : false),
          autocorrect: (tree.materialTextField.hasAutocorrect() ? tree.materialTextField.autocorrect : true),
          smartDashesType: (tree.materialTextField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextField.hasEnableSuggestions() ? tree.materialTextField.enableSuggestions : true),
          maxLines: (tree.materialTextField.hasMaxLines() ? tree.materialTextField.maxLines : 1),
          minLines: (tree.materialTextField.hasMinLines() ? tree.materialTextField.minLines : null),
          expands: (tree.materialTextField.hasExpands() ? tree.materialTextField.expands : false),
          maxLength: (tree.materialTextField.hasMaxLength() ? tree.materialTextField.maxLength : null),
          maxLengthEnforcement: (tree.materialTextField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextField.maxLengthEnforcement) : null),
          onChanged: null,
          onEditingComplete: null,
          onSubmitted: null,
          onAppPrivateCommand: null,
          inputFormatters: tree.materialTextField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextField.hasEnabled() ? tree.materialTextField.enabled : null),
          cursorWidth: (tree.materialTextField.hasCursorWidth() ? tree.materialTextField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextField.hasCursorHeight() ? tree.materialTextField.cursorHeight : null),
          cursorRadius: (tree.materialTextField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextField.cursorRadius) : null),
          cursorOpacityAnimates: (tree.materialTextField.hasCursorOpacityAnimates() ? tree.materialTextField.cursorOpacityAnimates : null),
          cursorColor: (tree.materialTextField.hasCursorColor() ? evaluateDartColorType(tree.materialTextField.cursorColor) : null),
          selectionHeightStyle: (tree.materialTextField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          keyboardAppearance: (tree.materialTextField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          dragStartBehavior: (tree.materialTextField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          enableInteractiveSelection: (tree.materialTextField.hasEnableInteractiveSelection() ? tree.materialTextField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextField.selectionControls) : null),
          onTap: null,
          onTapOutside: null,
          mouseCursor: null,
          buildCounter: null,
          scrollController: (tree.materialTextField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextField.scrollController) : null),
          scrollPhysics: (tree.materialTextField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextField.scrollPhysics) : null),
          autofillHints: tree.materialTextField.autofillHints,
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextField.clipBehavior) : $dartUi.Clip.hardEdge),
          restorationId: (tree.materialTextField.hasRestorationId() ? tree.materialTextField.restorationId : null),
          scribbleEnabled: (tree.materialTextField.hasScribbleEnabled() ? tree.materialTextField.scribbleEnabled : true),
          enableIMEPersonalizedLearning: (tree.materialTextField.hasEnableIMEPersonalizedLearning() ? tree.materialTextField.enableIMEPersonalizedLearning : true),
          contextMenuBuilder: null,
          canRequestFocus: (tree.materialTextField.hasCanRequestFocus() ? tree.materialTextField.canRequestFocus : true),
          spellCheckConfiguration: (tree.materialTextField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextField.magnifierConfiguration) : null));
    case messages.WidgetType_Constructor.materialTextFormField:
      return $flutterSrcMaterialTextFormField.TextFormField(
          key: (tree.materialTextFormField.hasKey() ? evaluateFlutterKeyType(tree.materialTextFormField.key) : null),
          controller: (tree.materialTextFormField.hasController() ? evaluateFlutterTextEditingControllerType(tree.materialTextFormField.controller) : null),
          initialValue: (tree.materialTextFormField.hasInitialValue() ? tree.materialTextFormField.initialValue : null),
          focusNode: (tree.materialTextFormField.hasFocusNode() ? evaluateFlutterFocusNodeType(tree.materialTextFormField.focusNode) : null),
          decoration: (tree.materialTextFormField.hasDecoration() ? evaluateMaterialInputDecorationType(tree.materialTextFormField.decoration) : $flutterSrcMaterialInputDecorator.InputDecoration()),
          keyboardType: (tree.materialTextFormField.hasKeyboardType() ? evaluateFlutterTextInputTypeType(tree.materialTextFormField.keyboardType) : null),
          textCapitalization: (tree.materialTextFormField.hasTextCapitalization() ? enums.convertRequiredFlutterTextCapitalizationType(tree.materialTextFormField.textCapitalization) : $flutterSrcServicesTextInput.TextCapitalization.none),
          textInputAction: (tree.materialTextFormField.hasTextInputAction() ? enums.convertFlutterTextInputActionType(tree.materialTextFormField.textInputAction) : null),
          style: (tree.materialTextFormField.hasStyle() ? evaluateFlutterTextStyleType(tree.materialTextFormField.style) : null),
          strutStyle: (tree.materialTextFormField.hasStrutStyle() ? evaluateFlutterStrutStyleType(tree.materialTextFormField.strutStyle) : null),
          textDirection: (tree.materialTextFormField.hasTextDirection() ? enums.convertDartTextDirectionType(tree.materialTextFormField.textDirection) : null),
          textAlign: (tree.materialTextFormField.hasTextAlign() ? enums.convertRequiredDartTextAlignType(tree.materialTextFormField.textAlign) : $dartUi.TextAlign.start),
          textAlignVertical: (tree.materialTextFormField.hasTextAlignVertical() ? evaluateFlutterTextAlignVerticalType(tree.materialTextFormField.textAlignVertical) : null),
          autofocus: (tree.materialTextFormField.hasAutofocus() ? tree.materialTextFormField.autofocus : false),
          readOnly: (tree.materialTextFormField.hasReadOnly() ? tree.materialTextFormField.readOnly : false),
          showCursor: (tree.materialTextFormField.hasShowCursor() ? tree.materialTextFormField.showCursor : null),
          obscuringCharacter: (tree.materialTextFormField.hasObscuringCharacter() ? tree.materialTextFormField.obscuringCharacter : '•'),
          obscureText: (tree.materialTextFormField.hasObscureText() ? tree.materialTextFormField.obscureText : false),
          autocorrect: (tree.materialTextFormField.hasAutocorrect() ? tree.materialTextFormField.autocorrect : true),
          smartDashesType: (tree.materialTextFormField.hasSmartDashesType() ? enums.convertFlutterSmartDashesTypeType(tree.materialTextFormField.smartDashesType) : null),
          smartQuotesType: (tree.materialTextFormField.hasSmartQuotesType() ? enums.convertFlutterSmartQuotesTypeType(tree.materialTextFormField.smartQuotesType) : null),
          enableSuggestions: (tree.materialTextFormField.hasEnableSuggestions() ? tree.materialTextFormField.enableSuggestions : true),
          maxLengthEnforcement: (tree.materialTextFormField.hasMaxLengthEnforcement() ? enums.convertFlutterMaxLengthEnforcementType(tree.materialTextFormField.maxLengthEnforcement) : null),
          maxLines: (tree.materialTextFormField.hasMaxLines() ? tree.materialTextFormField.maxLines : 1),
          minLines: (tree.materialTextFormField.hasMinLines() ? tree.materialTextFormField.minLines : null),
          expands: (tree.materialTextFormField.hasExpands() ? tree.materialTextFormField.expands : false),
          maxLength: (tree.materialTextFormField.hasMaxLength() ? tree.materialTextFormField.maxLength : null),
          onChanged: null,
          onTap: null,
          onTapOutside: null,
          onEditingComplete: null,
          onFieldSubmitted: null,
          onSaved: null,
          validator: null,
          inputFormatters: tree.materialTextFormField.inputFormatters.map((e) => evaluateRequiredFlutterTextInputFormatterType(e)).toList(),
          enabled: (tree.materialTextFormField.hasEnabled() ? tree.materialTextFormField.enabled : null),
          cursorWidth: (tree.materialTextFormField.hasCursorWidth() ? tree.materialTextFormField.cursorWidth : 2.0),
          cursorHeight: (tree.materialTextFormField.hasCursorHeight() ? tree.materialTextFormField.cursorHeight : null),
          cursorRadius: (tree.materialTextFormField.hasCursorRadius() ? evaluateDartRadiusType(tree.materialTextFormField.cursorRadius) : null),
          cursorColor: (tree.materialTextFormField.hasCursorColor() ? evaluateDartColorType(tree.materialTextFormField.cursorColor) : null),
          keyboardAppearance: (tree.materialTextFormField.hasKeyboardAppearance() ? enums.convertDartBrightnessType(tree.materialTextFormField.keyboardAppearance) : null),
          scrollPadding: (tree.materialTextFormField.hasScrollPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextFormField.scrollPadding) : $flutterSrcPaintingEdgeInsets.EdgeInsets.all(20.0)),
          enableInteractiveSelection: (tree.materialTextFormField.hasEnableInteractiveSelection() ? tree.materialTextFormField.enableInteractiveSelection : null),
          selectionControls: (tree.materialTextFormField.hasSelectionControls() ? evaluateFlutterTextSelectionControlsType(tree.materialTextFormField.selectionControls) : null),
          buildCounter: null,
          scrollPhysics: (tree.materialTextFormField.hasScrollPhysics() ? evaluateFlutterScrollPhysicsType(tree.materialTextFormField.scrollPhysics) : null),
          autofillHints: tree.materialTextFormField.autofillHints,
          autovalidateMode: (tree.materialTextFormField.hasAutovalidateMode() ? enums.convertFlutterAutovalidateModeType(tree.materialTextFormField.autovalidateMode) : null),
          scrollController: (tree.materialTextFormField.hasScrollController() ? evaluateFlutterScrollControllerType(tree.materialTextFormField.scrollController) : null),
          restorationId: (tree.materialTextFormField.hasRestorationId() ? tree.materialTextFormField.restorationId : null),
          enableIMEPersonalizedLearning: (tree.materialTextFormField.hasEnableIMEPersonalizedLearning() ? tree.materialTextFormField.enableIMEPersonalizedLearning : true),
          mouseCursor: null,
          contextMenuBuilder: null,
          spellCheckConfiguration: (tree.materialTextFormField.hasSpellCheckConfiguration() ? evaluateFlutterSpellCheckConfigurationType(tree.materialTextFormField.spellCheckConfiguration) : null),
          magnifierConfiguration: (tree.materialTextFormField.hasMagnifierConfiguration() ? evaluateFlutterTextMagnifierConfigurationType(tree.materialTextFormField.magnifierConfiguration) : null),
          undoController: (tree.materialTextFormField.hasUndoController() ? evaluateFlutterUndoHistoryControllerType(tree.materialTextFormField.undoController) : null),
          onAppPrivateCommand: null,
          cursorOpacityAnimates: (tree.materialTextFormField.hasCursorOpacityAnimates() ? tree.materialTextFormField.cursorOpacityAnimates : null),
          selectionHeightStyle: (tree.materialTextFormField.hasSelectionHeightStyle() ? enums.convertRequiredDartBoxHeightStyleType(tree.materialTextFormField.selectionHeightStyle) : $dartUi.BoxHeightStyle.tight),
          selectionWidthStyle: (tree.materialTextFormField.hasSelectionWidthStyle() ? enums.convertRequiredDartBoxWidthStyleType(tree.materialTextFormField.selectionWidthStyle) : $dartUi.BoxWidthStyle.tight),
          dragStartBehavior: (tree.materialTextFormField.hasDragStartBehavior() ? enums.convertRequiredFlutterDragStartBehaviorType(tree.materialTextFormField.dragStartBehavior) : $flutterSrcGesturesRecognizer.DragStartBehavior.start),
          contentInsertionConfiguration: null,
          clipBehavior: (tree.materialTextFormField.hasClipBehavior() ? enums.convertRequiredDartClipType(tree.materialTextFormField.clipBehavior) : $dartUi.Clip.hardEdge),
          scribbleEnabled: (tree.materialTextFormField.hasScribbleEnabled() ? tree.materialTextFormField.scribbleEnabled : true),
          canRequestFocus: (tree.materialTextFormField.hasCanRequestFocus() ? tree.materialTextFormField.canRequestFocus : true));
    case messages.WidgetType_Constructor.materialTextSelectionTheme:
      return $flutterSrcMaterialTextSelectionTheme.TextSelectionTheme(
          key: (tree.materialTextSelectionTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionTheme.key) : null),
          data: (tree.materialTextSelectionTheme.hasData() ? evaluateRequiredMaterialTextSelectionThemeDataType(tree.materialTextSelectionTheme.data) : missing('data')),
          child: (tree.materialTextSelectionTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTextSelectionToolbar:
      return $flutterSrcMaterialTextSelectionToolbar.TextSelectionToolbar(
          key: (tree.materialTextSelectionToolbar.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbar.key) : null),
          anchorAbove: (tree.materialTextSelectionToolbar.hasAnchorAbove() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorAbove) : missing('anchorAbove')),
          anchorBelow: (tree.materialTextSelectionToolbar.hasAnchorBelow() ? evaluateRequiredDartOffsetType(tree.materialTextSelectionToolbar.anchorBelow) : missing('anchorBelow')),
          children: tree.materialTextSelectionToolbar.children.map((e) => evaluateRequiredWidgetType(e)).toList());
    case messages.WidgetType_Constructor.materialTextSelectionToolbarTextButton:
      return $flutterSrcMaterialTextSelectionToolbarTextButton.TextSelectionToolbarTextButton(
          key: (tree.materialTextSelectionToolbarTextButton.hasKey() ? evaluateFlutterKeyType(tree.materialTextSelectionToolbarTextButton.key) : null),
          child: (tree.materialTextSelectionToolbarTextButton.hasChild() ? evaluateRequiredWidgetType(tree.materialTextSelectionToolbarTextButton.child) : missing('child')),
          padding: (tree.materialTextSelectionToolbarTextButton.hasPadding() ? evaluateRequiredFlutterEdgeInsetsType(tree.materialTextSelectionToolbarTextButton.padding) : missing('padding')),
          onPressed: null,
          alignment: (tree.materialTextSelectionToolbarTextButton.hasAlignment() ? evaluateFlutterAlignmentGeometryType(tree.materialTextSelectionToolbarTextButton.alignment) : null));
    case messages.WidgetType_Constructor.materialTheme:
      return $flutterSrcMaterialTheme.Theme(
          key: (tree.materialTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTheme.key) : null),
          data: (tree.materialTheme.hasData() ? evaluateRequiredMaterialThemeDataType(tree.materialTheme.data) : missing('data')),
          child: (tree.materialTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTimePickerDialog:
      return $flutterSrcMaterialTimePicker.TimePickerDialog(
          key: (tree.materialTimePickerDialog.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerDialog.key) : null),
          initialTime: (tree.materialTimePickerDialog.hasInitialTime() ? evaluateRequiredMaterialTimeOfDayType(tree.materialTimePickerDialog.initialTime) : missing('initialTime')),
          cancelText: (tree.materialTimePickerDialog.hasCancelText() ? tree.materialTimePickerDialog.cancelText : null),
          confirmText: (tree.materialTimePickerDialog.hasConfirmText() ? tree.materialTimePickerDialog.confirmText : null),
          helpText: (tree.materialTimePickerDialog.hasHelpText() ? tree.materialTimePickerDialog.helpText : null),
          errorInvalidText: (tree.materialTimePickerDialog.hasErrorInvalidText() ? tree.materialTimePickerDialog.errorInvalidText : null),
          hourLabelText: (tree.materialTimePickerDialog.hasHourLabelText() ? tree.materialTimePickerDialog.hourLabelText : null),
          minuteLabelText: (tree.materialTimePickerDialog.hasMinuteLabelText() ? tree.materialTimePickerDialog.minuteLabelText : null),
          restorationId: (tree.materialTimePickerDialog.hasRestorationId() ? tree.materialTimePickerDialog.restorationId : null),
          initialEntryMode: (tree.materialTimePickerDialog.hasInitialEntryMode() ? enums.convertRequiredMaterialTimePickerEntryModeType(tree.materialTimePickerDialog.initialEntryMode) : $flutterSrcMaterialTimePicker.TimePickerEntryMode.dial),
          orientation: (tree.materialTimePickerDialog.hasOrientation() ? enums.convertFlutterOrientationType(tree.materialTimePickerDialog.orientation) : null),
          onEntryModeChanged: null);
    case messages.WidgetType_Constructor.materialTimePickerTheme:
      return $flutterSrcMaterialTimePickerTheme.TimePickerTheme(
          key: (tree.materialTimePickerTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTimePickerTheme.key) : null),
          data: (tree.materialTimePickerTheme.hasData() ? evaluateRequiredMaterialTimePickerThemeDataType(tree.materialTimePickerTheme.data) : missing('data')),
          child: (tree.materialTimePickerTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTimePickerTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialToggleButtons:
      return $flutterSrcMaterialToggleButtons.ToggleButtons(
          key: (tree.materialToggleButtons.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtons.key) : null),
          children: tree.materialToggleButtons.children.map((e) => evaluateRequiredWidgetType(e)).toList(),
          isSelected: tree.materialToggleButtons.isSelected,
          onPressed: null,
          mouseCursor: null,
          tapTargetSize: (tree.materialToggleButtons.hasTapTargetSize() ? enums.convertMaterialMaterialTapTargetSizeType(tree.materialToggleButtons.tapTargetSize) : null),
          textStyle: (tree.materialToggleButtons.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialToggleButtons.textStyle) : null),
          constraints: (tree.materialToggleButtons.hasConstraints() ? evaluateFlutterBoxConstraintsType(tree.materialToggleButtons.constraints) : null),
          color: (tree.materialToggleButtons.hasColor() ? evaluateDartColorType(tree.materialToggleButtons.color) : null),
          selectedColor: (tree.materialToggleButtons.hasSelectedColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedColor) : null),
          disabledColor: (tree.materialToggleButtons.hasDisabledColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledColor) : null),
          fillColor: (tree.materialToggleButtons.hasFillColor() ? evaluateDartColorType(tree.materialToggleButtons.fillColor) : null),
          focusColor: (tree.materialToggleButtons.hasFocusColor() ? evaluateDartColorType(tree.materialToggleButtons.focusColor) : null),
          highlightColor: (tree.materialToggleButtons.hasHighlightColor() ? evaluateDartColorType(tree.materialToggleButtons.highlightColor) : null),
          hoverColor: (tree.materialToggleButtons.hasHoverColor() ? evaluateDartColorType(tree.materialToggleButtons.hoverColor) : null),
          splashColor: (tree.materialToggleButtons.hasSplashColor() ? evaluateDartColorType(tree.materialToggleButtons.splashColor) : null),
          focusNodes: tree.materialToggleButtons.focusNodes.map((e) => evaluateRequiredFlutterFocusNodeType(e)).toList(),
          renderBorder: (tree.materialToggleButtons.hasRenderBorder() ? tree.materialToggleButtons.renderBorder : true),
          borderColor: (tree.materialToggleButtons.hasBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.borderColor) : null),
          selectedBorderColor: (tree.materialToggleButtons.hasSelectedBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.selectedBorderColor) : null),
          disabledBorderColor: (tree.materialToggleButtons.hasDisabledBorderColor() ? evaluateDartColorType(tree.materialToggleButtons.disabledBorderColor) : null),
          borderRadius: (tree.materialToggleButtons.hasBorderRadius() ? evaluateFlutterBorderRadiusType(tree.materialToggleButtons.borderRadius) : null),
          borderWidth: (tree.materialToggleButtons.hasBorderWidth() ? tree.materialToggleButtons.borderWidth : null),
          direction: (tree.materialToggleButtons.hasDirection() ? enums.convertRequiredFlutterAxisType(tree.materialToggleButtons.direction) : $flutterSrcPaintingBasicTypes.Axis.horizontal),
          verticalDirection: (tree.materialToggleButtons.hasVerticalDirection() ? enums.convertRequiredFlutterVerticalDirectionType(tree.materialToggleButtons.verticalDirection) : $flutterSrcPaintingBasicTypes.VerticalDirection.down));
    case messages.WidgetType_Constructor.materialToggleButtonsTheme:
      return $flutterSrcMaterialToggleButtonsTheme.ToggleButtonsTheme(
          key: (tree.materialToggleButtonsTheme.hasKey() ? evaluateFlutterKeyType(tree.materialToggleButtonsTheme.key) : null),
          data: (tree.materialToggleButtonsTheme.hasData() ? evaluateRequiredMaterialToggleButtonsThemeDataType(tree.materialToggleButtonsTheme.data) : missing('data')),
          child: (tree.materialToggleButtonsTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialToggleButtonsTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTooltip:
      return $flutterSrcMaterialTooltip.Tooltip(
          key: (tree.materialTooltip.hasKey() ? evaluateFlutterKeyType(tree.materialTooltip.key) : null),
          message: (tree.materialTooltip.hasMessage() ? tree.materialTooltip.message : null),
          richMessage: (tree.materialTooltip.hasRichMessage() ? evaluateFlutterInlineSpanType(tree.materialTooltip.richMessage) : null),
          height: (tree.materialTooltip.hasHeight() ? tree.materialTooltip.height : null),
          padding: (tree.materialTooltip.hasPadding() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.padding) : null),
          margin: (tree.materialTooltip.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialTooltip.margin) : null),
          verticalOffset: (tree.materialTooltip.hasVerticalOffset() ? tree.materialTooltip.verticalOffset : null),
          preferBelow: (tree.materialTooltip.hasPreferBelow() ? tree.materialTooltip.preferBelow : null),
          excludeFromSemantics: (tree.materialTooltip.hasExcludeFromSemantics() ? tree.materialTooltip.excludeFromSemantics : null),
          decoration: (tree.materialTooltip.hasDecoration() ? evaluateFlutterDecorationType(tree.materialTooltip.decoration) : null),
          textStyle: (tree.materialTooltip.hasTextStyle() ? evaluateFlutterTextStyleType(tree.materialTooltip.textStyle) : null),
          textAlign: (tree.materialTooltip.hasTextAlign() ? enums.convertDartTextAlignType(tree.materialTooltip.textAlign) : null),
          waitDuration: (tree.materialTooltip.hasWaitDuration() ? evaluateDartDurationType(tree.materialTooltip.waitDuration) : null),
          showDuration: (tree.materialTooltip.hasShowDuration() ? evaluateDartDurationType(tree.materialTooltip.showDuration) : null),
          triggerMode: (tree.materialTooltip.hasTriggerMode() ? enums.convertMaterialTooltipTriggerModeType(tree.materialTooltip.triggerMode) : null),
          enableFeedback: (tree.materialTooltip.hasEnableFeedback() ? tree.materialTooltip.enableFeedback : null),
          onTriggered: null,
          child: (tree.materialTooltip.hasChild() ? evaluateWidgetType(tree.materialTooltip.child) : null));
    case messages.WidgetType_Constructor.materialTooltipTheme:
      return $flutterSrcMaterialTooltipTheme.TooltipTheme(
          key: (tree.materialTooltipTheme.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipTheme.key) : null),
          data: (tree.materialTooltipTheme.hasData() ? evaluateRequiredMaterialTooltipThemeDataType(tree.materialTooltipTheme.data) : missing('data')),
          child: (tree.materialTooltipTheme.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipTheme.child) : missing('child')));
    case messages.WidgetType_Constructor.materialTooltipVisibility:
      return $flutterSrcMaterialTooltipVisibility.TooltipVisibility(
          key: (tree.materialTooltipVisibility.hasKey() ? evaluateFlutterKeyType(tree.materialTooltipVisibility.key) : null),
          visible: (tree.materialTooltipVisibility.hasVisible() ? tree.materialTooltipVisibility.visible : missing('visible')),
          child: (tree.materialTooltipVisibility.hasChild() ? evaluateRequiredWidgetType(tree.materialTooltipVisibility.child) : missing('child')));
    case messages.WidgetType_Constructor.materialUserAccountsDrawerHeader:
      return $flutterSrcMaterialUserAccountsDrawerHeader.UserAccountsDrawerHeader(
          key: (tree.materialUserAccountsDrawerHeader.hasKey() ? evaluateFlutterKeyType(tree.materialUserAccountsDrawerHeader.key) : null),
          decoration: (tree.materialUserAccountsDrawerHeader.hasDecoration() ? evaluateFlutterDecorationType(tree.materialUserAccountsDrawerHeader.decoration) : null),
          margin: (tree.materialUserAccountsDrawerHeader.hasMargin() ? evaluateFlutterEdgeInsetsGeometryType(tree.materialUserAccountsDrawerHeader.margin) : $flutterSrcPaintingEdgeInsets.EdgeInsets.only(bottom: 8.0)),
          currentAccountPicture: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPicture() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.currentAccountPicture) : null),
          otherAccountsPictures: tree.materialUserAccountsDrawerHeader.otherAccountsPictures.map((e) => evaluateRequiredWidgetType(e)).toList(),
          currentAccountPictureSize: (tree.materialUserAccountsDrawerHeader.hasCurrentAccountPictureSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.currentAccountPictureSize) : $dartUi.Size.square(72.0)),
          otherAccountsPicturesSize: (tree.materialUserAccountsDrawerHeader.hasOtherAccountsPicturesSize() ? evaluateRequiredDartSizeType(tree.materialUserAccountsDrawerHeader.otherAccountsPicturesSize) : $dartUi.Size.square(40.0)),
          accountName: (tree.materialUserAccountsDrawerHeader.hasAccountName() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountName) : null),
          accountEmail: (tree.materialUserAccountsDrawerHeader.hasAccountEmail() ? evaluateWidgetType(tree.materialUserAccountsDrawerHeader.accountEmail) : null),
          onDetailsPressed: null,
          arrowColor: (tree.materialUserAccountsDrawerHeader.hasArrowColor() ? evaluateRequiredDartColorType(tree.materialUserAccountsDrawerHeader.arrowColor) : $flutterSrcMaterialColors.Colors.white));
    case messages.WidgetType_Constructor.materialVerticalDivider:
      return $flutterSrcMaterialDivider.VerticalDivider(
          key: (tree.materialVerticalDivider.hasKey() ? evaluateFlutterKeyType(tree.materialVerticalDivider.key) : null),
          width: (tree.materialVerticalDivider.hasWidth() ? tree.materialVerticalDivider.width : null),
          thickness: (tree.materialVerticalDivider.hasThickness() ? tree.materialVerticalDivider.thickness : null),
          indent: (tree.materialVerticalDivider.hasIndent() ? tree.materialVerticalDivider.indent : null),
          endIndent: (tree.materialVerticalDivider.hasEndIndent() ? tree.materialVerticalDivider.endIndent : null),
          color: (tree.materialVerticalDivider.hasColor() ? evaluateDartColorType(tree.materialVerticalDivider.color) : null));
    default:
      return null;
  }
}

